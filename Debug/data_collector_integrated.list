
data_collector_integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba38  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800baf8  0800baf8  0001baf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf30  0800bf30  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf38  0800bf38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800bf40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  20000014  0800bf54  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800bf54  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2a  00000000  00000000  00037821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1eb  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016065  00000000  00000000  0005a8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1dc7  00000000  00000000  00070908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001326cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  00132720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800badc 	.word	0x0800badc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	0800badc 	.word	0x0800badc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fd73 	bl	8001eec <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fcc3 	bl	8001d9c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fd65 	bl	8001eec <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fd5b 	bl	8001eec <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fceb 	bl	8001e20 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fce1 	bl	8001e20 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fad9 	bl	8000a2c <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fa65 	bl	8000954 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 facb 	bl	8000a2c <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fac1 	bl	8000a2c <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fa71 	bl	80009a0 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa67 	bl	80009a0 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_uldivmod>:
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d10f      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_uldivmod+0xe>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d002      	beq.n	80004f6 <__aeabi_uldivmod+0x16>
 80004f0:	2100      	movs	r1, #0
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	0008      	movs	r0, r1
 80004f6:	b407      	push	{r0, r1, r2}
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <__aeabi_uldivmod+0x24>)
 80004fa:	a102      	add	r1, pc, #8	; (adr r1, 8000504 <__aeabi_uldivmod+0x24>)
 80004fc:	1840      	adds	r0, r0, r1
 80004fe:	9002      	str	r0, [sp, #8]
 8000500:	bd03      	pop	{r0, r1, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	fffffee9 	.word	0xfffffee9
 8000508:	b403      	push	{r0, r1}
 800050a:	4668      	mov	r0, sp
 800050c:	b501      	push	{r0, lr}
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	f000 f83c 	bl	800058c <__udivmoddi4>
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	469e      	mov	lr, r3
 8000518:	b002      	add	sp, #8
 800051a:	bc0c      	pop	{r2, r3}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_f2uiz>:
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	b510      	push	{r4, lr}
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	1c04      	adds	r4, r0, #0
 8000528:	f7ff ffd0 	bl	80004cc <__aeabi_fcmpge>
 800052c:	2800      	cmp	r0, #0
 800052e:	d103      	bne.n	8000538 <__aeabi_f2uiz+0x18>
 8000530:	1c20      	adds	r0, r4, #0
 8000532:	f000 fd93 	bl	800105c <__aeabi_f2iz>
 8000536:	bd10      	pop	{r4, pc}
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	1c20      	adds	r0, r4, #0
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	f000 fbdf 	bl	8000d00 <__aeabi_fsub>
 8000542:	f000 fd8b 	bl	800105c <__aeabi_f2iz>
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	061b      	lsls	r3, r3, #24
 800054a:	469c      	mov	ip, r3
 800054c:	4460      	add	r0, ip
 800054e:	e7f2      	b.n	8000536 <__aeabi_f2uiz+0x16>

08000550 <__aeabi_d2uiz>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2200      	movs	r2, #0
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <__aeabi_d2uiz+0x38>)
 8000556:	0004      	movs	r4, r0
 8000558:	000d      	movs	r5, r1
 800055a:	f7ff ff7d 	bl	8000458 <__aeabi_dcmpge>
 800055e:	2800      	cmp	r0, #0
 8000560:	d104      	bne.n	800056c <__aeabi_d2uiz+0x1c>
 8000562:	0020      	movs	r0, r4
 8000564:	0029      	movs	r1, r5
 8000566:	f002 fb23 	bl	8002bb0 <__aeabi_d2iz>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <__aeabi_d2uiz+0x38>)
 800056e:	2200      	movs	r2, #0
 8000570:	0020      	movs	r0, r4
 8000572:	0029      	movs	r1, r5
 8000574:	f001 ff8a 	bl	800248c <__aeabi_dsub>
 8000578:	f002 fb1a 	bl	8002bb0 <__aeabi_d2iz>
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	061b      	lsls	r3, r3, #24
 8000580:	469c      	mov	ip, r3
 8000582:	4460      	add	r0, ip
 8000584:	e7f1      	b.n	800056a <__aeabi_d2uiz+0x1a>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	41e00000 	.word	0x41e00000

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 fc54 	bl	8002e58 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 fc4f 	bl	8002e58 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	469b      	mov	fp, r3
 80005c2:	d433      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c4:	465a      	mov	r2, fp
 80005c6:	4653      	mov	r3, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83a      	bhi.n	800064e <__udivmoddi4+0xc2>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e078      	b.n	80006d0 <__udivmoddi4+0x144>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e075      	b.n	80006d6 <__udivmoddi4+0x14a>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e028      	b.n	8000656 <__udivmoddi4+0xca>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	4652      	mov	r2, sl
 8000634:	40da      	lsrs	r2, r3
 8000636:	4641      	mov	r1, r8
 8000638:	0013      	movs	r3, r2
 800063a:	464a      	mov	r2, r9
 800063c:	408a      	lsls	r2, r1
 800063e:	0017      	movs	r7, r2
 8000640:	4642      	mov	r2, r8
 8000642:	431f      	orrs	r7, r3
 8000644:	4653      	mov	r3, sl
 8000646:	4093      	lsls	r3, r2
 8000648:	001e      	movs	r6, r3
 800064a:	42af      	cmp	r7, r5
 800064c:	d9c4      	bls.n	80005d8 <__udivmoddi4+0x4c>
 800064e:	2200      	movs	r2, #0
 8000650:	2300      	movs	r3, #0
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	4643      	mov	r3, r8
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0d9      	beq.n	8000610 <__udivmoddi4+0x84>
 800065c:	07fb      	lsls	r3, r7, #31
 800065e:	0872      	lsrs	r2, r6, #1
 8000660:	431a      	orrs	r2, r3
 8000662:	4646      	mov	r6, r8
 8000664:	087b      	lsrs	r3, r7, #1
 8000666:	e00e      	b.n	8000686 <__udivmoddi4+0xfa>
 8000668:	42ab      	cmp	r3, r5
 800066a:	d101      	bne.n	8000670 <__udivmoddi4+0xe4>
 800066c:	42a2      	cmp	r2, r4
 800066e:	d80c      	bhi.n	800068a <__udivmoddi4+0xfe>
 8000670:	1aa4      	subs	r4, r4, r2
 8000672:	419d      	sbcs	r5, r3
 8000674:	2001      	movs	r0, #1
 8000676:	1924      	adds	r4, r4, r4
 8000678:	416d      	adcs	r5, r5
 800067a:	2100      	movs	r1, #0
 800067c:	3e01      	subs	r6, #1
 800067e:	1824      	adds	r4, r4, r0
 8000680:	414d      	adcs	r5, r1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d006      	beq.n	8000694 <__udivmoddi4+0x108>
 8000686:	42ab      	cmp	r3, r5
 8000688:	d9ee      	bls.n	8000668 <__udivmoddi4+0xdc>
 800068a:	3e01      	subs	r6, #1
 800068c:	1924      	adds	r4, r4, r4
 800068e:	416d      	adcs	r5, r5
 8000690:	2e00      	cmp	r6, #0
 8000692:	d1f8      	bne.n	8000686 <__udivmoddi4+0xfa>
 8000694:	9800      	ldr	r0, [sp, #0]
 8000696:	9901      	ldr	r1, [sp, #4]
 8000698:	465b      	mov	r3, fp
 800069a:	1900      	adds	r0, r0, r4
 800069c:	4169      	adcs	r1, r5
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db24      	blt.n	80006ec <__udivmoddi4+0x160>
 80006a2:	002b      	movs	r3, r5
 80006a4:	465a      	mov	r2, fp
 80006a6:	4644      	mov	r4, r8
 80006a8:	40d3      	lsrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db2a      	blt.n	800070e <__udivmoddi4+0x182>
 80006b8:	0026      	movs	r6, r4
 80006ba:	409e      	lsls	r6, r3
 80006bc:	0033      	movs	r3, r6
 80006be:	0026      	movs	r6, r4
 80006c0:	4647      	mov	r7, r8
 80006c2:	40be      	lsls	r6, r7
 80006c4:	0032      	movs	r2, r6
 80006c6:	1a80      	subs	r0, r0, r2
 80006c8:	4199      	sbcs	r1, r3
 80006ca:	9000      	str	r0, [sp, #0]
 80006cc:	9101      	str	r1, [sp, #4]
 80006ce:	e79f      	b.n	8000610 <__udivmoddi4+0x84>
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d8bc      	bhi.n	800064e <__udivmoddi4+0xc2>
 80006d4:	e783      	b.n	80005de <__udivmoddi4+0x52>
 80006d6:	4642      	mov	r2, r8
 80006d8:	2320      	movs	r3, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	9100      	str	r1, [sp, #0]
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	e786      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	002a      	movs	r2, r5
 80006f4:	4646      	mov	r6, r8
 80006f6:	409a      	lsls	r2, r3
 80006f8:	0023      	movs	r3, r4
 80006fa:	40f3      	lsrs	r3, r6
 80006fc:	4644      	mov	r4, r8
 80006fe:	4313      	orrs	r3, r2
 8000700:	002a      	movs	r2, r5
 8000702:	40e2      	lsrs	r2, r4
 8000704:	001c      	movs	r4, r3
 8000706:	465b      	mov	r3, fp
 8000708:	0015      	movs	r5, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	dad4      	bge.n	80006b8 <__udivmoddi4+0x12c>
 800070e:	4642      	mov	r2, r8
 8000710:	002f      	movs	r7, r5
 8000712:	2320      	movs	r3, #32
 8000714:	0026      	movs	r6, r4
 8000716:	4097      	lsls	r7, r2
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	40de      	lsrs	r6, r3
 800071c:	003b      	movs	r3, r7
 800071e:	4333      	orrs	r3, r6
 8000720:	e7cd      	b.n	80006be <__udivmoddi4+0x132>
 8000722:	46c0      	nop			; (mov r8, r8)

08000724 <__aeabi_fdiv>:
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	464f      	mov	r7, r9
 8000728:	4646      	mov	r6, r8
 800072a:	46d6      	mov	lr, sl
 800072c:	0245      	lsls	r5, r0, #9
 800072e:	b5c0      	push	{r6, r7, lr}
 8000730:	0047      	lsls	r7, r0, #1
 8000732:	1c0c      	adds	r4, r1, #0
 8000734:	0a6d      	lsrs	r5, r5, #9
 8000736:	0e3f      	lsrs	r7, r7, #24
 8000738:	0fc6      	lsrs	r6, r0, #31
 800073a:	2f00      	cmp	r7, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fdiv+0x1c>
 800073e:	e070      	b.n	8000822 <__aeabi_fdiv+0xfe>
 8000740:	2fff      	cmp	r7, #255	; 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fdiv+0x22>
 8000744:	e075      	b.n	8000832 <__aeabi_fdiv+0x10e>
 8000746:	00eb      	lsls	r3, r5, #3
 8000748:	2580      	movs	r5, #128	; 0x80
 800074a:	04ed      	lsls	r5, r5, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2300      	movs	r3, #0
 8000750:	4699      	mov	r9, r3
 8000752:	469a      	mov	sl, r3
 8000754:	3f7f      	subs	r7, #127	; 0x7f
 8000756:	0260      	lsls	r0, r4, #9
 8000758:	0a43      	lsrs	r3, r0, #9
 800075a:	4698      	mov	r8, r3
 800075c:	0063      	lsls	r3, r4, #1
 800075e:	0e1b      	lsrs	r3, r3, #24
 8000760:	0fe4      	lsrs	r4, r4, #31
 8000762:	2b00      	cmp	r3, #0
 8000764:	d04e      	beq.n	8000804 <__aeabi_fdiv+0xe0>
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	d046      	beq.n	80007f8 <__aeabi_fdiv+0xd4>
 800076a:	4642      	mov	r2, r8
 800076c:	00d0      	lsls	r0, r2, #3
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	04d2      	lsls	r2, r2, #19
 8000772:	4302      	orrs	r2, r0
 8000774:	4690      	mov	r8, r2
 8000776:	2200      	movs	r2, #0
 8000778:	3b7f      	subs	r3, #127	; 0x7f
 800077a:	0031      	movs	r1, r6
 800077c:	1aff      	subs	r7, r7, r3
 800077e:	464b      	mov	r3, r9
 8000780:	4061      	eors	r1, r4
 8000782:	b2c9      	uxtb	r1, r1
 8000784:	4313      	orrs	r3, r2
 8000786:	2b0f      	cmp	r3, #15
 8000788:	d900      	bls.n	800078c <__aeabi_fdiv+0x68>
 800078a:	e0b5      	b.n	80008f8 <__aeabi_fdiv+0x1d4>
 800078c:	486e      	ldr	r0, [pc, #440]	; (8000948 <__aeabi_fdiv+0x224>)
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	58c3      	ldr	r3, [r0, r3]
 8000792:	469f      	mov	pc, r3
 8000794:	2300      	movs	r3, #0
 8000796:	4698      	mov	r8, r3
 8000798:	0026      	movs	r6, r4
 800079a:	4645      	mov	r5, r8
 800079c:	4692      	mov	sl, r2
 800079e:	4653      	mov	r3, sl
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d100      	bne.n	80007a6 <__aeabi_fdiv+0x82>
 80007a4:	e089      	b.n	80008ba <__aeabi_fdiv+0x196>
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d100      	bne.n	80007ac <__aeabi_fdiv+0x88>
 80007aa:	e09e      	b.n	80008ea <__aeabi_fdiv+0x1c6>
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d018      	beq.n	80007e2 <__aeabi_fdiv+0xbe>
 80007b0:	003b      	movs	r3, r7
 80007b2:	337f      	adds	r3, #127	; 0x7f
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	dd69      	ble.n	800088c <__aeabi_fdiv+0x168>
 80007b8:	076a      	lsls	r2, r5, #29
 80007ba:	d004      	beq.n	80007c6 <__aeabi_fdiv+0xa2>
 80007bc:	220f      	movs	r2, #15
 80007be:	402a      	ands	r2, r5
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fdiv+0xa2>
 80007c4:	3504      	adds	r5, #4
 80007c6:	012a      	lsls	r2, r5, #4
 80007c8:	d503      	bpl.n	80007d2 <__aeabi_fdiv+0xae>
 80007ca:	4b60      	ldr	r3, [pc, #384]	; (800094c <__aeabi_fdiv+0x228>)
 80007cc:	401d      	ands	r5, r3
 80007ce:	003b      	movs	r3, r7
 80007d0:	3380      	adds	r3, #128	; 0x80
 80007d2:	2bfe      	cmp	r3, #254	; 0xfe
 80007d4:	dd00      	ble.n	80007d8 <__aeabi_fdiv+0xb4>
 80007d6:	e070      	b.n	80008ba <__aeabi_fdiv+0x196>
 80007d8:	01ad      	lsls	r5, r5, #6
 80007da:	0a6d      	lsrs	r5, r5, #9
 80007dc:	b2d8      	uxtb	r0, r3
 80007de:	e002      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80007e0:	000e      	movs	r6, r1
 80007e2:	2000      	movs	r0, #0
 80007e4:	2500      	movs	r5, #0
 80007e6:	05c0      	lsls	r0, r0, #23
 80007e8:	4328      	orrs	r0, r5
 80007ea:	07f6      	lsls	r6, r6, #31
 80007ec:	4330      	orrs	r0, r6
 80007ee:	bce0      	pop	{r5, r6, r7}
 80007f0:	46ba      	mov	sl, r7
 80007f2:	46b1      	mov	r9, r6
 80007f4:	46a8      	mov	r8, r5
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	4643      	mov	r3, r8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d13f      	bne.n	800087e <__aeabi_fdiv+0x15a>
 80007fe:	2202      	movs	r2, #2
 8000800:	3fff      	subs	r7, #255	; 0xff
 8000802:	e003      	b.n	800080c <__aeabi_fdiv+0xe8>
 8000804:	4643      	mov	r3, r8
 8000806:	2b00      	cmp	r3, #0
 8000808:	d12d      	bne.n	8000866 <__aeabi_fdiv+0x142>
 800080a:	2201      	movs	r2, #1
 800080c:	0031      	movs	r1, r6
 800080e:	464b      	mov	r3, r9
 8000810:	4061      	eors	r1, r4
 8000812:	b2c9      	uxtb	r1, r1
 8000814:	4313      	orrs	r3, r2
 8000816:	2b0f      	cmp	r3, #15
 8000818:	d834      	bhi.n	8000884 <__aeabi_fdiv+0x160>
 800081a:	484d      	ldr	r0, [pc, #308]	; (8000950 <__aeabi_fdiv+0x22c>)
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	58c3      	ldr	r3, [r0, r3]
 8000820:	469f      	mov	pc, r3
 8000822:	2d00      	cmp	r5, #0
 8000824:	d113      	bne.n	800084e <__aeabi_fdiv+0x12a>
 8000826:	2304      	movs	r3, #4
 8000828:	4699      	mov	r9, r3
 800082a:	3b03      	subs	r3, #3
 800082c:	2700      	movs	r7, #0
 800082e:	469a      	mov	sl, r3
 8000830:	e791      	b.n	8000756 <__aeabi_fdiv+0x32>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d105      	bne.n	8000842 <__aeabi_fdiv+0x11e>
 8000836:	2308      	movs	r3, #8
 8000838:	4699      	mov	r9, r3
 800083a:	3b06      	subs	r3, #6
 800083c:	27ff      	movs	r7, #255	; 0xff
 800083e:	469a      	mov	sl, r3
 8000840:	e789      	b.n	8000756 <__aeabi_fdiv+0x32>
 8000842:	230c      	movs	r3, #12
 8000844:	4699      	mov	r9, r3
 8000846:	3b09      	subs	r3, #9
 8000848:	27ff      	movs	r7, #255	; 0xff
 800084a:	469a      	mov	sl, r3
 800084c:	e783      	b.n	8000756 <__aeabi_fdiv+0x32>
 800084e:	0028      	movs	r0, r5
 8000850:	f002 fae4 	bl	8002e1c <__clzsi2>
 8000854:	2776      	movs	r7, #118	; 0x76
 8000856:	1f43      	subs	r3, r0, #5
 8000858:	409d      	lsls	r5, r3
 800085a:	2300      	movs	r3, #0
 800085c:	427f      	negs	r7, r7
 800085e:	4699      	mov	r9, r3
 8000860:	469a      	mov	sl, r3
 8000862:	1a3f      	subs	r7, r7, r0
 8000864:	e777      	b.n	8000756 <__aeabi_fdiv+0x32>
 8000866:	4640      	mov	r0, r8
 8000868:	f002 fad8 	bl	8002e1c <__clzsi2>
 800086c:	4642      	mov	r2, r8
 800086e:	1f43      	subs	r3, r0, #5
 8000870:	409a      	lsls	r2, r3
 8000872:	2376      	movs	r3, #118	; 0x76
 8000874:	425b      	negs	r3, r3
 8000876:	4690      	mov	r8, r2
 8000878:	1a1b      	subs	r3, r3, r0
 800087a:	2200      	movs	r2, #0
 800087c:	e77d      	b.n	800077a <__aeabi_fdiv+0x56>
 800087e:	23ff      	movs	r3, #255	; 0xff
 8000880:	2203      	movs	r2, #3
 8000882:	e77a      	b.n	800077a <__aeabi_fdiv+0x56>
 8000884:	000e      	movs	r6, r1
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	2500      	movs	r5, #0
 800088a:	e7ac      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 800088c:	2001      	movs	r0, #1
 800088e:	1ac0      	subs	r0, r0, r3
 8000890:	281b      	cmp	r0, #27
 8000892:	dca6      	bgt.n	80007e2 <__aeabi_fdiv+0xbe>
 8000894:	379e      	adds	r7, #158	; 0x9e
 8000896:	002a      	movs	r2, r5
 8000898:	40bd      	lsls	r5, r7
 800089a:	40c2      	lsrs	r2, r0
 800089c:	1e6b      	subs	r3, r5, #1
 800089e:	419d      	sbcs	r5, r3
 80008a0:	4315      	orrs	r5, r2
 80008a2:	076b      	lsls	r3, r5, #29
 80008a4:	d004      	beq.n	80008b0 <__aeabi_fdiv+0x18c>
 80008a6:	230f      	movs	r3, #15
 80008a8:	402b      	ands	r3, r5
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fdiv+0x18c>
 80008ae:	3504      	adds	r5, #4
 80008b0:	016b      	lsls	r3, r5, #5
 80008b2:	d544      	bpl.n	800093e <__aeabi_fdiv+0x21a>
 80008b4:	2001      	movs	r0, #1
 80008b6:	2500      	movs	r5, #0
 80008b8:	e795      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	2500      	movs	r5, #0
 80008be:	e792      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80008c0:	2580      	movs	r5, #128	; 0x80
 80008c2:	2600      	movs	r6, #0
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	03ed      	lsls	r5, r5, #15
 80008c8:	e78d      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80008ca:	2300      	movs	r3, #0
 80008cc:	4698      	mov	r8, r3
 80008ce:	2080      	movs	r0, #128	; 0x80
 80008d0:	03c0      	lsls	r0, r0, #15
 80008d2:	4205      	tst	r5, r0
 80008d4:	d009      	beq.n	80008ea <__aeabi_fdiv+0x1c6>
 80008d6:	4643      	mov	r3, r8
 80008d8:	4203      	tst	r3, r0
 80008da:	d106      	bne.n	80008ea <__aeabi_fdiv+0x1c6>
 80008dc:	4645      	mov	r5, r8
 80008de:	4305      	orrs	r5, r0
 80008e0:	026d      	lsls	r5, r5, #9
 80008e2:	0026      	movs	r6, r4
 80008e4:	20ff      	movs	r0, #255	; 0xff
 80008e6:	0a6d      	lsrs	r5, r5, #9
 80008e8:	e77d      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80008ea:	2080      	movs	r0, #128	; 0x80
 80008ec:	03c0      	lsls	r0, r0, #15
 80008ee:	4305      	orrs	r5, r0
 80008f0:	026d      	lsls	r5, r5, #9
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	0a6d      	lsrs	r5, r5, #9
 80008f6:	e776      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 80008f8:	4642      	mov	r2, r8
 80008fa:	016b      	lsls	r3, r5, #5
 80008fc:	0150      	lsls	r0, r2, #5
 80008fe:	4283      	cmp	r3, r0
 8000900:	d219      	bcs.n	8000936 <__aeabi_fdiv+0x212>
 8000902:	221b      	movs	r2, #27
 8000904:	2500      	movs	r5, #0
 8000906:	3f01      	subs	r7, #1
 8000908:	2601      	movs	r6, #1
 800090a:	001c      	movs	r4, r3
 800090c:	006d      	lsls	r5, r5, #1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2c00      	cmp	r4, #0
 8000912:	db01      	blt.n	8000918 <__aeabi_fdiv+0x1f4>
 8000914:	4298      	cmp	r0, r3
 8000916:	d801      	bhi.n	800091c <__aeabi_fdiv+0x1f8>
 8000918:	1a1b      	subs	r3, r3, r0
 800091a:	4335      	orrs	r5, r6
 800091c:	3a01      	subs	r2, #1
 800091e:	2a00      	cmp	r2, #0
 8000920:	d1f3      	bne.n	800090a <__aeabi_fdiv+0x1e6>
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	4193      	sbcs	r3, r2
 8000926:	431d      	orrs	r5, r3
 8000928:	003b      	movs	r3, r7
 800092a:	337f      	adds	r3, #127	; 0x7f
 800092c:	000e      	movs	r6, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	dd00      	ble.n	8000934 <__aeabi_fdiv+0x210>
 8000932:	e741      	b.n	80007b8 <__aeabi_fdiv+0x94>
 8000934:	e7aa      	b.n	800088c <__aeabi_fdiv+0x168>
 8000936:	221a      	movs	r2, #26
 8000938:	2501      	movs	r5, #1
 800093a:	1a1b      	subs	r3, r3, r0
 800093c:	e7e4      	b.n	8000908 <__aeabi_fdiv+0x1e4>
 800093e:	01ad      	lsls	r5, r5, #6
 8000940:	2000      	movs	r0, #0
 8000942:	0a6d      	lsrs	r5, r5, #9
 8000944:	e74f      	b.n	80007e6 <__aeabi_fdiv+0xc2>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	0800baf8 	.word	0x0800baf8
 800094c:	f7ffffff 	.word	0xf7ffffff
 8000950:	0800bb38 	.word	0x0800bb38

08000954 <__eqsf2>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0245      	lsls	r5, r0, #9
 800095a:	024e      	lsls	r6, r1, #9
 800095c:	004c      	lsls	r4, r1, #1
 800095e:	0fc3      	lsrs	r3, r0, #31
 8000960:	0a6d      	lsrs	r5, r5, #9
 8000962:	2001      	movs	r0, #1
 8000964:	0e12      	lsrs	r2, r2, #24
 8000966:	0a76      	lsrs	r6, r6, #9
 8000968:	0e24      	lsrs	r4, r4, #24
 800096a:	0fc9      	lsrs	r1, r1, #31
 800096c:	2aff      	cmp	r2, #255	; 0xff
 800096e:	d006      	beq.n	800097e <__eqsf2+0x2a>
 8000970:	2cff      	cmp	r4, #255	; 0xff
 8000972:	d003      	beq.n	800097c <__eqsf2+0x28>
 8000974:	42a2      	cmp	r2, r4
 8000976:	d101      	bne.n	800097c <__eqsf2+0x28>
 8000978:	42b5      	cmp	r5, r6
 800097a:	d006      	beq.n	800098a <__eqsf2+0x36>
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	2d00      	cmp	r5, #0
 8000980:	d1fc      	bne.n	800097c <__eqsf2+0x28>
 8000982:	2cff      	cmp	r4, #255	; 0xff
 8000984:	d1fa      	bne.n	800097c <__eqsf2+0x28>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d1f8      	bne.n	800097c <__eqsf2+0x28>
 800098a:	428b      	cmp	r3, r1
 800098c:	d006      	beq.n	800099c <__eqsf2+0x48>
 800098e:	2001      	movs	r0, #1
 8000990:	2a00      	cmp	r2, #0
 8000992:	d1f3      	bne.n	800097c <__eqsf2+0x28>
 8000994:	0028      	movs	r0, r5
 8000996:	1e43      	subs	r3, r0, #1
 8000998:	4198      	sbcs	r0, r3
 800099a:	e7ef      	b.n	800097c <__eqsf2+0x28>
 800099c:	2000      	movs	r0, #0
 800099e:	e7ed      	b.n	800097c <__eqsf2+0x28>

080009a0 <__gesf2>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	0042      	lsls	r2, r0, #1
 80009a4:	0245      	lsls	r5, r0, #9
 80009a6:	024e      	lsls	r6, r1, #9
 80009a8:	004c      	lsls	r4, r1, #1
 80009aa:	0fc3      	lsrs	r3, r0, #31
 80009ac:	0a6d      	lsrs	r5, r5, #9
 80009ae:	0e12      	lsrs	r2, r2, #24
 80009b0:	0a76      	lsrs	r6, r6, #9
 80009b2:	0e24      	lsrs	r4, r4, #24
 80009b4:	0fc8      	lsrs	r0, r1, #31
 80009b6:	2aff      	cmp	r2, #255	; 0xff
 80009b8:	d01b      	beq.n	80009f2 <__gesf2+0x52>
 80009ba:	2cff      	cmp	r4, #255	; 0xff
 80009bc:	d00e      	beq.n	80009dc <__gesf2+0x3c>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d11b      	bne.n	80009fa <__gesf2+0x5a>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d101      	bne.n	80009ca <__gesf2+0x2a>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d01c      	beq.n	8000a04 <__gesf2+0x64>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d00c      	beq.n	80009e8 <__gesf2+0x48>
 80009ce:	4283      	cmp	r3, r0
 80009d0:	d01c      	beq.n	8000a0c <__gesf2+0x6c>
 80009d2:	2102      	movs	r1, #2
 80009d4:	1e58      	subs	r0, r3, #1
 80009d6:	4008      	ands	r0, r1
 80009d8:	3801      	subs	r0, #1
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d122      	bne.n	8000a26 <__gesf2+0x86>
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d1f4      	bne.n	80009ce <__gesf2+0x2e>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d1f2      	bne.n	80009ce <__gesf2+0x2e>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d1f6      	bne.n	80009da <__gesf2+0x3a>
 80009ec:	2001      	movs	r0, #1
 80009ee:	4240      	negs	r0, r0
 80009f0:	e7f3      	b.n	80009da <__gesf2+0x3a>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d117      	bne.n	8000a26 <__gesf2+0x86>
 80009f6:	2cff      	cmp	r4, #255	; 0xff
 80009f8:	d0f0      	beq.n	80009dc <__gesf2+0x3c>
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d1e7      	bne.n	80009ce <__gesf2+0x2e>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d1e5      	bne.n	80009ce <__gesf2+0x2e>
 8000a02:	e7e6      	b.n	80009d2 <__gesf2+0x32>
 8000a04:	2000      	movs	r0, #0
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0e7      	beq.n	80009da <__gesf2+0x3a>
 8000a0a:	e7e2      	b.n	80009d2 <__gesf2+0x32>
 8000a0c:	42a2      	cmp	r2, r4
 8000a0e:	dc05      	bgt.n	8000a1c <__gesf2+0x7c>
 8000a10:	dbea      	blt.n	80009e8 <__gesf2+0x48>
 8000a12:	42b5      	cmp	r5, r6
 8000a14:	d802      	bhi.n	8000a1c <__gesf2+0x7c>
 8000a16:	d3e7      	bcc.n	80009e8 <__gesf2+0x48>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e7de      	b.n	80009da <__gesf2+0x3a>
 8000a1c:	4243      	negs	r3, r0
 8000a1e:	4158      	adcs	r0, r3
 8000a20:	0040      	lsls	r0, r0, #1
 8000a22:	3801      	subs	r0, #1
 8000a24:	e7d9      	b.n	80009da <__gesf2+0x3a>
 8000a26:	2002      	movs	r0, #2
 8000a28:	4240      	negs	r0, r0
 8000a2a:	e7d6      	b.n	80009da <__gesf2+0x3a>

08000a2c <__lesf2>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	0042      	lsls	r2, r0, #1
 8000a30:	0245      	lsls	r5, r0, #9
 8000a32:	024e      	lsls	r6, r1, #9
 8000a34:	004c      	lsls	r4, r1, #1
 8000a36:	0fc3      	lsrs	r3, r0, #31
 8000a38:	0a6d      	lsrs	r5, r5, #9
 8000a3a:	0e12      	lsrs	r2, r2, #24
 8000a3c:	0a76      	lsrs	r6, r6, #9
 8000a3e:	0e24      	lsrs	r4, r4, #24
 8000a40:	0fc8      	lsrs	r0, r1, #31
 8000a42:	2aff      	cmp	r2, #255	; 0xff
 8000a44:	d00b      	beq.n	8000a5e <__lesf2+0x32>
 8000a46:	2cff      	cmp	r4, #255	; 0xff
 8000a48:	d00d      	beq.n	8000a66 <__lesf2+0x3a>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d11f      	bne.n	8000a8e <__lesf2+0x62>
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d116      	bne.n	8000a80 <__lesf2+0x54>
 8000a52:	2e00      	cmp	r6, #0
 8000a54:	d114      	bne.n	8000a80 <__lesf2+0x54>
 8000a56:	2000      	movs	r0, #0
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d010      	beq.n	8000a7e <__lesf2+0x52>
 8000a5c:	e009      	b.n	8000a72 <__lesf2+0x46>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d10c      	bne.n	8000a7c <__lesf2+0x50>
 8000a62:	2cff      	cmp	r4, #255	; 0xff
 8000a64:	d113      	bne.n	8000a8e <__lesf2+0x62>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d108      	bne.n	8000a7c <__lesf2+0x50>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d008      	beq.n	8000a80 <__lesf2+0x54>
 8000a6e:	4283      	cmp	r3, r0
 8000a70:	d012      	beq.n	8000a98 <__lesf2+0x6c>
 8000a72:	2102      	movs	r1, #2
 8000a74:	1e58      	subs	r0, r3, #1
 8000a76:	4008      	ands	r0, r1
 8000a78:	3801      	subs	r0, #1
 8000a7a:	e000      	b.n	8000a7e <__lesf2+0x52>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d1f4      	bne.n	8000a6e <__lesf2+0x42>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d1fa      	bne.n	8000a7e <__lesf2+0x52>
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	e7f7      	b.n	8000a7e <__lesf2+0x52>
 8000a8e:	2c00      	cmp	r4, #0
 8000a90:	d1ed      	bne.n	8000a6e <__lesf2+0x42>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d1eb      	bne.n	8000a6e <__lesf2+0x42>
 8000a96:	e7ec      	b.n	8000a72 <__lesf2+0x46>
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	dc05      	bgt.n	8000aa8 <__lesf2+0x7c>
 8000a9c:	dbf2      	blt.n	8000a84 <__lesf2+0x58>
 8000a9e:	42b5      	cmp	r5, r6
 8000aa0:	d802      	bhi.n	8000aa8 <__lesf2+0x7c>
 8000aa2:	d3ef      	bcc.n	8000a84 <__lesf2+0x58>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e7ea      	b.n	8000a7e <__lesf2+0x52>
 8000aa8:	4243      	negs	r3, r0
 8000aaa:	4158      	adcs	r0, r3
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	3801      	subs	r0, #1
 8000ab0:	e7e5      	b.n	8000a7e <__lesf2+0x52>
 8000ab2:	46c0      	nop			; (mov r8, r8)

08000ab4 <__aeabi_fmul>:
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	4646      	mov	r6, r8
 8000aba:	46d6      	mov	lr, sl
 8000abc:	0244      	lsls	r4, r0, #9
 8000abe:	0045      	lsls	r5, r0, #1
 8000ac0:	b5c0      	push	{r6, r7, lr}
 8000ac2:	0a64      	lsrs	r4, r4, #9
 8000ac4:	1c0f      	adds	r7, r1, #0
 8000ac6:	0e2d      	lsrs	r5, r5, #24
 8000ac8:	0fc6      	lsrs	r6, r0, #31
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fmul+0x1c>
 8000ace:	e08d      	b.n	8000bec <__aeabi_fmul+0x138>
 8000ad0:	2dff      	cmp	r5, #255	; 0xff
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fmul+0x22>
 8000ad4:	e092      	b.n	8000bfc <__aeabi_fmul+0x148>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	4699      	mov	r9, r3
 8000adc:	469a      	mov	sl, r3
 8000ade:	00e4      	lsls	r4, r4, #3
 8000ae0:	04c0      	lsls	r0, r0, #19
 8000ae2:	4304      	orrs	r4, r0
 8000ae4:	3d7f      	subs	r5, #127	; 0x7f
 8000ae6:	0278      	lsls	r0, r7, #9
 8000ae8:	0a43      	lsrs	r3, r0, #9
 8000aea:	4698      	mov	r8, r3
 8000aec:	007b      	lsls	r3, r7, #1
 8000aee:	0e1b      	lsrs	r3, r3, #24
 8000af0:	0fff      	lsrs	r7, r7, #31
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fmul+0x44>
 8000af6:	e070      	b.n	8000bda <__aeabi_fmul+0x126>
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d100      	bne.n	8000afe <__aeabi_fmul+0x4a>
 8000afc:	e086      	b.n	8000c0c <__aeabi_fmul+0x158>
 8000afe:	4642      	mov	r2, r8
 8000b00:	00d0      	lsls	r0, r2, #3
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	3b7f      	subs	r3, #127	; 0x7f
 8000b06:	18ed      	adds	r5, r5, r3
 8000b08:	2300      	movs	r3, #0
 8000b0a:	04d2      	lsls	r2, r2, #19
 8000b0c:	4302      	orrs	r2, r0
 8000b0e:	4690      	mov	r8, r2
 8000b10:	469c      	mov	ip, r3
 8000b12:	0031      	movs	r1, r6
 8000b14:	464b      	mov	r3, r9
 8000b16:	4079      	eors	r1, r7
 8000b18:	1c68      	adds	r0, r5, #1
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d81c      	bhi.n	8000b58 <__aeabi_fmul+0xa4>
 8000b1e:	4a76      	ldr	r2, [pc, #472]	; (8000cf8 <__aeabi_fmul+0x244>)
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	58d3      	ldr	r3, [r2, r3]
 8000b24:	469f      	mov	pc, r3
 8000b26:	0039      	movs	r1, r7
 8000b28:	4644      	mov	r4, r8
 8000b2a:	46e2      	mov	sl, ip
 8000b2c:	4653      	mov	r3, sl
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d00f      	beq.n	8000b52 <__aeabi_fmul+0x9e>
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fmul+0x84>
 8000b36:	e0d7      	b.n	8000ce8 <__aeabi_fmul+0x234>
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d137      	bne.n	8000bac <__aeabi_fmul+0xf8>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	2400      	movs	r4, #0
 8000b40:	05c0      	lsls	r0, r0, #23
 8000b42:	4320      	orrs	r0, r4
 8000b44:	07c9      	lsls	r1, r1, #31
 8000b46:	4308      	orrs	r0, r1
 8000b48:	bce0      	pop	{r5, r6, r7}
 8000b4a:	46ba      	mov	sl, r7
 8000b4c:	46b1      	mov	r9, r6
 8000b4e:	46a8      	mov	r8, r5
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b52:	20ff      	movs	r0, #255	; 0xff
 8000b54:	2400      	movs	r4, #0
 8000b56:	e7f3      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000b58:	0c26      	lsrs	r6, r4, #16
 8000b5a:	0424      	lsls	r4, r4, #16
 8000b5c:	0c22      	lsrs	r2, r4, #16
 8000b5e:	4644      	mov	r4, r8
 8000b60:	0424      	lsls	r4, r4, #16
 8000b62:	0c24      	lsrs	r4, r4, #16
 8000b64:	4643      	mov	r3, r8
 8000b66:	0027      	movs	r7, r4
 8000b68:	0c1b      	lsrs	r3, r3, #16
 8000b6a:	4357      	muls	r7, r2
 8000b6c:	4374      	muls	r4, r6
 8000b6e:	435a      	muls	r2, r3
 8000b70:	435e      	muls	r6, r3
 8000b72:	1912      	adds	r2, r2, r4
 8000b74:	0c3b      	lsrs	r3, r7, #16
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	d903      	bls.n	8000b84 <__aeabi_fmul+0xd0>
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	0252      	lsls	r2, r2, #9
 8000b80:	4694      	mov	ip, r2
 8000b82:	4466      	add	r6, ip
 8000b84:	043f      	lsls	r7, r7, #16
 8000b86:	041a      	lsls	r2, r3, #16
 8000b88:	0c3f      	lsrs	r7, r7, #16
 8000b8a:	19d2      	adds	r2, r2, r7
 8000b8c:	0194      	lsls	r4, r2, #6
 8000b8e:	1e67      	subs	r7, r4, #1
 8000b90:	41bc      	sbcs	r4, r7
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	0e92      	lsrs	r2, r2, #26
 8000b96:	199b      	adds	r3, r3, r6
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	019b      	lsls	r3, r3, #6
 8000b9c:	431c      	orrs	r4, r3
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	d400      	bmi.n	8000ba4 <__aeabi_fmul+0xf0>
 8000ba2:	e09b      	b.n	8000cdc <__aeabi_fmul+0x228>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	0862      	lsrs	r2, r4, #1
 8000ba8:	401c      	ands	r4, r3
 8000baa:	4314      	orrs	r4, r2
 8000bac:	0002      	movs	r2, r0
 8000bae:	327f      	adds	r2, #127	; 0x7f
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	dd64      	ble.n	8000c7e <__aeabi_fmul+0x1ca>
 8000bb4:	0763      	lsls	r3, r4, #29
 8000bb6:	d004      	beq.n	8000bc2 <__aeabi_fmul+0x10e>
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4023      	ands	r3, r4
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fmul+0x10e>
 8000bc0:	3404      	adds	r4, #4
 8000bc2:	0123      	lsls	r3, r4, #4
 8000bc4:	d503      	bpl.n	8000bce <__aeabi_fmul+0x11a>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <__aeabi_fmul+0x248>)
 8000bca:	3280      	adds	r2, #128	; 0x80
 8000bcc:	401c      	ands	r4, r3
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	dcbf      	bgt.n	8000b52 <__aeabi_fmul+0x9e>
 8000bd2:	01a4      	lsls	r4, r4, #6
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	b2d0      	uxtb	r0, r2
 8000bd8:	e7b2      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000bda:	4643      	mov	r3, r8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d13d      	bne.n	8000c5c <__aeabi_fmul+0x1a8>
 8000be0:	464a      	mov	r2, r9
 8000be2:	3301      	adds	r3, #1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4691      	mov	r9, r2
 8000be8:	469c      	mov	ip, r3
 8000bea:	e792      	b.n	8000b12 <__aeabi_fmul+0x5e>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d129      	bne.n	8000c44 <__aeabi_fmul+0x190>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	e774      	b.n	8000ae6 <__aeabi_fmul+0x32>
 8000bfc:	2c00      	cmp	r4, #0
 8000bfe:	d11b      	bne.n	8000c38 <__aeabi_fmul+0x184>
 8000c00:	2308      	movs	r3, #8
 8000c02:	4699      	mov	r9, r3
 8000c04:	3b06      	subs	r3, #6
 8000c06:	25ff      	movs	r5, #255	; 0xff
 8000c08:	469a      	mov	sl, r3
 8000c0a:	e76c      	b.n	8000ae6 <__aeabi_fmul+0x32>
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	35ff      	adds	r5, #255	; 0xff
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10b      	bne.n	8000c2c <__aeabi_fmul+0x178>
 8000c14:	2302      	movs	r3, #2
 8000c16:	464a      	mov	r2, r9
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	e778      	b.n	8000b12 <__aeabi_fmul+0x5e>
 8000c20:	4653      	mov	r3, sl
 8000c22:	0031      	movs	r1, r6
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fmul+0x176>
 8000c28:	e783      	b.n	8000b32 <__aeabi_fmul+0x7e>
 8000c2a:	e792      	b.n	8000b52 <__aeabi_fmul+0x9e>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	464a      	mov	r2, r9
 8000c30:	431a      	orrs	r2, r3
 8000c32:	4691      	mov	r9, r2
 8000c34:	469c      	mov	ip, r3
 8000c36:	e76c      	b.n	8000b12 <__aeabi_fmul+0x5e>
 8000c38:	230c      	movs	r3, #12
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	3b09      	subs	r3, #9
 8000c3e:	25ff      	movs	r5, #255	; 0xff
 8000c40:	469a      	mov	sl, r3
 8000c42:	e750      	b.n	8000ae6 <__aeabi_fmul+0x32>
 8000c44:	0020      	movs	r0, r4
 8000c46:	f002 f8e9 	bl	8002e1c <__clzsi2>
 8000c4a:	2576      	movs	r5, #118	; 0x76
 8000c4c:	1f43      	subs	r3, r0, #5
 8000c4e:	409c      	lsls	r4, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	426d      	negs	r5, r5
 8000c54:	4699      	mov	r9, r3
 8000c56:	469a      	mov	sl, r3
 8000c58:	1a2d      	subs	r5, r5, r0
 8000c5a:	e744      	b.n	8000ae6 <__aeabi_fmul+0x32>
 8000c5c:	4640      	mov	r0, r8
 8000c5e:	f002 f8dd 	bl	8002e1c <__clzsi2>
 8000c62:	4642      	mov	r2, r8
 8000c64:	1f43      	subs	r3, r0, #5
 8000c66:	409a      	lsls	r2, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	1a2d      	subs	r5, r5, r0
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	469c      	mov	ip, r3
 8000c70:	3d76      	subs	r5, #118	; 0x76
 8000c72:	e74e      	b.n	8000b12 <__aeabi_fmul+0x5e>
 8000c74:	2480      	movs	r4, #128	; 0x80
 8000c76:	2100      	movs	r1, #0
 8000c78:	20ff      	movs	r0, #255	; 0xff
 8000c7a:	03e4      	lsls	r4, r4, #15
 8000c7c:	e760      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	2b1b      	cmp	r3, #27
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_fmul+0x1d4>
 8000c86:	e759      	b.n	8000b3c <__aeabi_fmul+0x88>
 8000c88:	0022      	movs	r2, r4
 8000c8a:	309e      	adds	r0, #158	; 0x9e
 8000c8c:	40da      	lsrs	r2, r3
 8000c8e:	4084      	lsls	r4, r0
 8000c90:	0013      	movs	r3, r2
 8000c92:	1e62      	subs	r2, r4, #1
 8000c94:	4194      	sbcs	r4, r2
 8000c96:	431c      	orrs	r4, r3
 8000c98:	0763      	lsls	r3, r4, #29
 8000c9a:	d004      	beq.n	8000ca6 <__aeabi_fmul+0x1f2>
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	4023      	ands	r3, r4
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_fmul+0x1f2>
 8000ca4:	3404      	adds	r4, #4
 8000ca6:	0163      	lsls	r3, r4, #5
 8000ca8:	d51a      	bpl.n	8000ce0 <__aeabi_fmul+0x22c>
 8000caa:	2001      	movs	r0, #1
 8000cac:	2400      	movs	r4, #0
 8000cae:	e747      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000cb0:	2080      	movs	r0, #128	; 0x80
 8000cb2:	03c0      	lsls	r0, r0, #15
 8000cb4:	4204      	tst	r4, r0
 8000cb6:	d009      	beq.n	8000ccc <__aeabi_fmul+0x218>
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4203      	tst	r3, r0
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_fmul+0x218>
 8000cbe:	4644      	mov	r4, r8
 8000cc0:	4304      	orrs	r4, r0
 8000cc2:	0264      	lsls	r4, r4, #9
 8000cc4:	0039      	movs	r1, r7
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	0a64      	lsrs	r4, r4, #9
 8000cca:	e739      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000ccc:	2080      	movs	r0, #128	; 0x80
 8000cce:	03c0      	lsls	r0, r0, #15
 8000cd0:	4304      	orrs	r4, r0
 8000cd2:	0264      	lsls	r4, r4, #9
 8000cd4:	0031      	movs	r1, r6
 8000cd6:	20ff      	movs	r0, #255	; 0xff
 8000cd8:	0a64      	lsrs	r4, r4, #9
 8000cda:	e731      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000cdc:	0028      	movs	r0, r5
 8000cde:	e765      	b.n	8000bac <__aeabi_fmul+0xf8>
 8000ce0:	01a4      	lsls	r4, r4, #6
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	0a64      	lsrs	r4, r4, #9
 8000ce6:	e72b      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000ce8:	2080      	movs	r0, #128	; 0x80
 8000cea:	03c0      	lsls	r0, r0, #15
 8000cec:	4304      	orrs	r4, r0
 8000cee:	0264      	lsls	r4, r4, #9
 8000cf0:	20ff      	movs	r0, #255	; 0xff
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	e724      	b.n	8000b40 <__aeabi_fmul+0x8c>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	0800bb78 	.word	0x0800bb78
 8000cfc:	f7ffffff 	.word	0xf7ffffff

08000d00 <__aeabi_fsub>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	46ce      	mov	lr, r9
 8000d04:	4647      	mov	r7, r8
 8000d06:	0243      	lsls	r3, r0, #9
 8000d08:	0a5b      	lsrs	r3, r3, #9
 8000d0a:	024e      	lsls	r6, r1, #9
 8000d0c:	00da      	lsls	r2, r3, #3
 8000d0e:	4694      	mov	ip, r2
 8000d10:	0a72      	lsrs	r2, r6, #9
 8000d12:	4691      	mov	r9, r2
 8000d14:	0045      	lsls	r5, r0, #1
 8000d16:	004a      	lsls	r2, r1, #1
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	0e2d      	lsrs	r5, r5, #24
 8000d1c:	001f      	movs	r7, r3
 8000d1e:	0fc4      	lsrs	r4, r0, #31
 8000d20:	0e12      	lsrs	r2, r2, #24
 8000d22:	0fc9      	lsrs	r1, r1, #31
 8000d24:	09b6      	lsrs	r6, r6, #6
 8000d26:	2aff      	cmp	r2, #255	; 0xff
 8000d28:	d05b      	beq.n	8000de2 <__aeabi_fsub+0xe2>
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	4041      	eors	r1, r0
 8000d2e:	428c      	cmp	r4, r1
 8000d30:	d039      	beq.n	8000da6 <__aeabi_fsub+0xa6>
 8000d32:	1aa8      	subs	r0, r5, r2
 8000d34:	2800      	cmp	r0, #0
 8000d36:	dd5a      	ble.n	8000dee <__aeabi_fsub+0xee>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d06a      	beq.n	8000e12 <__aeabi_fsub+0x112>
 8000d3c:	2dff      	cmp	r5, #255	; 0xff
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_fsub+0x42>
 8000d40:	e0d9      	b.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	04d2      	lsls	r2, r2, #19
 8000d46:	4316      	orrs	r6, r2
 8000d48:	281b      	cmp	r0, #27
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_fsub+0x4e>
 8000d4c:	e0e9      	b.n	8000f22 <__aeabi_fsub+0x222>
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4663      	mov	r3, ip
 8000d52:	1a18      	subs	r0, r3, r0
 8000d54:	0143      	lsls	r3, r0, #5
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_fsub+0x5a>
 8000d58:	e0b4      	b.n	8000ec4 <__aeabi_fsub+0x1c4>
 8000d5a:	0180      	lsls	r0, r0, #6
 8000d5c:	0987      	lsrs	r7, r0, #6
 8000d5e:	0038      	movs	r0, r7
 8000d60:	f002 f85c 	bl	8002e1c <__clzsi2>
 8000d64:	3805      	subs	r0, #5
 8000d66:	4087      	lsls	r7, r0
 8000d68:	4285      	cmp	r5, r0
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_fsub+0x6e>
 8000d6c:	e0cc      	b.n	8000f08 <__aeabi_fsub+0x208>
 8000d6e:	1a2d      	subs	r5, r5, r0
 8000d70:	48b5      	ldr	r0, [pc, #724]	; (8001048 <__aeabi_fsub+0x348>)
 8000d72:	4038      	ands	r0, r7
 8000d74:	0743      	lsls	r3, r0, #29
 8000d76:	d004      	beq.n	8000d82 <__aeabi_fsub+0x82>
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4003      	ands	r3, r0
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0x82>
 8000d80:	3004      	adds	r0, #4
 8000d82:	0143      	lsls	r3, r0, #5
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_fsub+0x88>
 8000d86:	e0a0      	b.n	8000eca <__aeabi_fsub+0x1ca>
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	2dfe      	cmp	r5, #254	; 0xfe
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x90>
 8000d8e:	e08d      	b.n	8000eac <__aeabi_fsub+0x1ac>
 8000d90:	0180      	lsls	r0, r0, #6
 8000d92:	0a47      	lsrs	r7, r0, #9
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	05d0      	lsls	r0, r2, #23
 8000d98:	4338      	orrs	r0, r7
 8000d9a:	07e4      	lsls	r4, r4, #31
 8000d9c:	4320      	orrs	r0, r4
 8000d9e:	bcc0      	pop	{r6, r7}
 8000da0:	46b9      	mov	r9, r7
 8000da2:	46b0      	mov	r8, r6
 8000da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da6:	1aa8      	subs	r0, r5, r2
 8000da8:	4680      	mov	r8, r0
 8000daa:	2800      	cmp	r0, #0
 8000dac:	dd45      	ble.n	8000e3a <__aeabi_fsub+0x13a>
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d070      	beq.n	8000e94 <__aeabi_fsub+0x194>
 8000db2:	2dff      	cmp	r5, #255	; 0xff
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0xb8>
 8000db6:	e09e      	b.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	04db      	lsls	r3, r3, #19
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	2b1b      	cmp	r3, #27
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_fsub+0xc6>
 8000dc4:	e0d2      	b.n	8000f6c <__aeabi_fsub+0x26c>
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4460      	add	r0, ip
 8000dca:	0143      	lsls	r3, r0, #5
 8000dcc:	d57a      	bpl.n	8000ec4 <__aeabi_fsub+0x1c4>
 8000dce:	3501      	adds	r5, #1
 8000dd0:	2dff      	cmp	r5, #255	; 0xff
 8000dd2:	d06b      	beq.n	8000eac <__aeabi_fsub+0x1ac>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4a9d      	ldr	r2, [pc, #628]	; (800104c <__aeabi_fsub+0x34c>)
 8000dd8:	4003      	ands	r3, r0
 8000dda:	0840      	lsrs	r0, r0, #1
 8000ddc:	4010      	ands	r0, r2
 8000dde:	4318      	orrs	r0, r3
 8000de0:	e7c8      	b.n	8000d74 <__aeabi_fsub+0x74>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d020      	beq.n	8000e28 <__aeabi_fsub+0x128>
 8000de6:	428c      	cmp	r4, r1
 8000de8:	d023      	beq.n	8000e32 <__aeabi_fsub+0x132>
 8000dea:	0028      	movs	r0, r5
 8000dec:	38ff      	subs	r0, #255	; 0xff
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d039      	beq.n	8000e66 <__aeabi_fsub+0x166>
 8000df2:	1b57      	subs	r7, r2, r5
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fsub+0xfa>
 8000df8:	e09d      	b.n	8000f36 <__aeabi_fsub+0x236>
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x102>
 8000e00:	e0db      	b.n	8000fba <__aeabi_fsub+0x2ba>
 8000e02:	1e7b      	subs	r3, r7, #1
 8000e04:	2f01      	cmp	r7, #1
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x10a>
 8000e08:	e10d      	b.n	8001026 <__aeabi_fsub+0x326>
 8000e0a:	2fff      	cmp	r7, #255	; 0xff
 8000e0c:	d071      	beq.n	8000ef2 <__aeabi_fsub+0x1f2>
 8000e0e:	001f      	movs	r7, r3
 8000e10:	e098      	b.n	8000f44 <__aeabi_fsub+0x244>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x118>
 8000e16:	e0a7      	b.n	8000f68 <__aeabi_fsub+0x268>
 8000e18:	1e42      	subs	r2, r0, #1
 8000e1a:	2801      	cmp	r0, #1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x120>
 8000e1e:	e0e6      	b.n	8000fee <__aeabi_fsub+0x2ee>
 8000e20:	28ff      	cmp	r0, #255	; 0xff
 8000e22:	d068      	beq.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000e24:	0010      	movs	r0, r2
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fsub+0x48>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4041      	eors	r1, r0
 8000e2c:	42a1      	cmp	r1, r4
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_fsub+0x132>
 8000e30:	e77f      	b.n	8000d32 <__aeabi_fsub+0x32>
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	4240      	negs	r0, r0
 8000e36:	4680      	mov	r8, r0
 8000e38:	44a8      	add	r8, r5
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d038      	beq.n	8000eb2 <__aeabi_fsub+0x1b2>
 8000e40:	1b51      	subs	r1, r2, r5
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x148>
 8000e46:	e0ae      	b.n	8000fa6 <__aeabi_fsub+0x2a6>
 8000e48:	2aff      	cmp	r2, #255	; 0xff
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x14e>
 8000e4c:	e0df      	b.n	800100e <__aeabi_fsub+0x30e>
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	4660      	mov	r0, ip
 8000e52:	04db      	lsls	r3, r3, #19
 8000e54:	4318      	orrs	r0, r3
 8000e56:	4684      	mov	ip, r0
 8000e58:	291b      	cmp	r1, #27
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x15e>
 8000e5c:	e0d9      	b.n	8001012 <__aeabi_fsub+0x312>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	0015      	movs	r5, r2
 8000e62:	1980      	adds	r0, r0, r6
 8000e64:	e7b1      	b.n	8000dca <__aeabi_fsub+0xca>
 8000e66:	20fe      	movs	r0, #254	; 0xfe
 8000e68:	1c6a      	adds	r2, r5, #1
 8000e6a:	4210      	tst	r0, r2
 8000e6c:	d171      	bne.n	8000f52 <__aeabi_fsub+0x252>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_fsub+0x174>
 8000e72:	e0a6      	b.n	8000fc2 <__aeabi_fsub+0x2c2>
 8000e74:	4663      	mov	r3, ip
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_fsub+0x17c>
 8000e7a:	e0d9      	b.n	8001030 <__aeabi_fsub+0x330>
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_fsub+0x184>
 8000e82:	e788      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000e84:	1b98      	subs	r0, r3, r6
 8000e86:	0143      	lsls	r3, r0, #5
 8000e88:	d400      	bmi.n	8000e8c <__aeabi_fsub+0x18c>
 8000e8a:	e0e1      	b.n	8001050 <__aeabi_fsub+0x350>
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	000c      	movs	r4, r1
 8000e90:	1af0      	subs	r0, r6, r3
 8000e92:	e76f      	b.n	8000d74 <__aeabi_fsub+0x74>
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x19a>
 8000e98:	e0b7      	b.n	800100a <__aeabi_fsub+0x30a>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	2801      	cmp	r0, #1
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fsub+0x1a4>
 8000ea2:	e09c      	b.n	8000fde <__aeabi_fsub+0x2de>
 8000ea4:	28ff      	cmp	r0, #255	; 0xff
 8000ea6:	d026      	beq.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000ea8:	4690      	mov	r8, r2
 8000eaa:	e788      	b.n	8000dbe <__aeabi_fsub+0xbe>
 8000eac:	22ff      	movs	r2, #255	; 0xff
 8000eae:	2700      	movs	r7, #0
 8000eb0:	e771      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000eb2:	20fe      	movs	r0, #254	; 0xfe
 8000eb4:	1c6a      	adds	r2, r5, #1
 8000eb6:	4210      	tst	r0, r2
 8000eb8:	d064      	beq.n	8000f84 <__aeabi_fsub+0x284>
 8000eba:	2aff      	cmp	r2, #255	; 0xff
 8000ebc:	d0f6      	beq.n	8000eac <__aeabi_fsub+0x1ac>
 8000ebe:	0015      	movs	r5, r2
 8000ec0:	4466      	add	r6, ip
 8000ec2:	0870      	lsrs	r0, r6, #1
 8000ec4:	0743      	lsls	r3, r0, #29
 8000ec6:	d000      	beq.n	8000eca <__aeabi_fsub+0x1ca>
 8000ec8:	e756      	b.n	8000d78 <__aeabi_fsub+0x78>
 8000eca:	08c3      	lsrs	r3, r0, #3
 8000ecc:	2dff      	cmp	r5, #255	; 0xff
 8000ece:	d012      	beq.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000ed0:	025b      	lsls	r3, r3, #9
 8000ed2:	0a5f      	lsrs	r7, r3, #9
 8000ed4:	b2ea      	uxtb	r2, r5
 8000ed6:	e75e      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000ed8:	4662      	mov	r2, ip
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_fsub+0x1e0>
 8000ede:	e096      	b.n	800100e <__aeabi_fsub+0x30e>
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d008      	beq.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	03d2      	lsls	r2, r2, #15
 8000ee8:	4213      	tst	r3, r2
 8000eea:	d004      	beq.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000eec:	4648      	mov	r0, r9
 8000eee:	4210      	tst	r0, r2
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fsub+0x1f6>
 8000ef2:	000c      	movs	r4, r1
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0d8      	beq.n	8000eac <__aeabi_fsub+0x1ac>
 8000efa:	2780      	movs	r7, #128	; 0x80
 8000efc:	03ff      	lsls	r7, r7, #15
 8000efe:	431f      	orrs	r7, r3
 8000f00:	027f      	lsls	r7, r7, #9
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	0a7f      	lsrs	r7, r7, #9
 8000f06:	e746      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000f08:	2320      	movs	r3, #32
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	1b45      	subs	r5, r0, r5
 8000f0e:	0038      	movs	r0, r7
 8000f10:	3501      	adds	r5, #1
 8000f12:	40ea      	lsrs	r2, r5
 8000f14:	1b5d      	subs	r5, r3, r5
 8000f16:	40a8      	lsls	r0, r5
 8000f18:	1e43      	subs	r3, r0, #1
 8000f1a:	4198      	sbcs	r0, r3
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	4310      	orrs	r0, r2
 8000f20:	e728      	b.n	8000d74 <__aeabi_fsub+0x74>
 8000f22:	2320      	movs	r3, #32
 8000f24:	1a1b      	subs	r3, r3, r0
 8000f26:	0032      	movs	r2, r6
 8000f28:	409e      	lsls	r6, r3
 8000f2a:	40c2      	lsrs	r2, r0
 8000f2c:	0030      	movs	r0, r6
 8000f2e:	1e43      	subs	r3, r0, #1
 8000f30:	4198      	sbcs	r0, r3
 8000f32:	4310      	orrs	r0, r2
 8000f34:	e70c      	b.n	8000d50 <__aeabi_fsub+0x50>
 8000f36:	2aff      	cmp	r2, #255	; 0xff
 8000f38:	d0db      	beq.n	8000ef2 <__aeabi_fsub+0x1f2>
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	04db      	lsls	r3, r3, #19
 8000f40:	4318      	orrs	r0, r3
 8000f42:	4684      	mov	ip, r0
 8000f44:	2f1b      	cmp	r7, #27
 8000f46:	dd56      	ble.n	8000ff6 <__aeabi_fsub+0x2f6>
 8000f48:	2001      	movs	r0, #1
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	0015      	movs	r5, r2
 8000f4e:	1a30      	subs	r0, r6, r0
 8000f50:	e700      	b.n	8000d54 <__aeabi_fsub+0x54>
 8000f52:	4663      	mov	r3, ip
 8000f54:	1b9f      	subs	r7, r3, r6
 8000f56:	017b      	lsls	r3, r7, #5
 8000f58:	d43d      	bmi.n	8000fd6 <__aeabi_fsub+0x2d6>
 8000f5a:	2f00      	cmp	r7, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x260>
 8000f5e:	e6fe      	b.n	8000d5e <__aeabi_fsub+0x5e>
 8000f60:	2400      	movs	r4, #0
 8000f62:	2200      	movs	r2, #0
 8000f64:	2700      	movs	r7, #0
 8000f66:	e716      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000f68:	0005      	movs	r5, r0
 8000f6a:	e7af      	b.n	8000ecc <__aeabi_fsub+0x1cc>
 8000f6c:	0032      	movs	r2, r6
 8000f6e:	4643      	mov	r3, r8
 8000f70:	4641      	mov	r1, r8
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	2320      	movs	r3, #32
 8000f76:	1a5b      	subs	r3, r3, r1
 8000f78:	409e      	lsls	r6, r3
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	1e43      	subs	r3, r0, #1
 8000f7e:	4198      	sbcs	r0, r3
 8000f80:	4310      	orrs	r0, r2
 8000f82:	e721      	b.n	8000dc8 <__aeabi_fsub+0xc8>
 8000f84:	2d00      	cmp	r5, #0
 8000f86:	d1a7      	bne.n	8000ed8 <__aeabi_fsub+0x1d8>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d059      	beq.n	8001042 <__aeabi_fsub+0x342>
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x296>
 8000f94:	e6ff      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000f96:	0030      	movs	r0, r6
 8000f98:	4460      	add	r0, ip
 8000f9a:	0143      	lsls	r3, r0, #5
 8000f9c:	d592      	bpl.n	8000ec4 <__aeabi_fsub+0x1c4>
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <__aeabi_fsub+0x348>)
 8000fa0:	3501      	adds	r5, #1
 8000fa2:	4018      	ands	r0, r3
 8000fa4:	e78e      	b.n	8000ec4 <__aeabi_fsub+0x1c4>
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d047      	beq.n	800103c <__aeabi_fsub+0x33c>
 8000fac:	1e4b      	subs	r3, r1, #1
 8000fae:	2901      	cmp	r1, #1
 8000fb0:	d015      	beq.n	8000fde <__aeabi_fsub+0x2de>
 8000fb2:	29ff      	cmp	r1, #255	; 0xff
 8000fb4:	d02b      	beq.n	800100e <__aeabi_fsub+0x30e>
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	e74e      	b.n	8000e58 <__aeabi_fsub+0x158>
 8000fba:	000c      	movs	r4, r1
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	003d      	movs	r5, r7
 8000fc0:	e784      	b.n	8000ecc <__aeabi_fsub+0x1cc>
 8000fc2:	4662      	mov	r2, ip
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	d18b      	bne.n	8000ee0 <__aeabi_fsub+0x1e0>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d192      	bne.n	8000ef2 <__aeabi_fsub+0x1f2>
 8000fcc:	2780      	movs	r7, #128	; 0x80
 8000fce:	2400      	movs	r4, #0
 8000fd0:	22ff      	movs	r2, #255	; 0xff
 8000fd2:	03ff      	lsls	r7, r7, #15
 8000fd4:	e6df      	b.n	8000d96 <__aeabi_fsub+0x96>
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	000c      	movs	r4, r1
 8000fda:	1af7      	subs	r7, r6, r3
 8000fdc:	e6bf      	b.n	8000d5e <__aeabi_fsub+0x5e>
 8000fde:	0030      	movs	r0, r6
 8000fe0:	4460      	add	r0, ip
 8000fe2:	2501      	movs	r5, #1
 8000fe4:	0143      	lsls	r3, r0, #5
 8000fe6:	d400      	bmi.n	8000fea <__aeabi_fsub+0x2ea>
 8000fe8:	e76c      	b.n	8000ec4 <__aeabi_fsub+0x1c4>
 8000fea:	2502      	movs	r5, #2
 8000fec:	e6f2      	b.n	8000dd4 <__aeabi_fsub+0xd4>
 8000fee:	4663      	mov	r3, ip
 8000ff0:	2501      	movs	r5, #1
 8000ff2:	1b98      	subs	r0, r3, r6
 8000ff4:	e6ae      	b.n	8000d54 <__aeabi_fsub+0x54>
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	4664      	mov	r4, ip
 8000ffa:	4660      	mov	r0, ip
 8000ffc:	40fc      	lsrs	r4, r7
 8000ffe:	1bdf      	subs	r7, r3, r7
 8001000:	40b8      	lsls	r0, r7
 8001002:	1e43      	subs	r3, r0, #1
 8001004:	4198      	sbcs	r0, r3
 8001006:	4320      	orrs	r0, r4
 8001008:	e79f      	b.n	8000f4a <__aeabi_fsub+0x24a>
 800100a:	0005      	movs	r5, r0
 800100c:	e75e      	b.n	8000ecc <__aeabi_fsub+0x1cc>
 800100e:	464b      	mov	r3, r9
 8001010:	e771      	b.n	8000ef6 <__aeabi_fsub+0x1f6>
 8001012:	2320      	movs	r3, #32
 8001014:	4665      	mov	r5, ip
 8001016:	4660      	mov	r0, ip
 8001018:	40cd      	lsrs	r5, r1
 800101a:	1a59      	subs	r1, r3, r1
 800101c:	4088      	lsls	r0, r1
 800101e:	1e43      	subs	r3, r0, #1
 8001020:	4198      	sbcs	r0, r3
 8001022:	4328      	orrs	r0, r5
 8001024:	e71c      	b.n	8000e60 <__aeabi_fsub+0x160>
 8001026:	4663      	mov	r3, ip
 8001028:	000c      	movs	r4, r1
 800102a:	2501      	movs	r5, #1
 800102c:	1af0      	subs	r0, r6, r3
 800102e:	e691      	b.n	8000d54 <__aeabi_fsub+0x54>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d095      	beq.n	8000f60 <__aeabi_fsub+0x260>
 8001034:	000c      	movs	r4, r1
 8001036:	464f      	mov	r7, r9
 8001038:	2200      	movs	r2, #0
 800103a:	e6ac      	b.n	8000d96 <__aeabi_fsub+0x96>
 800103c:	464b      	mov	r3, r9
 800103e:	000d      	movs	r5, r1
 8001040:	e744      	b.n	8000ecc <__aeabi_fsub+0x1cc>
 8001042:	464f      	mov	r7, r9
 8001044:	2200      	movs	r2, #0
 8001046:	e6a6      	b.n	8000d96 <__aeabi_fsub+0x96>
 8001048:	fbffffff 	.word	0xfbffffff
 800104c:	7dffffff 	.word	0x7dffffff
 8001050:	2800      	cmp	r0, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_fsub+0x356>
 8001054:	e736      	b.n	8000ec4 <__aeabi_fsub+0x1c4>
 8001056:	2400      	movs	r4, #0
 8001058:	2700      	movs	r7, #0
 800105a:	e69c      	b.n	8000d96 <__aeabi_fsub+0x96>

0800105c <__aeabi_f2iz>:
 800105c:	0241      	lsls	r1, r0, #9
 800105e:	0042      	lsls	r2, r0, #1
 8001060:	0fc3      	lsrs	r3, r0, #31
 8001062:	0a49      	lsrs	r1, r1, #9
 8001064:	2000      	movs	r0, #0
 8001066:	0e12      	lsrs	r2, r2, #24
 8001068:	2a7e      	cmp	r2, #126	; 0x7e
 800106a:	dd03      	ble.n	8001074 <__aeabi_f2iz+0x18>
 800106c:	2a9d      	cmp	r2, #157	; 0x9d
 800106e:	dd02      	ble.n	8001076 <__aeabi_f2iz+0x1a>
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <__aeabi_f2iz+0x3c>)
 8001072:	1898      	adds	r0, r3, r2
 8001074:	4770      	bx	lr
 8001076:	2080      	movs	r0, #128	; 0x80
 8001078:	0400      	lsls	r0, r0, #16
 800107a:	4301      	orrs	r1, r0
 800107c:	2a95      	cmp	r2, #149	; 0x95
 800107e:	dc07      	bgt.n	8001090 <__aeabi_f2iz+0x34>
 8001080:	2096      	movs	r0, #150	; 0x96
 8001082:	1a82      	subs	r2, r0, r2
 8001084:	40d1      	lsrs	r1, r2
 8001086:	4248      	negs	r0, r1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f3      	bne.n	8001074 <__aeabi_f2iz+0x18>
 800108c:	0008      	movs	r0, r1
 800108e:	e7f1      	b.n	8001074 <__aeabi_f2iz+0x18>
 8001090:	3a96      	subs	r2, #150	; 0x96
 8001092:	4091      	lsls	r1, r2
 8001094:	e7f7      	b.n	8001086 <__aeabi_f2iz+0x2a>
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	7fffffff 	.word	0x7fffffff

0800109c <__aeabi_i2f>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	2800      	cmp	r0, #0
 80010a0:	d013      	beq.n	80010ca <__aeabi_i2f+0x2e>
 80010a2:	17c3      	asrs	r3, r0, #31
 80010a4:	18c6      	adds	r6, r0, r3
 80010a6:	405e      	eors	r6, r3
 80010a8:	0fc4      	lsrs	r4, r0, #31
 80010aa:	0030      	movs	r0, r6
 80010ac:	f001 feb6 	bl	8002e1c <__clzsi2>
 80010b0:	239e      	movs	r3, #158	; 0x9e
 80010b2:	0005      	movs	r5, r0
 80010b4:	1a1b      	subs	r3, r3, r0
 80010b6:	2b96      	cmp	r3, #150	; 0x96
 80010b8:	dc0f      	bgt.n	80010da <__aeabi_i2f+0x3e>
 80010ba:	2808      	cmp	r0, #8
 80010bc:	dd01      	ble.n	80010c2 <__aeabi_i2f+0x26>
 80010be:	3d08      	subs	r5, #8
 80010c0:	40ae      	lsls	r6, r5
 80010c2:	0276      	lsls	r6, r6, #9
 80010c4:	0a76      	lsrs	r6, r6, #9
 80010c6:	b2d8      	uxtb	r0, r3
 80010c8:	e002      	b.n	80010d0 <__aeabi_i2f+0x34>
 80010ca:	2400      	movs	r4, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	2600      	movs	r6, #0
 80010d0:	05c0      	lsls	r0, r0, #23
 80010d2:	4330      	orrs	r0, r6
 80010d4:	07e4      	lsls	r4, r4, #31
 80010d6:	4320      	orrs	r0, r4
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010da:	2b99      	cmp	r3, #153	; 0x99
 80010dc:	dd0c      	ble.n	80010f8 <__aeabi_i2f+0x5c>
 80010de:	2205      	movs	r2, #5
 80010e0:	0031      	movs	r1, r6
 80010e2:	1a12      	subs	r2, r2, r0
 80010e4:	40d1      	lsrs	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	0001      	movs	r1, r0
 80010ea:	0030      	movs	r0, r6
 80010ec:	311b      	adds	r1, #27
 80010ee:	4088      	lsls	r0, r1
 80010f0:	1e41      	subs	r1, r0, #1
 80010f2:	4188      	sbcs	r0, r1
 80010f4:	4302      	orrs	r2, r0
 80010f6:	0016      	movs	r6, r2
 80010f8:	2d05      	cmp	r5, #5
 80010fa:	dc12      	bgt.n	8001122 <__aeabi_i2f+0x86>
 80010fc:	0031      	movs	r1, r6
 80010fe:	4f0d      	ldr	r7, [pc, #52]	; (8001134 <__aeabi_i2f+0x98>)
 8001100:	4039      	ands	r1, r7
 8001102:	0772      	lsls	r2, r6, #29
 8001104:	d009      	beq.n	800111a <__aeabi_i2f+0x7e>
 8001106:	200f      	movs	r0, #15
 8001108:	4030      	ands	r0, r6
 800110a:	2804      	cmp	r0, #4
 800110c:	d005      	beq.n	800111a <__aeabi_i2f+0x7e>
 800110e:	3104      	adds	r1, #4
 8001110:	014a      	lsls	r2, r1, #5
 8001112:	d502      	bpl.n	800111a <__aeabi_i2f+0x7e>
 8001114:	239f      	movs	r3, #159	; 0x9f
 8001116:	4039      	ands	r1, r7
 8001118:	1b5b      	subs	r3, r3, r5
 800111a:	0189      	lsls	r1, r1, #6
 800111c:	0a4e      	lsrs	r6, r1, #9
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	e7d6      	b.n	80010d0 <__aeabi_i2f+0x34>
 8001122:	1f6a      	subs	r2, r5, #5
 8001124:	4096      	lsls	r6, r2
 8001126:	0031      	movs	r1, r6
 8001128:	4f02      	ldr	r7, [pc, #8]	; (8001134 <__aeabi_i2f+0x98>)
 800112a:	4039      	ands	r1, r7
 800112c:	0772      	lsls	r2, r6, #29
 800112e:	d0f4      	beq.n	800111a <__aeabi_i2f+0x7e>
 8001130:	e7e9      	b.n	8001106 <__aeabi_i2f+0x6a>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	fbffffff 	.word	0xfbffffff

08001138 <__aeabi_dadd>:
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	464f      	mov	r7, r9
 800113c:	4646      	mov	r6, r8
 800113e:	46d6      	mov	lr, sl
 8001140:	000d      	movs	r5, r1
 8001142:	0004      	movs	r4, r0
 8001144:	b5c0      	push	{r6, r7, lr}
 8001146:	001f      	movs	r7, r3
 8001148:	0011      	movs	r1, r2
 800114a:	0328      	lsls	r0, r5, #12
 800114c:	0f62      	lsrs	r2, r4, #29
 800114e:	0a40      	lsrs	r0, r0, #9
 8001150:	4310      	orrs	r0, r2
 8001152:	007a      	lsls	r2, r7, #1
 8001154:	0d52      	lsrs	r2, r2, #21
 8001156:	00e3      	lsls	r3, r4, #3
 8001158:	033c      	lsls	r4, r7, #12
 800115a:	4691      	mov	r9, r2
 800115c:	0a64      	lsrs	r4, r4, #9
 800115e:	0ffa      	lsrs	r2, r7, #31
 8001160:	0f4f      	lsrs	r7, r1, #29
 8001162:	006e      	lsls	r6, r5, #1
 8001164:	4327      	orrs	r7, r4
 8001166:	4692      	mov	sl, r2
 8001168:	46b8      	mov	r8, r7
 800116a:	0d76      	lsrs	r6, r6, #21
 800116c:	0fed      	lsrs	r5, r5, #31
 800116e:	00c9      	lsls	r1, r1, #3
 8001170:	4295      	cmp	r5, r2
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x3e>
 8001174:	e099      	b.n	80012aa <__aeabi_dadd+0x172>
 8001176:	464c      	mov	r4, r9
 8001178:	1b34      	subs	r4, r6, r4
 800117a:	46a4      	mov	ip, r4
 800117c:	2c00      	cmp	r4, #0
 800117e:	dc00      	bgt.n	8001182 <__aeabi_dadd+0x4a>
 8001180:	e07c      	b.n	800127c <__aeabi_dadd+0x144>
 8001182:	464a      	mov	r2, r9
 8001184:	2a00      	cmp	r2, #0
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x52>
 8001188:	e0b8      	b.n	80012fc <__aeabi_dadd+0x1c4>
 800118a:	4ac5      	ldr	r2, [pc, #788]	; (80014a0 <__aeabi_dadd+0x368>)
 800118c:	4296      	cmp	r6, r2
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x5a>
 8001190:	e11c      	b.n	80013cc <__aeabi_dadd+0x294>
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	003c      	movs	r4, r7
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	4314      	orrs	r4, r2
 800119a:	46a0      	mov	r8, r4
 800119c:	4662      	mov	r2, ip
 800119e:	2a38      	cmp	r2, #56	; 0x38
 80011a0:	dd00      	ble.n	80011a4 <__aeabi_dadd+0x6c>
 80011a2:	e161      	b.n	8001468 <__aeabi_dadd+0x330>
 80011a4:	2a1f      	cmp	r2, #31
 80011a6:	dd00      	ble.n	80011aa <__aeabi_dadd+0x72>
 80011a8:	e1cc      	b.n	8001544 <__aeabi_dadd+0x40c>
 80011aa:	4664      	mov	r4, ip
 80011ac:	2220      	movs	r2, #32
 80011ae:	1b12      	subs	r2, r2, r4
 80011b0:	4644      	mov	r4, r8
 80011b2:	4094      	lsls	r4, r2
 80011b4:	000f      	movs	r7, r1
 80011b6:	46a1      	mov	r9, r4
 80011b8:	4664      	mov	r4, ip
 80011ba:	4091      	lsls	r1, r2
 80011bc:	40e7      	lsrs	r7, r4
 80011be:	464c      	mov	r4, r9
 80011c0:	1e4a      	subs	r2, r1, #1
 80011c2:	4191      	sbcs	r1, r2
 80011c4:	433c      	orrs	r4, r7
 80011c6:	4642      	mov	r2, r8
 80011c8:	4321      	orrs	r1, r4
 80011ca:	4664      	mov	r4, ip
 80011cc:	40e2      	lsrs	r2, r4
 80011ce:	1a80      	subs	r0, r0, r2
 80011d0:	1a5c      	subs	r4, r3, r1
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	419b      	sbcs	r3, r3
 80011d6:	425f      	negs	r7, r3
 80011d8:	1bc7      	subs	r7, r0, r7
 80011da:	023b      	lsls	r3, r7, #8
 80011dc:	d400      	bmi.n	80011e0 <__aeabi_dadd+0xa8>
 80011de:	e0d0      	b.n	8001382 <__aeabi_dadd+0x24a>
 80011e0:	027f      	lsls	r7, r7, #9
 80011e2:	0a7f      	lsrs	r7, r7, #9
 80011e4:	2f00      	cmp	r7, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0xb2>
 80011e8:	e0ff      	b.n	80013ea <__aeabi_dadd+0x2b2>
 80011ea:	0038      	movs	r0, r7
 80011ec:	f001 fe16 	bl	8002e1c <__clzsi2>
 80011f0:	0001      	movs	r1, r0
 80011f2:	3908      	subs	r1, #8
 80011f4:	2320      	movs	r3, #32
 80011f6:	0022      	movs	r2, r4
 80011f8:	1a5b      	subs	r3, r3, r1
 80011fa:	408f      	lsls	r7, r1
 80011fc:	40da      	lsrs	r2, r3
 80011fe:	408c      	lsls	r4, r1
 8001200:	4317      	orrs	r7, r2
 8001202:	42b1      	cmp	r1, r6
 8001204:	da00      	bge.n	8001208 <__aeabi_dadd+0xd0>
 8001206:	e0ff      	b.n	8001408 <__aeabi_dadd+0x2d0>
 8001208:	1b89      	subs	r1, r1, r6
 800120a:	1c4b      	adds	r3, r1, #1
 800120c:	2b1f      	cmp	r3, #31
 800120e:	dd00      	ble.n	8001212 <__aeabi_dadd+0xda>
 8001210:	e0a8      	b.n	8001364 <__aeabi_dadd+0x22c>
 8001212:	2220      	movs	r2, #32
 8001214:	0039      	movs	r1, r7
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0020      	movs	r0, r4
 800121a:	4094      	lsls	r4, r2
 800121c:	4091      	lsls	r1, r2
 800121e:	40d8      	lsrs	r0, r3
 8001220:	1e62      	subs	r2, r4, #1
 8001222:	4194      	sbcs	r4, r2
 8001224:	40df      	lsrs	r7, r3
 8001226:	2600      	movs	r6, #0
 8001228:	4301      	orrs	r1, r0
 800122a:	430c      	orrs	r4, r1
 800122c:	0763      	lsls	r3, r4, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_dadd+0x10c>
 8001230:	230f      	movs	r3, #15
 8001232:	4023      	ands	r3, r4
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_dadd+0x10c>
 8001238:	1d23      	adds	r3, r4, #4
 800123a:	42a3      	cmp	r3, r4
 800123c:	41a4      	sbcs	r4, r4
 800123e:	4264      	negs	r4, r4
 8001240:	193f      	adds	r7, r7, r4
 8001242:	001c      	movs	r4, r3
 8001244:	023b      	lsls	r3, r7, #8
 8001246:	d400      	bmi.n	800124a <__aeabi_dadd+0x112>
 8001248:	e09e      	b.n	8001388 <__aeabi_dadd+0x250>
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <__aeabi_dadd+0x368>)
 800124c:	3601      	adds	r6, #1
 800124e:	429e      	cmp	r6, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x11c>
 8001252:	e0b7      	b.n	80013c4 <__aeabi_dadd+0x28c>
 8001254:	4a93      	ldr	r2, [pc, #588]	; (80014a4 <__aeabi_dadd+0x36c>)
 8001256:	08e4      	lsrs	r4, r4, #3
 8001258:	4017      	ands	r7, r2
 800125a:	077b      	lsls	r3, r7, #29
 800125c:	0571      	lsls	r1, r6, #21
 800125e:	027f      	lsls	r7, r7, #9
 8001260:	4323      	orrs	r3, r4
 8001262:	0b3f      	lsrs	r7, r7, #12
 8001264:	0d4a      	lsrs	r2, r1, #21
 8001266:	0512      	lsls	r2, r2, #20
 8001268:	433a      	orrs	r2, r7
 800126a:	07ed      	lsls	r5, r5, #31
 800126c:	432a      	orrs	r2, r5
 800126e:	0018      	movs	r0, r3
 8001270:	0011      	movs	r1, r2
 8001272:	bce0      	pop	{r5, r6, r7}
 8001274:	46ba      	mov	sl, r7
 8001276:	46b1      	mov	r9, r6
 8001278:	46a8      	mov	r8, r5
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	2c00      	cmp	r4, #0
 800127e:	d04b      	beq.n	8001318 <__aeabi_dadd+0x1e0>
 8001280:	464c      	mov	r4, r9
 8001282:	1ba4      	subs	r4, r4, r6
 8001284:	46a4      	mov	ip, r4
 8001286:	2e00      	cmp	r6, #0
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x154>
 800128a:	e123      	b.n	80014d4 <__aeabi_dadd+0x39c>
 800128c:	0004      	movs	r4, r0
 800128e:	431c      	orrs	r4, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x15c>
 8001292:	e1af      	b.n	80015f4 <__aeabi_dadd+0x4bc>
 8001294:	4662      	mov	r2, ip
 8001296:	1e54      	subs	r4, r2, #1
 8001298:	2a01      	cmp	r2, #1
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x166>
 800129c:	e215      	b.n	80016ca <__aeabi_dadd+0x592>
 800129e:	4d80      	ldr	r5, [pc, #512]	; (80014a0 <__aeabi_dadd+0x368>)
 80012a0:	45ac      	cmp	ip, r5
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x16e>
 80012a4:	e1c8      	b.n	8001638 <__aeabi_dadd+0x500>
 80012a6:	46a4      	mov	ip, r4
 80012a8:	e11b      	b.n	80014e2 <__aeabi_dadd+0x3aa>
 80012aa:	464a      	mov	r2, r9
 80012ac:	1ab2      	subs	r2, r6, r2
 80012ae:	4694      	mov	ip, r2
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	dc00      	bgt.n	80012b6 <__aeabi_dadd+0x17e>
 80012b4:	e0ac      	b.n	8001410 <__aeabi_dadd+0x2d8>
 80012b6:	464a      	mov	r2, r9
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d043      	beq.n	8001344 <__aeabi_dadd+0x20c>
 80012bc:	4a78      	ldr	r2, [pc, #480]	; (80014a0 <__aeabi_dadd+0x368>)
 80012be:	4296      	cmp	r6, r2
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x18c>
 80012c2:	e1af      	b.n	8001624 <__aeabi_dadd+0x4ec>
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	003c      	movs	r4, r7
 80012c8:	0412      	lsls	r2, r2, #16
 80012ca:	4314      	orrs	r4, r2
 80012cc:	46a0      	mov	r8, r4
 80012ce:	4662      	mov	r2, ip
 80012d0:	2a38      	cmp	r2, #56	; 0x38
 80012d2:	dc67      	bgt.n	80013a4 <__aeabi_dadd+0x26c>
 80012d4:	2a1f      	cmp	r2, #31
 80012d6:	dc00      	bgt.n	80012da <__aeabi_dadd+0x1a2>
 80012d8:	e15f      	b.n	800159a <__aeabi_dadd+0x462>
 80012da:	4647      	mov	r7, r8
 80012dc:	3a20      	subs	r2, #32
 80012de:	40d7      	lsrs	r7, r2
 80012e0:	4662      	mov	r2, ip
 80012e2:	2a20      	cmp	r2, #32
 80012e4:	d005      	beq.n	80012f2 <__aeabi_dadd+0x1ba>
 80012e6:	4664      	mov	r4, ip
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	1b12      	subs	r2, r2, r4
 80012ec:	4644      	mov	r4, r8
 80012ee:	4094      	lsls	r4, r2
 80012f0:	4321      	orrs	r1, r4
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	4191      	sbcs	r1, r2
 80012f6:	000c      	movs	r4, r1
 80012f8:	433c      	orrs	r4, r7
 80012fa:	e057      	b.n	80013ac <__aeabi_dadd+0x274>
 80012fc:	003a      	movs	r2, r7
 80012fe:	430a      	orrs	r2, r1
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x1cc>
 8001302:	e105      	b.n	8001510 <__aeabi_dadd+0x3d8>
 8001304:	0022      	movs	r2, r4
 8001306:	3a01      	subs	r2, #1
 8001308:	2c01      	cmp	r4, #1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x1d6>
 800130c:	e182      	b.n	8001614 <__aeabi_dadd+0x4dc>
 800130e:	4c64      	ldr	r4, [pc, #400]	; (80014a0 <__aeabi_dadd+0x368>)
 8001310:	45a4      	cmp	ip, r4
 8001312:	d05b      	beq.n	80013cc <__aeabi_dadd+0x294>
 8001314:	4694      	mov	ip, r2
 8001316:	e741      	b.n	800119c <__aeabi_dadd+0x64>
 8001318:	4c63      	ldr	r4, [pc, #396]	; (80014a8 <__aeabi_dadd+0x370>)
 800131a:	1c77      	adds	r7, r6, #1
 800131c:	4227      	tst	r7, r4
 800131e:	d000      	beq.n	8001322 <__aeabi_dadd+0x1ea>
 8001320:	e0c4      	b.n	80014ac <__aeabi_dadd+0x374>
 8001322:	0004      	movs	r4, r0
 8001324:	431c      	orrs	r4, r3
 8001326:	2e00      	cmp	r6, #0
 8001328:	d000      	beq.n	800132c <__aeabi_dadd+0x1f4>
 800132a:	e169      	b.n	8001600 <__aeabi_dadd+0x4c8>
 800132c:	2c00      	cmp	r4, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x1fa>
 8001330:	e1bf      	b.n	80016b2 <__aeabi_dadd+0x57a>
 8001332:	4644      	mov	r4, r8
 8001334:	430c      	orrs	r4, r1
 8001336:	d000      	beq.n	800133a <__aeabi_dadd+0x202>
 8001338:	e1d0      	b.n	80016dc <__aeabi_dadd+0x5a4>
 800133a:	0742      	lsls	r2, r0, #29
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	4313      	orrs	r3, r2
 8001340:	08c0      	lsrs	r0, r0, #3
 8001342:	e029      	b.n	8001398 <__aeabi_dadd+0x260>
 8001344:	003a      	movs	r2, r7
 8001346:	430a      	orrs	r2, r1
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x214>
 800134a:	e170      	b.n	800162e <__aeabi_dadd+0x4f6>
 800134c:	4662      	mov	r2, ip
 800134e:	4664      	mov	r4, ip
 8001350:	3a01      	subs	r2, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x220>
 8001356:	e0e0      	b.n	800151a <__aeabi_dadd+0x3e2>
 8001358:	4c51      	ldr	r4, [pc, #324]	; (80014a0 <__aeabi_dadd+0x368>)
 800135a:	45a4      	cmp	ip, r4
 800135c:	d100      	bne.n	8001360 <__aeabi_dadd+0x228>
 800135e:	e161      	b.n	8001624 <__aeabi_dadd+0x4ec>
 8001360:	4694      	mov	ip, r2
 8001362:	e7b4      	b.n	80012ce <__aeabi_dadd+0x196>
 8001364:	003a      	movs	r2, r7
 8001366:	391f      	subs	r1, #31
 8001368:	40ca      	lsrs	r2, r1
 800136a:	0011      	movs	r1, r2
 800136c:	2b20      	cmp	r3, #32
 800136e:	d003      	beq.n	8001378 <__aeabi_dadd+0x240>
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	409f      	lsls	r7, r3
 8001376:	433c      	orrs	r4, r7
 8001378:	1e63      	subs	r3, r4, #1
 800137a:	419c      	sbcs	r4, r3
 800137c:	2700      	movs	r7, #0
 800137e:	2600      	movs	r6, #0
 8001380:	430c      	orrs	r4, r1
 8001382:	0763      	lsls	r3, r4, #29
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x250>
 8001386:	e753      	b.n	8001230 <__aeabi_dadd+0xf8>
 8001388:	46b4      	mov	ip, r6
 800138a:	08e4      	lsrs	r4, r4, #3
 800138c:	077b      	lsls	r3, r7, #29
 800138e:	4323      	orrs	r3, r4
 8001390:	08f8      	lsrs	r0, r7, #3
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <__aeabi_dadd+0x368>)
 8001394:	4594      	cmp	ip, r2
 8001396:	d01d      	beq.n	80013d4 <__aeabi_dadd+0x29c>
 8001398:	4662      	mov	r2, ip
 800139a:	0307      	lsls	r7, r0, #12
 800139c:	0552      	lsls	r2, r2, #21
 800139e:	0b3f      	lsrs	r7, r7, #12
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	e760      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013a4:	4644      	mov	r4, r8
 80013a6:	430c      	orrs	r4, r1
 80013a8:	1e62      	subs	r2, r4, #1
 80013aa:	4194      	sbcs	r4, r2
 80013ac:	18e4      	adds	r4, r4, r3
 80013ae:	429c      	cmp	r4, r3
 80013b0:	419b      	sbcs	r3, r3
 80013b2:	425f      	negs	r7, r3
 80013b4:	183f      	adds	r7, r7, r0
 80013b6:	023b      	lsls	r3, r7, #8
 80013b8:	d5e3      	bpl.n	8001382 <__aeabi_dadd+0x24a>
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <__aeabi_dadd+0x368>)
 80013bc:	3601      	adds	r6, #1
 80013be:	429e      	cmp	r6, r3
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dadd+0x28c>
 80013c2:	e0b5      	b.n	8001530 <__aeabi_dadd+0x3f8>
 80013c4:	0032      	movs	r2, r6
 80013c6:	2700      	movs	r7, #0
 80013c8:	2300      	movs	r3, #0
 80013ca:	e74c      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013cc:	0742      	lsls	r2, r0, #29
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c0      	lsrs	r0, r0, #3
 80013d4:	001a      	movs	r2, r3
 80013d6:	4302      	orrs	r2, r0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x2a4>
 80013da:	e1e1      	b.n	80017a0 <__aeabi_dadd+0x668>
 80013dc:	2780      	movs	r7, #128	; 0x80
 80013de:	033f      	lsls	r7, r7, #12
 80013e0:	4307      	orrs	r7, r0
 80013e2:	033f      	lsls	r7, r7, #12
 80013e4:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <__aeabi_dadd+0x368>)
 80013e6:	0b3f      	lsrs	r7, r7, #12
 80013e8:	e73d      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013ea:	0020      	movs	r0, r4
 80013ec:	f001 fd16 	bl	8002e1c <__clzsi2>
 80013f0:	0001      	movs	r1, r0
 80013f2:	3118      	adds	r1, #24
 80013f4:	291f      	cmp	r1, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x2c2>
 80013f8:	e6fc      	b.n	80011f4 <__aeabi_dadd+0xbc>
 80013fa:	3808      	subs	r0, #8
 80013fc:	4084      	lsls	r4, r0
 80013fe:	0027      	movs	r7, r4
 8001400:	2400      	movs	r4, #0
 8001402:	42b1      	cmp	r1, r6
 8001404:	db00      	blt.n	8001408 <__aeabi_dadd+0x2d0>
 8001406:	e6ff      	b.n	8001208 <__aeabi_dadd+0xd0>
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <__aeabi_dadd+0x36c>)
 800140a:	1a76      	subs	r6, r6, r1
 800140c:	4017      	ands	r7, r2
 800140e:	e70d      	b.n	800122c <__aeabi_dadd+0xf4>
 8001410:	2a00      	cmp	r2, #0
 8001412:	d02f      	beq.n	8001474 <__aeabi_dadd+0x33c>
 8001414:	464a      	mov	r2, r9
 8001416:	1b92      	subs	r2, r2, r6
 8001418:	4694      	mov	ip, r2
 800141a:	2e00      	cmp	r6, #0
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x2e8>
 800141e:	e0ad      	b.n	800157c <__aeabi_dadd+0x444>
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <__aeabi_dadd+0x368>)
 8001422:	4591      	cmp	r9, r2
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x2f0>
 8001426:	e10f      	b.n	8001648 <__aeabi_dadd+0x510>
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0412      	lsls	r2, r2, #16
 800142c:	4310      	orrs	r0, r2
 800142e:	4662      	mov	r2, ip
 8001430:	2a38      	cmp	r2, #56	; 0x38
 8001432:	dd00      	ble.n	8001436 <__aeabi_dadd+0x2fe>
 8001434:	e10f      	b.n	8001656 <__aeabi_dadd+0x51e>
 8001436:	2a1f      	cmp	r2, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x304>
 800143a:	e180      	b.n	800173e <__aeabi_dadd+0x606>
 800143c:	4664      	mov	r4, ip
 800143e:	2220      	movs	r2, #32
 8001440:	001e      	movs	r6, r3
 8001442:	1b12      	subs	r2, r2, r4
 8001444:	4667      	mov	r7, ip
 8001446:	0004      	movs	r4, r0
 8001448:	4093      	lsls	r3, r2
 800144a:	4094      	lsls	r4, r2
 800144c:	40fe      	lsrs	r6, r7
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	4193      	sbcs	r3, r2
 8001452:	40f8      	lsrs	r0, r7
 8001454:	4334      	orrs	r4, r6
 8001456:	431c      	orrs	r4, r3
 8001458:	4480      	add	r8, r0
 800145a:	1864      	adds	r4, r4, r1
 800145c:	428c      	cmp	r4, r1
 800145e:	41bf      	sbcs	r7, r7
 8001460:	427f      	negs	r7, r7
 8001462:	464e      	mov	r6, r9
 8001464:	4447      	add	r7, r8
 8001466:	e7a6      	b.n	80013b6 <__aeabi_dadd+0x27e>
 8001468:	4642      	mov	r2, r8
 800146a:	430a      	orrs	r2, r1
 800146c:	0011      	movs	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	e6ad      	b.n	80011d0 <__aeabi_dadd+0x98>
 8001474:	4c0c      	ldr	r4, [pc, #48]	; (80014a8 <__aeabi_dadd+0x370>)
 8001476:	1c72      	adds	r2, r6, #1
 8001478:	4222      	tst	r2, r4
 800147a:	d000      	beq.n	800147e <__aeabi_dadd+0x346>
 800147c:	e0a1      	b.n	80015c2 <__aeabi_dadd+0x48a>
 800147e:	0002      	movs	r2, r0
 8001480:	431a      	orrs	r2, r3
 8001482:	2e00      	cmp	r6, #0
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x350>
 8001486:	e0fa      	b.n	800167e <__aeabi_dadd+0x546>
 8001488:	2a00      	cmp	r2, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x356>
 800148c:	e145      	b.n	800171a <__aeabi_dadd+0x5e2>
 800148e:	003a      	movs	r2, r7
 8001490:	430a      	orrs	r2, r1
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x35e>
 8001494:	e146      	b.n	8001724 <__aeabi_dadd+0x5ec>
 8001496:	0742      	lsls	r2, r0, #29
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	4313      	orrs	r3, r2
 800149c:	08c0      	lsrs	r0, r0, #3
 800149e:	e77b      	b.n	8001398 <__aeabi_dadd+0x260>
 80014a0:	000007ff 	.word	0x000007ff
 80014a4:	ff7fffff 	.word	0xff7fffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	4647      	mov	r7, r8
 80014ae:	1a5c      	subs	r4, r3, r1
 80014b0:	1bc2      	subs	r2, r0, r7
 80014b2:	42a3      	cmp	r3, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	427f      	negs	r7, r7
 80014b8:	46b9      	mov	r9, r7
 80014ba:	0017      	movs	r7, r2
 80014bc:	464a      	mov	r2, r9
 80014be:	1abf      	subs	r7, r7, r2
 80014c0:	023a      	lsls	r2, r7, #8
 80014c2:	d500      	bpl.n	80014c6 <__aeabi_dadd+0x38e>
 80014c4:	e08d      	b.n	80015e2 <__aeabi_dadd+0x4aa>
 80014c6:	0023      	movs	r3, r4
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x396>
 80014cc:	e68a      	b.n	80011e4 <__aeabi_dadd+0xac>
 80014ce:	2000      	movs	r0, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	e761      	b.n	8001398 <__aeabi_dadd+0x260>
 80014d4:	4cb4      	ldr	r4, [pc, #720]	; (80017a8 <__aeabi_dadd+0x670>)
 80014d6:	45a1      	cmp	r9, r4
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x3a4>
 80014da:	e0ad      	b.n	8001638 <__aeabi_dadd+0x500>
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	0424      	lsls	r4, r4, #16
 80014e0:	4320      	orrs	r0, r4
 80014e2:	4664      	mov	r4, ip
 80014e4:	2c38      	cmp	r4, #56	; 0x38
 80014e6:	dc3d      	bgt.n	8001564 <__aeabi_dadd+0x42c>
 80014e8:	4662      	mov	r2, ip
 80014ea:	2c1f      	cmp	r4, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x3b8>
 80014ee:	e0b7      	b.n	8001660 <__aeabi_dadd+0x528>
 80014f0:	2520      	movs	r5, #32
 80014f2:	001e      	movs	r6, r3
 80014f4:	1b2d      	subs	r5, r5, r4
 80014f6:	0004      	movs	r4, r0
 80014f8:	40ab      	lsls	r3, r5
 80014fa:	40ac      	lsls	r4, r5
 80014fc:	40d6      	lsrs	r6, r2
 80014fe:	40d0      	lsrs	r0, r2
 8001500:	4642      	mov	r2, r8
 8001502:	1e5d      	subs	r5, r3, #1
 8001504:	41ab      	sbcs	r3, r5
 8001506:	4334      	orrs	r4, r6
 8001508:	1a12      	subs	r2, r2, r0
 800150a:	4690      	mov	r8, r2
 800150c:	4323      	orrs	r3, r4
 800150e:	e02c      	b.n	800156a <__aeabi_dadd+0x432>
 8001510:	0742      	lsls	r2, r0, #29
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	4313      	orrs	r3, r2
 8001516:	08c0      	lsrs	r0, r0, #3
 8001518:	e73b      	b.n	8001392 <__aeabi_dadd+0x25a>
 800151a:	185c      	adds	r4, r3, r1
 800151c:	429c      	cmp	r4, r3
 800151e:	419b      	sbcs	r3, r3
 8001520:	4440      	add	r0, r8
 8001522:	425b      	negs	r3, r3
 8001524:	18c7      	adds	r7, r0, r3
 8001526:	2601      	movs	r6, #1
 8001528:	023b      	lsls	r3, r7, #8
 800152a:	d400      	bmi.n	800152e <__aeabi_dadd+0x3f6>
 800152c:	e729      	b.n	8001382 <__aeabi_dadd+0x24a>
 800152e:	2602      	movs	r6, #2
 8001530:	4a9e      	ldr	r2, [pc, #632]	; (80017ac <__aeabi_dadd+0x674>)
 8001532:	0863      	lsrs	r3, r4, #1
 8001534:	4017      	ands	r7, r2
 8001536:	2201      	movs	r2, #1
 8001538:	4014      	ands	r4, r2
 800153a:	431c      	orrs	r4, r3
 800153c:	07fb      	lsls	r3, r7, #31
 800153e:	431c      	orrs	r4, r3
 8001540:	087f      	lsrs	r7, r7, #1
 8001542:	e673      	b.n	800122c <__aeabi_dadd+0xf4>
 8001544:	4644      	mov	r4, r8
 8001546:	3a20      	subs	r2, #32
 8001548:	40d4      	lsrs	r4, r2
 800154a:	4662      	mov	r2, ip
 800154c:	2a20      	cmp	r2, #32
 800154e:	d005      	beq.n	800155c <__aeabi_dadd+0x424>
 8001550:	4667      	mov	r7, ip
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	1bd2      	subs	r2, r2, r7
 8001556:	4647      	mov	r7, r8
 8001558:	4097      	lsls	r7, r2
 800155a:	4339      	orrs	r1, r7
 800155c:	1e4a      	subs	r2, r1, #1
 800155e:	4191      	sbcs	r1, r2
 8001560:	4321      	orrs	r1, r4
 8001562:	e635      	b.n	80011d0 <__aeabi_dadd+0x98>
 8001564:	4303      	orrs	r3, r0
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	4183      	sbcs	r3, r0
 800156a:	1acc      	subs	r4, r1, r3
 800156c:	42a1      	cmp	r1, r4
 800156e:	41bf      	sbcs	r7, r7
 8001570:	4643      	mov	r3, r8
 8001572:	427f      	negs	r7, r7
 8001574:	4655      	mov	r5, sl
 8001576:	464e      	mov	r6, r9
 8001578:	1bdf      	subs	r7, r3, r7
 800157a:	e62e      	b.n	80011da <__aeabi_dadd+0xa2>
 800157c:	0002      	movs	r2, r0
 800157e:	431a      	orrs	r2, r3
 8001580:	d100      	bne.n	8001584 <__aeabi_dadd+0x44c>
 8001582:	e0bd      	b.n	8001700 <__aeabi_dadd+0x5c8>
 8001584:	4662      	mov	r2, ip
 8001586:	4664      	mov	r4, ip
 8001588:	3a01      	subs	r2, #1
 800158a:	2c01      	cmp	r4, #1
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x458>
 800158e:	e0e5      	b.n	800175c <__aeabi_dadd+0x624>
 8001590:	4c85      	ldr	r4, [pc, #532]	; (80017a8 <__aeabi_dadd+0x670>)
 8001592:	45a4      	cmp	ip, r4
 8001594:	d058      	beq.n	8001648 <__aeabi_dadd+0x510>
 8001596:	4694      	mov	ip, r2
 8001598:	e749      	b.n	800142e <__aeabi_dadd+0x2f6>
 800159a:	4664      	mov	r4, ip
 800159c:	2220      	movs	r2, #32
 800159e:	1b12      	subs	r2, r2, r4
 80015a0:	4644      	mov	r4, r8
 80015a2:	4094      	lsls	r4, r2
 80015a4:	000f      	movs	r7, r1
 80015a6:	46a1      	mov	r9, r4
 80015a8:	4664      	mov	r4, ip
 80015aa:	4091      	lsls	r1, r2
 80015ac:	40e7      	lsrs	r7, r4
 80015ae:	464c      	mov	r4, r9
 80015b0:	1e4a      	subs	r2, r1, #1
 80015b2:	4191      	sbcs	r1, r2
 80015b4:	433c      	orrs	r4, r7
 80015b6:	4642      	mov	r2, r8
 80015b8:	430c      	orrs	r4, r1
 80015ba:	4661      	mov	r1, ip
 80015bc:	40ca      	lsrs	r2, r1
 80015be:	1880      	adds	r0, r0, r2
 80015c0:	e6f4      	b.n	80013ac <__aeabi_dadd+0x274>
 80015c2:	4c79      	ldr	r4, [pc, #484]	; (80017a8 <__aeabi_dadd+0x670>)
 80015c4:	42a2      	cmp	r2, r4
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x492>
 80015c8:	e6fd      	b.n	80013c6 <__aeabi_dadd+0x28e>
 80015ca:	1859      	adds	r1, r3, r1
 80015cc:	4299      	cmp	r1, r3
 80015ce:	419b      	sbcs	r3, r3
 80015d0:	4440      	add	r0, r8
 80015d2:	425f      	negs	r7, r3
 80015d4:	19c7      	adds	r7, r0, r7
 80015d6:	07fc      	lsls	r4, r7, #31
 80015d8:	0849      	lsrs	r1, r1, #1
 80015da:	0016      	movs	r6, r2
 80015dc:	430c      	orrs	r4, r1
 80015de:	087f      	lsrs	r7, r7, #1
 80015e0:	e6cf      	b.n	8001382 <__aeabi_dadd+0x24a>
 80015e2:	1acc      	subs	r4, r1, r3
 80015e4:	42a1      	cmp	r1, r4
 80015e6:	41bf      	sbcs	r7, r7
 80015e8:	4643      	mov	r3, r8
 80015ea:	427f      	negs	r7, r7
 80015ec:	1a18      	subs	r0, r3, r0
 80015ee:	4655      	mov	r5, sl
 80015f0:	1bc7      	subs	r7, r0, r7
 80015f2:	e5f7      	b.n	80011e4 <__aeabi_dadd+0xac>
 80015f4:	08c9      	lsrs	r1, r1, #3
 80015f6:	077b      	lsls	r3, r7, #29
 80015f8:	4655      	mov	r5, sl
 80015fa:	430b      	orrs	r3, r1
 80015fc:	08f8      	lsrs	r0, r7, #3
 80015fe:	e6c8      	b.n	8001392 <__aeabi_dadd+0x25a>
 8001600:	2c00      	cmp	r4, #0
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x4ce>
 8001604:	e081      	b.n	800170a <__aeabi_dadd+0x5d2>
 8001606:	4643      	mov	r3, r8
 8001608:	430b      	orrs	r3, r1
 800160a:	d115      	bne.n	8001638 <__aeabi_dadd+0x500>
 800160c:	2080      	movs	r0, #128	; 0x80
 800160e:	2500      	movs	r5, #0
 8001610:	0300      	lsls	r0, r0, #12
 8001612:	e6e3      	b.n	80013dc <__aeabi_dadd+0x2a4>
 8001614:	1a5c      	subs	r4, r3, r1
 8001616:	42a3      	cmp	r3, r4
 8001618:	419b      	sbcs	r3, r3
 800161a:	1bc7      	subs	r7, r0, r7
 800161c:	425b      	negs	r3, r3
 800161e:	2601      	movs	r6, #1
 8001620:	1aff      	subs	r7, r7, r3
 8001622:	e5da      	b.n	80011da <__aeabi_dadd+0xa2>
 8001624:	0742      	lsls	r2, r0, #29
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	4313      	orrs	r3, r2
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	e6d2      	b.n	80013d4 <__aeabi_dadd+0x29c>
 800162e:	0742      	lsls	r2, r0, #29
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	4313      	orrs	r3, r2
 8001634:	08c0      	lsrs	r0, r0, #3
 8001636:	e6ac      	b.n	8001392 <__aeabi_dadd+0x25a>
 8001638:	4643      	mov	r3, r8
 800163a:	4642      	mov	r2, r8
 800163c:	08c9      	lsrs	r1, r1, #3
 800163e:	075b      	lsls	r3, r3, #29
 8001640:	4655      	mov	r5, sl
 8001642:	430b      	orrs	r3, r1
 8001644:	08d0      	lsrs	r0, r2, #3
 8001646:	e6c5      	b.n	80013d4 <__aeabi_dadd+0x29c>
 8001648:	4643      	mov	r3, r8
 800164a:	4642      	mov	r2, r8
 800164c:	075b      	lsls	r3, r3, #29
 800164e:	08c9      	lsrs	r1, r1, #3
 8001650:	430b      	orrs	r3, r1
 8001652:	08d0      	lsrs	r0, r2, #3
 8001654:	e6be      	b.n	80013d4 <__aeabi_dadd+0x29c>
 8001656:	4303      	orrs	r3, r0
 8001658:	001c      	movs	r4, r3
 800165a:	1e63      	subs	r3, r4, #1
 800165c:	419c      	sbcs	r4, r3
 800165e:	e6fc      	b.n	800145a <__aeabi_dadd+0x322>
 8001660:	0002      	movs	r2, r0
 8001662:	3c20      	subs	r4, #32
 8001664:	40e2      	lsrs	r2, r4
 8001666:	0014      	movs	r4, r2
 8001668:	4662      	mov	r2, ip
 800166a:	2a20      	cmp	r2, #32
 800166c:	d003      	beq.n	8001676 <__aeabi_dadd+0x53e>
 800166e:	2540      	movs	r5, #64	; 0x40
 8001670:	1aad      	subs	r5, r5, r2
 8001672:	40a8      	lsls	r0, r5
 8001674:	4303      	orrs	r3, r0
 8001676:	1e58      	subs	r0, r3, #1
 8001678:	4183      	sbcs	r3, r0
 800167a:	4323      	orrs	r3, r4
 800167c:	e775      	b.n	800156a <__aeabi_dadd+0x432>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d0e2      	beq.n	8001648 <__aeabi_dadd+0x510>
 8001682:	003a      	movs	r2, r7
 8001684:	430a      	orrs	r2, r1
 8001686:	d0cd      	beq.n	8001624 <__aeabi_dadd+0x4ec>
 8001688:	0742      	lsls	r2, r0, #29
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	08c0      	lsrs	r0, r0, #3
 8001692:	0312      	lsls	r2, r2, #12
 8001694:	4210      	tst	r0, r2
 8001696:	d006      	beq.n	80016a6 <__aeabi_dadd+0x56e>
 8001698:	08fc      	lsrs	r4, r7, #3
 800169a:	4214      	tst	r4, r2
 800169c:	d103      	bne.n	80016a6 <__aeabi_dadd+0x56e>
 800169e:	0020      	movs	r0, r4
 80016a0:	08cb      	lsrs	r3, r1, #3
 80016a2:	077a      	lsls	r2, r7, #29
 80016a4:	4313      	orrs	r3, r2
 80016a6:	0f5a      	lsrs	r2, r3, #29
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	0752      	lsls	r2, r2, #29
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	e690      	b.n	80013d4 <__aeabi_dadd+0x29c>
 80016b2:	4643      	mov	r3, r8
 80016b4:	430b      	orrs	r3, r1
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x582>
 80016b8:	e709      	b.n	80014ce <__aeabi_dadd+0x396>
 80016ba:	4643      	mov	r3, r8
 80016bc:	4642      	mov	r2, r8
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	075b      	lsls	r3, r3, #29
 80016c2:	4655      	mov	r5, sl
 80016c4:	430b      	orrs	r3, r1
 80016c6:	08d0      	lsrs	r0, r2, #3
 80016c8:	e666      	b.n	8001398 <__aeabi_dadd+0x260>
 80016ca:	1acc      	subs	r4, r1, r3
 80016cc:	42a1      	cmp	r1, r4
 80016ce:	4189      	sbcs	r1, r1
 80016d0:	1a3f      	subs	r7, r7, r0
 80016d2:	4249      	negs	r1, r1
 80016d4:	4655      	mov	r5, sl
 80016d6:	2601      	movs	r6, #1
 80016d8:	1a7f      	subs	r7, r7, r1
 80016da:	e57e      	b.n	80011da <__aeabi_dadd+0xa2>
 80016dc:	4642      	mov	r2, r8
 80016de:	1a5c      	subs	r4, r3, r1
 80016e0:	1a87      	subs	r7, r0, r2
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	4192      	sbcs	r2, r2
 80016e6:	4252      	negs	r2, r2
 80016e8:	1abf      	subs	r7, r7, r2
 80016ea:	023a      	lsls	r2, r7, #8
 80016ec:	d53d      	bpl.n	800176a <__aeabi_dadd+0x632>
 80016ee:	1acc      	subs	r4, r1, r3
 80016f0:	42a1      	cmp	r1, r4
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	4643      	mov	r3, r8
 80016f6:	4249      	negs	r1, r1
 80016f8:	1a1f      	subs	r7, r3, r0
 80016fa:	4655      	mov	r5, sl
 80016fc:	1a7f      	subs	r7, r7, r1
 80016fe:	e595      	b.n	800122c <__aeabi_dadd+0xf4>
 8001700:	077b      	lsls	r3, r7, #29
 8001702:	08c9      	lsrs	r1, r1, #3
 8001704:	430b      	orrs	r3, r1
 8001706:	08f8      	lsrs	r0, r7, #3
 8001708:	e643      	b.n	8001392 <__aeabi_dadd+0x25a>
 800170a:	4644      	mov	r4, r8
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	430c      	orrs	r4, r1
 8001710:	d130      	bne.n	8001774 <__aeabi_dadd+0x63c>
 8001712:	0742      	lsls	r2, r0, #29
 8001714:	4313      	orrs	r3, r2
 8001716:	08c0      	lsrs	r0, r0, #3
 8001718:	e65c      	b.n	80013d4 <__aeabi_dadd+0x29c>
 800171a:	077b      	lsls	r3, r7, #29
 800171c:	08c9      	lsrs	r1, r1, #3
 800171e:	430b      	orrs	r3, r1
 8001720:	08f8      	lsrs	r0, r7, #3
 8001722:	e639      	b.n	8001398 <__aeabi_dadd+0x260>
 8001724:	185c      	adds	r4, r3, r1
 8001726:	429c      	cmp	r4, r3
 8001728:	419b      	sbcs	r3, r3
 800172a:	4440      	add	r0, r8
 800172c:	425b      	negs	r3, r3
 800172e:	18c7      	adds	r7, r0, r3
 8001730:	023b      	lsls	r3, r7, #8
 8001732:	d400      	bmi.n	8001736 <__aeabi_dadd+0x5fe>
 8001734:	e625      	b.n	8001382 <__aeabi_dadd+0x24a>
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <__aeabi_dadd+0x674>)
 8001738:	2601      	movs	r6, #1
 800173a:	401f      	ands	r7, r3
 800173c:	e621      	b.n	8001382 <__aeabi_dadd+0x24a>
 800173e:	0004      	movs	r4, r0
 8001740:	3a20      	subs	r2, #32
 8001742:	40d4      	lsrs	r4, r2
 8001744:	4662      	mov	r2, ip
 8001746:	2a20      	cmp	r2, #32
 8001748:	d004      	beq.n	8001754 <__aeabi_dadd+0x61c>
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	4666      	mov	r6, ip
 800174e:	1b92      	subs	r2, r2, r6
 8001750:	4090      	lsls	r0, r2
 8001752:	4303      	orrs	r3, r0
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	4193      	sbcs	r3, r2
 8001758:	431c      	orrs	r4, r3
 800175a:	e67e      	b.n	800145a <__aeabi_dadd+0x322>
 800175c:	185c      	adds	r4, r3, r1
 800175e:	428c      	cmp	r4, r1
 8001760:	4189      	sbcs	r1, r1
 8001762:	4440      	add	r0, r8
 8001764:	4249      	negs	r1, r1
 8001766:	1847      	adds	r7, r0, r1
 8001768:	e6dd      	b.n	8001526 <__aeabi_dadd+0x3ee>
 800176a:	0023      	movs	r3, r4
 800176c:	433b      	orrs	r3, r7
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x63a>
 8001770:	e6ad      	b.n	80014ce <__aeabi_dadd+0x396>
 8001772:	e606      	b.n	8001382 <__aeabi_dadd+0x24a>
 8001774:	0744      	lsls	r4, r0, #29
 8001776:	4323      	orrs	r3, r4
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	08c0      	lsrs	r0, r0, #3
 800177c:	0324      	lsls	r4, r4, #12
 800177e:	4220      	tst	r0, r4
 8001780:	d008      	beq.n	8001794 <__aeabi_dadd+0x65c>
 8001782:	4642      	mov	r2, r8
 8001784:	08d6      	lsrs	r6, r2, #3
 8001786:	4226      	tst	r6, r4
 8001788:	d104      	bne.n	8001794 <__aeabi_dadd+0x65c>
 800178a:	4655      	mov	r5, sl
 800178c:	0030      	movs	r0, r6
 800178e:	08cb      	lsrs	r3, r1, #3
 8001790:	0751      	lsls	r1, r2, #29
 8001792:	430b      	orrs	r3, r1
 8001794:	0f5a      	lsrs	r2, r3, #29
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	0752      	lsls	r2, r2, #29
 800179c:	4313      	orrs	r3, r2
 800179e:	e619      	b.n	80013d4 <__aeabi_dadd+0x29c>
 80017a0:	2300      	movs	r3, #0
 80017a2:	4a01      	ldr	r2, [pc, #4]	; (80017a8 <__aeabi_dadd+0x670>)
 80017a4:	001f      	movs	r7, r3
 80017a6:	e55e      	b.n	8001266 <__aeabi_dadd+0x12e>
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	ff7fffff 	.word	0xff7fffff

080017b0 <__aeabi_ddiv>:
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	4657      	mov	r7, sl
 80017b4:	464e      	mov	r6, r9
 80017b6:	4645      	mov	r5, r8
 80017b8:	46de      	mov	lr, fp
 80017ba:	b5e0      	push	{r5, r6, r7, lr}
 80017bc:	4681      	mov	r9, r0
 80017be:	0005      	movs	r5, r0
 80017c0:	030c      	lsls	r4, r1, #12
 80017c2:	0048      	lsls	r0, r1, #1
 80017c4:	4692      	mov	sl, r2
 80017c6:	001f      	movs	r7, r3
 80017c8:	b085      	sub	sp, #20
 80017ca:	0b24      	lsrs	r4, r4, #12
 80017cc:	0d40      	lsrs	r0, r0, #21
 80017ce:	0fce      	lsrs	r6, r1, #31
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d100      	bne.n	80017d6 <__aeabi_ddiv+0x26>
 80017d4:	e156      	b.n	8001a84 <__aeabi_ddiv+0x2d4>
 80017d6:	4bd4      	ldr	r3, [pc, #848]	; (8001b28 <__aeabi_ddiv+0x378>)
 80017d8:	4298      	cmp	r0, r3
 80017da:	d100      	bne.n	80017de <__aeabi_ddiv+0x2e>
 80017dc:	e172      	b.n	8001ac4 <__aeabi_ddiv+0x314>
 80017de:	0f6b      	lsrs	r3, r5, #29
 80017e0:	00e4      	lsls	r4, r4, #3
 80017e2:	431c      	orrs	r4, r3
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	4323      	orrs	r3, r4
 80017ea:	4698      	mov	r8, r3
 80017ec:	4bcf      	ldr	r3, [pc, #828]	; (8001b2c <__aeabi_ddiv+0x37c>)
 80017ee:	00ed      	lsls	r5, r5, #3
 80017f0:	469b      	mov	fp, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	4699      	mov	r9, r3
 80017f6:	4483      	add	fp, r0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	033c      	lsls	r4, r7, #12
 80017fc:	007b      	lsls	r3, r7, #1
 80017fe:	4650      	mov	r0, sl
 8001800:	0b24      	lsrs	r4, r4, #12
 8001802:	0d5b      	lsrs	r3, r3, #21
 8001804:	0fff      	lsrs	r7, r7, #31
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <__aeabi_ddiv+0x5c>
 800180a:	e11f      	b.n	8001a4c <__aeabi_ddiv+0x29c>
 800180c:	4ac6      	ldr	r2, [pc, #792]	; (8001b28 <__aeabi_ddiv+0x378>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d100      	bne.n	8001814 <__aeabi_ddiv+0x64>
 8001812:	e162      	b.n	8001ada <__aeabi_ddiv+0x32a>
 8001814:	49c5      	ldr	r1, [pc, #788]	; (8001b2c <__aeabi_ddiv+0x37c>)
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	468c      	mov	ip, r1
 800181a:	00e4      	lsls	r4, r4, #3
 800181c:	4659      	mov	r1, fp
 800181e:	4314      	orrs	r4, r2
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	4463      	add	r3, ip
 8001824:	0412      	lsls	r2, r2, #16
 8001826:	1acb      	subs	r3, r1, r3
 8001828:	4314      	orrs	r4, r2
 800182a:	469b      	mov	fp, r3
 800182c:	00c2      	lsls	r2, r0, #3
 800182e:	2000      	movs	r0, #0
 8001830:	0033      	movs	r3, r6
 8001832:	407b      	eors	r3, r7
 8001834:	469a      	mov	sl, r3
 8001836:	464b      	mov	r3, r9
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d827      	bhi.n	800188c <__aeabi_ddiv+0xdc>
 800183c:	49bc      	ldr	r1, [pc, #752]	; (8001b30 <__aeabi_ddiv+0x380>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	58cb      	ldr	r3, [r1, r3]
 8001842:	469f      	mov	pc, r3
 8001844:	46b2      	mov	sl, r6
 8001846:	9b00      	ldr	r3, [sp, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d016      	beq.n	800187a <__aeabi_ddiv+0xca>
 800184c:	2b03      	cmp	r3, #3
 800184e:	d100      	bne.n	8001852 <__aeabi_ddiv+0xa2>
 8001850:	e28e      	b.n	8001d70 <__aeabi_ddiv+0x5c0>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d000      	beq.n	8001858 <__aeabi_ddiv+0xa8>
 8001856:	e0d9      	b.n	8001a0c <__aeabi_ddiv+0x25c>
 8001858:	2300      	movs	r3, #0
 800185a:	2400      	movs	r4, #0
 800185c:	2500      	movs	r5, #0
 800185e:	4652      	mov	r2, sl
 8001860:	051b      	lsls	r3, r3, #20
 8001862:	4323      	orrs	r3, r4
 8001864:	07d2      	lsls	r2, r2, #31
 8001866:	4313      	orrs	r3, r2
 8001868:	0028      	movs	r0, r5
 800186a:	0019      	movs	r1, r3
 800186c:	b005      	add	sp, #20
 800186e:	bcf0      	pop	{r4, r5, r6, r7}
 8001870:	46bb      	mov	fp, r7
 8001872:	46b2      	mov	sl, r6
 8001874:	46a9      	mov	r9, r5
 8001876:	46a0      	mov	r8, r4
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187a:	2400      	movs	r4, #0
 800187c:	2500      	movs	r5, #0
 800187e:	4baa      	ldr	r3, [pc, #680]	; (8001b28 <__aeabi_ddiv+0x378>)
 8001880:	e7ed      	b.n	800185e <__aeabi_ddiv+0xae>
 8001882:	46ba      	mov	sl, r7
 8001884:	46a0      	mov	r8, r4
 8001886:	0015      	movs	r5, r2
 8001888:	9000      	str	r0, [sp, #0]
 800188a:	e7dc      	b.n	8001846 <__aeabi_ddiv+0x96>
 800188c:	4544      	cmp	r4, r8
 800188e:	d200      	bcs.n	8001892 <__aeabi_ddiv+0xe2>
 8001890:	e1c7      	b.n	8001c22 <__aeabi_ddiv+0x472>
 8001892:	d100      	bne.n	8001896 <__aeabi_ddiv+0xe6>
 8001894:	e1c2      	b.n	8001c1c <__aeabi_ddiv+0x46c>
 8001896:	2301      	movs	r3, #1
 8001898:	425b      	negs	r3, r3
 800189a:	469c      	mov	ip, r3
 800189c:	002e      	movs	r6, r5
 800189e:	4640      	mov	r0, r8
 80018a0:	2500      	movs	r5, #0
 80018a2:	44e3      	add	fp, ip
 80018a4:	0223      	lsls	r3, r4, #8
 80018a6:	0e14      	lsrs	r4, r2, #24
 80018a8:	431c      	orrs	r4, r3
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	4699      	mov	r9, r3
 80018ae:	0423      	lsls	r3, r4, #16
 80018b0:	0c1f      	lsrs	r7, r3, #16
 80018b2:	0212      	lsls	r2, r2, #8
 80018b4:	4649      	mov	r1, r9
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	9701      	str	r7, [sp, #4]
 80018ba:	f7fe fca9 	bl	8000210 <__aeabi_uidivmod>
 80018be:	0002      	movs	r2, r0
 80018c0:	437a      	muls	r2, r7
 80018c2:	040b      	lsls	r3, r1, #16
 80018c4:	0c31      	lsrs	r1, r6, #16
 80018c6:	4680      	mov	r8, r0
 80018c8:	4319      	orrs	r1, r3
 80018ca:	428a      	cmp	r2, r1
 80018cc:	d907      	bls.n	80018de <__aeabi_ddiv+0x12e>
 80018ce:	2301      	movs	r3, #1
 80018d0:	425b      	negs	r3, r3
 80018d2:	469c      	mov	ip, r3
 80018d4:	1909      	adds	r1, r1, r4
 80018d6:	44e0      	add	r8, ip
 80018d8:	428c      	cmp	r4, r1
 80018da:	d800      	bhi.n	80018de <__aeabi_ddiv+0x12e>
 80018dc:	e207      	b.n	8001cee <__aeabi_ddiv+0x53e>
 80018de:	1a88      	subs	r0, r1, r2
 80018e0:	4649      	mov	r1, r9
 80018e2:	f7fe fc95 	bl	8000210 <__aeabi_uidivmod>
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	468c      	mov	ip, r1
 80018ea:	0431      	lsls	r1, r6, #16
 80018ec:	4666      	mov	r6, ip
 80018ee:	9a01      	ldr	r2, [sp, #4]
 80018f0:	0c09      	lsrs	r1, r1, #16
 80018f2:	4342      	muls	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	4331      	orrs	r1, r6
 80018f8:	428a      	cmp	r2, r1
 80018fa:	d904      	bls.n	8001906 <__aeabi_ddiv+0x156>
 80018fc:	1909      	adds	r1, r1, r4
 80018fe:	3b01      	subs	r3, #1
 8001900:	428c      	cmp	r4, r1
 8001902:	d800      	bhi.n	8001906 <__aeabi_ddiv+0x156>
 8001904:	e1ed      	b.n	8001ce2 <__aeabi_ddiv+0x532>
 8001906:	1a88      	subs	r0, r1, r2
 8001908:	4642      	mov	r2, r8
 800190a:	0412      	lsls	r2, r2, #16
 800190c:	431a      	orrs	r2, r3
 800190e:	4690      	mov	r8, r2
 8001910:	4641      	mov	r1, r8
 8001912:	9b00      	ldr	r3, [sp, #0]
 8001914:	040e      	lsls	r6, r1, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	001f      	movs	r7, r3
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	9b00      	ldr	r3, [sp, #0]
 800191e:	0c36      	lsrs	r6, r6, #16
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c19      	lsrs	r1, r3, #16
 8001924:	000b      	movs	r3, r1
 8001926:	4373      	muls	r3, r6
 8001928:	0c12      	lsrs	r2, r2, #16
 800192a:	437e      	muls	r6, r7
 800192c:	9103      	str	r1, [sp, #12]
 800192e:	4351      	muls	r1, r2
 8001930:	437a      	muls	r2, r7
 8001932:	0c1f      	lsrs	r7, r3, #16
 8001934:	46bc      	mov	ip, r7
 8001936:	1876      	adds	r6, r6, r1
 8001938:	4466      	add	r6, ip
 800193a:	42b1      	cmp	r1, r6
 800193c:	d903      	bls.n	8001946 <__aeabi_ddiv+0x196>
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0249      	lsls	r1, r1, #9
 8001942:	468c      	mov	ip, r1
 8001944:	4462      	add	r2, ip
 8001946:	0c31      	lsrs	r1, r6, #16
 8001948:	188a      	adds	r2, r1, r2
 800194a:	0431      	lsls	r1, r6, #16
 800194c:	041e      	lsls	r6, r3, #16
 800194e:	0c36      	lsrs	r6, r6, #16
 8001950:	198e      	adds	r6, r1, r6
 8001952:	4290      	cmp	r0, r2
 8001954:	d302      	bcc.n	800195c <__aeabi_ddiv+0x1ac>
 8001956:	d112      	bne.n	800197e <__aeabi_ddiv+0x1ce>
 8001958:	42b5      	cmp	r5, r6
 800195a:	d210      	bcs.n	800197e <__aeabi_ddiv+0x1ce>
 800195c:	4643      	mov	r3, r8
 800195e:	1e59      	subs	r1, r3, #1
 8001960:	9b00      	ldr	r3, [sp, #0]
 8001962:	469c      	mov	ip, r3
 8001964:	4465      	add	r5, ip
 8001966:	001f      	movs	r7, r3
 8001968:	429d      	cmp	r5, r3
 800196a:	419b      	sbcs	r3, r3
 800196c:	425b      	negs	r3, r3
 800196e:	191b      	adds	r3, r3, r4
 8001970:	18c0      	adds	r0, r0, r3
 8001972:	4284      	cmp	r4, r0
 8001974:	d200      	bcs.n	8001978 <__aeabi_ddiv+0x1c8>
 8001976:	e1a0      	b.n	8001cba <__aeabi_ddiv+0x50a>
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x1cc>
 800197a:	e19b      	b.n	8001cb4 <__aeabi_ddiv+0x504>
 800197c:	4688      	mov	r8, r1
 800197e:	1bae      	subs	r6, r5, r6
 8001980:	42b5      	cmp	r5, r6
 8001982:	41ad      	sbcs	r5, r5
 8001984:	1a80      	subs	r0, r0, r2
 8001986:	426d      	negs	r5, r5
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	4284      	cmp	r4, r0
 800198c:	d100      	bne.n	8001990 <__aeabi_ddiv+0x1e0>
 800198e:	e1d5      	b.n	8001d3c <__aeabi_ddiv+0x58c>
 8001990:	4649      	mov	r1, r9
 8001992:	f7fe fc3d 	bl	8000210 <__aeabi_uidivmod>
 8001996:	9a01      	ldr	r2, [sp, #4]
 8001998:	040b      	lsls	r3, r1, #16
 800199a:	4342      	muls	r2, r0
 800199c:	0c31      	lsrs	r1, r6, #16
 800199e:	0005      	movs	r5, r0
 80019a0:	4319      	orrs	r1, r3
 80019a2:	428a      	cmp	r2, r1
 80019a4:	d900      	bls.n	80019a8 <__aeabi_ddiv+0x1f8>
 80019a6:	e16c      	b.n	8001c82 <__aeabi_ddiv+0x4d2>
 80019a8:	1a88      	subs	r0, r1, r2
 80019aa:	4649      	mov	r1, r9
 80019ac:	f7fe fc30 	bl	8000210 <__aeabi_uidivmod>
 80019b0:	9a01      	ldr	r2, [sp, #4]
 80019b2:	0436      	lsls	r6, r6, #16
 80019b4:	4342      	muls	r2, r0
 80019b6:	0409      	lsls	r1, r1, #16
 80019b8:	0c36      	lsrs	r6, r6, #16
 80019ba:	0003      	movs	r3, r0
 80019bc:	430e      	orrs	r6, r1
 80019be:	42b2      	cmp	r2, r6
 80019c0:	d900      	bls.n	80019c4 <__aeabi_ddiv+0x214>
 80019c2:	e153      	b.n	8001c6c <__aeabi_ddiv+0x4bc>
 80019c4:	9803      	ldr	r0, [sp, #12]
 80019c6:	1ab6      	subs	r6, r6, r2
 80019c8:	0002      	movs	r2, r0
 80019ca:	042d      	lsls	r5, r5, #16
 80019cc:	431d      	orrs	r5, r3
 80019ce:	9f02      	ldr	r7, [sp, #8]
 80019d0:	042b      	lsls	r3, r5, #16
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	435a      	muls	r2, r3
 80019d6:	437b      	muls	r3, r7
 80019d8:	469c      	mov	ip, r3
 80019da:	0c29      	lsrs	r1, r5, #16
 80019dc:	4348      	muls	r0, r1
 80019de:	0c13      	lsrs	r3, r2, #16
 80019e0:	4484      	add	ip, r0
 80019e2:	4463      	add	r3, ip
 80019e4:	4379      	muls	r1, r7
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d903      	bls.n	80019f2 <__aeabi_ddiv+0x242>
 80019ea:	2080      	movs	r0, #128	; 0x80
 80019ec:	0240      	lsls	r0, r0, #9
 80019ee:	4684      	mov	ip, r0
 80019f0:	4461      	add	r1, ip
 80019f2:	0c18      	lsrs	r0, r3, #16
 80019f4:	0412      	lsls	r2, r2, #16
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	0c12      	lsrs	r2, r2, #16
 80019fa:	1841      	adds	r1, r0, r1
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	428e      	cmp	r6, r1
 8001a00:	d200      	bcs.n	8001a04 <__aeabi_ddiv+0x254>
 8001a02:	e0ff      	b.n	8001c04 <__aeabi_ddiv+0x454>
 8001a04:	d100      	bne.n	8001a08 <__aeabi_ddiv+0x258>
 8001a06:	e0fa      	b.n	8001bfe <__aeabi_ddiv+0x44e>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	431d      	orrs	r5, r3
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <__aeabi_ddiv+0x384>)
 8001a0e:	445a      	add	r2, fp
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	dc00      	bgt.n	8001a16 <__aeabi_ddiv+0x266>
 8001a14:	e0aa      	b.n	8001b6c <__aeabi_ddiv+0x3bc>
 8001a16:	076b      	lsls	r3, r5, #29
 8001a18:	d000      	beq.n	8001a1c <__aeabi_ddiv+0x26c>
 8001a1a:	e13d      	b.n	8001c98 <__aeabi_ddiv+0x4e8>
 8001a1c:	08ed      	lsrs	r5, r5, #3
 8001a1e:	4643      	mov	r3, r8
 8001a20:	01db      	lsls	r3, r3, #7
 8001a22:	d506      	bpl.n	8001a32 <__aeabi_ddiv+0x282>
 8001a24:	4642      	mov	r2, r8
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <__aeabi_ddiv+0x388>)
 8001a28:	401a      	ands	r2, r3
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	445a      	add	r2, fp
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <__aeabi_ddiv+0x38c>)
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dd00      	ble.n	8001a3a <__aeabi_ddiv+0x28a>
 8001a38:	e71f      	b.n	800187a <__aeabi_ddiv+0xca>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	431d      	orrs	r5, r3
 8001a40:	4643      	mov	r3, r8
 8001a42:	0552      	lsls	r2, r2, #21
 8001a44:	025c      	lsls	r4, r3, #9
 8001a46:	0b24      	lsrs	r4, r4, #12
 8001a48:	0d53      	lsrs	r3, r2, #21
 8001a4a:	e708      	b.n	800185e <__aeabi_ddiv+0xae>
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	4322      	orrs	r2, r4
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x2a4>
 8001a52:	e07b      	b.n	8001b4c <__aeabi_ddiv+0x39c>
 8001a54:	2c00      	cmp	r4, #0
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x2aa>
 8001a58:	e0fa      	b.n	8001c50 <__aeabi_ddiv+0x4a0>
 8001a5a:	0020      	movs	r0, r4
 8001a5c:	f001 f9de 	bl	8002e1c <__clzsi2>
 8001a60:	0002      	movs	r2, r0
 8001a62:	3a0b      	subs	r2, #11
 8001a64:	231d      	movs	r3, #29
 8001a66:	0001      	movs	r1, r0
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	3908      	subs	r1, #8
 8001a6e:	40da      	lsrs	r2, r3
 8001a70:	408c      	lsls	r4, r1
 8001a72:	4314      	orrs	r4, r2
 8001a74:	4652      	mov	r2, sl
 8001a76:	408a      	lsls	r2, r1
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <__aeabi_ddiv+0x390>)
 8001a7a:	4458      	add	r0, fp
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	4483      	add	fp, r0
 8001a80:	2000      	movs	r0, #0
 8001a82:	e6d5      	b.n	8001830 <__aeabi_ddiv+0x80>
 8001a84:	464b      	mov	r3, r9
 8001a86:	4323      	orrs	r3, r4
 8001a88:	4698      	mov	r8, r3
 8001a8a:	d044      	beq.n	8001b16 <__aeabi_ddiv+0x366>
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x2e2>
 8001a90:	e0ce      	b.n	8001c30 <__aeabi_ddiv+0x480>
 8001a92:	0020      	movs	r0, r4
 8001a94:	f001 f9c2 	bl	8002e1c <__clzsi2>
 8001a98:	0001      	movs	r1, r0
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	390b      	subs	r1, #11
 8001a9e:	231d      	movs	r3, #29
 8001aa0:	1a5b      	subs	r3, r3, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	40d9      	lsrs	r1, r3
 8001aa8:	3808      	subs	r0, #8
 8001aaa:	4084      	lsls	r4, r0
 8001aac:	000b      	movs	r3, r1
 8001aae:	464d      	mov	r5, r9
 8001ab0:	4323      	orrs	r3, r4
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	4085      	lsls	r5, r0
 8001ab6:	4823      	ldr	r0, [pc, #140]	; (8001b44 <__aeabi_ddiv+0x394>)
 8001ab8:	1a83      	subs	r3, r0, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	4699      	mov	r9, r3
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	e69a      	b.n	80017fa <__aeabi_ddiv+0x4a>
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	4698      	mov	r8, r3
 8001aca:	d11d      	bne.n	8001b08 <__aeabi_ddiv+0x358>
 8001acc:	2308      	movs	r3, #8
 8001ace:	4699      	mov	r9, r3
 8001ad0:	3b06      	subs	r3, #6
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	4683      	mov	fp, r0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	e68f      	b.n	80017fa <__aeabi_ddiv+0x4a>
 8001ada:	4652      	mov	r2, sl
 8001adc:	4322      	orrs	r2, r4
 8001ade:	d109      	bne.n	8001af4 <__aeabi_ddiv+0x344>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	4319      	orrs	r1, r3
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <__aeabi_ddiv+0x398>)
 8001ae8:	4689      	mov	r9, r1
 8001aea:	469c      	mov	ip, r3
 8001aec:	2400      	movs	r4, #0
 8001aee:	2002      	movs	r0, #2
 8001af0:	44e3      	add	fp, ip
 8001af2:	e69d      	b.n	8001830 <__aeabi_ddiv+0x80>
 8001af4:	2303      	movs	r3, #3
 8001af6:	464a      	mov	r2, r9
 8001af8:	431a      	orrs	r2, r3
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <__aeabi_ddiv+0x398>)
 8001afc:	4691      	mov	r9, r2
 8001afe:	469c      	mov	ip, r3
 8001b00:	4652      	mov	r2, sl
 8001b02:	2003      	movs	r0, #3
 8001b04:	44e3      	add	fp, ip
 8001b06:	e693      	b.n	8001830 <__aeabi_ddiv+0x80>
 8001b08:	230c      	movs	r3, #12
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	3b09      	subs	r3, #9
 8001b0e:	46a0      	mov	r8, r4
 8001b10:	4683      	mov	fp, r0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	e671      	b.n	80017fa <__aeabi_ddiv+0x4a>
 8001b16:	2304      	movs	r3, #4
 8001b18:	4699      	mov	r9, r3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2500      	movs	r5, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	e669      	b.n	80017fa <__aeabi_ddiv+0x4a>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	fffffc01 	.word	0xfffffc01
 8001b30:	0800bbb8 	.word	0x0800bbb8
 8001b34:	000003ff 	.word	0x000003ff
 8001b38:	feffffff 	.word	0xfeffffff
 8001b3c:	000007fe 	.word	0x000007fe
 8001b40:	000003f3 	.word	0x000003f3
 8001b44:	fffffc0d 	.word	0xfffffc0d
 8001b48:	fffff801 	.word	0xfffff801
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4319      	orrs	r1, r3
 8001b52:	4689      	mov	r9, r1
 8001b54:	2400      	movs	r4, #0
 8001b56:	2001      	movs	r0, #1
 8001b58:	e66a      	b.n	8001830 <__aeabi_ddiv+0x80>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2480      	movs	r4, #128	; 0x80
 8001b5e:	469a      	mov	sl, r3
 8001b60:	2500      	movs	r5, #0
 8001b62:	4b8a      	ldr	r3, [pc, #552]	; (8001d8c <__aeabi_ddiv+0x5dc>)
 8001b64:	0324      	lsls	r4, r4, #12
 8001b66:	e67a      	b.n	800185e <__aeabi_ddiv+0xae>
 8001b68:	2501      	movs	r5, #1
 8001b6a:	426d      	negs	r5, r5
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	2b38      	cmp	r3, #56	; 0x38
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_ddiv+0x3c6>
 8001b74:	e670      	b.n	8001858 <__aeabi_ddiv+0xa8>
 8001b76:	2b1f      	cmp	r3, #31
 8001b78:	dc00      	bgt.n	8001b7c <__aeabi_ddiv+0x3cc>
 8001b7a:	e0bf      	b.n	8001cfc <__aeabi_ddiv+0x54c>
 8001b7c:	211f      	movs	r1, #31
 8001b7e:	4249      	negs	r1, r1
 8001b80:	1a8a      	subs	r2, r1, r2
 8001b82:	4641      	mov	r1, r8
 8001b84:	40d1      	lsrs	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d004      	beq.n	8001b96 <__aeabi_ddiv+0x3e6>
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <__aeabi_ddiv+0x5e0>)
 8001b90:	445b      	add	r3, fp
 8001b92:	4099      	lsls	r1, r3
 8001b94:	430d      	orrs	r5, r1
 8001b96:	1e6b      	subs	r3, r5, #1
 8001b98:	419d      	sbcs	r5, r3
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	432a      	orrs	r2, r5
 8001b9e:	001d      	movs	r5, r3
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	4015      	ands	r5, r2
 8001ba4:	4213      	tst	r3, r2
 8001ba6:	d100      	bne.n	8001baa <__aeabi_ddiv+0x3fa>
 8001ba8:	e0d4      	b.n	8001d54 <__aeabi_ddiv+0x5a4>
 8001baa:	210f      	movs	r1, #15
 8001bac:	2300      	movs	r3, #0
 8001bae:	4011      	ands	r1, r2
 8001bb0:	2904      	cmp	r1, #4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0x406>
 8001bb4:	e0cb      	b.n	8001d4e <__aeabi_ddiv+0x59e>
 8001bb6:	1d11      	adds	r1, r2, #4
 8001bb8:	4291      	cmp	r1, r2
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	189b      	adds	r3, r3, r2
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	0219      	lsls	r1, r3, #8
 8001bc4:	d400      	bmi.n	8001bc8 <__aeabi_ddiv+0x418>
 8001bc6:	e0c2      	b.n	8001d4e <__aeabi_ddiv+0x59e>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	2400      	movs	r4, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e646      	b.n	800185e <__aeabi_ddiv+0xae>
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	4641      	mov	r1, r8
 8001bd4:	031b      	lsls	r3, r3, #12
 8001bd6:	4219      	tst	r1, r3
 8001bd8:	d008      	beq.n	8001bec <__aeabi_ddiv+0x43c>
 8001bda:	421c      	tst	r4, r3
 8001bdc:	d106      	bne.n	8001bec <__aeabi_ddiv+0x43c>
 8001bde:	431c      	orrs	r4, r3
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	46ba      	mov	sl, r7
 8001be4:	0015      	movs	r5, r2
 8001be6:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <__aeabi_ddiv+0x5dc>)
 8001be8:	0b24      	lsrs	r4, r4, #12
 8001bea:	e638      	b.n	800185e <__aeabi_ddiv+0xae>
 8001bec:	2480      	movs	r4, #128	; 0x80
 8001bee:	4643      	mov	r3, r8
 8001bf0:	0324      	lsls	r4, r4, #12
 8001bf2:	431c      	orrs	r4, r3
 8001bf4:	0324      	lsls	r4, r4, #12
 8001bf6:	46b2      	mov	sl, r6
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <__aeabi_ddiv+0x5dc>)
 8001bfa:	0b24      	lsrs	r4, r4, #12
 8001bfc:	e62f      	b.n	800185e <__aeabi_ddiv+0xae>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x454>
 8001c02:	e703      	b.n	8001a0c <__aeabi_ddiv+0x25c>
 8001c04:	19a6      	adds	r6, r4, r6
 8001c06:	1e68      	subs	r0, r5, #1
 8001c08:	42a6      	cmp	r6, r4
 8001c0a:	d200      	bcs.n	8001c0e <__aeabi_ddiv+0x45e>
 8001c0c:	e08d      	b.n	8001d2a <__aeabi_ddiv+0x57a>
 8001c0e:	428e      	cmp	r6, r1
 8001c10:	d200      	bcs.n	8001c14 <__aeabi_ddiv+0x464>
 8001c12:	e0a3      	b.n	8001d5c <__aeabi_ddiv+0x5ac>
 8001c14:	d100      	bne.n	8001c18 <__aeabi_ddiv+0x468>
 8001c16:	e0b3      	b.n	8001d80 <__aeabi_ddiv+0x5d0>
 8001c18:	0005      	movs	r5, r0
 8001c1a:	e6f5      	b.n	8001a08 <__aeabi_ddiv+0x258>
 8001c1c:	42aa      	cmp	r2, r5
 8001c1e:	d900      	bls.n	8001c22 <__aeabi_ddiv+0x472>
 8001c20:	e639      	b.n	8001896 <__aeabi_ddiv+0xe6>
 8001c22:	4643      	mov	r3, r8
 8001c24:	07de      	lsls	r6, r3, #31
 8001c26:	0858      	lsrs	r0, r3, #1
 8001c28:	086b      	lsrs	r3, r5, #1
 8001c2a:	431e      	orrs	r6, r3
 8001c2c:	07ed      	lsls	r5, r5, #31
 8001c2e:	e639      	b.n	80018a4 <__aeabi_ddiv+0xf4>
 8001c30:	4648      	mov	r0, r9
 8001c32:	f001 f8f3 	bl	8002e1c <__clzsi2>
 8001c36:	0001      	movs	r1, r0
 8001c38:	0002      	movs	r2, r0
 8001c3a:	3115      	adds	r1, #21
 8001c3c:	3220      	adds	r2, #32
 8001c3e:	291c      	cmp	r1, #28
 8001c40:	dc00      	bgt.n	8001c44 <__aeabi_ddiv+0x494>
 8001c42:	e72c      	b.n	8001a9e <__aeabi_ddiv+0x2ee>
 8001c44:	464b      	mov	r3, r9
 8001c46:	3808      	subs	r0, #8
 8001c48:	4083      	lsls	r3, r0
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	e732      	b.n	8001ab6 <__aeabi_ddiv+0x306>
 8001c50:	f001 f8e4 	bl	8002e1c <__clzsi2>
 8001c54:	0003      	movs	r3, r0
 8001c56:	001a      	movs	r2, r3
 8001c58:	3215      	adds	r2, #21
 8001c5a:	3020      	adds	r0, #32
 8001c5c:	2a1c      	cmp	r2, #28
 8001c5e:	dc00      	bgt.n	8001c62 <__aeabi_ddiv+0x4b2>
 8001c60:	e700      	b.n	8001a64 <__aeabi_ddiv+0x2b4>
 8001c62:	4654      	mov	r4, sl
 8001c64:	3b08      	subs	r3, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	409c      	lsls	r4, r3
 8001c6a:	e705      	b.n	8001a78 <__aeabi_ddiv+0x2c8>
 8001c6c:	1936      	adds	r6, r6, r4
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	42b4      	cmp	r4, r6
 8001c72:	d900      	bls.n	8001c76 <__aeabi_ddiv+0x4c6>
 8001c74:	e6a6      	b.n	80019c4 <__aeabi_ddiv+0x214>
 8001c76:	42b2      	cmp	r2, r6
 8001c78:	d800      	bhi.n	8001c7c <__aeabi_ddiv+0x4cc>
 8001c7a:	e6a3      	b.n	80019c4 <__aeabi_ddiv+0x214>
 8001c7c:	1e83      	subs	r3, r0, #2
 8001c7e:	1936      	adds	r6, r6, r4
 8001c80:	e6a0      	b.n	80019c4 <__aeabi_ddiv+0x214>
 8001c82:	1909      	adds	r1, r1, r4
 8001c84:	3d01      	subs	r5, #1
 8001c86:	428c      	cmp	r4, r1
 8001c88:	d900      	bls.n	8001c8c <__aeabi_ddiv+0x4dc>
 8001c8a:	e68d      	b.n	80019a8 <__aeabi_ddiv+0x1f8>
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	d800      	bhi.n	8001c92 <__aeabi_ddiv+0x4e2>
 8001c90:	e68a      	b.n	80019a8 <__aeabi_ddiv+0x1f8>
 8001c92:	1e85      	subs	r5, r0, #2
 8001c94:	1909      	adds	r1, r1, r4
 8001c96:	e687      	b.n	80019a8 <__aeabi_ddiv+0x1f8>
 8001c98:	230f      	movs	r3, #15
 8001c9a:	402b      	ands	r3, r5
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_ddiv+0x4f2>
 8001ca0:	e6bc      	b.n	8001a1c <__aeabi_ddiv+0x26c>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	42ab      	cmp	r3, r5
 8001ca8:	419b      	sbcs	r3, r3
 8001caa:	3504      	adds	r5, #4
 8001cac:	425b      	negs	r3, r3
 8001cae:	08ed      	lsrs	r5, r5, #3
 8001cb0:	4498      	add	r8, r3
 8001cb2:	e6b4      	b.n	8001a1e <__aeabi_ddiv+0x26e>
 8001cb4:	42af      	cmp	r7, r5
 8001cb6:	d900      	bls.n	8001cba <__aeabi_ddiv+0x50a>
 8001cb8:	e660      	b.n	800197c <__aeabi_ddiv+0x1cc>
 8001cba:	4282      	cmp	r2, r0
 8001cbc:	d804      	bhi.n	8001cc8 <__aeabi_ddiv+0x518>
 8001cbe:	d000      	beq.n	8001cc2 <__aeabi_ddiv+0x512>
 8001cc0:	e65c      	b.n	800197c <__aeabi_ddiv+0x1cc>
 8001cc2:	42ae      	cmp	r6, r5
 8001cc4:	d800      	bhi.n	8001cc8 <__aeabi_ddiv+0x518>
 8001cc6:	e659      	b.n	800197c <__aeabi_ddiv+0x1cc>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	425b      	negs	r3, r3
 8001ccc:	469c      	mov	ip, r3
 8001cce:	9b00      	ldr	r3, [sp, #0]
 8001cd0:	44e0      	add	r8, ip
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	4465      	add	r5, ip
 8001cd6:	429d      	cmp	r5, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	425b      	negs	r3, r3
 8001cdc:	191b      	adds	r3, r3, r4
 8001cde:	18c0      	adds	r0, r0, r3
 8001ce0:	e64d      	b.n	800197e <__aeabi_ddiv+0x1ce>
 8001ce2:	428a      	cmp	r2, r1
 8001ce4:	d800      	bhi.n	8001ce8 <__aeabi_ddiv+0x538>
 8001ce6:	e60e      	b.n	8001906 <__aeabi_ddiv+0x156>
 8001ce8:	1e83      	subs	r3, r0, #2
 8001cea:	1909      	adds	r1, r1, r4
 8001cec:	e60b      	b.n	8001906 <__aeabi_ddiv+0x156>
 8001cee:	428a      	cmp	r2, r1
 8001cf0:	d800      	bhi.n	8001cf4 <__aeabi_ddiv+0x544>
 8001cf2:	e5f4      	b.n	80018de <__aeabi_ddiv+0x12e>
 8001cf4:	1e83      	subs	r3, r0, #2
 8001cf6:	4698      	mov	r8, r3
 8001cf8:	1909      	adds	r1, r1, r4
 8001cfa:	e5f0      	b.n	80018de <__aeabi_ddiv+0x12e>
 8001cfc:	4925      	ldr	r1, [pc, #148]	; (8001d94 <__aeabi_ddiv+0x5e4>)
 8001cfe:	0028      	movs	r0, r5
 8001d00:	4459      	add	r1, fp
 8001d02:	408d      	lsls	r5, r1
 8001d04:	4642      	mov	r2, r8
 8001d06:	408a      	lsls	r2, r1
 8001d08:	1e69      	subs	r1, r5, #1
 8001d0a:	418d      	sbcs	r5, r1
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	40d8      	lsrs	r0, r3
 8001d10:	40d9      	lsrs	r1, r3
 8001d12:	4302      	orrs	r2, r0
 8001d14:	432a      	orrs	r2, r5
 8001d16:	000b      	movs	r3, r1
 8001d18:	0751      	lsls	r1, r2, #29
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_ddiv+0x56e>
 8001d1c:	e751      	b.n	8001bc2 <__aeabi_ddiv+0x412>
 8001d1e:	210f      	movs	r1, #15
 8001d20:	4011      	ands	r1, r2
 8001d22:	2904      	cmp	r1, #4
 8001d24:	d000      	beq.n	8001d28 <__aeabi_ddiv+0x578>
 8001d26:	e746      	b.n	8001bb6 <__aeabi_ddiv+0x406>
 8001d28:	e74b      	b.n	8001bc2 <__aeabi_ddiv+0x412>
 8001d2a:	0005      	movs	r5, r0
 8001d2c:	428e      	cmp	r6, r1
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_ddiv+0x582>
 8001d30:	e66a      	b.n	8001a08 <__aeabi_ddiv+0x258>
 8001d32:	9a00      	ldr	r2, [sp, #0]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d000      	beq.n	8001d3a <__aeabi_ddiv+0x58a>
 8001d38:	e666      	b.n	8001a08 <__aeabi_ddiv+0x258>
 8001d3a:	e667      	b.n	8001a0c <__aeabi_ddiv+0x25c>
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <__aeabi_ddiv+0x5e8>)
 8001d3e:	445a      	add	r2, fp
 8001d40:	2a00      	cmp	r2, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_ddiv+0x596>
 8001d44:	e710      	b.n	8001b68 <__aeabi_ddiv+0x3b8>
 8001d46:	2301      	movs	r3, #1
 8001d48:	2500      	movs	r5, #0
 8001d4a:	4498      	add	r8, r3
 8001d4c:	e667      	b.n	8001a1e <__aeabi_ddiv+0x26e>
 8001d4e:	075d      	lsls	r5, r3, #29
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	0b1c      	lsrs	r4, r3, #12
 8001d54:	08d2      	lsrs	r2, r2, #3
 8001d56:	2300      	movs	r3, #0
 8001d58:	4315      	orrs	r5, r2
 8001d5a:	e580      	b.n	800185e <__aeabi_ddiv+0xae>
 8001d5c:	9800      	ldr	r0, [sp, #0]
 8001d5e:	3d02      	subs	r5, #2
 8001d60:	0042      	lsls	r2, r0, #1
 8001d62:	4282      	cmp	r2, r0
 8001d64:	41bf      	sbcs	r7, r7
 8001d66:	427f      	negs	r7, r7
 8001d68:	193c      	adds	r4, r7, r4
 8001d6a:	1936      	adds	r6, r6, r4
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	e7dd      	b.n	8001d2c <__aeabi_ddiv+0x57c>
 8001d70:	2480      	movs	r4, #128	; 0x80
 8001d72:	4643      	mov	r3, r8
 8001d74:	0324      	lsls	r4, r4, #12
 8001d76:	431c      	orrs	r4, r3
 8001d78:	0324      	lsls	r4, r4, #12
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__aeabi_ddiv+0x5dc>)
 8001d7c:	0b24      	lsrs	r4, r4, #12
 8001d7e:	e56e      	b.n	800185e <__aeabi_ddiv+0xae>
 8001d80:	9a00      	ldr	r2, [sp, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3ea      	bcc.n	8001d5c <__aeabi_ddiv+0x5ac>
 8001d86:	0005      	movs	r5, r0
 8001d88:	e7d3      	b.n	8001d32 <__aeabi_ddiv+0x582>
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	000007ff 	.word	0x000007ff
 8001d90:	0000043e 	.word	0x0000043e
 8001d94:	0000041e 	.word	0x0000041e
 8001d98:	000003ff 	.word	0x000003ff

08001d9c <__eqdf2>:
 8001d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9e:	464e      	mov	r6, r9
 8001da0:	4645      	mov	r5, r8
 8001da2:	46de      	mov	lr, fp
 8001da4:	4657      	mov	r7, sl
 8001da6:	4690      	mov	r8, r2
 8001da8:	b5e0      	push	{r5, r6, r7, lr}
 8001daa:	0017      	movs	r7, r2
 8001dac:	031a      	lsls	r2, r3, #12
 8001dae:	0b12      	lsrs	r2, r2, #12
 8001db0:	0005      	movs	r5, r0
 8001db2:	4684      	mov	ip, r0
 8001db4:	4819      	ldr	r0, [pc, #100]	; (8001e1c <__eqdf2+0x80>)
 8001db6:	030e      	lsls	r6, r1, #12
 8001db8:	004c      	lsls	r4, r1, #1
 8001dba:	4691      	mov	r9, r2
 8001dbc:	005a      	lsls	r2, r3, #1
 8001dbe:	0fdb      	lsrs	r3, r3, #31
 8001dc0:	469b      	mov	fp, r3
 8001dc2:	0b36      	lsrs	r6, r6, #12
 8001dc4:	0d64      	lsrs	r4, r4, #21
 8001dc6:	0fc9      	lsrs	r1, r1, #31
 8001dc8:	0d52      	lsrs	r2, r2, #21
 8001dca:	4284      	cmp	r4, r0
 8001dcc:	d019      	beq.n	8001e02 <__eqdf2+0x66>
 8001dce:	4282      	cmp	r2, r0
 8001dd0:	d010      	beq.n	8001df4 <__eqdf2+0x58>
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	4294      	cmp	r4, r2
 8001dd6:	d10e      	bne.n	8001df6 <__eqdf2+0x5a>
 8001dd8:	454e      	cmp	r6, r9
 8001dda:	d10c      	bne.n	8001df6 <__eqdf2+0x5a>
 8001ddc:	2001      	movs	r0, #1
 8001dde:	45c4      	cmp	ip, r8
 8001de0:	d109      	bne.n	8001df6 <__eqdf2+0x5a>
 8001de2:	4559      	cmp	r1, fp
 8001de4:	d017      	beq.n	8001e16 <__eqdf2+0x7a>
 8001de6:	2c00      	cmp	r4, #0
 8001de8:	d105      	bne.n	8001df6 <__eqdf2+0x5a>
 8001dea:	0030      	movs	r0, r6
 8001dec:	4328      	orrs	r0, r5
 8001dee:	1e43      	subs	r3, r0, #1
 8001df0:	4198      	sbcs	r0, r3
 8001df2:	e000      	b.n	8001df6 <__eqdf2+0x5a>
 8001df4:	2001      	movs	r0, #1
 8001df6:	bcf0      	pop	{r4, r5, r6, r7}
 8001df8:	46bb      	mov	fp, r7
 8001dfa:	46b2      	mov	sl, r6
 8001dfc:	46a9      	mov	r9, r5
 8001dfe:	46a0      	mov	r8, r4
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e02:	0033      	movs	r3, r6
 8001e04:	2001      	movs	r0, #1
 8001e06:	432b      	orrs	r3, r5
 8001e08:	d1f5      	bne.n	8001df6 <__eqdf2+0x5a>
 8001e0a:	42a2      	cmp	r2, r4
 8001e0c:	d1f3      	bne.n	8001df6 <__eqdf2+0x5a>
 8001e0e:	464b      	mov	r3, r9
 8001e10:	433b      	orrs	r3, r7
 8001e12:	d1f0      	bne.n	8001df6 <__eqdf2+0x5a>
 8001e14:	e7e2      	b.n	8001ddc <__eqdf2+0x40>
 8001e16:	2000      	movs	r0, #0
 8001e18:	e7ed      	b.n	8001df6 <__eqdf2+0x5a>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff

08001e20 <__gedf2>:
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	4647      	mov	r7, r8
 8001e24:	46ce      	mov	lr, r9
 8001e26:	0004      	movs	r4, r0
 8001e28:	0018      	movs	r0, r3
 8001e2a:	0016      	movs	r6, r2
 8001e2c:	031b      	lsls	r3, r3, #12
 8001e2e:	0b1b      	lsrs	r3, r3, #12
 8001e30:	4d2d      	ldr	r5, [pc, #180]	; (8001ee8 <__gedf2+0xc8>)
 8001e32:	004a      	lsls	r2, r1, #1
 8001e34:	4699      	mov	r9, r3
 8001e36:	b580      	push	{r7, lr}
 8001e38:	0043      	lsls	r3, r0, #1
 8001e3a:	030f      	lsls	r7, r1, #12
 8001e3c:	46a4      	mov	ip, r4
 8001e3e:	46b0      	mov	r8, r6
 8001e40:	0b3f      	lsrs	r7, r7, #12
 8001e42:	0d52      	lsrs	r2, r2, #21
 8001e44:	0fc9      	lsrs	r1, r1, #31
 8001e46:	0d5b      	lsrs	r3, r3, #21
 8001e48:	0fc0      	lsrs	r0, r0, #31
 8001e4a:	42aa      	cmp	r2, r5
 8001e4c:	d021      	beq.n	8001e92 <__gedf2+0x72>
 8001e4e:	42ab      	cmp	r3, r5
 8001e50:	d013      	beq.n	8001e7a <__gedf2+0x5a>
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d122      	bne.n	8001e9c <__gedf2+0x7c>
 8001e56:	433c      	orrs	r4, r7
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <__gedf2+0x42>
 8001e5c:	464d      	mov	r5, r9
 8001e5e:	432e      	orrs	r6, r5
 8001e60:	d022      	beq.n	8001ea8 <__gedf2+0x88>
 8001e62:	2c00      	cmp	r4, #0
 8001e64:	d010      	beq.n	8001e88 <__gedf2+0x68>
 8001e66:	4281      	cmp	r1, r0
 8001e68:	d022      	beq.n	8001eb0 <__gedf2+0x90>
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	3901      	subs	r1, #1
 8001e6e:	4008      	ands	r0, r1
 8001e70:	3801      	subs	r0, #1
 8001e72:	bcc0      	pop	{r6, r7}
 8001e74:	46b9      	mov	r9, r7
 8001e76:	46b0      	mov	r8, r6
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7a:	464d      	mov	r5, r9
 8001e7c:	432e      	orrs	r6, r5
 8001e7e:	d129      	bne.n	8001ed4 <__gedf2+0xb4>
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d1f0      	bne.n	8001e66 <__gedf2+0x46>
 8001e84:	433c      	orrs	r4, r7
 8001e86:	d1ee      	bne.n	8001e66 <__gedf2+0x46>
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d1f2      	bne.n	8001e72 <__gedf2+0x52>
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	4240      	negs	r0, r0
 8001e90:	e7ef      	b.n	8001e72 <__gedf2+0x52>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d11d      	bne.n	8001ed4 <__gedf2+0xb4>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d0ee      	beq.n	8001e7a <__gedf2+0x5a>
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e2      	bne.n	8001e66 <__gedf2+0x46>
 8001ea0:	464c      	mov	r4, r9
 8001ea2:	4326      	orrs	r6, r4
 8001ea4:	d1df      	bne.n	8001e66 <__gedf2+0x46>
 8001ea6:	e7e0      	b.n	8001e6a <__gedf2+0x4a>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	2c00      	cmp	r4, #0
 8001eac:	d0e1      	beq.n	8001e72 <__gedf2+0x52>
 8001eae:	e7dc      	b.n	8001e6a <__gedf2+0x4a>
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dc0a      	bgt.n	8001eca <__gedf2+0xaa>
 8001eb4:	dbe8      	blt.n	8001e88 <__gedf2+0x68>
 8001eb6:	454f      	cmp	r7, r9
 8001eb8:	d8d7      	bhi.n	8001e6a <__gedf2+0x4a>
 8001eba:	d00e      	beq.n	8001eda <__gedf2+0xba>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	454f      	cmp	r7, r9
 8001ec0:	d2d7      	bcs.n	8001e72 <__gedf2+0x52>
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d0e2      	beq.n	8001e8c <__gedf2+0x6c>
 8001ec6:	0008      	movs	r0, r1
 8001ec8:	e7d3      	b.n	8001e72 <__gedf2+0x52>
 8001eca:	4243      	negs	r3, r0
 8001ecc:	4158      	adcs	r0, r3
 8001ece:	0040      	lsls	r0, r0, #1
 8001ed0:	3801      	subs	r0, #1
 8001ed2:	e7ce      	b.n	8001e72 <__gedf2+0x52>
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	4240      	negs	r0, r0
 8001ed8:	e7cb      	b.n	8001e72 <__gedf2+0x52>
 8001eda:	45c4      	cmp	ip, r8
 8001edc:	d8c5      	bhi.n	8001e6a <__gedf2+0x4a>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	45c4      	cmp	ip, r8
 8001ee2:	d2c6      	bcs.n	8001e72 <__gedf2+0x52>
 8001ee4:	e7ed      	b.n	8001ec2 <__gedf2+0xa2>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	000007ff 	.word	0x000007ff

08001eec <__ledf2>:
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	4647      	mov	r7, r8
 8001ef0:	46ce      	mov	lr, r9
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	0016      	movs	r6, r2
 8001ef8:	031b      	lsls	r3, r3, #12
 8001efa:	0b1b      	lsrs	r3, r3, #12
 8001efc:	4d2c      	ldr	r5, [pc, #176]	; (8001fb0 <__ledf2+0xc4>)
 8001efe:	004a      	lsls	r2, r1, #1
 8001f00:	4699      	mov	r9, r3
 8001f02:	b580      	push	{r7, lr}
 8001f04:	0043      	lsls	r3, r0, #1
 8001f06:	030f      	lsls	r7, r1, #12
 8001f08:	46a4      	mov	ip, r4
 8001f0a:	46b0      	mov	r8, r6
 8001f0c:	0b3f      	lsrs	r7, r7, #12
 8001f0e:	0d52      	lsrs	r2, r2, #21
 8001f10:	0fc9      	lsrs	r1, r1, #31
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	0fc0      	lsrs	r0, r0, #31
 8001f16:	42aa      	cmp	r2, r5
 8001f18:	d00d      	beq.n	8001f36 <__ledf2+0x4a>
 8001f1a:	42ab      	cmp	r3, r5
 8001f1c:	d010      	beq.n	8001f40 <__ledf2+0x54>
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d127      	bne.n	8001f72 <__ledf2+0x86>
 8001f22:	433c      	orrs	r4, r7
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <__ledf2+0x60>
 8001f28:	464d      	mov	r5, r9
 8001f2a:	432e      	orrs	r6, r5
 8001f2c:	d10e      	bne.n	8001f4c <__ledf2+0x60>
 8001f2e:	2000      	movs	r0, #0
 8001f30:	2c00      	cmp	r4, #0
 8001f32:	d015      	beq.n	8001f60 <__ledf2+0x74>
 8001f34:	e00e      	b.n	8001f54 <__ledf2+0x68>
 8001f36:	003d      	movs	r5, r7
 8001f38:	4325      	orrs	r5, r4
 8001f3a:	d110      	bne.n	8001f5e <__ledf2+0x72>
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d118      	bne.n	8001f72 <__ledf2+0x86>
 8001f40:	464d      	mov	r5, r9
 8001f42:	432e      	orrs	r6, r5
 8001f44:	d10b      	bne.n	8001f5e <__ledf2+0x72>
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d102      	bne.n	8001f50 <__ledf2+0x64>
 8001f4a:	433c      	orrs	r4, r7
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d00b      	beq.n	8001f68 <__ledf2+0x7c>
 8001f50:	4281      	cmp	r1, r0
 8001f52:	d014      	beq.n	8001f7e <__ledf2+0x92>
 8001f54:	2002      	movs	r0, #2
 8001f56:	3901      	subs	r1, #1
 8001f58:	4008      	ands	r0, r1
 8001f5a:	3801      	subs	r0, #1
 8001f5c:	e000      	b.n	8001f60 <__ledf2+0x74>
 8001f5e:	2002      	movs	r0, #2
 8001f60:	bcc0      	pop	{r6, r7}
 8001f62:	46b9      	mov	r9, r7
 8001f64:	46b0      	mov	r8, r6
 8001f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d1f9      	bne.n	8001f60 <__ledf2+0x74>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	4240      	negs	r0, r0
 8001f70:	e7f6      	b.n	8001f60 <__ledf2+0x74>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ec      	bne.n	8001f50 <__ledf2+0x64>
 8001f76:	464c      	mov	r4, r9
 8001f78:	4326      	orrs	r6, r4
 8001f7a:	d1e9      	bne.n	8001f50 <__ledf2+0x64>
 8001f7c:	e7ea      	b.n	8001f54 <__ledf2+0x68>
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dd04      	ble.n	8001f8c <__ledf2+0xa0>
 8001f82:	4243      	negs	r3, r0
 8001f84:	4158      	adcs	r0, r3
 8001f86:	0040      	lsls	r0, r0, #1
 8001f88:	3801      	subs	r0, #1
 8001f8a:	e7e9      	b.n	8001f60 <__ledf2+0x74>
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbeb      	blt.n	8001f68 <__ledf2+0x7c>
 8001f90:	454f      	cmp	r7, r9
 8001f92:	d8df      	bhi.n	8001f54 <__ledf2+0x68>
 8001f94:	d006      	beq.n	8001fa4 <__ledf2+0xb8>
 8001f96:	2000      	movs	r0, #0
 8001f98:	454f      	cmp	r7, r9
 8001f9a:	d2e1      	bcs.n	8001f60 <__ledf2+0x74>
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	d0e5      	beq.n	8001f6c <__ledf2+0x80>
 8001fa0:	0008      	movs	r0, r1
 8001fa2:	e7dd      	b.n	8001f60 <__ledf2+0x74>
 8001fa4:	45c4      	cmp	ip, r8
 8001fa6:	d8d5      	bhi.n	8001f54 <__ledf2+0x68>
 8001fa8:	2000      	movs	r0, #0
 8001faa:	45c4      	cmp	ip, r8
 8001fac:	d2d8      	bcs.n	8001f60 <__ledf2+0x74>
 8001fae:	e7f5      	b.n	8001f9c <__ledf2+0xb0>
 8001fb0:	000007ff 	.word	0x000007ff

08001fb4 <__aeabi_dmul>:
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	464e      	mov	r6, r9
 8001fba:	4645      	mov	r5, r8
 8001fbc:	46de      	mov	lr, fp
 8001fbe:	b5e0      	push	{r5, r6, r7, lr}
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	030c      	lsls	r4, r1, #12
 8001fc4:	004b      	lsls	r3, r1, #1
 8001fc6:	0006      	movs	r6, r0
 8001fc8:	4692      	mov	sl, r2
 8001fca:	b087      	sub	sp, #28
 8001fcc:	0b24      	lsrs	r4, r4, #12
 8001fce:	0d5b      	lsrs	r3, r3, #21
 8001fd0:	0fcf      	lsrs	r7, r1, #31
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dmul+0x24>
 8001fd6:	e15c      	b.n	8002292 <__aeabi_dmul+0x2de>
 8001fd8:	4ad9      	ldr	r2, [pc, #868]	; (8002340 <__aeabi_dmul+0x38c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dmul+0x2c>
 8001fde:	e175      	b.n	80022cc <__aeabi_dmul+0x318>
 8001fe0:	0f42      	lsrs	r2, r0, #29
 8001fe2:	00e4      	lsls	r4, r4, #3
 8001fe4:	4314      	orrs	r4, r2
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	0412      	lsls	r2, r2, #16
 8001fea:	4314      	orrs	r4, r2
 8001fec:	4ad5      	ldr	r2, [pc, #852]	; (8002344 <__aeabi_dmul+0x390>)
 8001fee:	00c5      	lsls	r5, r0, #3
 8001ff0:	4694      	mov	ip, r2
 8001ff2:	4463      	add	r3, ip
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	4642      	mov	r2, r8
 8002000:	031e      	lsls	r6, r3, #12
 8002002:	0fd2      	lsrs	r2, r2, #31
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4650      	mov	r0, sl
 8002008:	4690      	mov	r8, r2
 800200a:	0b36      	lsrs	r6, r6, #12
 800200c:	0d5b      	lsrs	r3, r3, #21
 800200e:	d100      	bne.n	8002012 <__aeabi_dmul+0x5e>
 8002010:	e120      	b.n	8002254 <__aeabi_dmul+0x2a0>
 8002012:	4acb      	ldr	r2, [pc, #812]	; (8002340 <__aeabi_dmul+0x38c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d100      	bne.n	800201a <__aeabi_dmul+0x66>
 8002018:	e162      	b.n	80022e0 <__aeabi_dmul+0x32c>
 800201a:	49ca      	ldr	r1, [pc, #808]	; (8002344 <__aeabi_dmul+0x390>)
 800201c:	0f42      	lsrs	r2, r0, #29
 800201e:	468c      	mov	ip, r1
 8002020:	9900      	ldr	r1, [sp, #0]
 8002022:	4463      	add	r3, ip
 8002024:	00f6      	lsls	r6, r6, #3
 8002026:	468c      	mov	ip, r1
 8002028:	4316      	orrs	r6, r2
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	449c      	add	ip, r3
 800202e:	0412      	lsls	r2, r2, #16
 8002030:	4663      	mov	r3, ip
 8002032:	4316      	orrs	r6, r2
 8002034:	00c2      	lsls	r2, r0, #3
 8002036:	2000      	movs	r0, #0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	9900      	ldr	r1, [sp, #0]
 800203c:	4643      	mov	r3, r8
 800203e:	3101      	adds	r1, #1
 8002040:	468c      	mov	ip, r1
 8002042:	4649      	mov	r1, r9
 8002044:	407b      	eors	r3, r7
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	290f      	cmp	r1, #15
 800204a:	d826      	bhi.n	800209a <__aeabi_dmul+0xe6>
 800204c:	4bbe      	ldr	r3, [pc, #760]	; (8002348 <__aeabi_dmul+0x394>)
 800204e:	0089      	lsls	r1, r1, #2
 8002050:	5859      	ldr	r1, [r3, r1]
 8002052:	468f      	mov	pc, r1
 8002054:	4643      	mov	r3, r8
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	0034      	movs	r4, r6
 800205a:	0015      	movs	r5, r2
 800205c:	4683      	mov	fp, r0
 800205e:	465b      	mov	r3, fp
 8002060:	2b02      	cmp	r3, #2
 8002062:	d016      	beq.n	8002092 <__aeabi_dmul+0xde>
 8002064:	2b03      	cmp	r3, #3
 8002066:	d100      	bne.n	800206a <__aeabi_dmul+0xb6>
 8002068:	e203      	b.n	8002472 <__aeabi_dmul+0x4be>
 800206a:	2b01      	cmp	r3, #1
 800206c:	d000      	beq.n	8002070 <__aeabi_dmul+0xbc>
 800206e:	e0cd      	b.n	800220c <__aeabi_dmul+0x258>
 8002070:	2200      	movs	r2, #0
 8002072:	2400      	movs	r4, #0
 8002074:	2500      	movs	r5, #0
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	0512      	lsls	r2, r2, #20
 800207a:	4322      	orrs	r2, r4
 800207c:	07db      	lsls	r3, r3, #31
 800207e:	431a      	orrs	r2, r3
 8002080:	0028      	movs	r0, r5
 8002082:	0011      	movs	r1, r2
 8002084:	b007      	add	sp, #28
 8002086:	bcf0      	pop	{r4, r5, r6, r7}
 8002088:	46bb      	mov	fp, r7
 800208a:	46b2      	mov	sl, r6
 800208c:	46a9      	mov	r9, r5
 800208e:	46a0      	mov	r8, r4
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002092:	2400      	movs	r4, #0
 8002094:	2500      	movs	r5, #0
 8002096:	4aaa      	ldr	r2, [pc, #680]	; (8002340 <__aeabi_dmul+0x38c>)
 8002098:	e7ed      	b.n	8002076 <__aeabi_dmul+0xc2>
 800209a:	0c28      	lsrs	r0, r5, #16
 800209c:	042d      	lsls	r5, r5, #16
 800209e:	0c2d      	lsrs	r5, r5, #16
 80020a0:	002b      	movs	r3, r5
 80020a2:	0c11      	lsrs	r1, r2, #16
 80020a4:	0412      	lsls	r2, r2, #16
 80020a6:	0c12      	lsrs	r2, r2, #16
 80020a8:	4353      	muls	r3, r2
 80020aa:	4698      	mov	r8, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	002f      	movs	r7, r5
 80020b0:	4343      	muls	r3, r0
 80020b2:	4699      	mov	r9, r3
 80020b4:	434f      	muls	r7, r1
 80020b6:	444f      	add	r7, r9
 80020b8:	46bb      	mov	fp, r7
 80020ba:	4647      	mov	r7, r8
 80020bc:	000b      	movs	r3, r1
 80020be:	0c3f      	lsrs	r7, r7, #16
 80020c0:	46ba      	mov	sl, r7
 80020c2:	4343      	muls	r3, r0
 80020c4:	44da      	add	sl, fp
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	45d1      	cmp	r9, sl
 80020ca:	d904      	bls.n	80020d6 <__aeabi_dmul+0x122>
 80020cc:	2780      	movs	r7, #128	; 0x80
 80020ce:	027f      	lsls	r7, r7, #9
 80020d0:	46b9      	mov	r9, r7
 80020d2:	444b      	add	r3, r9
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	4653      	mov	r3, sl
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	469b      	mov	fp, r3
 80020dc:	4653      	mov	r3, sl
 80020de:	041f      	lsls	r7, r3, #16
 80020e0:	4643      	mov	r3, r8
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	4698      	mov	r8, r3
 80020e8:	003b      	movs	r3, r7
 80020ea:	4443      	add	r3, r8
 80020ec:	9304      	str	r3, [sp, #16]
 80020ee:	0c33      	lsrs	r3, r6, #16
 80020f0:	0436      	lsls	r6, r6, #16
 80020f2:	0c36      	lsrs	r6, r6, #16
 80020f4:	4698      	mov	r8, r3
 80020f6:	0033      	movs	r3, r6
 80020f8:	4343      	muls	r3, r0
 80020fa:	4699      	mov	r9, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	4343      	muls	r3, r0
 8002100:	002f      	movs	r7, r5
 8002102:	469a      	mov	sl, r3
 8002104:	4643      	mov	r3, r8
 8002106:	4377      	muls	r7, r6
 8002108:	435d      	muls	r5, r3
 800210a:	0c38      	lsrs	r0, r7, #16
 800210c:	444d      	add	r5, r9
 800210e:	1945      	adds	r5, r0, r5
 8002110:	45a9      	cmp	r9, r5
 8002112:	d903      	bls.n	800211c <__aeabi_dmul+0x168>
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	4699      	mov	r9, r3
 800211a:	44ca      	add	sl, r9
 800211c:	043f      	lsls	r7, r7, #16
 800211e:	0c28      	lsrs	r0, r5, #16
 8002120:	0c3f      	lsrs	r7, r7, #16
 8002122:	042d      	lsls	r5, r5, #16
 8002124:	19ed      	adds	r5, r5, r7
 8002126:	0c27      	lsrs	r7, r4, #16
 8002128:	0424      	lsls	r4, r4, #16
 800212a:	0c24      	lsrs	r4, r4, #16
 800212c:	0003      	movs	r3, r0
 800212e:	0020      	movs	r0, r4
 8002130:	4350      	muls	r0, r2
 8002132:	437a      	muls	r2, r7
 8002134:	4691      	mov	r9, r2
 8002136:	003a      	movs	r2, r7
 8002138:	4453      	add	r3, sl
 800213a:	9305      	str	r3, [sp, #20]
 800213c:	0c03      	lsrs	r3, r0, #16
 800213e:	469a      	mov	sl, r3
 8002140:	434a      	muls	r2, r1
 8002142:	4361      	muls	r1, r4
 8002144:	4449      	add	r1, r9
 8002146:	4451      	add	r1, sl
 8002148:	44ab      	add	fp, r5
 800214a:	4589      	cmp	r9, r1
 800214c:	d903      	bls.n	8002156 <__aeabi_dmul+0x1a2>
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	4699      	mov	r9, r3
 8002154:	444a      	add	r2, r9
 8002156:	0400      	lsls	r0, r0, #16
 8002158:	0c0b      	lsrs	r3, r1, #16
 800215a:	0c00      	lsrs	r0, r0, #16
 800215c:	0409      	lsls	r1, r1, #16
 800215e:	1809      	adds	r1, r1, r0
 8002160:	0020      	movs	r0, r4
 8002162:	4699      	mov	r9, r3
 8002164:	4643      	mov	r3, r8
 8002166:	4370      	muls	r0, r6
 8002168:	435c      	muls	r4, r3
 800216a:	437e      	muls	r6, r7
 800216c:	435f      	muls	r7, r3
 800216e:	0c03      	lsrs	r3, r0, #16
 8002170:	4698      	mov	r8, r3
 8002172:	19a4      	adds	r4, r4, r6
 8002174:	4444      	add	r4, r8
 8002176:	444a      	add	r2, r9
 8002178:	9703      	str	r7, [sp, #12]
 800217a:	42a6      	cmp	r6, r4
 800217c:	d904      	bls.n	8002188 <__aeabi_dmul+0x1d4>
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	4698      	mov	r8, r3
 8002184:	4447      	add	r7, r8
 8002186:	9703      	str	r7, [sp, #12]
 8002188:	0423      	lsls	r3, r4, #16
 800218a:	9e02      	ldr	r6, [sp, #8]
 800218c:	469a      	mov	sl, r3
 800218e:	9b05      	ldr	r3, [sp, #20]
 8002190:	445e      	add	r6, fp
 8002192:	4698      	mov	r8, r3
 8002194:	42ae      	cmp	r6, r5
 8002196:	41ad      	sbcs	r5, r5
 8002198:	1876      	adds	r6, r6, r1
 800219a:	428e      	cmp	r6, r1
 800219c:	4189      	sbcs	r1, r1
 800219e:	0400      	lsls	r0, r0, #16
 80021a0:	0c00      	lsrs	r0, r0, #16
 80021a2:	4450      	add	r0, sl
 80021a4:	4440      	add	r0, r8
 80021a6:	426d      	negs	r5, r5
 80021a8:	1947      	adds	r7, r0, r5
 80021aa:	46b8      	mov	r8, r7
 80021ac:	4693      	mov	fp, r2
 80021ae:	4249      	negs	r1, r1
 80021b0:	4689      	mov	r9, r1
 80021b2:	44c3      	add	fp, r8
 80021b4:	44d9      	add	r9, fp
 80021b6:	4298      	cmp	r0, r3
 80021b8:	4180      	sbcs	r0, r0
 80021ba:	45a8      	cmp	r8, r5
 80021bc:	41ad      	sbcs	r5, r5
 80021be:	4593      	cmp	fp, r2
 80021c0:	4192      	sbcs	r2, r2
 80021c2:	4589      	cmp	r9, r1
 80021c4:	4189      	sbcs	r1, r1
 80021c6:	426d      	negs	r5, r5
 80021c8:	4240      	negs	r0, r0
 80021ca:	4328      	orrs	r0, r5
 80021cc:	0c24      	lsrs	r4, r4, #16
 80021ce:	4252      	negs	r2, r2
 80021d0:	4249      	negs	r1, r1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	1900      	adds	r0, r0, r4
 80021d8:	1880      	adds	r0, r0, r2
 80021da:	18c7      	adds	r7, r0, r3
 80021dc:	464b      	mov	r3, r9
 80021de:	0ddc      	lsrs	r4, r3, #23
 80021e0:	9b04      	ldr	r3, [sp, #16]
 80021e2:	0275      	lsls	r5, r6, #9
 80021e4:	431d      	orrs	r5, r3
 80021e6:	1e6a      	subs	r2, r5, #1
 80021e8:	4195      	sbcs	r5, r2
 80021ea:	464b      	mov	r3, r9
 80021ec:	0df6      	lsrs	r6, r6, #23
 80021ee:	027f      	lsls	r7, r7, #9
 80021f0:	4335      	orrs	r5, r6
 80021f2:	025a      	lsls	r2, r3, #9
 80021f4:	433c      	orrs	r4, r7
 80021f6:	4315      	orrs	r5, r2
 80021f8:	01fb      	lsls	r3, r7, #7
 80021fa:	d400      	bmi.n	80021fe <__aeabi_dmul+0x24a>
 80021fc:	e11c      	b.n	8002438 <__aeabi_dmul+0x484>
 80021fe:	2101      	movs	r1, #1
 8002200:	086a      	lsrs	r2, r5, #1
 8002202:	400d      	ands	r5, r1
 8002204:	4315      	orrs	r5, r2
 8002206:	07e2      	lsls	r2, r4, #31
 8002208:	4315      	orrs	r5, r2
 800220a:	0864      	lsrs	r4, r4, #1
 800220c:	494f      	ldr	r1, [pc, #316]	; (800234c <__aeabi_dmul+0x398>)
 800220e:	4461      	add	r1, ip
 8002210:	2900      	cmp	r1, #0
 8002212:	dc00      	bgt.n	8002216 <__aeabi_dmul+0x262>
 8002214:	e0b0      	b.n	8002378 <__aeabi_dmul+0x3c4>
 8002216:	076b      	lsls	r3, r5, #29
 8002218:	d009      	beq.n	800222e <__aeabi_dmul+0x27a>
 800221a:	220f      	movs	r2, #15
 800221c:	402a      	ands	r2, r5
 800221e:	2a04      	cmp	r2, #4
 8002220:	d005      	beq.n	800222e <__aeabi_dmul+0x27a>
 8002222:	1d2a      	adds	r2, r5, #4
 8002224:	42aa      	cmp	r2, r5
 8002226:	41ad      	sbcs	r5, r5
 8002228:	426d      	negs	r5, r5
 800222a:	1964      	adds	r4, r4, r5
 800222c:	0015      	movs	r5, r2
 800222e:	01e3      	lsls	r3, r4, #7
 8002230:	d504      	bpl.n	800223c <__aeabi_dmul+0x288>
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	4a46      	ldr	r2, [pc, #280]	; (8002350 <__aeabi_dmul+0x39c>)
 8002236:	00c9      	lsls	r1, r1, #3
 8002238:	4014      	ands	r4, r2
 800223a:	4461      	add	r1, ip
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <__aeabi_dmul+0x3a0>)
 800223e:	4291      	cmp	r1, r2
 8002240:	dd00      	ble.n	8002244 <__aeabi_dmul+0x290>
 8002242:	e726      	b.n	8002092 <__aeabi_dmul+0xde>
 8002244:	0762      	lsls	r2, r4, #29
 8002246:	08ed      	lsrs	r5, r5, #3
 8002248:	0264      	lsls	r4, r4, #9
 800224a:	0549      	lsls	r1, r1, #21
 800224c:	4315      	orrs	r5, r2
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	0d4a      	lsrs	r2, r1, #21
 8002252:	e710      	b.n	8002076 <__aeabi_dmul+0xc2>
 8002254:	4652      	mov	r2, sl
 8002256:	4332      	orrs	r2, r6
 8002258:	d100      	bne.n	800225c <__aeabi_dmul+0x2a8>
 800225a:	e07f      	b.n	800235c <__aeabi_dmul+0x3a8>
 800225c:	2e00      	cmp	r6, #0
 800225e:	d100      	bne.n	8002262 <__aeabi_dmul+0x2ae>
 8002260:	e0dc      	b.n	800241c <__aeabi_dmul+0x468>
 8002262:	0030      	movs	r0, r6
 8002264:	f000 fdda 	bl	8002e1c <__clzsi2>
 8002268:	0002      	movs	r2, r0
 800226a:	3a0b      	subs	r2, #11
 800226c:	231d      	movs	r3, #29
 800226e:	0001      	movs	r1, r0
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	4652      	mov	r2, sl
 8002274:	3908      	subs	r1, #8
 8002276:	40da      	lsrs	r2, r3
 8002278:	408e      	lsls	r6, r1
 800227a:	4316      	orrs	r6, r2
 800227c:	4652      	mov	r2, sl
 800227e:	408a      	lsls	r2, r1
 8002280:	9b00      	ldr	r3, [sp, #0]
 8002282:	4935      	ldr	r1, [pc, #212]	; (8002358 <__aeabi_dmul+0x3a4>)
 8002284:	1a18      	subs	r0, r3, r0
 8002286:	0003      	movs	r3, r0
 8002288:	468c      	mov	ip, r1
 800228a:	4463      	add	r3, ip
 800228c:	2000      	movs	r0, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	e6d3      	b.n	800203a <__aeabi_dmul+0x86>
 8002292:	0025      	movs	r5, r4
 8002294:	4305      	orrs	r5, r0
 8002296:	d04a      	beq.n	800232e <__aeabi_dmul+0x37a>
 8002298:	2c00      	cmp	r4, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dmul+0x2ea>
 800229c:	e0b0      	b.n	8002400 <__aeabi_dmul+0x44c>
 800229e:	0020      	movs	r0, r4
 80022a0:	f000 fdbc 	bl	8002e1c <__clzsi2>
 80022a4:	0001      	movs	r1, r0
 80022a6:	0002      	movs	r2, r0
 80022a8:	390b      	subs	r1, #11
 80022aa:	231d      	movs	r3, #29
 80022ac:	0010      	movs	r0, r2
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	0031      	movs	r1, r6
 80022b2:	0035      	movs	r5, r6
 80022b4:	3808      	subs	r0, #8
 80022b6:	4084      	lsls	r4, r0
 80022b8:	40d9      	lsrs	r1, r3
 80022ba:	4085      	lsls	r5, r0
 80022bc:	430c      	orrs	r4, r1
 80022be:	4826      	ldr	r0, [pc, #152]	; (8002358 <__aeabi_dmul+0x3a4>)
 80022c0:	1a83      	subs	r3, r0, r2
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	4699      	mov	r9, r3
 80022c8:	469b      	mov	fp, r3
 80022ca:	e697      	b.n	8001ffc <__aeabi_dmul+0x48>
 80022cc:	0005      	movs	r5, r0
 80022ce:	4325      	orrs	r5, r4
 80022d0:	d126      	bne.n	8002320 <__aeabi_dmul+0x36c>
 80022d2:	2208      	movs	r2, #8
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2302      	movs	r3, #2
 80022d8:	2400      	movs	r4, #0
 80022da:	4691      	mov	r9, r2
 80022dc:	469b      	mov	fp, r3
 80022de:	e68d      	b.n	8001ffc <__aeabi_dmul+0x48>
 80022e0:	4652      	mov	r2, sl
 80022e2:	9b00      	ldr	r3, [sp, #0]
 80022e4:	4332      	orrs	r2, r6
 80022e6:	d110      	bne.n	800230a <__aeabi_dmul+0x356>
 80022e8:	4915      	ldr	r1, [pc, #84]	; (8002340 <__aeabi_dmul+0x38c>)
 80022ea:	2600      	movs	r6, #0
 80022ec:	468c      	mov	ip, r1
 80022ee:	4463      	add	r3, ip
 80022f0:	4649      	mov	r1, r9
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2302      	movs	r3, #2
 80022f6:	4319      	orrs	r1, r3
 80022f8:	4689      	mov	r9, r1
 80022fa:	2002      	movs	r0, #2
 80022fc:	e69d      	b.n	800203a <__aeabi_dmul+0x86>
 80022fe:	465b      	mov	r3, fp
 8002300:	9701      	str	r7, [sp, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d000      	beq.n	8002308 <__aeabi_dmul+0x354>
 8002306:	e6ad      	b.n	8002064 <__aeabi_dmul+0xb0>
 8002308:	e6c3      	b.n	8002092 <__aeabi_dmul+0xde>
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <__aeabi_dmul+0x38c>)
 800230c:	2003      	movs	r0, #3
 800230e:	4694      	mov	ip, r2
 8002310:	4463      	add	r3, ip
 8002312:	464a      	mov	r2, r9
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2303      	movs	r3, #3
 8002318:	431a      	orrs	r2, r3
 800231a:	4691      	mov	r9, r2
 800231c:	4652      	mov	r2, sl
 800231e:	e68c      	b.n	800203a <__aeabi_dmul+0x86>
 8002320:	220c      	movs	r2, #12
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2303      	movs	r3, #3
 8002326:	0005      	movs	r5, r0
 8002328:	4691      	mov	r9, r2
 800232a:	469b      	mov	fp, r3
 800232c:	e666      	b.n	8001ffc <__aeabi_dmul+0x48>
 800232e:	2304      	movs	r3, #4
 8002330:	4699      	mov	r9, r3
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	2400      	movs	r4, #0
 800233a:	469b      	mov	fp, r3
 800233c:	e65e      	b.n	8001ffc <__aeabi_dmul+0x48>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff
 8002344:	fffffc01 	.word	0xfffffc01
 8002348:	0800bbf8 	.word	0x0800bbf8
 800234c:	000003ff 	.word	0x000003ff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	000007fe 	.word	0x000007fe
 8002358:	fffffc0d 	.word	0xfffffc0d
 800235c:	4649      	mov	r1, r9
 800235e:	2301      	movs	r3, #1
 8002360:	4319      	orrs	r1, r3
 8002362:	4689      	mov	r9, r1
 8002364:	2600      	movs	r6, #0
 8002366:	2001      	movs	r0, #1
 8002368:	e667      	b.n	800203a <__aeabi_dmul+0x86>
 800236a:	2300      	movs	r3, #0
 800236c:	2480      	movs	r4, #128	; 0x80
 800236e:	2500      	movs	r5, #0
 8002370:	4a43      	ldr	r2, [pc, #268]	; (8002480 <__aeabi_dmul+0x4cc>)
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	0324      	lsls	r4, r4, #12
 8002376:	e67e      	b.n	8002076 <__aeabi_dmul+0xc2>
 8002378:	2001      	movs	r0, #1
 800237a:	1a40      	subs	r0, r0, r1
 800237c:	2838      	cmp	r0, #56	; 0x38
 800237e:	dd00      	ble.n	8002382 <__aeabi_dmul+0x3ce>
 8002380:	e676      	b.n	8002070 <__aeabi_dmul+0xbc>
 8002382:	281f      	cmp	r0, #31
 8002384:	dd5b      	ble.n	800243e <__aeabi_dmul+0x48a>
 8002386:	221f      	movs	r2, #31
 8002388:	0023      	movs	r3, r4
 800238a:	4252      	negs	r2, r2
 800238c:	1a51      	subs	r1, r2, r1
 800238e:	40cb      	lsrs	r3, r1
 8002390:	0019      	movs	r1, r3
 8002392:	2820      	cmp	r0, #32
 8002394:	d003      	beq.n	800239e <__aeabi_dmul+0x3ea>
 8002396:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <__aeabi_dmul+0x4d0>)
 8002398:	4462      	add	r2, ip
 800239a:	4094      	lsls	r4, r2
 800239c:	4325      	orrs	r5, r4
 800239e:	1e6a      	subs	r2, r5, #1
 80023a0:	4195      	sbcs	r5, r2
 80023a2:	002a      	movs	r2, r5
 80023a4:	430a      	orrs	r2, r1
 80023a6:	2107      	movs	r1, #7
 80023a8:	000d      	movs	r5, r1
 80023aa:	2400      	movs	r4, #0
 80023ac:	4015      	ands	r5, r2
 80023ae:	4211      	tst	r1, r2
 80023b0:	d05b      	beq.n	800246a <__aeabi_dmul+0x4b6>
 80023b2:	210f      	movs	r1, #15
 80023b4:	2400      	movs	r4, #0
 80023b6:	4011      	ands	r1, r2
 80023b8:	2904      	cmp	r1, #4
 80023ba:	d053      	beq.n	8002464 <__aeabi_dmul+0x4b0>
 80023bc:	1d11      	adds	r1, r2, #4
 80023be:	4291      	cmp	r1, r2
 80023c0:	4192      	sbcs	r2, r2
 80023c2:	4252      	negs	r2, r2
 80023c4:	18a4      	adds	r4, r4, r2
 80023c6:	000a      	movs	r2, r1
 80023c8:	0223      	lsls	r3, r4, #8
 80023ca:	d54b      	bpl.n	8002464 <__aeabi_dmul+0x4b0>
 80023cc:	2201      	movs	r2, #1
 80023ce:	2400      	movs	r4, #0
 80023d0:	2500      	movs	r5, #0
 80023d2:	e650      	b.n	8002076 <__aeabi_dmul+0xc2>
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	031b      	lsls	r3, r3, #12
 80023d8:	421c      	tst	r4, r3
 80023da:	d009      	beq.n	80023f0 <__aeabi_dmul+0x43c>
 80023dc:	421e      	tst	r6, r3
 80023de:	d107      	bne.n	80023f0 <__aeabi_dmul+0x43c>
 80023e0:	4333      	orrs	r3, r6
 80023e2:	031c      	lsls	r4, r3, #12
 80023e4:	4643      	mov	r3, r8
 80023e6:	0015      	movs	r5, r2
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <__aeabi_dmul+0x4cc>)
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	e642      	b.n	8002076 <__aeabi_dmul+0xc2>
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0312      	lsls	r2, r2, #12
 80023f4:	4314      	orrs	r4, r2
 80023f6:	0324      	lsls	r4, r4, #12
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <__aeabi_dmul+0x4cc>)
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	9701      	str	r7, [sp, #4]
 80023fe:	e63a      	b.n	8002076 <__aeabi_dmul+0xc2>
 8002400:	f000 fd0c 	bl	8002e1c <__clzsi2>
 8002404:	0001      	movs	r1, r0
 8002406:	0002      	movs	r2, r0
 8002408:	3115      	adds	r1, #21
 800240a:	3220      	adds	r2, #32
 800240c:	291c      	cmp	r1, #28
 800240e:	dc00      	bgt.n	8002412 <__aeabi_dmul+0x45e>
 8002410:	e74b      	b.n	80022aa <__aeabi_dmul+0x2f6>
 8002412:	0034      	movs	r4, r6
 8002414:	3808      	subs	r0, #8
 8002416:	2500      	movs	r5, #0
 8002418:	4084      	lsls	r4, r0
 800241a:	e750      	b.n	80022be <__aeabi_dmul+0x30a>
 800241c:	f000 fcfe 	bl	8002e1c <__clzsi2>
 8002420:	0003      	movs	r3, r0
 8002422:	001a      	movs	r2, r3
 8002424:	3215      	adds	r2, #21
 8002426:	3020      	adds	r0, #32
 8002428:	2a1c      	cmp	r2, #28
 800242a:	dc00      	bgt.n	800242e <__aeabi_dmul+0x47a>
 800242c:	e71e      	b.n	800226c <__aeabi_dmul+0x2b8>
 800242e:	4656      	mov	r6, sl
 8002430:	3b08      	subs	r3, #8
 8002432:	2200      	movs	r2, #0
 8002434:	409e      	lsls	r6, r3
 8002436:	e723      	b.n	8002280 <__aeabi_dmul+0x2cc>
 8002438:	9b00      	ldr	r3, [sp, #0]
 800243a:	469c      	mov	ip, r3
 800243c:	e6e6      	b.n	800220c <__aeabi_dmul+0x258>
 800243e:	4912      	ldr	r1, [pc, #72]	; (8002488 <__aeabi_dmul+0x4d4>)
 8002440:	0022      	movs	r2, r4
 8002442:	4461      	add	r1, ip
 8002444:	002e      	movs	r6, r5
 8002446:	408d      	lsls	r5, r1
 8002448:	408a      	lsls	r2, r1
 800244a:	40c6      	lsrs	r6, r0
 800244c:	1e69      	subs	r1, r5, #1
 800244e:	418d      	sbcs	r5, r1
 8002450:	4332      	orrs	r2, r6
 8002452:	432a      	orrs	r2, r5
 8002454:	40c4      	lsrs	r4, r0
 8002456:	0753      	lsls	r3, r2, #29
 8002458:	d0b6      	beq.n	80023c8 <__aeabi_dmul+0x414>
 800245a:	210f      	movs	r1, #15
 800245c:	4011      	ands	r1, r2
 800245e:	2904      	cmp	r1, #4
 8002460:	d1ac      	bne.n	80023bc <__aeabi_dmul+0x408>
 8002462:	e7b1      	b.n	80023c8 <__aeabi_dmul+0x414>
 8002464:	0765      	lsls	r5, r4, #29
 8002466:	0264      	lsls	r4, r4, #9
 8002468:	0b24      	lsrs	r4, r4, #12
 800246a:	08d2      	lsrs	r2, r2, #3
 800246c:	4315      	orrs	r5, r2
 800246e:	2200      	movs	r2, #0
 8002470:	e601      	b.n	8002076 <__aeabi_dmul+0xc2>
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	0312      	lsls	r2, r2, #12
 8002476:	4314      	orrs	r4, r2
 8002478:	0324      	lsls	r4, r4, #12
 800247a:	4a01      	ldr	r2, [pc, #4]	; (8002480 <__aeabi_dmul+0x4cc>)
 800247c:	0b24      	lsrs	r4, r4, #12
 800247e:	e5fa      	b.n	8002076 <__aeabi_dmul+0xc2>
 8002480:	000007ff 	.word	0x000007ff
 8002484:	0000043e 	.word	0x0000043e
 8002488:	0000041e 	.word	0x0000041e

0800248c <__aeabi_dsub>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	4657      	mov	r7, sl
 8002490:	464e      	mov	r6, r9
 8002492:	4645      	mov	r5, r8
 8002494:	46de      	mov	lr, fp
 8002496:	b5e0      	push	{r5, r6, r7, lr}
 8002498:	001e      	movs	r6, r3
 800249a:	0017      	movs	r7, r2
 800249c:	004a      	lsls	r2, r1, #1
 800249e:	030b      	lsls	r3, r1, #12
 80024a0:	0d52      	lsrs	r2, r2, #21
 80024a2:	0a5b      	lsrs	r3, r3, #9
 80024a4:	4690      	mov	r8, r2
 80024a6:	0f42      	lsrs	r2, r0, #29
 80024a8:	431a      	orrs	r2, r3
 80024aa:	0fcd      	lsrs	r5, r1, #31
 80024ac:	4ccd      	ldr	r4, [pc, #820]	; (80027e4 <__aeabi_dsub+0x358>)
 80024ae:	0331      	lsls	r1, r6, #12
 80024b0:	00c3      	lsls	r3, r0, #3
 80024b2:	4694      	mov	ip, r2
 80024b4:	0070      	lsls	r0, r6, #1
 80024b6:	0f7a      	lsrs	r2, r7, #29
 80024b8:	0a49      	lsrs	r1, r1, #9
 80024ba:	00ff      	lsls	r7, r7, #3
 80024bc:	469a      	mov	sl, r3
 80024be:	46b9      	mov	r9, r7
 80024c0:	0d40      	lsrs	r0, r0, #21
 80024c2:	0ff6      	lsrs	r6, r6, #31
 80024c4:	4311      	orrs	r1, r2
 80024c6:	42a0      	cmp	r0, r4
 80024c8:	d100      	bne.n	80024cc <__aeabi_dsub+0x40>
 80024ca:	e0b1      	b.n	8002630 <__aeabi_dsub+0x1a4>
 80024cc:	2201      	movs	r2, #1
 80024ce:	4056      	eors	r6, r2
 80024d0:	46b3      	mov	fp, r6
 80024d2:	42b5      	cmp	r5, r6
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x4c>
 80024d6:	e088      	b.n	80025ea <__aeabi_dsub+0x15e>
 80024d8:	4642      	mov	r2, r8
 80024da:	1a12      	subs	r2, r2, r0
 80024dc:	2a00      	cmp	r2, #0
 80024de:	dc00      	bgt.n	80024e2 <__aeabi_dsub+0x56>
 80024e0:	e0ae      	b.n	8002640 <__aeabi_dsub+0x1b4>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x5c>
 80024e6:	e0c1      	b.n	800266c <__aeabi_dsub+0x1e0>
 80024e8:	48be      	ldr	r0, [pc, #760]	; (80027e4 <__aeabi_dsub+0x358>)
 80024ea:	4580      	cmp	r8, r0
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x64>
 80024ee:	e151      	b.n	8002794 <__aeabi_dsub+0x308>
 80024f0:	2080      	movs	r0, #128	; 0x80
 80024f2:	0400      	lsls	r0, r0, #16
 80024f4:	4301      	orrs	r1, r0
 80024f6:	2a38      	cmp	r2, #56	; 0x38
 80024f8:	dd00      	ble.n	80024fc <__aeabi_dsub+0x70>
 80024fa:	e17b      	b.n	80027f4 <__aeabi_dsub+0x368>
 80024fc:	2a1f      	cmp	r2, #31
 80024fe:	dd00      	ble.n	8002502 <__aeabi_dsub+0x76>
 8002500:	e1ee      	b.n	80028e0 <__aeabi_dsub+0x454>
 8002502:	2020      	movs	r0, #32
 8002504:	003e      	movs	r6, r7
 8002506:	1a80      	subs	r0, r0, r2
 8002508:	000c      	movs	r4, r1
 800250a:	40d6      	lsrs	r6, r2
 800250c:	40d1      	lsrs	r1, r2
 800250e:	4087      	lsls	r7, r0
 8002510:	4662      	mov	r2, ip
 8002512:	4084      	lsls	r4, r0
 8002514:	1a52      	subs	r2, r2, r1
 8002516:	1e78      	subs	r0, r7, #1
 8002518:	4187      	sbcs	r7, r0
 800251a:	4694      	mov	ip, r2
 800251c:	4334      	orrs	r4, r6
 800251e:	4327      	orrs	r7, r4
 8002520:	1bdc      	subs	r4, r3, r7
 8002522:	42a3      	cmp	r3, r4
 8002524:	419b      	sbcs	r3, r3
 8002526:	4662      	mov	r2, ip
 8002528:	425b      	negs	r3, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4699      	mov	r9, r3
 800252e:	464b      	mov	r3, r9
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	d400      	bmi.n	8002536 <__aeabi_dsub+0xaa>
 8002534:	e118      	b.n	8002768 <__aeabi_dsub+0x2dc>
 8002536:	464b      	mov	r3, r9
 8002538:	0258      	lsls	r0, r3, #9
 800253a:	0a43      	lsrs	r3, r0, #9
 800253c:	4699      	mov	r9, r3
 800253e:	464b      	mov	r3, r9
 8002540:	2b00      	cmp	r3, #0
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0xba>
 8002544:	e137      	b.n	80027b6 <__aeabi_dsub+0x32a>
 8002546:	4648      	mov	r0, r9
 8002548:	f000 fc68 	bl	8002e1c <__clzsi2>
 800254c:	0001      	movs	r1, r0
 800254e:	3908      	subs	r1, #8
 8002550:	2320      	movs	r3, #32
 8002552:	0022      	movs	r2, r4
 8002554:	4648      	mov	r0, r9
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	40da      	lsrs	r2, r3
 800255a:	4088      	lsls	r0, r1
 800255c:	408c      	lsls	r4, r1
 800255e:	4643      	mov	r3, r8
 8002560:	4310      	orrs	r0, r2
 8002562:	4588      	cmp	r8, r1
 8002564:	dd00      	ble.n	8002568 <__aeabi_dsub+0xdc>
 8002566:	e136      	b.n	80027d6 <__aeabi_dsub+0x34a>
 8002568:	1ac9      	subs	r1, r1, r3
 800256a:	1c4b      	adds	r3, r1, #1
 800256c:	2b1f      	cmp	r3, #31
 800256e:	dd00      	ble.n	8002572 <__aeabi_dsub+0xe6>
 8002570:	e0ea      	b.n	8002748 <__aeabi_dsub+0x2bc>
 8002572:	2220      	movs	r2, #32
 8002574:	0026      	movs	r6, r4
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	0001      	movs	r1, r0
 800257a:	4094      	lsls	r4, r2
 800257c:	40de      	lsrs	r6, r3
 800257e:	40d8      	lsrs	r0, r3
 8002580:	2300      	movs	r3, #0
 8002582:	4091      	lsls	r1, r2
 8002584:	1e62      	subs	r2, r4, #1
 8002586:	4194      	sbcs	r4, r2
 8002588:	4681      	mov	r9, r0
 800258a:	4698      	mov	r8, r3
 800258c:	4331      	orrs	r1, r6
 800258e:	430c      	orrs	r4, r1
 8002590:	0763      	lsls	r3, r4, #29
 8002592:	d009      	beq.n	80025a8 <__aeabi_dsub+0x11c>
 8002594:	230f      	movs	r3, #15
 8002596:	4023      	ands	r3, r4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d005      	beq.n	80025a8 <__aeabi_dsub+0x11c>
 800259c:	1d23      	adds	r3, r4, #4
 800259e:	42a3      	cmp	r3, r4
 80025a0:	41a4      	sbcs	r4, r4
 80025a2:	4264      	negs	r4, r4
 80025a4:	44a1      	add	r9, r4
 80025a6:	001c      	movs	r4, r3
 80025a8:	464b      	mov	r3, r9
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	d400      	bmi.n	80025b0 <__aeabi_dsub+0x124>
 80025ae:	e0de      	b.n	800276e <__aeabi_dsub+0x2e2>
 80025b0:	4641      	mov	r1, r8
 80025b2:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <__aeabi_dsub+0x358>)
 80025b4:	3101      	adds	r1, #1
 80025b6:	4299      	cmp	r1, r3
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x130>
 80025ba:	e0e7      	b.n	800278c <__aeabi_dsub+0x300>
 80025bc:	464b      	mov	r3, r9
 80025be:	488a      	ldr	r0, [pc, #552]	; (80027e8 <__aeabi_dsub+0x35c>)
 80025c0:	08e4      	lsrs	r4, r4, #3
 80025c2:	4003      	ands	r3, r0
 80025c4:	0018      	movs	r0, r3
 80025c6:	0549      	lsls	r1, r1, #21
 80025c8:	075b      	lsls	r3, r3, #29
 80025ca:	0240      	lsls	r0, r0, #9
 80025cc:	4323      	orrs	r3, r4
 80025ce:	0d4a      	lsrs	r2, r1, #21
 80025d0:	0b04      	lsrs	r4, r0, #12
 80025d2:	0512      	lsls	r2, r2, #20
 80025d4:	07ed      	lsls	r5, r5, #31
 80025d6:	4322      	orrs	r2, r4
 80025d8:	432a      	orrs	r2, r5
 80025da:	0018      	movs	r0, r3
 80025dc:	0011      	movs	r1, r2
 80025de:	bcf0      	pop	{r4, r5, r6, r7}
 80025e0:	46bb      	mov	fp, r7
 80025e2:	46b2      	mov	sl, r6
 80025e4:	46a9      	mov	r9, r5
 80025e6:	46a0      	mov	r8, r4
 80025e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ea:	4642      	mov	r2, r8
 80025ec:	1a12      	subs	r2, r2, r0
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	dd52      	ble.n	8002698 <__aeabi_dsub+0x20c>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x16c>
 80025f6:	e09c      	b.n	8002732 <__aeabi_dsub+0x2a6>
 80025f8:	45a0      	cmp	r8, r4
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x172>
 80025fc:	e0ca      	b.n	8002794 <__aeabi_dsub+0x308>
 80025fe:	2080      	movs	r0, #128	; 0x80
 8002600:	0400      	lsls	r0, r0, #16
 8002602:	4301      	orrs	r1, r0
 8002604:	2a38      	cmp	r2, #56	; 0x38
 8002606:	dd00      	ble.n	800260a <__aeabi_dsub+0x17e>
 8002608:	e149      	b.n	800289e <__aeabi_dsub+0x412>
 800260a:	2a1f      	cmp	r2, #31
 800260c:	dc00      	bgt.n	8002610 <__aeabi_dsub+0x184>
 800260e:	e197      	b.n	8002940 <__aeabi_dsub+0x4b4>
 8002610:	0010      	movs	r0, r2
 8002612:	000e      	movs	r6, r1
 8002614:	3820      	subs	r0, #32
 8002616:	40c6      	lsrs	r6, r0
 8002618:	2a20      	cmp	r2, #32
 800261a:	d004      	beq.n	8002626 <__aeabi_dsub+0x19a>
 800261c:	2040      	movs	r0, #64	; 0x40
 800261e:	1a82      	subs	r2, r0, r2
 8002620:	4091      	lsls	r1, r2
 8002622:	430f      	orrs	r7, r1
 8002624:	46b9      	mov	r9, r7
 8002626:	464c      	mov	r4, r9
 8002628:	1e62      	subs	r2, r4, #1
 800262a:	4194      	sbcs	r4, r2
 800262c:	4334      	orrs	r4, r6
 800262e:	e13a      	b.n	80028a6 <__aeabi_dsub+0x41a>
 8002630:	000a      	movs	r2, r1
 8002632:	433a      	orrs	r2, r7
 8002634:	d028      	beq.n	8002688 <__aeabi_dsub+0x1fc>
 8002636:	46b3      	mov	fp, r6
 8002638:	42b5      	cmp	r5, r6
 800263a:	d02b      	beq.n	8002694 <__aeabi_dsub+0x208>
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <__aeabi_dsub+0x360>)
 800263e:	4442      	add	r2, r8
 8002640:	2a00      	cmp	r2, #0
 8002642:	d05d      	beq.n	8002700 <__aeabi_dsub+0x274>
 8002644:	4642      	mov	r2, r8
 8002646:	4644      	mov	r4, r8
 8002648:	1a82      	subs	r2, r0, r2
 800264a:	2c00      	cmp	r4, #0
 800264c:	d000      	beq.n	8002650 <__aeabi_dsub+0x1c4>
 800264e:	e0f5      	b.n	800283c <__aeabi_dsub+0x3b0>
 8002650:	4665      	mov	r5, ip
 8002652:	431d      	orrs	r5, r3
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x1cc>
 8002656:	e19c      	b.n	8002992 <__aeabi_dsub+0x506>
 8002658:	1e55      	subs	r5, r2, #1
 800265a:	2a01      	cmp	r2, #1
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x1d4>
 800265e:	e1fb      	b.n	8002a58 <__aeabi_dsub+0x5cc>
 8002660:	4c60      	ldr	r4, [pc, #384]	; (80027e4 <__aeabi_dsub+0x358>)
 8002662:	42a2      	cmp	r2, r4
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x1dc>
 8002666:	e1bd      	b.n	80029e4 <__aeabi_dsub+0x558>
 8002668:	002a      	movs	r2, r5
 800266a:	e0f0      	b.n	800284e <__aeabi_dsub+0x3c2>
 800266c:	0008      	movs	r0, r1
 800266e:	4338      	orrs	r0, r7
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x1e8>
 8002672:	e0c3      	b.n	80027fc <__aeabi_dsub+0x370>
 8002674:	1e50      	subs	r0, r2, #1
 8002676:	2a01      	cmp	r2, #1
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x1f0>
 800267a:	e1a8      	b.n	80029ce <__aeabi_dsub+0x542>
 800267c:	4c59      	ldr	r4, [pc, #356]	; (80027e4 <__aeabi_dsub+0x358>)
 800267e:	42a2      	cmp	r2, r4
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x1f8>
 8002682:	e087      	b.n	8002794 <__aeabi_dsub+0x308>
 8002684:	0002      	movs	r2, r0
 8002686:	e736      	b.n	80024f6 <__aeabi_dsub+0x6a>
 8002688:	2201      	movs	r2, #1
 800268a:	4056      	eors	r6, r2
 800268c:	46b3      	mov	fp, r6
 800268e:	42b5      	cmp	r5, r6
 8002690:	d000      	beq.n	8002694 <__aeabi_dsub+0x208>
 8002692:	e721      	b.n	80024d8 <__aeabi_dsub+0x4c>
 8002694:	4a55      	ldr	r2, [pc, #340]	; (80027ec <__aeabi_dsub+0x360>)
 8002696:	4442      	add	r2, r8
 8002698:	2a00      	cmp	r2, #0
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x212>
 800269c:	e0b5      	b.n	800280a <__aeabi_dsub+0x37e>
 800269e:	4642      	mov	r2, r8
 80026a0:	4644      	mov	r4, r8
 80026a2:	1a82      	subs	r2, r0, r2
 80026a4:	2c00      	cmp	r4, #0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x21e>
 80026a8:	e138      	b.n	800291c <__aeabi_dsub+0x490>
 80026aa:	4e4e      	ldr	r6, [pc, #312]	; (80027e4 <__aeabi_dsub+0x358>)
 80026ac:	42b0      	cmp	r0, r6
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x226>
 80026b0:	e1de      	b.n	8002a70 <__aeabi_dsub+0x5e4>
 80026b2:	2680      	movs	r6, #128	; 0x80
 80026b4:	4664      	mov	r4, ip
 80026b6:	0436      	lsls	r6, r6, #16
 80026b8:	4334      	orrs	r4, r6
 80026ba:	46a4      	mov	ip, r4
 80026bc:	2a38      	cmp	r2, #56	; 0x38
 80026be:	dd00      	ble.n	80026c2 <__aeabi_dsub+0x236>
 80026c0:	e196      	b.n	80029f0 <__aeabi_dsub+0x564>
 80026c2:	2a1f      	cmp	r2, #31
 80026c4:	dd00      	ble.n	80026c8 <__aeabi_dsub+0x23c>
 80026c6:	e224      	b.n	8002b12 <__aeabi_dsub+0x686>
 80026c8:	2620      	movs	r6, #32
 80026ca:	1ab4      	subs	r4, r6, r2
 80026cc:	46a2      	mov	sl, r4
 80026ce:	4664      	mov	r4, ip
 80026d0:	4656      	mov	r6, sl
 80026d2:	40b4      	lsls	r4, r6
 80026d4:	46a1      	mov	r9, r4
 80026d6:	001c      	movs	r4, r3
 80026d8:	464e      	mov	r6, r9
 80026da:	40d4      	lsrs	r4, r2
 80026dc:	4326      	orrs	r6, r4
 80026de:	0034      	movs	r4, r6
 80026e0:	4656      	mov	r6, sl
 80026e2:	40b3      	lsls	r3, r6
 80026e4:	1e5e      	subs	r6, r3, #1
 80026e6:	41b3      	sbcs	r3, r6
 80026e8:	431c      	orrs	r4, r3
 80026ea:	4663      	mov	r3, ip
 80026ec:	40d3      	lsrs	r3, r2
 80026ee:	18c9      	adds	r1, r1, r3
 80026f0:	19e4      	adds	r4, r4, r7
 80026f2:	42bc      	cmp	r4, r7
 80026f4:	41bf      	sbcs	r7, r7
 80026f6:	427f      	negs	r7, r7
 80026f8:	46b9      	mov	r9, r7
 80026fa:	4680      	mov	r8, r0
 80026fc:	4489      	add	r9, r1
 80026fe:	e0d8      	b.n	80028b2 <__aeabi_dsub+0x426>
 8002700:	4640      	mov	r0, r8
 8002702:	4c3b      	ldr	r4, [pc, #236]	; (80027f0 <__aeabi_dsub+0x364>)
 8002704:	3001      	adds	r0, #1
 8002706:	4220      	tst	r0, r4
 8002708:	d000      	beq.n	800270c <__aeabi_dsub+0x280>
 800270a:	e0b4      	b.n	8002876 <__aeabi_dsub+0x3ea>
 800270c:	4640      	mov	r0, r8
 800270e:	2800      	cmp	r0, #0
 8002710:	d000      	beq.n	8002714 <__aeabi_dsub+0x288>
 8002712:	e144      	b.n	800299e <__aeabi_dsub+0x512>
 8002714:	4660      	mov	r0, ip
 8002716:	4318      	orrs	r0, r3
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x290>
 800271a:	e190      	b.n	8002a3e <__aeabi_dsub+0x5b2>
 800271c:	0008      	movs	r0, r1
 800271e:	4338      	orrs	r0, r7
 8002720:	d000      	beq.n	8002724 <__aeabi_dsub+0x298>
 8002722:	e1aa      	b.n	8002a7a <__aeabi_dsub+0x5ee>
 8002724:	4661      	mov	r1, ip
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	0749      	lsls	r1, r1, #29
 800272a:	430b      	orrs	r3, r1
 800272c:	4661      	mov	r1, ip
 800272e:	08cc      	lsrs	r4, r1, #3
 8002730:	e027      	b.n	8002782 <__aeabi_dsub+0x2f6>
 8002732:	0008      	movs	r0, r1
 8002734:	4338      	orrs	r0, r7
 8002736:	d061      	beq.n	80027fc <__aeabi_dsub+0x370>
 8002738:	1e50      	subs	r0, r2, #1
 800273a:	2a01      	cmp	r2, #1
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2b4>
 800273e:	e139      	b.n	80029b4 <__aeabi_dsub+0x528>
 8002740:	42a2      	cmp	r2, r4
 8002742:	d027      	beq.n	8002794 <__aeabi_dsub+0x308>
 8002744:	0002      	movs	r2, r0
 8002746:	e75d      	b.n	8002604 <__aeabi_dsub+0x178>
 8002748:	0002      	movs	r2, r0
 800274a:	391f      	subs	r1, #31
 800274c:	40ca      	lsrs	r2, r1
 800274e:	0011      	movs	r1, r2
 8002750:	2b20      	cmp	r3, #32
 8002752:	d003      	beq.n	800275c <__aeabi_dsub+0x2d0>
 8002754:	2240      	movs	r2, #64	; 0x40
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	4098      	lsls	r0, r3
 800275a:	4304      	orrs	r4, r0
 800275c:	1e63      	subs	r3, r4, #1
 800275e:	419c      	sbcs	r4, r3
 8002760:	2300      	movs	r3, #0
 8002762:	4699      	mov	r9, r3
 8002764:	4698      	mov	r8, r3
 8002766:	430c      	orrs	r4, r1
 8002768:	0763      	lsls	r3, r4, #29
 800276a:	d000      	beq.n	800276e <__aeabi_dsub+0x2e2>
 800276c:	e712      	b.n	8002594 <__aeabi_dsub+0x108>
 800276e:	464b      	mov	r3, r9
 8002770:	464a      	mov	r2, r9
 8002772:	08e4      	lsrs	r4, r4, #3
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	4323      	orrs	r3, r4
 8002778:	08d4      	lsrs	r4, r2, #3
 800277a:	4642      	mov	r2, r8
 800277c:	4919      	ldr	r1, [pc, #100]	; (80027e4 <__aeabi_dsub+0x358>)
 800277e:	428a      	cmp	r2, r1
 8002780:	d00e      	beq.n	80027a0 <__aeabi_dsub+0x314>
 8002782:	0324      	lsls	r4, r4, #12
 8002784:	0552      	lsls	r2, r2, #21
 8002786:	0b24      	lsrs	r4, r4, #12
 8002788:	0d52      	lsrs	r2, r2, #21
 800278a:	e722      	b.n	80025d2 <__aeabi_dsub+0x146>
 800278c:	000a      	movs	r2, r1
 800278e:	2400      	movs	r4, #0
 8002790:	2300      	movs	r3, #0
 8002792:	e71e      	b.n	80025d2 <__aeabi_dsub+0x146>
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	4662      	mov	r2, ip
 8002798:	0752      	lsls	r2, r2, #29
 800279a:	4313      	orrs	r3, r2
 800279c:	4662      	mov	r2, ip
 800279e:	08d4      	lsrs	r4, r2, #3
 80027a0:	001a      	movs	r2, r3
 80027a2:	4322      	orrs	r2, r4
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x31c>
 80027a6:	e1fc      	b.n	8002ba2 <__aeabi_dsub+0x716>
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	0312      	lsls	r2, r2, #12
 80027ac:	4314      	orrs	r4, r2
 80027ae:	0324      	lsls	r4, r4, #12
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <__aeabi_dsub+0x358>)
 80027b2:	0b24      	lsrs	r4, r4, #12
 80027b4:	e70d      	b.n	80025d2 <__aeabi_dsub+0x146>
 80027b6:	0020      	movs	r0, r4
 80027b8:	f000 fb30 	bl	8002e1c <__clzsi2>
 80027bc:	0001      	movs	r1, r0
 80027be:	3118      	adds	r1, #24
 80027c0:	291f      	cmp	r1, #31
 80027c2:	dc00      	bgt.n	80027c6 <__aeabi_dsub+0x33a>
 80027c4:	e6c4      	b.n	8002550 <__aeabi_dsub+0xc4>
 80027c6:	3808      	subs	r0, #8
 80027c8:	4084      	lsls	r4, r0
 80027ca:	4643      	mov	r3, r8
 80027cc:	0020      	movs	r0, r4
 80027ce:	2400      	movs	r4, #0
 80027d0:	4588      	cmp	r8, r1
 80027d2:	dc00      	bgt.n	80027d6 <__aeabi_dsub+0x34a>
 80027d4:	e6c8      	b.n	8002568 <__aeabi_dsub+0xdc>
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__aeabi_dsub+0x35c>)
 80027d8:	1a5b      	subs	r3, r3, r1
 80027da:	4010      	ands	r0, r2
 80027dc:	4698      	mov	r8, r3
 80027de:	4681      	mov	r9, r0
 80027e0:	e6d6      	b.n	8002590 <__aeabi_dsub+0x104>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	000007ff 	.word	0x000007ff
 80027e8:	ff7fffff 	.word	0xff7fffff
 80027ec:	fffff801 	.word	0xfffff801
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	430f      	orrs	r7, r1
 80027f6:	1e7a      	subs	r2, r7, #1
 80027f8:	4197      	sbcs	r7, r2
 80027fa:	e691      	b.n	8002520 <__aeabi_dsub+0x94>
 80027fc:	4661      	mov	r1, ip
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	0749      	lsls	r1, r1, #29
 8002802:	430b      	orrs	r3, r1
 8002804:	4661      	mov	r1, ip
 8002806:	08cc      	lsrs	r4, r1, #3
 8002808:	e7b8      	b.n	800277c <__aeabi_dsub+0x2f0>
 800280a:	4640      	mov	r0, r8
 800280c:	4cd3      	ldr	r4, [pc, #844]	; (8002b5c <__aeabi_dsub+0x6d0>)
 800280e:	3001      	adds	r0, #1
 8002810:	4220      	tst	r0, r4
 8002812:	d000      	beq.n	8002816 <__aeabi_dsub+0x38a>
 8002814:	e0a2      	b.n	800295c <__aeabi_dsub+0x4d0>
 8002816:	4640      	mov	r0, r8
 8002818:	2800      	cmp	r0, #0
 800281a:	d000      	beq.n	800281e <__aeabi_dsub+0x392>
 800281c:	e101      	b.n	8002a22 <__aeabi_dsub+0x596>
 800281e:	4660      	mov	r0, ip
 8002820:	4318      	orrs	r0, r3
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x39a>
 8002824:	e15e      	b.n	8002ae4 <__aeabi_dsub+0x658>
 8002826:	0008      	movs	r0, r1
 8002828:	4338      	orrs	r0, r7
 800282a:	d000      	beq.n	800282e <__aeabi_dsub+0x3a2>
 800282c:	e15f      	b.n	8002aee <__aeabi_dsub+0x662>
 800282e:	4661      	mov	r1, ip
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	0749      	lsls	r1, r1, #29
 8002834:	430b      	orrs	r3, r1
 8002836:	4661      	mov	r1, ip
 8002838:	08cc      	lsrs	r4, r1, #3
 800283a:	e7a2      	b.n	8002782 <__aeabi_dsub+0x2f6>
 800283c:	4dc8      	ldr	r5, [pc, #800]	; (8002b60 <__aeabi_dsub+0x6d4>)
 800283e:	42a8      	cmp	r0, r5
 8002840:	d100      	bne.n	8002844 <__aeabi_dsub+0x3b8>
 8002842:	e0cf      	b.n	80029e4 <__aeabi_dsub+0x558>
 8002844:	2580      	movs	r5, #128	; 0x80
 8002846:	4664      	mov	r4, ip
 8002848:	042d      	lsls	r5, r5, #16
 800284a:	432c      	orrs	r4, r5
 800284c:	46a4      	mov	ip, r4
 800284e:	2a38      	cmp	r2, #56	; 0x38
 8002850:	dc56      	bgt.n	8002900 <__aeabi_dsub+0x474>
 8002852:	2a1f      	cmp	r2, #31
 8002854:	dd00      	ble.n	8002858 <__aeabi_dsub+0x3cc>
 8002856:	e0d1      	b.n	80029fc <__aeabi_dsub+0x570>
 8002858:	2520      	movs	r5, #32
 800285a:	001e      	movs	r6, r3
 800285c:	1aad      	subs	r5, r5, r2
 800285e:	4664      	mov	r4, ip
 8002860:	40ab      	lsls	r3, r5
 8002862:	40ac      	lsls	r4, r5
 8002864:	40d6      	lsrs	r6, r2
 8002866:	1e5d      	subs	r5, r3, #1
 8002868:	41ab      	sbcs	r3, r5
 800286a:	4334      	orrs	r4, r6
 800286c:	4323      	orrs	r3, r4
 800286e:	4664      	mov	r4, ip
 8002870:	40d4      	lsrs	r4, r2
 8002872:	1b09      	subs	r1, r1, r4
 8002874:	e049      	b.n	800290a <__aeabi_dsub+0x47e>
 8002876:	4660      	mov	r0, ip
 8002878:	1bdc      	subs	r4, r3, r7
 800287a:	1a46      	subs	r6, r0, r1
 800287c:	42a3      	cmp	r3, r4
 800287e:	4180      	sbcs	r0, r0
 8002880:	4240      	negs	r0, r0
 8002882:	4681      	mov	r9, r0
 8002884:	0030      	movs	r0, r6
 8002886:	464e      	mov	r6, r9
 8002888:	1b80      	subs	r0, r0, r6
 800288a:	4681      	mov	r9, r0
 800288c:	0200      	lsls	r0, r0, #8
 800288e:	d476      	bmi.n	800297e <__aeabi_dsub+0x4f2>
 8002890:	464b      	mov	r3, r9
 8002892:	4323      	orrs	r3, r4
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x40c>
 8002896:	e652      	b.n	800253e <__aeabi_dsub+0xb2>
 8002898:	2400      	movs	r4, #0
 800289a:	2500      	movs	r5, #0
 800289c:	e771      	b.n	8002782 <__aeabi_dsub+0x2f6>
 800289e:	4339      	orrs	r1, r7
 80028a0:	000c      	movs	r4, r1
 80028a2:	1e62      	subs	r2, r4, #1
 80028a4:	4194      	sbcs	r4, r2
 80028a6:	18e4      	adds	r4, r4, r3
 80028a8:	429c      	cmp	r4, r3
 80028aa:	419b      	sbcs	r3, r3
 80028ac:	425b      	negs	r3, r3
 80028ae:	4463      	add	r3, ip
 80028b0:	4699      	mov	r9, r3
 80028b2:	464b      	mov	r3, r9
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	d400      	bmi.n	80028ba <__aeabi_dsub+0x42e>
 80028b8:	e756      	b.n	8002768 <__aeabi_dsub+0x2dc>
 80028ba:	2301      	movs	r3, #1
 80028bc:	469c      	mov	ip, r3
 80028be:	4ba8      	ldr	r3, [pc, #672]	; (8002b60 <__aeabi_dsub+0x6d4>)
 80028c0:	44e0      	add	r8, ip
 80028c2:	4598      	cmp	r8, r3
 80028c4:	d038      	beq.n	8002938 <__aeabi_dsub+0x4ac>
 80028c6:	464b      	mov	r3, r9
 80028c8:	48a6      	ldr	r0, [pc, #664]	; (8002b64 <__aeabi_dsub+0x6d8>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	4003      	ands	r3, r0
 80028ce:	0018      	movs	r0, r3
 80028d0:	0863      	lsrs	r3, r4, #1
 80028d2:	4014      	ands	r4, r2
 80028d4:	431c      	orrs	r4, r3
 80028d6:	07c3      	lsls	r3, r0, #31
 80028d8:	431c      	orrs	r4, r3
 80028da:	0843      	lsrs	r3, r0, #1
 80028dc:	4699      	mov	r9, r3
 80028de:	e657      	b.n	8002590 <__aeabi_dsub+0x104>
 80028e0:	0010      	movs	r0, r2
 80028e2:	000e      	movs	r6, r1
 80028e4:	3820      	subs	r0, #32
 80028e6:	40c6      	lsrs	r6, r0
 80028e8:	2a20      	cmp	r2, #32
 80028ea:	d004      	beq.n	80028f6 <__aeabi_dsub+0x46a>
 80028ec:	2040      	movs	r0, #64	; 0x40
 80028ee:	1a82      	subs	r2, r0, r2
 80028f0:	4091      	lsls	r1, r2
 80028f2:	430f      	orrs	r7, r1
 80028f4:	46b9      	mov	r9, r7
 80028f6:	464f      	mov	r7, r9
 80028f8:	1e7a      	subs	r2, r7, #1
 80028fa:	4197      	sbcs	r7, r2
 80028fc:	4337      	orrs	r7, r6
 80028fe:	e60f      	b.n	8002520 <__aeabi_dsub+0x94>
 8002900:	4662      	mov	r2, ip
 8002902:	431a      	orrs	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	4193      	sbcs	r3, r2
 800290a:	1afc      	subs	r4, r7, r3
 800290c:	42a7      	cmp	r7, r4
 800290e:	41bf      	sbcs	r7, r7
 8002910:	427f      	negs	r7, r7
 8002912:	1bcb      	subs	r3, r1, r7
 8002914:	4699      	mov	r9, r3
 8002916:	465d      	mov	r5, fp
 8002918:	4680      	mov	r8, r0
 800291a:	e608      	b.n	800252e <__aeabi_dsub+0xa2>
 800291c:	4666      	mov	r6, ip
 800291e:	431e      	orrs	r6, r3
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x498>
 8002922:	e0be      	b.n	8002aa2 <__aeabi_dsub+0x616>
 8002924:	1e56      	subs	r6, r2, #1
 8002926:	2a01      	cmp	r2, #1
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x4a0>
 800292a:	e109      	b.n	8002b40 <__aeabi_dsub+0x6b4>
 800292c:	4c8c      	ldr	r4, [pc, #560]	; (8002b60 <__aeabi_dsub+0x6d4>)
 800292e:	42a2      	cmp	r2, r4
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x4a8>
 8002932:	e119      	b.n	8002b68 <__aeabi_dsub+0x6dc>
 8002934:	0032      	movs	r2, r6
 8002936:	e6c1      	b.n	80026bc <__aeabi_dsub+0x230>
 8002938:	4642      	mov	r2, r8
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e648      	b.n	80025d2 <__aeabi_dsub+0x146>
 8002940:	2020      	movs	r0, #32
 8002942:	000c      	movs	r4, r1
 8002944:	1a80      	subs	r0, r0, r2
 8002946:	003e      	movs	r6, r7
 8002948:	4087      	lsls	r7, r0
 800294a:	4084      	lsls	r4, r0
 800294c:	40d6      	lsrs	r6, r2
 800294e:	1e78      	subs	r0, r7, #1
 8002950:	4187      	sbcs	r7, r0
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4334      	orrs	r4, r6
 8002956:	433c      	orrs	r4, r7
 8002958:	448c      	add	ip, r1
 800295a:	e7a4      	b.n	80028a6 <__aeabi_dsub+0x41a>
 800295c:	4a80      	ldr	r2, [pc, #512]	; (8002b60 <__aeabi_dsub+0x6d4>)
 800295e:	4290      	cmp	r0, r2
 8002960:	d100      	bne.n	8002964 <__aeabi_dsub+0x4d8>
 8002962:	e0e9      	b.n	8002b38 <__aeabi_dsub+0x6ac>
 8002964:	19df      	adds	r7, r3, r7
 8002966:	429f      	cmp	r7, r3
 8002968:	419b      	sbcs	r3, r3
 800296a:	4461      	add	r1, ip
 800296c:	425b      	negs	r3, r3
 800296e:	18c9      	adds	r1, r1, r3
 8002970:	07cc      	lsls	r4, r1, #31
 8002972:	087f      	lsrs	r7, r7, #1
 8002974:	084b      	lsrs	r3, r1, #1
 8002976:	4699      	mov	r9, r3
 8002978:	4680      	mov	r8, r0
 800297a:	433c      	orrs	r4, r7
 800297c:	e6f4      	b.n	8002768 <__aeabi_dsub+0x2dc>
 800297e:	1afc      	subs	r4, r7, r3
 8002980:	42a7      	cmp	r7, r4
 8002982:	41bf      	sbcs	r7, r7
 8002984:	4663      	mov	r3, ip
 8002986:	427f      	negs	r7, r7
 8002988:	1ac9      	subs	r1, r1, r3
 800298a:	1bcb      	subs	r3, r1, r7
 800298c:	4699      	mov	r9, r3
 800298e:	465d      	mov	r5, fp
 8002990:	e5d5      	b.n	800253e <__aeabi_dsub+0xb2>
 8002992:	08ff      	lsrs	r7, r7, #3
 8002994:	074b      	lsls	r3, r1, #29
 8002996:	465d      	mov	r5, fp
 8002998:	433b      	orrs	r3, r7
 800299a:	08cc      	lsrs	r4, r1, #3
 800299c:	e6ee      	b.n	800277c <__aeabi_dsub+0x2f0>
 800299e:	4662      	mov	r2, ip
 80029a0:	431a      	orrs	r2, r3
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x51a>
 80029a4:	e082      	b.n	8002aac <__aeabi_dsub+0x620>
 80029a6:	000b      	movs	r3, r1
 80029a8:	433b      	orrs	r3, r7
 80029aa:	d11b      	bne.n	80029e4 <__aeabi_dsub+0x558>
 80029ac:	2480      	movs	r4, #128	; 0x80
 80029ae:	2500      	movs	r5, #0
 80029b0:	0324      	lsls	r4, r4, #12
 80029b2:	e6f9      	b.n	80027a8 <__aeabi_dsub+0x31c>
 80029b4:	19dc      	adds	r4, r3, r7
 80029b6:	429c      	cmp	r4, r3
 80029b8:	419b      	sbcs	r3, r3
 80029ba:	4461      	add	r1, ip
 80029bc:	4689      	mov	r9, r1
 80029be:	425b      	negs	r3, r3
 80029c0:	4499      	add	r9, r3
 80029c2:	464b      	mov	r3, r9
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	d444      	bmi.n	8002a52 <__aeabi_dsub+0x5c6>
 80029c8:	2301      	movs	r3, #1
 80029ca:	4698      	mov	r8, r3
 80029cc:	e6cc      	b.n	8002768 <__aeabi_dsub+0x2dc>
 80029ce:	1bdc      	subs	r4, r3, r7
 80029d0:	4662      	mov	r2, ip
 80029d2:	42a3      	cmp	r3, r4
 80029d4:	419b      	sbcs	r3, r3
 80029d6:	1a51      	subs	r1, r2, r1
 80029d8:	425b      	negs	r3, r3
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	4699      	mov	r9, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	4698      	mov	r8, r3
 80029e2:	e5a4      	b.n	800252e <__aeabi_dsub+0xa2>
 80029e4:	08ff      	lsrs	r7, r7, #3
 80029e6:	074b      	lsls	r3, r1, #29
 80029e8:	465d      	mov	r5, fp
 80029ea:	433b      	orrs	r3, r7
 80029ec:	08cc      	lsrs	r4, r1, #3
 80029ee:	e6d7      	b.n	80027a0 <__aeabi_dsub+0x314>
 80029f0:	4662      	mov	r2, ip
 80029f2:	431a      	orrs	r2, r3
 80029f4:	0014      	movs	r4, r2
 80029f6:	1e63      	subs	r3, r4, #1
 80029f8:	419c      	sbcs	r4, r3
 80029fa:	e679      	b.n	80026f0 <__aeabi_dsub+0x264>
 80029fc:	0015      	movs	r5, r2
 80029fe:	4664      	mov	r4, ip
 8002a00:	3d20      	subs	r5, #32
 8002a02:	40ec      	lsrs	r4, r5
 8002a04:	46a0      	mov	r8, r4
 8002a06:	2a20      	cmp	r2, #32
 8002a08:	d005      	beq.n	8002a16 <__aeabi_dsub+0x58a>
 8002a0a:	2540      	movs	r5, #64	; 0x40
 8002a0c:	4664      	mov	r4, ip
 8002a0e:	1aaa      	subs	r2, r5, r2
 8002a10:	4094      	lsls	r4, r2
 8002a12:	4323      	orrs	r3, r4
 8002a14:	469a      	mov	sl, r3
 8002a16:	4654      	mov	r4, sl
 8002a18:	1e63      	subs	r3, r4, #1
 8002a1a:	419c      	sbcs	r4, r3
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	e773      	b.n	800290a <__aeabi_dsub+0x47e>
 8002a22:	4662      	mov	r2, ip
 8002a24:	431a      	orrs	r2, r3
 8002a26:	d023      	beq.n	8002a70 <__aeabi_dsub+0x5e4>
 8002a28:	000a      	movs	r2, r1
 8002a2a:	433a      	orrs	r2, r7
 8002a2c:	d000      	beq.n	8002a30 <__aeabi_dsub+0x5a4>
 8002a2e:	e0a0      	b.n	8002b72 <__aeabi_dsub+0x6e6>
 8002a30:	4662      	mov	r2, ip
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	0752      	lsls	r2, r2, #29
 8002a36:	4313      	orrs	r3, r2
 8002a38:	4662      	mov	r2, ip
 8002a3a:	08d4      	lsrs	r4, r2, #3
 8002a3c:	e6b0      	b.n	80027a0 <__aeabi_dsub+0x314>
 8002a3e:	000b      	movs	r3, r1
 8002a40:	433b      	orrs	r3, r7
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x5ba>
 8002a44:	e728      	b.n	8002898 <__aeabi_dsub+0x40c>
 8002a46:	08ff      	lsrs	r7, r7, #3
 8002a48:	074b      	lsls	r3, r1, #29
 8002a4a:	465d      	mov	r5, fp
 8002a4c:	433b      	orrs	r3, r7
 8002a4e:	08cc      	lsrs	r4, r1, #3
 8002a50:	e697      	b.n	8002782 <__aeabi_dsub+0x2f6>
 8002a52:	2302      	movs	r3, #2
 8002a54:	4698      	mov	r8, r3
 8002a56:	e736      	b.n	80028c6 <__aeabi_dsub+0x43a>
 8002a58:	1afc      	subs	r4, r7, r3
 8002a5a:	42a7      	cmp	r7, r4
 8002a5c:	41bf      	sbcs	r7, r7
 8002a5e:	4663      	mov	r3, ip
 8002a60:	427f      	negs	r7, r7
 8002a62:	1ac9      	subs	r1, r1, r3
 8002a64:	1bcb      	subs	r3, r1, r7
 8002a66:	4699      	mov	r9, r3
 8002a68:	2301      	movs	r3, #1
 8002a6a:	465d      	mov	r5, fp
 8002a6c:	4698      	mov	r8, r3
 8002a6e:	e55e      	b.n	800252e <__aeabi_dsub+0xa2>
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	08ff      	lsrs	r7, r7, #3
 8002a74:	433b      	orrs	r3, r7
 8002a76:	08cc      	lsrs	r4, r1, #3
 8002a78:	e692      	b.n	80027a0 <__aeabi_dsub+0x314>
 8002a7a:	1bdc      	subs	r4, r3, r7
 8002a7c:	4660      	mov	r0, ip
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	41b6      	sbcs	r6, r6
 8002a82:	1a40      	subs	r0, r0, r1
 8002a84:	4276      	negs	r6, r6
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	4681      	mov	r9, r0
 8002a8a:	0200      	lsls	r0, r0, #8
 8002a8c:	d560      	bpl.n	8002b50 <__aeabi_dsub+0x6c4>
 8002a8e:	1afc      	subs	r4, r7, r3
 8002a90:	42a7      	cmp	r7, r4
 8002a92:	41bf      	sbcs	r7, r7
 8002a94:	4663      	mov	r3, ip
 8002a96:	427f      	negs	r7, r7
 8002a98:	1ac9      	subs	r1, r1, r3
 8002a9a:	1bcb      	subs	r3, r1, r7
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	465d      	mov	r5, fp
 8002aa0:	e576      	b.n	8002590 <__aeabi_dsub+0x104>
 8002aa2:	08ff      	lsrs	r7, r7, #3
 8002aa4:	074b      	lsls	r3, r1, #29
 8002aa6:	433b      	orrs	r3, r7
 8002aa8:	08cc      	lsrs	r4, r1, #3
 8002aaa:	e667      	b.n	800277c <__aeabi_dsub+0x2f0>
 8002aac:	000a      	movs	r2, r1
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	433a      	orrs	r2, r7
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x62a>
 8002ab4:	e66f      	b.n	8002796 <__aeabi_dsub+0x30a>
 8002ab6:	4662      	mov	r2, ip
 8002ab8:	0752      	lsls	r2, r2, #29
 8002aba:	4313      	orrs	r3, r2
 8002abc:	4662      	mov	r2, ip
 8002abe:	08d4      	lsrs	r4, r2, #3
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	0312      	lsls	r2, r2, #12
 8002ac4:	4214      	tst	r4, r2
 8002ac6:	d007      	beq.n	8002ad8 <__aeabi_dsub+0x64c>
 8002ac8:	08c8      	lsrs	r0, r1, #3
 8002aca:	4210      	tst	r0, r2
 8002acc:	d104      	bne.n	8002ad8 <__aeabi_dsub+0x64c>
 8002ace:	465d      	mov	r5, fp
 8002ad0:	0004      	movs	r4, r0
 8002ad2:	08fb      	lsrs	r3, r7, #3
 8002ad4:	0749      	lsls	r1, r1, #29
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	0f5a      	lsrs	r2, r3, #29
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	0752      	lsls	r2, r2, #29
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	e65d      	b.n	80027a0 <__aeabi_dsub+0x314>
 8002ae4:	074b      	lsls	r3, r1, #29
 8002ae6:	08ff      	lsrs	r7, r7, #3
 8002ae8:	433b      	orrs	r3, r7
 8002aea:	08cc      	lsrs	r4, r1, #3
 8002aec:	e649      	b.n	8002782 <__aeabi_dsub+0x2f6>
 8002aee:	19dc      	adds	r4, r3, r7
 8002af0:	429c      	cmp	r4, r3
 8002af2:	419b      	sbcs	r3, r3
 8002af4:	4461      	add	r1, ip
 8002af6:	4689      	mov	r9, r1
 8002af8:	425b      	negs	r3, r3
 8002afa:	4499      	add	r9, r3
 8002afc:	464b      	mov	r3, r9
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	d400      	bmi.n	8002b04 <__aeabi_dsub+0x678>
 8002b02:	e631      	b.n	8002768 <__aeabi_dsub+0x2dc>
 8002b04:	464a      	mov	r2, r9
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <__aeabi_dsub+0x6d8>)
 8002b08:	401a      	ands	r2, r3
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	4691      	mov	r9, r2
 8002b0e:	4698      	mov	r8, r3
 8002b10:	e62a      	b.n	8002768 <__aeabi_dsub+0x2dc>
 8002b12:	0016      	movs	r6, r2
 8002b14:	4664      	mov	r4, ip
 8002b16:	3e20      	subs	r6, #32
 8002b18:	40f4      	lsrs	r4, r6
 8002b1a:	46a0      	mov	r8, r4
 8002b1c:	2a20      	cmp	r2, #32
 8002b1e:	d005      	beq.n	8002b2c <__aeabi_dsub+0x6a0>
 8002b20:	2640      	movs	r6, #64	; 0x40
 8002b22:	4664      	mov	r4, ip
 8002b24:	1ab2      	subs	r2, r6, r2
 8002b26:	4094      	lsls	r4, r2
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	469a      	mov	sl, r3
 8002b2c:	4654      	mov	r4, sl
 8002b2e:	1e63      	subs	r3, r4, #1
 8002b30:	419c      	sbcs	r4, r3
 8002b32:	4643      	mov	r3, r8
 8002b34:	431c      	orrs	r4, r3
 8002b36:	e5db      	b.n	80026f0 <__aeabi_dsub+0x264>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	2400      	movs	r4, #0
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e548      	b.n	80025d2 <__aeabi_dsub+0x146>
 8002b40:	19dc      	adds	r4, r3, r7
 8002b42:	42bc      	cmp	r4, r7
 8002b44:	41bf      	sbcs	r7, r7
 8002b46:	4461      	add	r1, ip
 8002b48:	4689      	mov	r9, r1
 8002b4a:	427f      	negs	r7, r7
 8002b4c:	44b9      	add	r9, r7
 8002b4e:	e738      	b.n	80029c2 <__aeabi_dsub+0x536>
 8002b50:	464b      	mov	r3, r9
 8002b52:	4323      	orrs	r3, r4
 8002b54:	d100      	bne.n	8002b58 <__aeabi_dsub+0x6cc>
 8002b56:	e69f      	b.n	8002898 <__aeabi_dsub+0x40c>
 8002b58:	e606      	b.n	8002768 <__aeabi_dsub+0x2dc>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	000007fe 	.word	0x000007fe
 8002b60:	000007ff 	.word	0x000007ff
 8002b64:	ff7fffff 	.word	0xff7fffff
 8002b68:	08ff      	lsrs	r7, r7, #3
 8002b6a:	074b      	lsls	r3, r1, #29
 8002b6c:	433b      	orrs	r3, r7
 8002b6e:	08cc      	lsrs	r4, r1, #3
 8002b70:	e616      	b.n	80027a0 <__aeabi_dsub+0x314>
 8002b72:	4662      	mov	r2, ip
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4662      	mov	r2, ip
 8002b7c:	08d4      	lsrs	r4, r2, #3
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	0312      	lsls	r2, r2, #12
 8002b82:	4214      	tst	r4, r2
 8002b84:	d007      	beq.n	8002b96 <__aeabi_dsub+0x70a>
 8002b86:	08c8      	lsrs	r0, r1, #3
 8002b88:	4210      	tst	r0, r2
 8002b8a:	d104      	bne.n	8002b96 <__aeabi_dsub+0x70a>
 8002b8c:	465d      	mov	r5, fp
 8002b8e:	0004      	movs	r4, r0
 8002b90:	08fb      	lsrs	r3, r7, #3
 8002b92:	0749      	lsls	r1, r1, #29
 8002b94:	430b      	orrs	r3, r1
 8002b96:	0f5a      	lsrs	r2, r3, #29
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	0752      	lsls	r2, r2, #29
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	e5fe      	b.n	80027a0 <__aeabi_dsub+0x314>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	4a01      	ldr	r2, [pc, #4]	; (8002bac <__aeabi_dsub+0x720>)
 8002ba6:	001c      	movs	r4, r3
 8002ba8:	e513      	b.n	80025d2 <__aeabi_dsub+0x146>
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	000007ff 	.word	0x000007ff

08002bb0 <__aeabi_d2iz>:
 8002bb0:	000a      	movs	r2, r1
 8002bb2:	b530      	push	{r4, r5, lr}
 8002bb4:	4c13      	ldr	r4, [pc, #76]	; (8002c04 <__aeabi_d2iz+0x54>)
 8002bb6:	0053      	lsls	r3, r2, #1
 8002bb8:	0309      	lsls	r1, r1, #12
 8002bba:	0005      	movs	r5, r0
 8002bbc:	0b09      	lsrs	r1, r1, #12
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	0d5b      	lsrs	r3, r3, #21
 8002bc2:	0fd2      	lsrs	r2, r2, #31
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	dd04      	ble.n	8002bd2 <__aeabi_d2iz+0x22>
 8002bc8:	480f      	ldr	r0, [pc, #60]	; (8002c08 <__aeabi_d2iz+0x58>)
 8002bca:	4283      	cmp	r3, r0
 8002bcc:	dd02      	ble.n	8002bd4 <__aeabi_d2iz+0x24>
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <__aeabi_d2iz+0x5c>)
 8002bd0:	18d0      	adds	r0, r2, r3
 8002bd2:	bd30      	pop	{r4, r5, pc}
 8002bd4:	2080      	movs	r0, #128	; 0x80
 8002bd6:	0340      	lsls	r0, r0, #13
 8002bd8:	4301      	orrs	r1, r0
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <__aeabi_d2iz+0x60>)
 8002bdc:	1ac0      	subs	r0, r0, r3
 8002bde:	281f      	cmp	r0, #31
 8002be0:	dd08      	ble.n	8002bf4 <__aeabi_d2iz+0x44>
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <__aeabi_d2iz+0x64>)
 8002be4:	1ac3      	subs	r3, r0, r3
 8002be6:	40d9      	lsrs	r1, r3
 8002be8:	000b      	movs	r3, r1
 8002bea:	4258      	negs	r0, r3
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	d1f0      	bne.n	8002bd2 <__aeabi_d2iz+0x22>
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	e7ee      	b.n	8002bd2 <__aeabi_d2iz+0x22>
 8002bf4:	4c08      	ldr	r4, [pc, #32]	; (8002c18 <__aeabi_d2iz+0x68>)
 8002bf6:	40c5      	lsrs	r5, r0
 8002bf8:	46a4      	mov	ip, r4
 8002bfa:	4463      	add	r3, ip
 8002bfc:	4099      	lsls	r1, r3
 8002bfe:	000b      	movs	r3, r1
 8002c00:	432b      	orrs	r3, r5
 8002c02:	e7f2      	b.n	8002bea <__aeabi_d2iz+0x3a>
 8002c04:	000003fe 	.word	0x000003fe
 8002c08:	0000041d 	.word	0x0000041d
 8002c0c:	7fffffff 	.word	0x7fffffff
 8002c10:	00000433 	.word	0x00000433
 8002c14:	00000413 	.word	0x00000413
 8002c18:	fffffbed 	.word	0xfffffbed

08002c1c <__aeabi_i2d>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d016      	beq.n	8002c50 <__aeabi_i2d+0x34>
 8002c22:	17c3      	asrs	r3, r0, #31
 8002c24:	18c5      	adds	r5, r0, r3
 8002c26:	405d      	eors	r5, r3
 8002c28:	0fc4      	lsrs	r4, r0, #31
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	f000 f8f6 	bl	8002e1c <__clzsi2>
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <__aeabi_i2d+0x5c>)
 8002c32:	1a12      	subs	r2, r2, r0
 8002c34:	280a      	cmp	r0, #10
 8002c36:	dc16      	bgt.n	8002c66 <__aeabi_i2d+0x4a>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	002e      	movs	r6, r5
 8002c3c:	3315      	adds	r3, #21
 8002c3e:	409e      	lsls	r6, r3
 8002c40:	230b      	movs	r3, #11
 8002c42:	1a18      	subs	r0, r3, r0
 8002c44:	40c5      	lsrs	r5, r0
 8002c46:	0552      	lsls	r2, r2, #21
 8002c48:	032d      	lsls	r5, r5, #12
 8002c4a:	0b2d      	lsrs	r5, r5, #12
 8002c4c:	0d53      	lsrs	r3, r2, #21
 8002c4e:	e003      	b.n	8002c58 <__aeabi_i2d+0x3c>
 8002c50:	2400      	movs	r4, #0
 8002c52:	2300      	movs	r3, #0
 8002c54:	2500      	movs	r5, #0
 8002c56:	2600      	movs	r6, #0
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	432b      	orrs	r3, r5
 8002c5c:	07e4      	lsls	r4, r4, #31
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	0030      	movs	r0, r6
 8002c62:	0019      	movs	r1, r3
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	380b      	subs	r0, #11
 8002c68:	4085      	lsls	r5, r0
 8002c6a:	0552      	lsls	r2, r2, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	2600      	movs	r6, #0
 8002c70:	0b2d      	lsrs	r5, r5, #12
 8002c72:	0d53      	lsrs	r3, r2, #21
 8002c74:	e7f0      	b.n	8002c58 <__aeabi_i2d+0x3c>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	0000041e 	.word	0x0000041e

08002c7c <__aeabi_f2d>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0043      	lsls	r3, r0, #1
 8002c80:	0246      	lsls	r6, r0, #9
 8002c82:	0fc4      	lsrs	r4, r0, #31
 8002c84:	20fe      	movs	r0, #254	; 0xfe
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	0a75      	lsrs	r5, r6, #9
 8002c8c:	4208      	tst	r0, r1
 8002c8e:	d00c      	beq.n	8002caa <__aeabi_f2d+0x2e>
 8002c90:	22e0      	movs	r2, #224	; 0xe0
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4694      	mov	ip, r2
 8002c96:	076d      	lsls	r5, r5, #29
 8002c98:	0b36      	lsrs	r6, r6, #12
 8002c9a:	4463      	add	r3, ip
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	07e4      	lsls	r4, r4, #31
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <__aeabi_f2d+0x5c>
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d01b      	beq.n	8002cea <__aeabi_f2d+0x6e>
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f000 f8b2 	bl	8002e1c <__clzsi2>
 8002cb8:	280a      	cmp	r0, #10
 8002cba:	dc1c      	bgt.n	8002cf6 <__aeabi_f2d+0x7a>
 8002cbc:	230b      	movs	r3, #11
 8002cbe:	002e      	movs	r6, r5
 8002cc0:	1a1b      	subs	r3, r3, r0
 8002cc2:	40de      	lsrs	r6, r3
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	3315      	adds	r3, #21
 8002cc8:	409d      	lsls	r5, r3
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <__aeabi_f2d+0x88>)
 8002ccc:	0336      	lsls	r6, r6, #12
 8002cce:	1a12      	subs	r2, r2, r0
 8002cd0:	0552      	lsls	r2, r2, #21
 8002cd2:	0b36      	lsrs	r6, r6, #12
 8002cd4:	0d53      	lsrs	r3, r2, #21
 8002cd6:	e7e1      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d009      	beq.n	8002cf0 <__aeabi_f2d+0x74>
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	0b36      	lsrs	r6, r6, #12
 8002ce0:	0312      	lsls	r2, r2, #12
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002ce4:	076d      	lsls	r5, r5, #29
 8002ce6:	4316      	orrs	r6, r2
 8002ce8:	e7d8      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2600      	movs	r6, #0
 8002cee:	e7d5      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002cf4:	e7d2      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	3b0b      	subs	r3, #11
 8002cfa:	409d      	lsls	r5, r3
 8002cfc:	002e      	movs	r6, r5
 8002cfe:	2500      	movs	r5, #0
 8002d00:	e7e3      	b.n	8002cca <__aeabi_f2d+0x4e>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	00000389 	.word	0x00000389
 8002d08:	000007ff 	.word	0x000007ff

08002d0c <__aeabi_d2f>:
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	004b      	lsls	r3, r1, #1
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	0d5b      	lsrs	r3, r3, #21
 8002d14:	030c      	lsls	r4, r1, #12
 8002d16:	4e3d      	ldr	r6, [pc, #244]	; (8002e0c <__aeabi_d2f+0x100>)
 8002d18:	0a64      	lsrs	r4, r4, #9
 8002d1a:	0f40      	lsrs	r0, r0, #29
 8002d1c:	1c5f      	adds	r7, r3, #1
 8002d1e:	0fc9      	lsrs	r1, r1, #31
 8002d20:	4304      	orrs	r4, r0
 8002d22:	00d5      	lsls	r5, r2, #3
 8002d24:	4237      	tst	r7, r6
 8002d26:	d00a      	beq.n	8002d3e <__aeabi_d2f+0x32>
 8002d28:	4839      	ldr	r0, [pc, #228]	; (8002e10 <__aeabi_d2f+0x104>)
 8002d2a:	181e      	adds	r6, r3, r0
 8002d2c:	2efe      	cmp	r6, #254	; 0xfe
 8002d2e:	dd16      	ble.n	8002d5e <__aeabi_d2f+0x52>
 8002d30:	20ff      	movs	r0, #255	; 0xff
 8002d32:	2400      	movs	r4, #0
 8002d34:	05c0      	lsls	r0, r0, #23
 8002d36:	4320      	orrs	r0, r4
 8002d38:	07c9      	lsls	r1, r1, #31
 8002d3a:	4308      	orrs	r0, r1
 8002d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <__aeabi_d2f+0x44>
 8002d42:	432c      	orrs	r4, r5
 8002d44:	d026      	beq.n	8002d94 <__aeabi_d2f+0x88>
 8002d46:	2205      	movs	r2, #5
 8002d48:	0192      	lsls	r2, r2, #6
 8002d4a:	0a54      	lsrs	r4, r2, #9
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	e7f1      	b.n	8002d34 <__aeabi_d2f+0x28>
 8002d50:	4325      	orrs	r5, r4
 8002d52:	d0ed      	beq.n	8002d30 <__aeabi_d2f+0x24>
 8002d54:	2080      	movs	r0, #128	; 0x80
 8002d56:	03c0      	lsls	r0, r0, #15
 8002d58:	4304      	orrs	r4, r0
 8002d5a:	20ff      	movs	r0, #255	; 0xff
 8002d5c:	e7ea      	b.n	8002d34 <__aeabi_d2f+0x28>
 8002d5e:	2e00      	cmp	r6, #0
 8002d60:	dd1b      	ble.n	8002d9a <__aeabi_d2f+0x8e>
 8002d62:	0192      	lsls	r2, r2, #6
 8002d64:	1e53      	subs	r3, r2, #1
 8002d66:	419a      	sbcs	r2, r3
 8002d68:	00e4      	lsls	r4, r4, #3
 8002d6a:	0f6d      	lsrs	r5, r5, #29
 8002d6c:	4322      	orrs	r2, r4
 8002d6e:	432a      	orrs	r2, r5
 8002d70:	0753      	lsls	r3, r2, #29
 8002d72:	d048      	beq.n	8002e06 <__aeabi_d2f+0xfa>
 8002d74:	230f      	movs	r3, #15
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d000      	beq.n	8002d7e <__aeabi_d2f+0x72>
 8002d7c:	3204      	adds	r2, #4
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	04db      	lsls	r3, r3, #19
 8002d82:	4013      	ands	r3, r2
 8002d84:	d03f      	beq.n	8002e06 <__aeabi_d2f+0xfa>
 8002d86:	1c70      	adds	r0, r6, #1
 8002d88:	2efe      	cmp	r6, #254	; 0xfe
 8002d8a:	d0d1      	beq.n	8002d30 <__aeabi_d2f+0x24>
 8002d8c:	0192      	lsls	r2, r2, #6
 8002d8e:	0a54      	lsrs	r4, r2, #9
 8002d90:	b2c0      	uxtb	r0, r0
 8002d92:	e7cf      	b.n	8002d34 <__aeabi_d2f+0x28>
 8002d94:	2000      	movs	r0, #0
 8002d96:	2400      	movs	r4, #0
 8002d98:	e7cc      	b.n	8002d34 <__aeabi_d2f+0x28>
 8002d9a:	0032      	movs	r2, r6
 8002d9c:	3217      	adds	r2, #23
 8002d9e:	db22      	blt.n	8002de6 <__aeabi_d2f+0xda>
 8002da0:	2080      	movs	r0, #128	; 0x80
 8002da2:	0400      	lsls	r0, r0, #16
 8002da4:	4320      	orrs	r0, r4
 8002da6:	241e      	movs	r4, #30
 8002da8:	1ba4      	subs	r4, r4, r6
 8002daa:	2c1f      	cmp	r4, #31
 8002dac:	dd1d      	ble.n	8002dea <__aeabi_d2f+0xde>
 8002dae:	2202      	movs	r2, #2
 8002db0:	4252      	negs	r2, r2
 8002db2:	1b96      	subs	r6, r2, r6
 8002db4:	0002      	movs	r2, r0
 8002db6:	40f2      	lsrs	r2, r6
 8002db8:	0016      	movs	r6, r2
 8002dba:	2c20      	cmp	r4, #32
 8002dbc:	d004      	beq.n	8002dc8 <__aeabi_d2f+0xbc>
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <__aeabi_d2f+0x108>)
 8002dc0:	4694      	mov	ip, r2
 8002dc2:	4463      	add	r3, ip
 8002dc4:	4098      	lsls	r0, r3
 8002dc6:	4305      	orrs	r5, r0
 8002dc8:	002a      	movs	r2, r5
 8002dca:	1e53      	subs	r3, r2, #1
 8002dcc:	419a      	sbcs	r2, r3
 8002dce:	4332      	orrs	r2, r6
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	0753      	lsls	r3, r2, #29
 8002dd4:	d1ce      	bne.n	8002d74 <__aeabi_d2f+0x68>
 8002dd6:	2480      	movs	r4, #128	; 0x80
 8002dd8:	0013      	movs	r3, r2
 8002dda:	04e4      	lsls	r4, r4, #19
 8002ddc:	2001      	movs	r0, #1
 8002dde:	4023      	ands	r3, r4
 8002de0:	4222      	tst	r2, r4
 8002de2:	d1d3      	bne.n	8002d8c <__aeabi_d2f+0x80>
 8002de4:	e7b0      	b.n	8002d48 <__aeabi_d2f+0x3c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	e7ad      	b.n	8002d46 <__aeabi_d2f+0x3a>
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <__aeabi_d2f+0x10c>)
 8002dec:	4694      	mov	ip, r2
 8002dee:	002a      	movs	r2, r5
 8002df0:	40e2      	lsrs	r2, r4
 8002df2:	0014      	movs	r4, r2
 8002df4:	002a      	movs	r2, r5
 8002df6:	4463      	add	r3, ip
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	4098      	lsls	r0, r3
 8002dfc:	1e55      	subs	r5, r2, #1
 8002dfe:	41aa      	sbcs	r2, r5
 8002e00:	4302      	orrs	r2, r0
 8002e02:	4322      	orrs	r2, r4
 8002e04:	e7e4      	b.n	8002dd0 <__aeabi_d2f+0xc4>
 8002e06:	0033      	movs	r3, r6
 8002e08:	e79e      	b.n	8002d48 <__aeabi_d2f+0x3c>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	000007fe 	.word	0x000007fe
 8002e10:	fffffc80 	.word	0xfffffc80
 8002e14:	fffffca2 	.word	0xfffffca2
 8002e18:	fffffc82 	.word	0xfffffc82

08002e1c <__clzsi2>:
 8002e1c:	211c      	movs	r1, #28
 8002e1e:	2301      	movs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	4298      	cmp	r0, r3
 8002e24:	d301      	bcc.n	8002e2a <__clzsi2+0xe>
 8002e26:	0c00      	lsrs	r0, r0, #16
 8002e28:	3910      	subs	r1, #16
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	4298      	cmp	r0, r3
 8002e2e:	d301      	bcc.n	8002e34 <__clzsi2+0x18>
 8002e30:	0a00      	lsrs	r0, r0, #8
 8002e32:	3908      	subs	r1, #8
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	4298      	cmp	r0, r3
 8002e38:	d301      	bcc.n	8002e3e <__clzsi2+0x22>
 8002e3a:	0900      	lsrs	r0, r0, #4
 8002e3c:	3904      	subs	r1, #4
 8002e3e:	a202      	add	r2, pc, #8	; (adr r2, 8002e48 <__clzsi2+0x2c>)
 8002e40:	5c10      	ldrb	r0, [r2, r0]
 8002e42:	1840      	adds	r0, r0, r1
 8002e44:	4770      	bx	lr
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	02020304 	.word	0x02020304
 8002e4c:	01010101 	.word	0x01010101
	...

08002e58 <__clzdi2>:
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	d103      	bne.n	8002e66 <__clzdi2+0xe>
 8002e5e:	f7ff ffdd 	bl	8002e1c <__clzsi2>
 8002e62:	3020      	adds	r0, #32
 8002e64:	e002      	b.n	8002e6c <__clzdi2+0x14>
 8002e66:	0008      	movs	r0, r1
 8002e68:	f7ff ffd8 	bl	8002e1c <__clzsi2>
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)

08002e70 <CAN_reset>:
	uint8_t  m_bytes[sizeof(float)];};

union uint16_byte 	set_voltage,set_arus;

void CAN_reset()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	slot1.TxData[0] = 0;
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <CAN_reset+0x8c>)
 8002e76:	226c      	movs	r2, #108	; 0x6c
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]
	slot1.TxData[1] = 0;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <CAN_reset+0x8c>)
 8002e7e:	226d      	movs	r2, #109	; 0x6d
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]
	slot1.TxData[2] = 0;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <CAN_reset+0x8c>)
 8002e86:	226e      	movs	r2, #110	; 0x6e
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]
	slot1.TxData[3] = 0;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <CAN_reset+0x8c>)
 8002e8e:	226f      	movs	r2, #111	; 0x6f
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]
	slot1.TxData[4] = 0;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <CAN_reset+0x8c>)
 8002e96:	2270      	movs	r2, #112	; 0x70
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]
	slot1.TxData[5] = 0;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <CAN_reset+0x8c>)
 8002e9e:	2271      	movs	r2, #113	; 0x71
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]
	slot1.TxData[6] = 0;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <CAN_reset+0x8c>)
 8002ea6:	2272      	movs	r2, #114	; 0x72
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]
	slot1.TxData[7] = 0;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <CAN_reset+0x8c>)
 8002eae:	2273      	movs	r2, #115	; 0x73
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

	slot2.TxData[0] = 0;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <CAN_reset+0x90>)
 8002eb6:	226c      	movs	r2, #108	; 0x6c
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]
	slot2.TxData[1] = 0;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <CAN_reset+0x90>)
 8002ebe:	226d      	movs	r2, #109	; 0x6d
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[2] = 0;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <CAN_reset+0x90>)
 8002ec6:	226e      	movs	r2, #110	; 0x6e
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
	slot2.TxData[3] = 0;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <CAN_reset+0x90>)
 8002ece:	226f      	movs	r2, #111	; 0x6f
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[4] = 0;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <CAN_reset+0x90>)
 8002ed6:	2270      	movs	r2, #112	; 0x70
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]
	slot2.TxData[5] = 0;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <CAN_reset+0x90>)
 8002ede:	2271      	movs	r2, #113	; 0x71
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[6] = 0;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <CAN_reset+0x90>)
 8002ee6:	2272      	movs	r2, #114	; 0x72
 8002ee8:	2100      	movs	r1, #0
 8002eea:	5499      	strb	r1, [r3, r2]
	slot2.TxData[7] = 0;
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <CAN_reset+0x90>)
 8002eee:	2273      	movs	r2, #115	; 0x73
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200000b4 	.word	0x200000b4
 8002f00:	200003fc 	.word	0x200003fc

08002f04 <CAN_TX>:

void CAN_TX()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	CAN_reset();
 8002f08:	f7ff ffb2 	bl	8002e70 <CAN_reset>
	TxHeader.Identifier=0x000001B2;
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <CAN_TX+0x190>)
 8002f0e:	22d9      	movs	r2, #217	; 0xd9
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002f14:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <CAN_TX+0x190>)
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	05d2      	lsls	r2, r2, #23
 8002f1a:	605a      	str	r2, [r3, #4]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <CAN_TX+0x190>)
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	0312      	lsls	r2, r2, #12
 8002f22:	60da      	str	r2, [r3, #12]
	slot1.TxData[0]=slot1.batt_state;
 8002f24:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <CAN_TX+0x194>)
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	b2d9      	uxtb	r1, r3
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <CAN_TX+0x194>)
 8002f2c:	226c      	movs	r2, #108	; 0x6c
 8002f2e:	5499      	strb	r1, [r3, r2]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, slot1.TxData)!= HAL_OK) {
 8002f30:	4a5a      	ldr	r2, [pc, #360]	; (800309c <CAN_TX+0x198>)
 8002f32:	4958      	ldr	r1, [pc, #352]	; (8003094 <CAN_TX+0x190>)
 8002f34:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <CAN_TX+0x19c>)
 8002f36:	0018      	movs	r0, r3
 8002f38:	f003 f819 	bl	8005f6e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	TxHeader.Identifier=0X1806E5F4;
 8002f3c:	4b55      	ldr	r3, [pc, #340]	; (8003094 <CAN_TX+0x190>)
 8002f3e:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <CAN_TX+0x1a0>)
 8002f40:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002f42:	4b54      	ldr	r3, [pc, #336]	; (8003094 <CAN_TX+0x190>)
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	05d2      	lsls	r2, r2, #23
 8002f48:	605a      	str	r2, [r3, #4]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002f4a:	4b52      	ldr	r3, [pc, #328]	; (8003094 <CAN_TX+0x190>)
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	0312      	lsls	r2, r2, #12
 8002f50:	60da      	str	r2, [r3, #12]
	set_voltage.m_uint16_t=(Vset*10);
 8002f52:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <CAN_TX+0x1a4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4955      	ldr	r1, [pc, #340]	; (80030ac <CAN_TX+0x1a8>)
 8002f58:	1c18      	adds	r0, r3, #0
 8002f5a:	f7fd fdab 	bl	8000ab4 <__aeabi_fmul>
 8002f5e:	1c03      	adds	r3, r0, #0
 8002f60:	1c18      	adds	r0, r3, #0
 8002f62:	f7fd fadd 	bl	8000520 <__aeabi_f2uiz>
 8002f66:	0003      	movs	r3, r0
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <CAN_TX+0x1ac>)
 8002f6c:	801a      	strh	r2, [r3, #0]
	set_arus.m_uint16_t=(Aset*10);
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <CAN_TX+0x1b0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	494e      	ldr	r1, [pc, #312]	; (80030ac <CAN_TX+0x1a8>)
 8002f74:	1c18      	adds	r0, r3, #0
 8002f76:	f7fd fd9d 	bl	8000ab4 <__aeabi_fmul>
 8002f7a:	1c03      	adds	r3, r0, #0
 8002f7c:	1c18      	adds	r0, r3, #0
 8002f7e:	f7fd facf 	bl	8000520 <__aeabi_f2uiz>
 8002f82:	0003      	movs	r3, r0
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <CAN_TX+0x1b4>)
 8002f88:	801a      	strh	r2, [r3, #0]
	slot1.TxData[0] = set_voltage.m_bytes[1];
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <CAN_TX+0x1ac>)
 8002f8c:	7859      	ldrb	r1, [r3, #1]
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <CAN_TX+0x194>)
 8002f90:	226c      	movs	r2, #108	; 0x6c
 8002f92:	5499      	strb	r1, [r3, r2]
	slot1.TxData[1] = set_voltage.m_bytes[0];
 8002f94:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <CAN_TX+0x1ac>)
 8002f96:	7819      	ldrb	r1, [r3, #0]
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <CAN_TX+0x194>)
 8002f9a:	226d      	movs	r2, #109	; 0x6d
 8002f9c:	5499      	strb	r1, [r3, r2]
	slot1.TxData[2] = set_arus.m_bytes[1];
 8002f9e:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <CAN_TX+0x1b4>)
 8002fa0:	7859      	ldrb	r1, [r3, #1]
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <CAN_TX+0x194>)
 8002fa4:	226e      	movs	r2, #110	; 0x6e
 8002fa6:	5499      	strb	r1, [r3, r2]
	slot1.TxData[3] = set_arus.m_bytes[0];
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <CAN_TX+0x1b4>)
 8002faa:	7819      	ldrb	r1, [r3, #0]
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <CAN_TX+0x194>)
 8002fae:	226f      	movs	r2, #111	; 0x6f
 8002fb0:	5499      	strb	r1, [r3, r2]
	slot1.TxData[4] = slot1.charger_start_DIS;
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <CAN_TX+0x194>)
 8002fb4:	2224      	movs	r2, #36	; 0x24
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	0019      	movs	r1, r3
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <CAN_TX+0x194>)
 8002fbc:	2270      	movs	r2, #112	; 0x70
 8002fbe:	5499      	strb	r1, [r3, r2]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, slot1.TxData)!= HAL_OK) {
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <CAN_TX+0x198>)
 8002fc2:	4934      	ldr	r1, [pc, #208]	; (8003094 <CAN_TX+0x190>)
 8002fc4:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <CAN_TX+0x19c>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f002 ffd1 	bl	8005f6e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	CAN_reset();
 8002fcc:	f7ff ff50 	bl	8002e70 <CAN_reset>
	TxHeader2.Identifier=0x000005B2;
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <CAN_TX+0x1b8>)
 8002fd2:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <CAN_TX+0x1bc>)
 8002fd4:	601a      	str	r2, [r3, #0]
	TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <CAN_TX+0x1b8>)
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	05d2      	lsls	r2, r2, #23
 8002fdc:	605a      	str	r2, [r3, #4]
	TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <CAN_TX+0x1b8>)
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	0312      	lsls	r2, r2, #12
 8002fe4:	60da      	str	r2, [r3, #12]
	slot2.TxData[0]=slot2.batt_state;
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <CAN_TX+0x1c0>)
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	b2d9      	uxtb	r1, r3
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <CAN_TX+0x1c0>)
 8002fee:	226c      	movs	r2, #108	; 0x6c
 8002ff0:	5499      	strb	r1, [r3, r2]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, slot2.TxData)!= HAL_OK) {
 8002ff2:	4a35      	ldr	r2, [pc, #212]	; (80030c8 <CAN_TX+0x1c4>)
 8002ff4:	4931      	ldr	r1, [pc, #196]	; (80030bc <CAN_TX+0x1b8>)
 8002ff6:	4b35      	ldr	r3, [pc, #212]	; (80030cc <CAN_TX+0x1c8>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f002 ffb8 	bl	8005f6e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	TxHeader2.Identifier=0X1806E5F4;
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <CAN_TX+0x1b8>)
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <CAN_TX+0x1a0>)
 8003002:	601a      	str	r2, [r3, #0]
	TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <CAN_TX+0x1b8>)
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	05d2      	lsls	r2, r2, #23
 800300a:	605a      	str	r2, [r3, #4]
	TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <CAN_TX+0x1b8>)
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	0312      	lsls	r2, r2, #12
 8003012:	60da      	str	r2, [r3, #12]

	set_voltage.m_uint16_t=(Vset*10);
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <CAN_TX+0x1a4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4924      	ldr	r1, [pc, #144]	; (80030ac <CAN_TX+0x1a8>)
 800301a:	1c18      	adds	r0, r3, #0
 800301c:	f7fd fd4a 	bl	8000ab4 <__aeabi_fmul>
 8003020:	1c03      	adds	r3, r0, #0
 8003022:	1c18      	adds	r0, r3, #0
 8003024:	f7fd fa7c 	bl	8000520 <__aeabi_f2uiz>
 8003028:	0003      	movs	r3, r0
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <CAN_TX+0x1ac>)
 800302e:	801a      	strh	r2, [r3, #0]
	set_arus.m_uint16_t=(Aset*10);
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <CAN_TX+0x1b0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	491d      	ldr	r1, [pc, #116]	; (80030ac <CAN_TX+0x1a8>)
 8003036:	1c18      	adds	r0, r3, #0
 8003038:	f7fd fd3c 	bl	8000ab4 <__aeabi_fmul>
 800303c:	1c03      	adds	r3, r0, #0
 800303e:	1c18      	adds	r0, r3, #0
 8003040:	f7fd fa6e 	bl	8000520 <__aeabi_f2uiz>
 8003044:	0003      	movs	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <CAN_TX+0x1b4>)
 800304a:	801a      	strh	r2, [r3, #0]
	slot2.TxData[0] = set_voltage.m_bytes[1];
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <CAN_TX+0x1ac>)
 800304e:	7859      	ldrb	r1, [r3, #1]
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <CAN_TX+0x1c0>)
 8003052:	226c      	movs	r2, #108	; 0x6c
 8003054:	5499      	strb	r1, [r3, r2]
	slot2.TxData[1] = set_voltage.m_bytes[0];
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <CAN_TX+0x1ac>)
 8003058:	7819      	ldrb	r1, [r3, #0]
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <CAN_TX+0x1c0>)
 800305c:	226d      	movs	r2, #109	; 0x6d
 800305e:	5499      	strb	r1, [r3, r2]
	slot2.TxData[2] = set_arus.m_bytes[1];
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <CAN_TX+0x1b4>)
 8003062:	7859      	ldrb	r1, [r3, #1]
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <CAN_TX+0x1c0>)
 8003066:	226e      	movs	r2, #110	; 0x6e
 8003068:	5499      	strb	r1, [r3, r2]
	slot2.TxData[3] = set_arus.m_bytes[0];
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <CAN_TX+0x1b4>)
 800306c:	7819      	ldrb	r1, [r3, #0]
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <CAN_TX+0x1c0>)
 8003070:	226f      	movs	r2, #111	; 0x6f
 8003072:	5499      	strb	r1, [r3, r2]
	slot2.TxData[4] = slot2.charger_start_DIS;
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <CAN_TX+0x1c0>)
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	0019      	movs	r1, r3
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <CAN_TX+0x1c0>)
 800307e:	2270      	movs	r2, #112	; 0x70
 8003080:	5499      	strb	r1, [r3, r2]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, slot2.TxData)!= HAL_OK) {
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <CAN_TX+0x1c4>)
 8003084:	490d      	ldr	r1, [pc, #52]	; (80030bc <CAN_TX+0x1b8>)
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <CAN_TX+0x1c8>)
 8003088:	0018      	movs	r0, r3
 800308a:	f002 ff70 	bl	8005f6e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000090 	.word	0x20000090
 8003098:	200000b4 	.word	0x200000b4
 800309c:	20000120 	.word	0x20000120
 80030a0:	20000790 	.word	0x20000790
 80030a4:	1806e5f4 	.word	0x1806e5f4
 80030a8:	20000000 	.word	0x20000000
 80030ac:	41200000 	.word	0x41200000
 80030b0:	20000030 	.word	0x20000030
 80030b4:	20000004 	.word	0x20000004
 80030b8:	20000034 	.word	0x20000034
 80030bc:	2000076c 	.word	0x2000076c
 80030c0:	000005b2 	.word	0x000005b2
 80030c4:	200003fc 	.word	0x200003fc
 80030c8:	20000468 	.word	0x20000468
 80030cc:	200007f4 	.word	0x200007f4

080030d0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	d100      	bne.n	80030e4 <HAL_FDCAN_RxFifo0Callback+0x14>
 80030e2:	e3be      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
	{
		if(hfdcan==&hfdcan1)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4bea      	ldr	r3, [pc, #936]	; (8003490 <HAL_FDCAN_RxFifo0Callback+0x3c0>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d000      	beq.n	80030ee <HAL_FDCAN_RxFifo0Callback+0x1e>
 80030ec:	e1e6      	b.n	80034bc <HAL_FDCAN_RxFifo0Callback+0x3ec>
		  {
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, slot1.RxData) == HAL_OK)
 80030ee:	4be9      	ldr	r3, [pc, #932]	; (8003494 <HAL_FDCAN_RxFifo0Callback+0x3c4>)
 80030f0:	4ae9      	ldr	r2, [pc, #932]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	f002 ff7f 	bl	8005ff8 <HAL_FDCAN_GetRxMessage>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d000      	beq.n	8003100 <HAL_FDCAN_RxFifo0Callback+0x30>
 80030fe:	e1ba      	b.n	8003476 <HAL_FDCAN_RxFifo0Callback+0x3a6>
			{
				if((RxHeader.Identifier>>20)==0X0B0)//batre
 8003100:	4be5      	ldr	r3, [pc, #916]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0d1b      	lsrs	r3, r3, #20
 8003106:	2bb0      	cmp	r3, #176	; 0xb0
 8003108:	d159      	bne.n	80031be <HAL_FDCAN_RxFifo0Callback+0xee>
				{
					slot1.batt_protocol1=1;
 800310a:	4be4      	ldr	r3, [pc, #912]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800310c:	2201      	movs	r2, #1
 800310e:	73da      	strb	r2, [r3, #15]
					slot1.Vbatt=(((slot1.RxData[1]<<8)|slot1.RxData[0])*0.01);
 8003110:	4be2      	ldr	r3, [pc, #904]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003112:	2265      	movs	r2, #101	; 0x65
 8003114:	5c9b      	ldrb	r3, [r3, r2]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4ae0      	ldr	r2, [pc, #896]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800311a:	2164      	movs	r1, #100	; 0x64
 800311c:	5c52      	ldrb	r2, [r2, r1]
 800311e:	4313      	orrs	r3, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff fd7b 	bl	8002c1c <__aeabi_i2d>
 8003126:	4ade      	ldr	r2, [pc, #888]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 8003128:	4bde      	ldr	r3, [pc, #888]	; (80034a4 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 800312a:	f7fe ff43 	bl	8001fb4 <__aeabi_dmul>
 800312e:	0002      	movs	r2, r0
 8003130:	000b      	movs	r3, r1
 8003132:	0010      	movs	r0, r2
 8003134:	0019      	movs	r1, r3
 8003136:	f7ff fde9 	bl	8002d0c <__aeabi_d2f>
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	4bd7      	ldr	r3, [pc, #860]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c
					slot1.Abatt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.1);
 8003140:	4bd6      	ldr	r3, [pc, #856]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003142:	2267      	movs	r2, #103	; 0x67
 8003144:	5c9b      	ldrb	r3, [r3, r2]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4ad4      	ldr	r2, [pc, #848]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800314a:	2166      	movs	r1, #102	; 0x66
 800314c:	5c52      	ldrb	r2, [r2, r1]
 800314e:	4313      	orrs	r3, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff fd63 	bl	8002c1c <__aeabi_i2d>
 8003156:	4ad4      	ldr	r2, [pc, #848]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8003158:	4bd4      	ldr	r3, [pc, #848]	; (80034ac <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 800315a:	f7fe ff2b 	bl	8001fb4 <__aeabi_dmul>
 800315e:	0002      	movs	r2, r0
 8003160:	000b      	movs	r3, r1
 8003162:	0010      	movs	r0, r2
 8003164:	0019      	movs	r1, r3
 8003166:	f7ff fdd1 	bl	8002d0c <__aeabi_d2f>
 800316a:	1c02      	adds	r2, r0, #0
 800316c:	4bcb      	ldr	r3, [pc, #812]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
					slot1.SOC_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8003170:	4bca      	ldr	r3, [pc, #808]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003172:	2269      	movs	r2, #105	; 0x69
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	4ac8      	ldr	r2, [pc, #800]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800317a:	2168      	movs	r1, #104	; 0x68
 800317c:	5c52      	ldrb	r2, [r2, r1]
 800317e:	4313      	orrs	r3, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f7fd ff8b 	bl	800109c <__aeabi_i2f>
 8003186:	1c02      	adds	r2, r0, #0
 8003188:	4bc4      	ldr	r3, [pc, #784]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
					slot1.temp_batt=(slot1.RxData[6]-40);
 800318c:	4bc3      	ldr	r3, [pc, #780]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800318e:	226a      	movs	r2, #106	; 0x6a
 8003190:	5c9b      	ldrb	r3, [r3, r2]
 8003192:	3b28      	subs	r3, #40	; 0x28
 8003194:	0018      	movs	r0, r3
 8003196:	f7fd ff81 	bl	800109c <__aeabi_i2f>
 800319a:	1c02      	adds	r2, r0, #0
 800319c:	4bbf      	ldr	r3, [pc, #764]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800319e:	649a      	str	r2, [r3, #72]	; 0x48
					slot1.flag_recieve_batt1=1;
 80031a0:	4bbe      	ldr	r3, [pc, #760]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031a2:	2220      	movs	r2, #32
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]
					slot1.can_batt_trouble_state=0;
 80031a8:	4bbc      	ldr	r3, [pc, #752]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031aa:	2222      	movs	r2, #34	; 0x22
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 80031b0:	4bb9      	ldr	r3, [pc, #740]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	0b1a      	lsrs	r2, r3, #12
 80031b8:	4bb8      	ldr	r3, [pc, #736]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80031bc:	e0dd      	b.n	800337a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				}
				else if((RxHeader.Identifier>>20)==0X0B1)//batre
 80031be:	4bb6      	ldr	r3, [pc, #728]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0d1b      	lsrs	r3, r3, #20
 80031c4:	2bb1      	cmp	r3, #177	; 0xb1
 80031c6:	d000      	beq.n	80031ca <HAL_FDCAN_RxFifo0Callback+0xfa>
 80031c8:	e0d7      	b.n	800337a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				{
					slot1.batt_protocol2=1;
 80031ca:	4bb4      	ldr	r3, [pc, #720]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	741a      	strb	r2, [r3, #16]

					slot1.SOH_batt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.01);
 80031d0:	4bb2      	ldr	r3, [pc, #712]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031d2:	2267      	movs	r2, #103	; 0x67
 80031d4:	5c9b      	ldrb	r3, [r3, r2]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4ab0      	ldr	r2, [pc, #704]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031da:	2166      	movs	r1, #102	; 0x66
 80031dc:	5c52      	ldrb	r2, [r2, r1]
 80031de:	4313      	orrs	r3, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff fd1b 	bl	8002c1c <__aeabi_i2d>
 80031e6:	4aae      	ldr	r2, [pc, #696]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 80031e8:	4bae      	ldr	r3, [pc, #696]	; (80034a4 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 80031ea:	f7fe fee3 	bl	8001fb4 <__aeabi_dmul>
 80031ee:	0002      	movs	r2, r0
 80031f0:	000b      	movs	r3, r1
 80031f2:	0010      	movs	r0, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	f7ff fd89 	bl	8002d0c <__aeabi_d2f>
 80031fa:	1c02      	adds	r2, r0, #0
 80031fc:	4ba7      	ldr	r3, [pc, #668]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031fe:	64da      	str	r2, [r3, #76]	; 0x4c
					slot1.cycle_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8003200:	4ba6      	ldr	r3, [pc, #664]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003202:	2269      	movs	r2, #105	; 0x69
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	4aa4      	ldr	r2, [pc, #656]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800320a:	2168      	movs	r1, #104	; 0x68
 800320c:	5c52      	ldrb	r2, [r2, r1]
 800320e:	431a      	orrs	r2, r3
 8003210:	4ba2      	ldr	r3, [pc, #648]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003212:	651a      	str	r2, [r3, #80]	; 0x50
					slot1.batt_discharge_overcurrent=(slot1.RxData[6])&(0x01<<0);
 8003214:	4ba1      	ldr	r3, [pc, #644]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003216:	226a      	movs	r2, #106	; 0x6a
 8003218:	5c9b      	ldrb	r3, [r3, r2]
 800321a:	001a      	movs	r2, r3
 800321c:	2301      	movs	r3, #1
 800321e:	4013      	ands	r3, r2
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	4193      	sbcs	r3, r2
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b9d      	ldr	r3, [pc, #628]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003228:	745a      	strb	r2, [r3, #17]
					slot1.batt_charge_overCurrent = (slot1.RxData[6])&(0x01<<1);
 800322a:	4b9c      	ldr	r3, [pc, #624]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800322c:	226a      	movs	r2, #106	; 0x6a
 800322e:	5c9b      	ldrb	r3, [r3, r2]
 8003230:	001a      	movs	r2, r3
 8003232:	2302      	movs	r3, #2
 8003234:	4013      	ands	r3, r2
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	4193      	sbcs	r3, r2
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b97      	ldr	r3, [pc, #604]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800323e:	749a      	strb	r2, [r3, #18]
					slot1.batt_short_circuit=(slot1.RxData[6])&(0x01<<2);
 8003240:	4b96      	ldr	r3, [pc, #600]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003242:	226a      	movs	r2, #106	; 0x6a
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	001a      	movs	r2, r3
 8003248:	2304      	movs	r3, #4
 800324a:	4013      	ands	r3, r2
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	4193      	sbcs	r3, r2
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003254:	74da      	strb	r2, [r3, #19]
					slot1.batt_discharge_overtempreature=(slot1.RxData[6])&(0x01<<3);
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003258:	226a      	movs	r2, #106	; 0x6a
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	001a      	movs	r2, r3
 800325e:	2308      	movs	r3, #8
 8003260:	4013      	ands	r3, r2
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	4193      	sbcs	r3, r2
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800326a:	751a      	strb	r2, [r3, #20]
					slot1.batt_discharge_undertempreature=(slot1.RxData[6])&(0x01<<4);
 800326c:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800326e:	226a      	movs	r2, #106	; 0x6a
 8003270:	5c9b      	ldrb	r3, [r3, r2]
 8003272:	001a      	movs	r2, r3
 8003274:	2310      	movs	r3, #16
 8003276:	4013      	ands	r3, r2
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	4193      	sbcs	r3, r2
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b87      	ldr	r3, [pc, #540]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003280:	755a      	strb	r2, [r3, #21]
					slot1.batt_charge_overtempreature=(slot1.RxData[6])&(0x01<<5);
 8003282:	4b86      	ldr	r3, [pc, #536]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003284:	226a      	movs	r2, #106	; 0x6a
 8003286:	5c9b      	ldrb	r3, [r3, r2]
 8003288:	001a      	movs	r2, r3
 800328a:	2320      	movs	r3, #32
 800328c:	4013      	ands	r3, r2
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	4193      	sbcs	r3, r2
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b81      	ldr	r3, [pc, #516]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003296:	759a      	strb	r2, [r3, #22]
					slot1.batt_charge_undertempreature=(slot1.RxData[6])&(0x01<<6);
 8003298:	4b80      	ldr	r3, [pc, #512]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800329a:	226a      	movs	r2, #106	; 0x6a
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	001a      	movs	r2, r3
 80032a0:	2340      	movs	r3, #64	; 0x40
 80032a2:	4013      	ands	r3, r2
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	4193      	sbcs	r3, r2
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b7c      	ldr	r3, [pc, #496]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032ac:	75da      	strb	r2, [r3, #23]
					slot1.batt_under_voltage=(slot1.RxData[6])&(0x01<<7);
 80032ae:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032b0:	226a      	movs	r2, #106	; 0x6a
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	001a      	movs	r2, r3
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	4013      	ands	r3, r2
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	4193      	sbcs	r3, r2
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032c2:	761a      	strb	r2, [r3, #24]

					slot1.batt_over_voltage=(slot1.RxData[7])&(0x01<<0);
 80032c4:	4b75      	ldr	r3, [pc, #468]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032c6:	226b      	movs	r2, #107	; 0x6b
 80032c8:	5c9b      	ldrb	r3, [r3, r2]
 80032ca:	001a      	movs	r2, r3
 80032cc:	2301      	movs	r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	4193      	sbcs	r3, r2
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b71      	ldr	r3, [pc, #452]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032d8:	765a      	strb	r2, [r3, #25]
					slot1.batt_over_discharge_capacity=(slot1.RxData[7])&(0x01<<1);
 80032da:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032dc:	226b      	movs	r2, #107	; 0x6b
 80032de:	5c9b      	ldrb	r3, [r3, r2]
 80032e0:	001a      	movs	r2, r3
 80032e2:	2302      	movs	r3, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	4193      	sbcs	r3, r2
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b6b      	ldr	r3, [pc, #428]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032ee:	769a      	strb	r2, [r3, #26]
					slot1.batt_unbalance=(slot1.RxData[7])&(0x01<<2);
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80032f2:	226b      	movs	r2, #107	; 0x6b
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	001a      	movs	r2, r3
 80032f8:	2304      	movs	r3, #4
 80032fa:	4013      	ands	r3, r2
 80032fc:	1e5a      	subs	r2, r3, #1
 80032fe:	4193      	sbcs	r3, r2
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b66      	ldr	r3, [pc, #408]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003304:	76da      	strb	r2, [r3, #27]
					slot1.batt_system_failure=(slot1.RxData[7])&(0x01<<3);
 8003306:	4b65      	ldr	r3, [pc, #404]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003308:	226b      	movs	r2, #107	; 0x6b
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	001a      	movs	r2, r3
 800330e:	2308      	movs	r3, #8
 8003310:	4013      	ands	r3, r2
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	4193      	sbcs	r3, r2
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b60      	ldr	r3, [pc, #384]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800331a:	771a      	strb	r2, [r3, #28]
					slot1.batt_charge_state=(slot1.RxData[7])&(0x01<<4);
 800331c:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800331e:	226b      	movs	r2, #107	; 0x6b
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	001a      	movs	r2, r3
 8003324:	2310      	movs	r3, #16
 8003326:	4013      	ands	r3, r2
 8003328:	1e5a      	subs	r2, r3, #1
 800332a:	4193      	sbcs	r3, r2
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003330:	775a      	strb	r2, [r3, #29]
					slot1.batt_discharge_state=(slot1.RxData[7])&(0x01<<5);
 8003332:	4b5a      	ldr	r3, [pc, #360]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003334:	226b      	movs	r2, #107	; 0x6b
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	001a      	movs	r2, r3
 800333a:	2320      	movs	r3, #32
 800333c:	4013      	ands	r3, r2
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	4193      	sbcs	r3, r2
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b55      	ldr	r3, [pc, #340]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003346:	779a      	strb	r2, [r3, #30]
					slot1.batt_sleep_state=(slot1.RxData[7])&(0x01<<6);
 8003348:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800334a:	226b      	movs	r2, #107	; 0x6b
 800334c:	5c9b      	ldrb	r3, [r3, r2]
 800334e:	001a      	movs	r2, r3
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	4013      	ands	r3, r2
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	4193      	sbcs	r3, r2
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800335c:	77da      	strb	r2, [r3, #31]

					slot1.flag_recieve_batt2=1;
 800335e:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003360:	2221      	movs	r2, #33	; 0x21
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
					slot1.can_batt2_trouble_state=0;
 8003366:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003368:	2223      	movs	r2, #35	; 0x23
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	031b      	lsls	r3, r3, #12
 8003374:	0b1a      	lsrs	r2, r3, #12
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003378:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				if(RxHeader.Identifier==0x18FF50E5)//charger
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4c      	ldr	r2, [pc, #304]	; (80034b0 <HAL_FDCAN_RxFifo0Callback+0x3e0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d000      	beq.n	8003386 <HAL_FDCAN_RxFifo0Callback+0x2b6>
 8003384:	e26d      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
				{
					slot1.isCharger=1;
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003388:	2201      	movs	r2, #1
 800338a:	70da      	strb	r2, [r3, #3]
					slot1.Vcharger=(((slot1.RxData[0]<<8)|slot1.RxData[1])*0.1);
 800338c:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800338e:	2264      	movs	r2, #100	; 0x64
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4a41      	ldr	r2, [pc, #260]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003396:	2165      	movs	r1, #101	; 0x65
 8003398:	5c52      	ldrb	r2, [r2, r1]
 800339a:	4313      	orrs	r3, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fc3d 	bl	8002c1c <__aeabi_i2d>
 80033a2:	4a41      	ldr	r2, [pc, #260]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80033a6:	f7fe fe05 	bl	8001fb4 <__aeabi_dmul>
 80033aa:	0002      	movs	r2, r0
 80033ac:	000b      	movs	r3, r1
 80033ae:	0010      	movs	r0, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	f7ff fcab 	bl	8002d0c <__aeabi_d2f>
 80033b6:	1c02      	adds	r2, r0, #0
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
					slot1.Acharger=(((slot1.RxData[2]<<8)|slot1.RxData[3])*0.1);
 80033bc:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80033be:	2266      	movs	r2, #102	; 0x66
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	4a35      	ldr	r2, [pc, #212]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80033c6:	2167      	movs	r1, #103	; 0x67
 80033c8:	5c52      	ldrb	r2, [r2, r1]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fc25 	bl	8002c1c <__aeabi_i2d>
 80033d2:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80033d6:	f7fe fded 	bl	8001fb4 <__aeabi_dmul>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0010      	movs	r0, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	f7ff fc93 	bl	8002d0c <__aeabi_d2f>
 80033e6:	1c02      	adds	r2, r0, #0
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80033ea:	659a      	str	r2, [r3, #88]	; 0x58
					slot1.charger_hardware_error=(slot1.RxData[4])&(0x01<<0);
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80033ee:	2268      	movs	r2, #104	; 0x68
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	001a      	movs	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	4193      	sbcs	r3, r2
 80033fc:	b2d9      	uxtb	r1, r3
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003400:	222a      	movs	r2, #42	; 0x2a
 8003402:	5499      	strb	r1, [r3, r2]
					slot1.charger_temp=(slot1.RxData[4])&(0x01<<1);
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003406:	2268      	movs	r2, #104	; 0x68
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	001a      	movs	r2, r3
 800340c:	2302      	movs	r3, #2
 800340e:	4013      	ands	r3, r2
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	4193      	sbcs	r3, r2
 8003414:	b2d9      	uxtb	r1, r3
 8003416:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003418:	222b      	movs	r2, #43	; 0x2b
 800341a:	5499      	strb	r1, [r3, r2]
					slot1.charger_input_voltage=(slot1.RxData[4])&(0x01<<2);
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800341e:	2268      	movs	r2, #104	; 0x68
 8003420:	5c9b      	ldrb	r3, [r3, r2]
 8003422:	001a      	movs	r2, r3
 8003424:	2304      	movs	r3, #4
 8003426:	4013      	ands	r3, r2
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	4193      	sbcs	r3, r2
 800342c:	b2d9      	uxtb	r1, r3
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003430:	222c      	movs	r2, #44	; 0x2c
 8003432:	5499      	strb	r1, [r3, r2]
					slot1.charger_work_condition=(slot1.RxData[4])&(0x01<<3);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003436:	2268      	movs	r2, #104	; 0x68
 8003438:	5c9b      	ldrb	r3, [r3, r2]
 800343a:	001a      	movs	r2, r3
 800343c:	2308      	movs	r3, #8
 800343e:	4013      	ands	r3, r2
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	4193      	sbcs	r3, r2
 8003444:	b2d9      	uxtb	r1, r3
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003448:	222d      	movs	r2, #45	; 0x2d
 800344a:	5499      	strb	r1, [r3, r2]
					slot1.charger_communication_error=(slot1.RxData[4])&(0x01<<4);
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800344e:	2268      	movs	r2, #104	; 0x68
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	001a      	movs	r2, r3
 8003454:	2310      	movs	r3, #16
 8003456:	4013      	ands	r3, r2
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	4193      	sbcs	r3, r2
 800345c:	b2d9      	uxtb	r1, r3
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003460:	222e      	movs	r2, #46	; 0x2e
 8003462:	5499      	strb	r1, [r3, r2]
					slot1.can_charger_trouble_state=0;
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003466:	2230      	movs	r2, #48	; 0x30
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]
					slot1.flag_recieve_charger=1;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800346e:	222f      	movs	r2, #47	; 0x2f
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();

		}

	}
}
 8003474:	e1f5      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x3e4>)
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_FDCAN_RxFifo0Callback+0x3e8>)
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	f002 fdbb 	bl	8005ff8 <HAL_FDCAN_GetRxMessage>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d100      	bne.n	8003488 <HAL_FDCAN_RxFifo0Callback+0x3b8>
 8003486:	e1ec      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
 8003488:	f000 fe4e 	bl	8004128 <Error_Handler>
}
 800348c:	e1e9      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	20000790 	.word	0x20000790
 8003494:	20000118 	.word	0x20000118
 8003498:	20000068 	.word	0x20000068
 800349c:	200000b4 	.word	0x200000b4
 80034a0:	47ae147b 	.word	0x47ae147b
 80034a4:	3f847ae1 	.word	0x3f847ae1
 80034a8:	9999999a 	.word	0x9999999a
 80034ac:	3fb99999 	.word	0x3fb99999
 80034b0:	18ff50e5 	.word	0x18ff50e5
 80034b4:	20000460 	.word	0x20000460
 80034b8:	20000744 	.word	0x20000744
		else if (hfdcan==&hfdcan2)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4beb      	ldr	r3, [pc, #940]	; (800386c <HAL_FDCAN_RxFifo0Callback+0x79c>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d000      	beq.n	80034c6 <HAL_FDCAN_RxFifo0Callback+0x3f6>
 80034c4:	e1cd      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) == HAL_OK)
 80034c6:	4bea      	ldr	r3, [pc, #936]	; (8003870 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 80034c8:	4aea      	ldr	r2, [pc, #936]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	f002 fd93 	bl	8005ff8 <HAL_FDCAN_GetRxMessage>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d000      	beq.n	80034d8 <HAL_FDCAN_RxFifo0Callback+0x408>
 80034d6:	e1ba      	b.n	800384e <HAL_FDCAN_RxFifo0Callback+0x77e>
				if((RxHeader2.Identifier>>20)==0X0B0)//batre
 80034d8:	4be6      	ldr	r3, [pc, #920]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0d1b      	lsrs	r3, r3, #20
 80034de:	2bb0      	cmp	r3, #176	; 0xb0
 80034e0:	d159      	bne.n	8003596 <HAL_FDCAN_RxFifo0Callback+0x4c6>
				slot2.batt_protocol1=1;
 80034e2:	4be5      	ldr	r3, [pc, #916]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	73da      	strb	r2, [r3, #15]
				slot2.Vbatt=(((slot2.RxData[1]<<8)|slot2.RxData[0])*0.01);
 80034e8:	4be3      	ldr	r3, [pc, #908]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034ea:	2265      	movs	r2, #101	; 0x65
 80034ec:	5c9b      	ldrb	r3, [r3, r2]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	4ae1      	ldr	r2, [pc, #900]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	5c52      	ldrb	r2, [r2, r1]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fb8f 	bl	8002c1c <__aeabi_i2d>
 80034fe:	4adf      	ldr	r2, [pc, #892]	; (800387c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 8003500:	4bdf      	ldr	r3, [pc, #892]	; (8003880 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 8003502:	f7fe fd57 	bl	8001fb4 <__aeabi_dmul>
 8003506:	0002      	movs	r2, r0
 8003508:	000b      	movs	r3, r1
 800350a:	0010      	movs	r0, r2
 800350c:	0019      	movs	r1, r3
 800350e:	f7ff fbfd 	bl	8002d0c <__aeabi_d2f>
 8003512:	1c02      	adds	r2, r0, #0
 8003514:	4bd8      	ldr	r3, [pc, #864]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
				slot2.Abatt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.1);
 8003518:	4bd7      	ldr	r3, [pc, #860]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800351a:	2267      	movs	r2, #103	; 0x67
 800351c:	5c9b      	ldrb	r3, [r3, r2]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	4ad5      	ldr	r2, [pc, #852]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003522:	2166      	movs	r1, #102	; 0x66
 8003524:	5c52      	ldrb	r2, [r2, r1]
 8003526:	4313      	orrs	r3, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fb77 	bl	8002c1c <__aeabi_i2d>
 800352e:	4ad5      	ldr	r2, [pc, #852]	; (8003884 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 8003530:	4bd5      	ldr	r3, [pc, #852]	; (8003888 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 8003532:	f7fe fd3f 	bl	8001fb4 <__aeabi_dmul>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	0010      	movs	r0, r2
 800353c:	0019      	movs	r1, r3
 800353e:	f7ff fbe5 	bl	8002d0c <__aeabi_d2f>
 8003542:	1c02      	adds	r2, r0, #0
 8003544:	4bcc      	ldr	r3, [pc, #816]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
				slot2.SOC_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 8003548:	4bcb      	ldr	r3, [pc, #812]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800354a:	2269      	movs	r2, #105	; 0x69
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4ac9      	ldr	r2, [pc, #804]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003552:	2168      	movs	r1, #104	; 0x68
 8003554:	5c52      	ldrb	r2, [r2, r1]
 8003556:	4313      	orrs	r3, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f7fd fd9f 	bl	800109c <__aeabi_i2f>
 800355e:	1c02      	adds	r2, r0, #0
 8003560:	4bc5      	ldr	r3, [pc, #788]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
				slot2.temp_batt=(slot2.RxData[6]-40);
 8003564:	4bc4      	ldr	r3, [pc, #784]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003566:	226a      	movs	r2, #106	; 0x6a
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	3b28      	subs	r3, #40	; 0x28
 800356c:	0018      	movs	r0, r3
 800356e:	f7fd fd95 	bl	800109c <__aeabi_i2f>
 8003572:	1c02      	adds	r2, r0, #0
 8003574:	4bc0      	ldr	r3, [pc, #768]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003576:	649a      	str	r2, [r3, #72]	; 0x48
				slot2.flag_recieve_batt1=1;
 8003578:	4bbf      	ldr	r3, [pc, #764]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800357a:	2220      	movs	r2, #32
 800357c:	2101      	movs	r1, #1
 800357e:	5499      	strb	r1, [r3, r2]
				slot2.can_batt_trouble_state=0;
 8003580:	4bbd      	ldr	r3, [pc, #756]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003582:	2222      	movs	r2, #34	; 0x22
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader2.Identifier&0x000FFFFF);
 8003588:	4bba      	ldr	r3, [pc, #744]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	0b1a      	lsrs	r2, r3, #12
 8003590:	4bb9      	ldr	r3, [pc, #740]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
 8003594:	e0dd      	b.n	8003752 <HAL_FDCAN_RxFifo0Callback+0x682>
				else if((RxHeader2.Identifier>>20)==0X0B1)//batre
 8003596:	4bb7      	ldr	r3, [pc, #732]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0d1b      	lsrs	r3, r3, #20
 800359c:	2bb1      	cmp	r3, #177	; 0xb1
 800359e:	d000      	beq.n	80035a2 <HAL_FDCAN_RxFifo0Callback+0x4d2>
 80035a0:	e0d7      	b.n	8003752 <HAL_FDCAN_RxFifo0Callback+0x682>
				slot2.batt_protocol2=1;
 80035a2:	4bb5      	ldr	r3, [pc, #724]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	741a      	strb	r2, [r3, #16]
				slot2.SOH_batt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.01);
 80035a8:	4bb3      	ldr	r3, [pc, #716]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035aa:	2267      	movs	r2, #103	; 0x67
 80035ac:	5c9b      	ldrb	r3, [r3, r2]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4ab1      	ldr	r2, [pc, #708]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035b2:	2166      	movs	r1, #102	; 0x66
 80035b4:	5c52      	ldrb	r2, [r2, r1]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff fb2f 	bl	8002c1c <__aeabi_i2d>
 80035be:	4aaf      	ldr	r2, [pc, #700]	; (800387c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 80035c0:	4baf      	ldr	r3, [pc, #700]	; (8003880 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 80035c2:	f7fe fcf7 	bl	8001fb4 <__aeabi_dmul>
 80035c6:	0002      	movs	r2, r0
 80035c8:	000b      	movs	r3, r1
 80035ca:	0010      	movs	r0, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	f7ff fb9d 	bl	8002d0c <__aeabi_d2f>
 80035d2:	1c02      	adds	r2, r0, #0
 80035d4:	4ba8      	ldr	r3, [pc, #672]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035d6:	64da      	str	r2, [r3, #76]	; 0x4c
				slot2.cycle_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 80035d8:	4ba7      	ldr	r3, [pc, #668]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035da:	2269      	movs	r2, #105	; 0x69
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	4aa5      	ldr	r2, [pc, #660]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035e2:	2168      	movs	r1, #104	; 0x68
 80035e4:	5c52      	ldrb	r2, [r2, r1]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	4ba3      	ldr	r3, [pc, #652]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50
				slot2.batt_discharge_overcurrent=(slot2.RxData[6])&(0x01<<0);
 80035ec:	4ba2      	ldr	r3, [pc, #648]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035ee:	226a      	movs	r2, #106	; 0x6a
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	001a      	movs	r2, r3
 80035f4:	2301      	movs	r3, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	4193      	sbcs	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003600:	745a      	strb	r2, [r3, #17]
				slot2.batt_charge_overCurrent = (slot2.RxData[6])&(0x01<<1);
 8003602:	4b9d      	ldr	r3, [pc, #628]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003604:	226a      	movs	r2, #106	; 0x6a
 8003606:	5c9b      	ldrb	r3, [r3, r2]
 8003608:	001a      	movs	r2, r3
 800360a:	2302      	movs	r3, #2
 800360c:	4013      	ands	r3, r2
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	4193      	sbcs	r3, r2
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b98      	ldr	r3, [pc, #608]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003616:	749a      	strb	r2, [r3, #18]
				slot2.batt_short_circuit=(slot2.RxData[6])&(0x01<<2);
 8003618:	4b97      	ldr	r3, [pc, #604]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800361a:	226a      	movs	r2, #106	; 0x6a
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	001a      	movs	r2, r3
 8003620:	2304      	movs	r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	4193      	sbcs	r3, r2
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b93      	ldr	r3, [pc, #588]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800362c:	74da      	strb	r2, [r3, #19]
				slot2.batt_discharge_overtempreature=(slot2.RxData[6])&(0x01<<3);
 800362e:	4b92      	ldr	r3, [pc, #584]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003630:	226a      	movs	r2, #106	; 0x6a
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	001a      	movs	r2, r3
 8003636:	2308      	movs	r3, #8
 8003638:	4013      	ands	r3, r2
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	4193      	sbcs	r3, r2
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003642:	751a      	strb	r2, [r3, #20]
				slot2.batt_discharge_undertempreature=(slot2.RxData[6])&(0x01<<4);
 8003644:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003646:	226a      	movs	r2, #106	; 0x6a
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	001a      	movs	r2, r3
 800364c:	2310      	movs	r3, #16
 800364e:	4013      	ands	r3, r2
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	4193      	sbcs	r3, r2
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003658:	755a      	strb	r2, [r3, #21]
				slot2.batt_charge_overtempreature=(slot2.RxData[6])&(0x01<<5);
 800365a:	4b87      	ldr	r3, [pc, #540]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800365c:	226a      	movs	r2, #106	; 0x6a
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	001a      	movs	r2, r3
 8003662:	2320      	movs	r3, #32
 8003664:	4013      	ands	r3, r2
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	4193      	sbcs	r3, r2
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800366e:	759a      	strb	r2, [r3, #22]
				slot2.batt_charge_undertempreature=(slot2.RxData[6])&(0x01<<6);
 8003670:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003672:	226a      	movs	r2, #106	; 0x6a
 8003674:	5c9b      	ldrb	r3, [r3, r2]
 8003676:	001a      	movs	r2, r3
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	4013      	ands	r3, r2
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	4193      	sbcs	r3, r2
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003684:	75da      	strb	r2, [r3, #23]
				slot2.batt_under_voltage=(slot2.RxData[6])&(0x01<<7);
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003688:	226a      	movs	r2, #106	; 0x6a
 800368a:	5c9b      	ldrb	r3, [r3, r2]
 800368c:	001a      	movs	r2, r3
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	4013      	ands	r3, r2
 8003692:	1e5a      	subs	r2, r3, #1
 8003694:	4193      	sbcs	r3, r2
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b77      	ldr	r3, [pc, #476]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800369a:	761a      	strb	r2, [r3, #24]
				slot2.batt_over_voltage=(slot2.RxData[7])&(0x01<<0);
 800369c:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800369e:	226b      	movs	r2, #107	; 0x6b
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	001a      	movs	r2, r3
 80036a4:	2301      	movs	r3, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	4193      	sbcs	r3, r2
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b72      	ldr	r3, [pc, #456]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036b0:	765a      	strb	r2, [r3, #25]
				slot2.batt_over_discharge_capacity=(slot2.RxData[7])&(0x01<<1);
 80036b2:	4b71      	ldr	r3, [pc, #452]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036b4:	226b      	movs	r2, #107	; 0x6b
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	001a      	movs	r2, r3
 80036ba:	2302      	movs	r3, #2
 80036bc:	4013      	ands	r3, r2
 80036be:	1e5a      	subs	r2, r3, #1
 80036c0:	4193      	sbcs	r3, r2
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036c6:	769a      	strb	r2, [r3, #26]
				slot2.batt_unbalance=(slot2.RxData[7])&(0x01<<2);
 80036c8:	4b6b      	ldr	r3, [pc, #428]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036ca:	226b      	movs	r2, #107	; 0x6b
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	001a      	movs	r2, r3
 80036d0:	2304      	movs	r3, #4
 80036d2:	4013      	ands	r3, r2
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	4193      	sbcs	r3, r2
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036dc:	76da      	strb	r2, [r3, #27]
				slot2.batt_system_failure=(slot2.RxData[7])&(0x01<<3);
 80036de:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036e0:	226b      	movs	r2, #107	; 0x6b
 80036e2:	5c9b      	ldrb	r3, [r3, r2]
 80036e4:	001a      	movs	r2, r3
 80036e6:	2308      	movs	r3, #8
 80036e8:	4013      	ands	r3, r2
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	4193      	sbcs	r3, r2
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036f2:	771a      	strb	r2, [r3, #28]
				slot2.batt_charge_state=(slot2.RxData[7])&(0x01<<4);
 80036f4:	4b60      	ldr	r3, [pc, #384]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80036f6:	226b      	movs	r2, #107	; 0x6b
 80036f8:	5c9b      	ldrb	r3, [r3, r2]
 80036fa:	001a      	movs	r2, r3
 80036fc:	2310      	movs	r3, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	4193      	sbcs	r3, r2
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003708:	775a      	strb	r2, [r3, #29]
				slot2.batt_discharge_state=(slot2.RxData[7])&(0x01<<5);
 800370a:	4b5b      	ldr	r3, [pc, #364]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800370c:	226b      	movs	r2, #107	; 0x6b
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	001a      	movs	r2, r3
 8003712:	2320      	movs	r3, #32
 8003714:	4013      	ands	r3, r2
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	4193      	sbcs	r3, r2
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800371e:	779a      	strb	r2, [r3, #30]
				slot2.batt_sleep_state=(slot2.RxData[7])&(0x01<<6);
 8003720:	4b55      	ldr	r3, [pc, #340]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003722:	226b      	movs	r2, #107	; 0x6b
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	001a      	movs	r2, r3
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	4013      	ands	r3, r2
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	4193      	sbcs	r3, r2
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003734:	77da      	strb	r2, [r3, #31]
				slot2.flag_recieve_batt2=1;
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]
				slot2.can_batt2_trouble_state=0;
 800373e:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003740:	2223      	movs	r2, #35	; 0x23
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_FDCAN_RxFifo0Callback+0x7bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	031b      	lsls	r3, r3, #12
 800374c:	0b1a      	lsrs	r2, r3, #12
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003750:	65da      	str	r2, [r3, #92]	; 0x5c
				if(RxHeader2.Identifier==0x18FF50E5)//charger
 8003752:	4b48      	ldr	r3, [pc, #288]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <HAL_FDCAN_RxFifo0Callback+0x7c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d000      	beq.n	800375e <HAL_FDCAN_RxFifo0Callback+0x68e>
 800375c:	e081      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
				slot2.isCharger=1;
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003760:	2201      	movs	r2, #1
 8003762:	70da      	strb	r2, [r3, #3]
				slot2.Vcharger=(((slot2.RxData[0]<<8)|slot2.RxData[1])*0.1);
 8003764:	4b44      	ldr	r3, [pc, #272]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003766:	2264      	movs	r2, #100	; 0x64
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800376e:	2165      	movs	r1, #101	; 0x65
 8003770:	5c52      	ldrb	r2, [r2, r1]
 8003772:	4313      	orrs	r3, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fa51 	bl	8002c1c <__aeabi_i2d>
 800377a:	4a42      	ldr	r2, [pc, #264]	; (8003884 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 800377c:	4b42      	ldr	r3, [pc, #264]	; (8003888 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 800377e:	f7fe fc19 	bl	8001fb4 <__aeabi_dmul>
 8003782:	0002      	movs	r2, r0
 8003784:	000b      	movs	r3, r1
 8003786:	0010      	movs	r0, r2
 8003788:	0019      	movs	r1, r3
 800378a:	f7ff fabf 	bl	8002d0c <__aeabi_d2f>
 800378e:	1c02      	adds	r2, r0, #0
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
				slot2.Acharger=(((slot2.RxData[2]<<8)|slot2.RxData[3])*0.1);
 8003794:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003796:	2266      	movs	r2, #102	; 0x66
 8003798:	5c9b      	ldrb	r3, [r3, r2]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800379e:	2167      	movs	r1, #103	; 0x67
 80037a0:	5c52      	ldrb	r2, [r2, r1]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fa39 	bl	8002c1c <__aeabi_i2d>
 80037aa:	4a36      	ldr	r2, [pc, #216]	; (8003884 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 80037ae:	f7fe fc01 	bl	8001fb4 <__aeabi_dmul>
 80037b2:	0002      	movs	r2, r0
 80037b4:	000b      	movs	r3, r1
 80037b6:	0010      	movs	r0, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	f7ff faa7 	bl	8002d0c <__aeabi_d2f>
 80037be:	1c02      	adds	r2, r0, #0
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58
				slot2.charger_hardware_error=(slot2.RxData[4])&(0x01<<0);
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037c6:	2268      	movs	r2, #104	; 0x68
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	001a      	movs	r2, r3
 80037cc:	2301      	movs	r3, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	1e5a      	subs	r2, r3, #1
 80037d2:	4193      	sbcs	r3, r2
 80037d4:	b2d9      	uxtb	r1, r3
 80037d6:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037d8:	222a      	movs	r2, #42	; 0x2a
 80037da:	5499      	strb	r1, [r3, r2]
				slot2.charger_temp=(slot2.RxData[4])&(0x01<<1);
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037de:	2268      	movs	r2, #104	; 0x68
 80037e0:	5c9b      	ldrb	r3, [r3, r2]
 80037e2:	001a      	movs	r2, r3
 80037e4:	2302      	movs	r3, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	4193      	sbcs	r3, r2
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037f0:	222b      	movs	r2, #43	; 0x2b
 80037f2:	5499      	strb	r1, [r3, r2]
				slot2.charger_input_voltage=(slot2.RxData[4])&(0x01<<2);
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80037f6:	2268      	movs	r2, #104	; 0x68
 80037f8:	5c9b      	ldrb	r3, [r3, r2]
 80037fa:	001a      	movs	r2, r3
 80037fc:	2304      	movs	r3, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	4193      	sbcs	r3, r2
 8003804:	b2d9      	uxtb	r1, r3
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003808:	222c      	movs	r2, #44	; 0x2c
 800380a:	5499      	strb	r1, [r3, r2]
				slot2.charger_work_condition=(slot2.RxData[4])&(0x01<<3);
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800380e:	2268      	movs	r2, #104	; 0x68
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	001a      	movs	r2, r3
 8003814:	2308      	movs	r3, #8
 8003816:	4013      	ands	r3, r2
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	4193      	sbcs	r3, r2
 800381c:	b2d9      	uxtb	r1, r3
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003820:	222d      	movs	r2, #45	; 0x2d
 8003822:	5499      	strb	r1, [r3, r2]
				slot2.charger_communication_error=(slot2.RxData[4])&(0x01<<4);
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003826:	2268      	movs	r2, #104	; 0x68
 8003828:	5c9b      	ldrb	r3, [r3, r2]
 800382a:	001a      	movs	r2, r3
 800382c:	2310      	movs	r3, #16
 800382e:	4013      	ands	r3, r2
 8003830:	1e5a      	subs	r2, r3, #1
 8003832:	4193      	sbcs	r3, r2
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003838:	222e      	movs	r2, #46	; 0x2e
 800383a:	5499      	strb	r1, [r3, r2]
				slot2.can_charger_trouble_state=0;
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800383e:	2230      	movs	r2, #48	; 0x30
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]
				slot2.flag_recieve_charger=1;
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003846:	222f      	movs	r2, #47	; 0x2f
 8003848:	2101      	movs	r1, #1
 800384a:	5499      	strb	r1, [r3, r2]
}
 800384c:	e009      	b.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	f002 fbcf 	bl	8005ff8 <HAL_FDCAN_GetRxMessage>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d001      	beq.n	8003862 <HAL_FDCAN_RxFifo0Callback+0x792>
 800385e:	f000 fc63 	bl	8004128 <Error_Handler>
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	200007f4 	.word	0x200007f4
 8003870:	20000460 	.word	0x20000460
 8003874:	20000744 	.word	0x20000744
 8003878:	200003fc 	.word	0x200003fc
 800387c:	47ae147b 	.word	0x47ae147b
 8003880:	3f847ae1 	.word	0x3f847ae1
 8003884:	9999999a 	.word	0x9999999a
 8003888:	3fb99999 	.word	0x3fb99999
 800388c:	20000068 	.word	0x20000068
 8003890:	18ff50e5 	.word	0x18ff50e5

08003894 <CAN_config>:


void CAN_config()
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003898:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <CAN_config+0x130>)
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	05d2      	lsls	r2, r2, #23
 800389e:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIndex = 0;
 80038a0:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <CAN_config+0x130>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_DISABLE;
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <CAN_config+0x130>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80038ac:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <CAN_config+0x130>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterID1 = 0;
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <CAN_config+0x130>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterID2 = 0;
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <CAN_config+0x130>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	615a      	str	r2, [r3, #20]


	  sFilterConfig2.IdType = FDCAN_EXTENDED_ID;
 80038be:	4b42      	ldr	r3, [pc, #264]	; (80039c8 <CAN_config+0x134>)
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	05d2      	lsls	r2, r2, #23
 80038c4:	601a      	str	r2, [r3, #0]
	  sFilterConfig2.FilterIndex = 0;
 80038c6:	4b40      	ldr	r3, [pc, #256]	; (80039c8 <CAN_config+0x134>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
	  sFilterConfig2.FilterType = FDCAN_FILTER_DISABLE;
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <CAN_config+0x134>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
	  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <CAN_config+0x134>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	60da      	str	r2, [r3, #12]
	  sFilterConfig2.FilterID1 = 0;
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <CAN_config+0x134>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
	  sFilterConfig2.FilterID2 = 0;
 80038de:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <CAN_config+0x134>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]

	  TxHeader.Identifier = 0x01;
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <CAN_config+0x138>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_EXTENDED_ID;
 80038ea:	4b38      	ldr	r3, [pc, #224]	; (80039cc <CAN_config+0x138>)
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	05d2      	lsls	r2, r2, #23
 80038f0:	605a      	str	r2, [r3, #4]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <CAN_config+0x138>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	0312      	lsls	r2, r2, #12
 80038f8:	60da      	str	r2, [r3, #12]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <CAN_config+0x138>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003900:	4b32      	ldr	r3, [pc, #200]	; (80039cc <CAN_config+0x138>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <CAN_config+0x138>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800390c:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <CAN_config+0x138>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <CAN_config+0x138>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	0412      	lsls	r2, r2, #16
 8003918:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <CAN_config+0x138>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]

	  TxHeader2.Identifier = 0x02;
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <CAN_config+0x13c>)
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
	  TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <CAN_config+0x13c>)
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	05d2      	lsls	r2, r2, #23
 800392c:	605a      	str	r2, [r3, #4]
	  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <CAN_config+0x13c>)
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	0312      	lsls	r2, r2, #12
 8003934:	60da      	str	r2, [r3, #12]
	  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <CAN_config+0x13c>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
	  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <CAN_config+0x13c>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
	  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <CAN_config+0x13c>)
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
	  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <CAN_config+0x13c>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
	  TxHeader2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <CAN_config+0x13c>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0412      	lsls	r2, r2, #16
 8003954:	61da      	str	r2, [r3, #28]
	  TxHeader2.MessageMarker = 0x00;
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <CAN_config+0x13c>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]

	  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800395c:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <CAN_config+0x130>)
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <CAN_config+0x140>)
 8003960:	0011      	movs	r1, r2
 8003962:	0018      	movs	r0, r3
 8003964:	f002 fa80 	bl	8005e68 <HAL_FDCAN_ConfigFilter>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <CAN_config+0x140>)
 800396a:	0018      	movs	r0, r3
 800396c:	f002 fad9 	bl	8005f22 <HAL_FDCAN_Start>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d001      	beq.n	8003978 <CAN_config+0xe4>
	  {
	    Error_Handler();
 8003974:	f000 fbd8 	bl	8004128 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <CAN_config+0x140>)
 800397a:	2200      	movs	r2, #0
 800397c:	2101      	movs	r1, #1
 800397e:	0018      	movs	r0, r3
 8003980:	f002 fc1c 	bl	80061bc <HAL_FDCAN_ActivateNotification>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <CAN_config+0xf8>
	  {
	    Error_Handler();
 8003988:	f000 fbce 	bl	8004128 <Error_Handler>
	  }


	  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2);
 800398c:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <CAN_config+0x134>)
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <CAN_config+0x144>)
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f002 fa68 	bl	8005e68 <HAL_FDCAN_ConfigFilter>
	  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <CAN_config+0x144>)
 800399a:	0018      	movs	r0, r3
 800399c:	f002 fac1 	bl	8005f22 <HAL_FDCAN_Start>
 80039a0:	1e03      	subs	r3, r0, #0
 80039a2:	d001      	beq.n	80039a8 <CAN_config+0x114>
	  {
	   Error_Handler();
 80039a4:	f000 fbc0 	bl	8004128 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <CAN_config+0x144>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	2101      	movs	r1, #1
 80039ae:	0018      	movs	r0, r3
 80039b0:	f002 fc04 	bl	80061bc <HAL_FDCAN_ActivateNotification>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <CAN_config+0x128>
	  {
	    /* Notification Error */
	    Error_Handler();
 80039b8:	f000 fbb6 	bl	8004128 <Error_Handler>
	  }
    
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000038 	.word	0x20000038
 80039c8:	20000050 	.word	0x20000050
 80039cc:	20000090 	.word	0x20000090
 80039d0:	2000076c 	.word	0x2000076c
 80039d4:	20000790 	.word	0x20000790
 80039d8:	200007f4 	.word	0x200007f4

080039dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039e0:	f001 fbec 	bl	80051bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039e4:	f000 f944 	bl	8003c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039e8:	f000 fb7c 	bl	80040e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80039ec:	f000 fb54 	bl	8004098 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80039f0:	f000 f99c 	bl	8003d2c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80039f4:	f000 f9e2 	bl	8003dbc <MX_FDCAN2_Init>
  MX_TIM1_Init();
 80039f8:	f000 fa28 	bl	8003e4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80039fc:	f000 fafe 	bl	8003ffc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_config();
 8003a00:	f7ff ff48 	bl	8003894 <CAN_config>
  slot1.notif=led_standby;
 8003a04:	4a95      	ldr	r2, [pc, #596]	; (8003c5c <main+0x280>)
 8003a06:	23c4      	movs	r3, #196	; 0xc4
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	54d1      	strb	r1, [r2, r3]
  slot2.notif=led_standby;
 8003a0e:	4a94      	ldr	r2, [pc, #592]	; (8003c60 <main+0x284>)
 8003a10:	23c4      	movs	r3, #196	; 0xc4
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	2101      	movs	r1, #1
 8003a16:	54d1      	strb	r1, [r2, r3]
  slot1.state = standby;
 8003a18:	4b90      	ldr	r3, [pc, #576]	; (8003c5c <main+0x280>)
 8003a1a:	2274      	movs	r2, #116	; 0x74
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]
  slot2.state=standby;
 8003a20:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <main+0x284>)
 8003a22:	2274      	movs	r2, #116	; 0x74
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

  slot1.wake_trig=1;
 8003a28:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <main+0x280>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
  slot2.wake_trig=1;
 8003a2e:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <main+0x284>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	705a      	strb	r2, [r3, #1]
  slot1.last_lock_state=1;
 8003a34:	4b89      	ldr	r3, [pc, #548]	; (8003c5c <main+0x280>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	731a      	strb	r2, [r3, #12]
  slot2.last_lock_state=1;
 8003a3a:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <main+0x284>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	731a      	strb	r2, [r3, #12]
  slot1.charger_start_DIS=1;
 8003a40:	4b86      	ldr	r3, [pc, #536]	; (8003c5c <main+0x280>)
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]
  slot2.charger_start_DIS=1;
 8003a48:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <main+0x284>)
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5499      	strb	r1, [r3, r2]
  slot1.unlock_command=1;
 8003a50:	4b82      	ldr	r3, [pc, #520]	; (8003c5c <main+0x280>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	721a      	strb	r2, [r3, #8]
  slot2.unlock_command=1;
 8003a56:	4b82      	ldr	r3, [pc, #520]	; (8003c60 <main+0x284>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	721a      	strb	r2, [r3, #8]
  slot1.batt_state=0x01;
 8003a5c:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <main+0x280>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60
  slot2.batt_state=0x01;
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <main+0x284>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60

  slot1.datasentflag=0;
 8003a68:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <main+0x280>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78
  slot2.datasentflag=1;
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <main+0x284>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	679a      	str	r2, [r3, #120]	; 0x78
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  switch(slot1.notif)
 8003a74:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <main+0x280>)
 8003a76:	23c4      	movs	r3, #196	; 0xc4
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d81d      	bhi.n	8003abc <main+0xe0>
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <main+0x288>)
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	469f      	mov	pc, r3
	 	  {
	 	  case led_standby:
	 		 fault_led(&slot1);
 8003a8a:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <main+0x280>)
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f001 fb07 	bl	80050a0 <fault_led>
//	 		  standby_led(&slot1);
	 		  break;
 8003a92:	e018      	b.n	8003ac6 <main+0xea>
	 	  case led_swap:
	 		  swap_led(&slot1);
 8003a94:	4b71      	ldr	r3, [pc, #452]	; (8003c5c <main+0x280>)
 8003a96:	0018      	movs	r0, r3
 8003a98:	f001 fa9e 	bl	8004fd8 <swap_led>
	 		  break;
 8003a9c:	e013      	b.n	8003ac6 <main+0xea>
	 	  case led_charging:
	 		   charging_led(&slot1);
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <main+0x280>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f001 f9dd 	bl	8004e60 <charging_led>
	 		   break;
 8003aa6:	e00e      	b.n	8003ac6 <main+0xea>
	 	  case led_fault:
	 		  fault_led(&slot1);
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <main+0x280>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f001 faf8 	bl	80050a0 <fault_led>
	 		  break;
 8003ab0:	e009      	b.n	8003ac6 <main+0xea>
	 	  case led_ready_pick:
	 		  ready_pick_led(&slot1);
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <main+0x280>)
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f001 fa47 	bl	8004f48 <ready_pick_led>
	 		  break;
 8003aba:	e004      	b.n	8003ac6 <main+0xea>
	 	  default:
	 		  standby_led(&slot1);
 8003abc:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <main+0x280>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f001 fb0c 	bl	80050dc <standby_led>
	 		  break;
 8003ac4:	46c0      	nop			; (mov r8, r8)
	 	  }

	 	  switch(slot2.notif)
 8003ac6:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <main+0x284>)
 8003ac8:	23c4      	movs	r3, #196	; 0xc4
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d81d      	bhi.n	8003b0e <main+0x132>
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <main+0x28c>)
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	469f      	mov	pc, r3
	 	  {
	 	  case led_standby:
	 		 fault_led(&slot2);
 8003adc:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <main+0x284>)
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f001 fade 	bl	80050a0 <fault_led>
//	 		  standby_led(&slot2);
	 		  break;
 8003ae4:	e018      	b.n	8003b18 <main+0x13c>
	 	  case led_swap:
	 		  swap_led(&slot2);
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <main+0x284>)
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 fa75 	bl	8004fd8 <swap_led>
	 		  break;
 8003aee:	e013      	b.n	8003b18 <main+0x13c>
	 	  case led_charging:
	 		   charging_led(&slot2);
 8003af0:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <main+0x284>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f001 f9b4 	bl	8004e60 <charging_led>
	 		   break;
 8003af8:	e00e      	b.n	8003b18 <main+0x13c>
	 	  case led_fault:
	 		  fault_led(&slot2);
 8003afa:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <main+0x284>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f001 facf 	bl	80050a0 <fault_led>
	 		  break;
 8003b02:	e009      	b.n	8003b18 <main+0x13c>
	 	  case led_ready_pick:
	 		  ready_pick_led(&slot2);
 8003b04:	4b56      	ldr	r3, [pc, #344]	; (8003c60 <main+0x284>)
 8003b06:	0018      	movs	r0, r3
 8003b08:	f001 fa1e 	bl	8004f48 <ready_pick_led>
	 		  break;
 8003b0c:	e004      	b.n	8003b18 <main+0x13c>
	 	  default:
	 		  standby_led(&slot2);
 8003b0e:	4b54      	ldr	r3, [pc, #336]	; (8003c60 <main+0x284>)
 8003b10:	0018      	movs	r0, r3
 8003b12:	f001 fae3 	bl	80050dc <standby_led>
	 		  break;
 8003b16:	46c0      	nop			; (mov r8, r8)
	 	  }

	 	  switch(slot1.state)
 8003b18:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <main+0x280>)
 8003b1a:	2274      	movs	r2, #116	; 0x74
 8003b1c:	5c9b      	ldrb	r3, [r3, r2]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d032      	beq.n	8003b88 <main+0x1ac>
 8003b22:	dc3b      	bgt.n	8003b9c <main+0x1c0>
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d025      	beq.n	8003b74 <main+0x198>
 8003b28:	dc38      	bgt.n	8003b9c <main+0x1c0>
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d002      	beq.n	8003b34 <main+0x158>
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00a      	beq.n	8003b48 <main+0x16c>
 8003b32:	e033      	b.n	8003b9c <main+0x1c0>
		  {
		  case standby:
			  slot1.notif=led_standby;
 8003b34:	4a49      	ldr	r2, [pc, #292]	; (8003c5c <main+0x280>)
 8003b36:	23c4      	movs	r3, #196	; 0xc4
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	54d1      	strb	r1, [r2, r3]
			  standby_mode(&slot1);
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <main+0x280>)
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 faf6 	bl	8004132 <standby_mode>
			  break;
 8003b46:	e033      	b.n	8003bb0 <main+0x1d4>
		  case charging:
			  if(slot1.SOC_batt<100&&slot1.charge_state==1)
 8003b48:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <main+0x280>)
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	4947      	ldr	r1, [pc, #284]	; (8003c6c <main+0x290>)
 8003b4e:	1c18      	adds	r0, r3, #0
 8003b50:	f7fc fc9e 	bl	8000490 <__aeabi_fcmplt>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d008      	beq.n	8003b6a <main+0x18e>
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <main+0x280>)
 8003b5a:	795b      	ldrb	r3, [r3, #5]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <main+0x18e>
			  slot1.notif=led_charging;
 8003b60:	4a3e      	ldr	r2, [pc, #248]	; (8003c5c <main+0x280>)
 8003b62:	23c4      	movs	r3, #196	; 0xc4
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	2103      	movs	r1, #3
 8003b68:	54d1      	strb	r1, [r2, r3]
			  charging_mode(&slot1);
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <main+0x280>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 fb85 	bl	800427c <charging_mode>
			  break;
 8003b72:	e01d      	b.n	8003bb0 <main+0x1d4>
		  case fault:
			  slot1.notif=led_fault;
 8003b74:	4a39      	ldr	r2, [pc, #228]	; (8003c5c <main+0x280>)
 8003b76:	23c4      	movs	r3, #196	; 0xc4
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	54d1      	strb	r1, [r2, r3]
			  fault_mode(&slot1);
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <main+0x280>)
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 fc27 	bl	80043d4 <fault_mode>
			  break;
 8003b86:	e013      	b.n	8003bb0 <main+0x1d4>
		  case swap:
			  slot1.notif=led_swap;
 8003b88:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <main+0x280>)
 8003b8a:	23c4      	movs	r3, #196	; 0xc4
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	2102      	movs	r1, #2
 8003b90:	54d1      	strb	r1, [r2, r3]
			  swap_mode(&slot1);
 8003b92:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <main+0x280>)
 8003b94:	0018      	movs	r0, r3
 8003b96:	f000 fb11 	bl	80041bc <swap_mode>
			  break;
 8003b9a:	e009      	b.n	8003bb0 <main+0x1d4>
		  default:
			  slot1.notif=standby;
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <main+0x280>)
 8003b9e:	23c4      	movs	r3, #196	; 0xc4
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	54d1      	strb	r1, [r2, r3]
			  slot1.state = standby;
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <main+0x280>)
 8003ba8:	2274      	movs	r2, #116	; 0x74
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]
			  break;
 8003bae:	46c0      	nop			; (mov r8, r8)
		  }

	  switch(slot2.state)
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <main+0x284>)
 8003bb2:	2274      	movs	r2, #116	; 0x74
 8003bb4:	5c9b      	ldrb	r3, [r3, r2]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d032      	beq.n	8003c20 <main+0x244>
 8003bba:	dc3b      	bgt.n	8003c34 <main+0x258>
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d025      	beq.n	8003c0c <main+0x230>
 8003bc0:	dc38      	bgt.n	8003c34 <main+0x258>
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d002      	beq.n	8003bcc <main+0x1f0>
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d00a      	beq.n	8003be0 <main+0x204>
 8003bca:	e033      	b.n	8003c34 <main+0x258>
		  {
		  case standby:
			  slot2.notif=led_standby;
 8003bcc:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <main+0x284>)
 8003bce:	23c4      	movs	r3, #196	; 0xc4
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	54d1      	strb	r1, [r2, r3]
			  standby_mode(&slot2);
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <main+0x284>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 faaa 	bl	8004132 <standby_mode>
			  break;
 8003bde:	e033      	b.n	8003c48 <main+0x26c>
		  case charging:
			  if(slot2.SOC_batt<100&&slot2.charge_state==1)
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <main+0x284>)
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	4921      	ldr	r1, [pc, #132]	; (8003c6c <main+0x290>)
 8003be6:	1c18      	adds	r0, r3, #0
 8003be8:	f7fc fc52 	bl	8000490 <__aeabi_fcmplt>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d008      	beq.n	8003c02 <main+0x226>
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <main+0x284>)
 8003bf2:	795b      	ldrb	r3, [r3, #5]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <main+0x226>
			  slot2.notif=led_charging;
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <main+0x284>)
 8003bfa:	23c4      	movs	r3, #196	; 0xc4
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	2103      	movs	r1, #3
 8003c00:	54d1      	strb	r1, [r2, r3]
			  charging_mode(&slot2);
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <main+0x284>)
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 fb39 	bl	800427c <charging_mode>
			  break;
 8003c0a:	e01d      	b.n	8003c48 <main+0x26c>
		  case fault:
			  slot2.notif=led_fault;
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <main+0x284>)
 8003c0e:	23c4      	movs	r3, #196	; 0xc4
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	2104      	movs	r1, #4
 8003c14:	54d1      	strb	r1, [r2, r3]
			  fault_mode(&slot2);
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <main+0x284>)
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 fbdb 	bl	80043d4 <fault_mode>
			  break;
 8003c1e:	e013      	b.n	8003c48 <main+0x26c>
		  case swap:
			  slot2.notif=led_swap;
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <main+0x284>)
 8003c22:	23c4      	movs	r3, #196	; 0xc4
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	2102      	movs	r1, #2
 8003c28:	54d1      	strb	r1, [r2, r3]
			  swap_mode(&slot2);
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <main+0x284>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fac5 	bl	80041bc <swap_mode>
			  break;
 8003c32:	e009      	b.n	8003c48 <main+0x26c>
		  default:
			  slot2.notif=standby;
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <main+0x284>)
 8003c36:	23c4      	movs	r3, #196	; 0xc4
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	54d1      	strb	r1, [r2, r3]
			  slot2.state = standby;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <main+0x284>)
 8003c40:	2274      	movs	r2, #116	; 0x74
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
			  break;
 8003c46:	46c0      	nop			; (mov r8, r8)
		  }
	 send_led();
 8003c48:	f001 f870 	bl	8004d2c <send_led>
CAN_TX();
 8003c4c:	f7ff f95a 	bl	8002f04 <CAN_TX>
HAL_Delay(1000);
 8003c50:	23fa      	movs	r3, #250	; 0xfa
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f001 fb37 	bl	80052c8 <HAL_Delay>
	  	  switch(slot1.notif)
 8003c5a:	e70b      	b.n	8003a74 <main+0x98>
 8003c5c:	200000b4 	.word	0x200000b4
 8003c60:	200003fc 	.word	0x200003fc
 8003c64:	0800bc38 	.word	0x0800bc38
 8003c68:	0800bc50 	.word	0x0800bc50
 8003c6c:	42c80000 	.word	0x42c80000

08003c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b095      	sub	sp, #84	; 0x54
 8003c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c76:	2414      	movs	r4, #20
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	233c      	movs	r3, #60	; 0x3c
 8003c7e:	001a      	movs	r2, r3
 8003c80:	2100      	movs	r1, #0
 8003c82:	f006 fea7 	bl	800a9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	0018      	movs	r0, r3
 8003c8a:	2310      	movs	r3, #16
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f006 fea0 	bl	800a9d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f002 ff55 	bl	8006b48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	0052      	lsls	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003cac:	0021      	movs	r1, r4
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2200      	movs	r2, #0
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2208      	movs	r2, #8
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	0292      	lsls	r2, r2, #10
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	0492      	lsls	r2, r2, #18
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	0592      	lsls	r2, r2, #22
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	0018      	movs	r0, r3
 8003cee:	f002 ff77 	bl	8006be0 <HAL_RCC_OscConfig>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d001      	beq.n	8003cfa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003cf6:	f000 fa17 	bl	8004128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	2202      	movs	r2, #2
 8003d04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	2102      	movs	r1, #2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f003 fac2 	bl	80072a0 <HAL_RCC_ClockConfig>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003d20:	f000 fa02 	bl	8004128 <Error_Handler>
  }
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b015      	add	sp, #84	; 0x54
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d32:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <MX_FDCAN1_Init+0x8c>)
 8003d34:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d6e:	2208      	movs	r2, #8
 8003d70:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <MX_FDCAN1_Init+0x88>)
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f001 fefc 	bl	8005b9c <HAL_FDCAN_Init>
 8003da4:	1e03      	subs	r3, r0, #0
 8003da6:	d001      	beq.n	8003dac <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003da8:	f000 f9be 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	20000790 	.word	0x20000790
 8003db8:	40006400 	.word	0x40006400

08003dbc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dc2:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <MX_FDCAN2_Init+0x8c>)
 8003dc4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dec:	2210      	movs	r2, #16
 8003dee:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 7;
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003df8:	2207      	movs	r2, #7
 8003dfa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 8;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003dfe:	2208      	movs	r2, #8
 8003e00:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <MX_FDCAN2_Init+0x88>)
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f001 feb4 	bl	8005b9c <HAL_FDCAN_Init>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d001      	beq.n	8003e3c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003e38:	f000 f976 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	200007f4 	.word	0x200007f4
 8003e48:	40006800 	.word	0x40006800

08003e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b09c      	sub	sp, #112	; 0x70
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e52:	2360      	movs	r3, #96	; 0x60
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	0018      	movs	r0, r3
 8003e58:	2310      	movs	r3, #16
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f006 fdb9 	bl	800a9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e62:	2354      	movs	r3, #84	; 0x54
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	0018      	movs	r0, r3
 8003e68:	230c      	movs	r3, #12
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f006 fdb1 	bl	800a9d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e72:	2338      	movs	r3, #56	; 0x38
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	0018      	movs	r0, r3
 8003e78:	231c      	movs	r3, #28
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f006 fda9 	bl	800a9d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	0018      	movs	r0, r3
 8003e86:	2334      	movs	r3, #52	; 0x34
 8003e88:	001a      	movs	r2, r3
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f006 fda2 	bl	800a9d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003e92:	4a59      	ldr	r2, [pc, #356]	; (8003ff8 <MX_TIM1_Init+0x1ac>)
 8003e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003e98:	220f      	movs	r2, #15
 8003e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9c:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 79;
 8003ea2:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003ea4:	224f      	movs	r2, #79	; 0x4f
 8003ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea8:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f003 fdd5 	bl	8007a6c <HAL_TIM_Base_Init>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003ec6:	f000 f92f 	bl	8004128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eca:	2160      	movs	r1, #96	; 0x60
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	0152      	lsls	r2, r2, #5
 8003ed2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ed4:	187a      	adds	r2, r7, r1
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f004 fba6 	bl	800862c <HAL_TIM_ConfigClockSource>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003ee4:	f000 f920 	bl	8004128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003eea:	0018      	movs	r0, r3
 8003eec:	f003 fe16 	bl	8007b1c <HAL_TIM_PWM_Init>
 8003ef0:	1e03      	subs	r3, r0, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003ef4:	f000 f918 	bl	8004128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ef8:	2154      	movs	r1, #84	; 0x54
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2220      	movs	r2, #32
 8003efe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2200      	movs	r2, #0
 8003f04:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f0c:	187a      	adds	r2, r7, r1
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003f10:	0011      	movs	r1, r2
 8003f12:	0018      	movs	r0, r3
 8003f14:	f005 f972 	bl	80091fc <HAL_TIMEx_MasterConfigSynchronization>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003f1c:	f000 f904 	bl	8004128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f20:	2138      	movs	r1, #56	; 0x38
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2260      	movs	r2, #96	; 0x60
 8003f26:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	2200      	movs	r2, #0
 8003f44:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f4c:	1879      	adds	r1, r7, r1
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003f50:	2204      	movs	r2, #4
 8003f52:	0018      	movs	r0, r3
 8003f54:	f004 fa6a 	bl	800842c <HAL_TIM_PWM_ConfigChannel>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003f5c:	f000 f8e4 	bl	8004128 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003f60:	2138      	movs	r1, #56	; 0x38
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2204      	movs	r2, #4
 8003f66:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f68:	1879      	adds	r1, r7, r1
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f004 fa5c 	bl	800842c <HAL_TIM_PWM_ConfigChannel>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8003f78:	f000 f8d6 	bl	8004128 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	2280      	movs	r2, #128	; 0x80
 8003f9e:	0192      	lsls	r2, r2, #6
 8003fa0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0492      	lsls	r2, r2, #18
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fc8:	1d3b      	adds	r3, r7, #4
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fce:	1d3a      	adds	r2, r7, #4
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f005 f987 	bl	80092e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 8003fde:	f000 f8a3 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <MX_TIM1_Init+0x1a8>)
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 fc15 	bl	8004814 <HAL_TIM_MspPostInit>

}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b01c      	add	sp, #112	; 0x70
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	20000858 	.word	0x20000858
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004002:	4a24      	ldr	r2, [pc, #144]	; (8004094 <MX_USART1_UART_Init+0x98>)
 8004004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004008:	22e1      	movs	r2, #225	; 0xe1
 800400a:	0252      	lsls	r2, r2, #9
 800400c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <MX_USART1_UART_Init+0x94>)
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004022:	220c      	movs	r2, #12
 8004024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <MX_USART1_UART_Init+0x94>)
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004034:	2200      	movs	r2, #0
 8004036:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <MX_USART1_UART_Init+0x94>)
 800403a:	2200      	movs	r2, #0
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004040:	2200      	movs	r2, #0
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004046:	0018      	movs	r0, r3
 8004048:	f005 fa0c 	bl	8009464 <HAL_UART_Init>
 800404c:	1e03      	subs	r3, r0, #0
 800404e:	d001      	beq.n	8004054 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004050:	f000 f86a 	bl	8004128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004056:	2100      	movs	r1, #0
 8004058:	0018      	movs	r0, r3
 800405a:	f006 fbb7 	bl	800a7cc <HAL_UARTEx_SetTxFifoThreshold>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004062:	f000 f861 	bl	8004128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <MX_USART1_UART_Init+0x94>)
 8004068:	2100      	movs	r1, #0
 800406a:	0018      	movs	r0, r3
 800406c:	f006 fbee 	bl	800a84c <HAL_UARTEx_SetRxFifoThreshold>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004074:	f000 f858 	bl	8004128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <MX_USART1_UART_Init+0x94>)
 800407a:	0018      	movs	r0, r3
 800407c:	f006 fb6c 	bl	800a758 <HAL_UARTEx_DisableFifoMode>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004084:	f000 f850 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	20000964 	.word	0x20000964
 8004094:	40013800 	.word	0x40013800

08004098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <MX_DMA_Init+0x48>)
 80040a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_DMA_Init+0x48>)
 80040a4:	2101      	movs	r1, #1
 80040a6:	430a      	orrs	r2, r1
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <MX_DMA_Init+0x48>)
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	2201      	movs	r2, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	2009      	movs	r0, #9
 80040bc:	f001 f9d4 	bl	8005468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040c0:	2009      	movs	r0, #9
 80040c2:	f001 f9e6 	bl	8005492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	200a      	movs	r0, #10
 80040cc:	f001 f9cc 	bl	8005468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80040d0:	200a      	movs	r0, #10
 80040d2:	f001 f9de 	bl	8005492 <HAL_NVIC_EnableIRQ>

}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b002      	add	sp, #8
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	40021000 	.word	0x40021000

080040e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <MX_GPIO_Init+0x40>)
 80040ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <MX_GPIO_Init+0x40>)
 80040f0:	2102      	movs	r1, #2
 80040f2:	430a      	orrs	r2, r1
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <MX_GPIO_Init+0x40>)
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	2202      	movs	r2, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <MX_GPIO_Init+0x40>)
 8004104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <MX_GPIO_Init+0x40>)
 8004108:	2101      	movs	r1, #1
 800410a:	430a      	orrs	r2, r1
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <MX_GPIO_Init+0x40>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	2201      	movs	r2, #1
 8004114:	4013      	ands	r3, r2
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]

}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b002      	add	sp, #8
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40021000 	.word	0x40021000

08004128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004130:	e7fe      	b.n	8004130 <Error_Handler+0x8>

08004132 <standby_mode>:
extern enum step lastState;

extern enum step state2;
extern enum step lastState2;
void standby_mode(slot *Slot)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	if(Slot->can_charger_trouble_state)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2230      	movs	r2, #48	; 0x30
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <standby_mode+0x26>
	{
		Slot->lastState=Slot->state;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2274      	movs	r2, #116	; 0x74
 8004148:	5c99      	ldrb	r1, [r3, r2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2275      	movs	r2, #117	; 0x75
 800414e:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2274      	movs	r2, #116	; 0x74
 8004154:	2105      	movs	r1, #5
 8004156:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->unlock_command==1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7a1b      	ldrb	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <standby_mode+0x3a>
	{
		Slot->lock_state=0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	72da      	strb	r2, [r3, #11]
	}

	if(Slot->isBattery==1&&Slot->CAN_error_state==0)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	789b      	ldrb	r3, [r3, #2]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d014      	beq.n	800419e <standby_mode+0x6c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7a9b      	ldrb	r3, [r3, #10]
 8004178:	2201      	movs	r2, #1
 800417a:	4053      	eors	r3, r2
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <standby_mode+0x6c>
	{
		Slot->lastState=Slot->state;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2274      	movs	r2, #116	; 0x74
 8004186:	5c99      	ldrb	r1, [r3, r2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2275      	movs	r2, #117	; 0x75
 800418c:	5499      	strb	r1, [r3, r2]
		Slot->state=swap;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2274      	movs	r2, #116	; 0x74
 8004192:	2106      	movs	r1, #6
 8004194:	5499      	strb	r1, [r3, r2]
		Slot->wake_trig=0;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	705a      	strb	r2, [r3, #1]
 800419c:	e002      	b.n	80041a4 <standby_mode+0x72>
	}
	else
	{
		Slot->wake_trig=1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	705a      	strb	r2, [r3, #1]

	}
	if(Slot->hardware_failure)Slot->state=fault;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7a5b      	ldrb	r3, [r3, #9]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <standby_mode+0x82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2274      	movs	r2, #116	; 0x74
 80041b0:	2105      	movs	r1, #5
 80041b2:	5499      	strb	r1, [r3, r2]
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <swap_mode>:

void swap_mode(slot *Slot)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2222      	movs	r2, #34	; 0x22
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <swap_mode+0x1c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2223      	movs	r2, #35	; 0x23
 80041d2:	5c9b      	ldrb	r3, [r3, r2]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <swap_mode+0x24>
	Slot->state=standby;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2274      	movs	r2, #116	; 0x74
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]
	if(Slot->lock_command)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	79db      	ldrb	r3, [r3, #7]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <swap_mode+0x3e>
	{
		Slot->lock_state=1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	72da      	strb	r2, [r3, #11]
		Slot->lock_command=0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	71da      	strb	r2, [r3, #7]
	}
	if(Slot->unlock_command)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7a1b      	ldrb	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <swap_mode+0x58>
	{
		Slot->lock_state=0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	72da      	strb	r2, [r3, #11]
		Slot->unlock_command=0;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	721a      	strb	r2, [r3, #8]
	}
	if(Slot->lock_state==1&&Slot->charge_command==1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	799b      	ldrb	r3, [r3, #6]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <swap_mode+0x7c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <swap_mode+0x7c>
	{
		Slot->lastState=Slot->state;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2274      	movs	r2, #116	; 0x74
 8004228:	5c99      	ldrb	r1, [r3, r2]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2275      	movs	r2, #117	; 0x75
 800422e:	5499      	strb	r1, [r3, r2]
		Slot->state=charging;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2274      	movs	r2, #116	; 0x74
 8004234:	2102      	movs	r1, #2
 8004236:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->hardware_failure)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7a5b      	ldrb	r3, [r3, #9]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <swap_mode+0x98>
	{
		Slot->lastState=Slot->state;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2274      	movs	r2, #116	; 0x74
 8004244:	5c99      	ldrb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2275      	movs	r2, #117	; 0x75
 800424a:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2274      	movs	r2, #116	; 0x74
 8004250:	2105      	movs	r1, #5
 8004252:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->can_charger_trouble_state==1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2230      	movs	r2, #48	; 0x30
 8004258:	5c9b      	ldrb	r3, [r3, r2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <swap_mode+0xb6>
	{
		Slot->lastState=Slot->state;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2274      	movs	r2, #116	; 0x74
 8004262:	5c99      	ldrb	r1, [r3, r2]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2275      	movs	r2, #117	; 0x75
 8004268:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2274      	movs	r2, #116	; 0x74
 800426e:	2105      	movs	r1, #5
 8004270:	5499      	strb	r1, [r3, r2]
	}

}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <charging_mode>:

void charging_mode(slot *Slot)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	if (Slot->isBattery)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	789b      	ldrb	r3, [r3, #2]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05c      	beq.n	8004346 <charging_mode+0xca>
	{
		if(Slot->SOC_batt>=100||Slot->stop_charge_command==1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	494f      	ldr	r1, [pc, #316]	; (80043d0 <charging_mode+0x154>)
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc f91a 	bl	80004cc <__aeabi_fcmpge>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d103      	bne.n	80042a4 <charging_mode+0x28>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <charging_mode+0x4c>
		{
			Slot->stop_charge_command=0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
			Slot->batt_state=0x01;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
			Slot->charger_start_DIS=1;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	2101      	movs	r1, #1
 80042b6:	5499      	strb	r1, [r3, r2]
			Slot->charge_state=0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	715a      	strb	r2, [r3, #5]
			Slot->notif=led_standby;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	23c4      	movs	r3, #196	; 0xc4
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	2101      	movs	r1, #1
 80042c6:	54d1      	strb	r1, [r2, r3]
		}
		if(Slot->unlock_command)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7a1b      	ldrb	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d028      	beq.n	8004322 <charging_mode+0xa6>
		{
			if(Slot->charge_state==0)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	795b      	ldrb	r3, [r3, #5]
 80042d4:	2201      	movs	r2, #1
 80042d6:	4053      	eors	r3, r2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d021      	beq.n	8004322 <charging_mode+0xa6>
			{
				Slot->notif=led_ready_pick;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	23c4      	movs	r3, #196	; 0xc4
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	2105      	movs	r1, #5
 80042e6:	54d1      	strb	r1, [r2, r3]
				if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2222      	movs	r2, #34	; 0x22
 80042ec:	5c9b      	ldrb	r3, [r3, r2]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <charging_mode+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2223      	movs	r2, #35	; 0x23
 80042f6:	5c9b      	ldrb	r3, [r3, r2]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <charging_mode+0xa6>
				{
					Slot->unlock_command=0;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	721a      	strb	r2, [r3, #8]
					Slot->lock_state=0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	719a      	strb	r2, [r3, #6]
					Slot->current_lock_state=0;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	72da      	strb	r2, [r3, #11]
					Slot->lastState=Slot->state;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2274      	movs	r2, #116	; 0x74
 8004312:	5c99      	ldrb	r1, [r3, r2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2275      	movs	r2, #117	; 0x75
 8004318:	5499      	strb	r1, [r3, r2]
					Slot->state=standby;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2274      	movs	r2, #116	; 0x74
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]

				}

			}
		}
		if(Slot->charge_command)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	791b      	ldrb	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d020      	beq.n	800436c <charging_mode+0xf0>
		{
			//start batre and charge to charge
			Slot->batt_state=0x05;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2205      	movs	r2, #5
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
			Slot->charger_start_DIS=0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]
			Slot->charge_state=1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	715a      	strb	r2, [r3, #5]
			Slot->charge_command=0;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	711a      	strb	r2, [r3, #4]
 8004344:	e012      	b.n	800436c <charging_mode+0xf0>
		}

	}
	else
	{
		Slot->unlock_command=0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	721a      	strb	r2, [r3, #8]
		Slot->lock_state=0;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	72da      	strb	r2, [r3, #11]
		Slot->lastState=Slot->state;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2274      	movs	r2, #116	; 0x74
 800435c:	5c99      	ldrb	r1, [r3, r2]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2275      	movs	r2, #117	; 0x75
 8004362:	5499      	strb	r1, [r3, r2]
		Slot->state=standby;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2274      	movs	r2, #116	; 0x74
 8004368:	2101      	movs	r1, #1
 800436a:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->hardware_failure)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7a5b      	ldrb	r3, [r3, #9]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <charging_mode+0x10c>
	{
		Slot->lastState=Slot->state;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2274      	movs	r2, #116	; 0x74
 8004378:	5c99      	ldrb	r1, [r3, r2]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2275      	movs	r2, #117	; 0x75
 800437e:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2274      	movs	r2, #116	; 0x74
 8004384:	2105      	movs	r1, #5
 8004386:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->unlock_command==0 && (Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1) )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7a1b      	ldrb	r3, [r3, #8]
 800438c:	2201      	movs	r2, #1
 800438e:	4053      	eors	r3, r2
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <charging_mode+0x14c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2222      	movs	r2, #34	; 0x22
 800439a:	5c9b      	ldrb	r3, [r3, r2]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <charging_mode+0x138>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2223      	movs	r2, #35	; 0x23
 80043a4:	5c9b      	ldrb	r3, [r3, r2]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <charging_mode+0x138>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2230      	movs	r2, #48	; 0x30
 80043ae:	5c9b      	ldrb	r3, [r3, r2]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <charging_mode+0x14c>
	{
		Slot->lastState=Slot->state;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2274      	movs	r2, #116	; 0x74
 80043b8:	5c99      	ldrb	r1, [r3, r2]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2275      	movs	r2, #117	; 0x75
 80043be:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2274      	movs	r2, #116	; 0x74
 80043c4:	2105      	movs	r1, #5
 80043c6:	5499      	strb	r1, [r3, r2]
	}
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b002      	add	sp, #8
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	42c80000 	.word	0x42c80000

080043d4 <fault_mode>:
{

}

void fault_mode(slot *Slot)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	if(Slot->hardware_failure)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7a5b      	ldrb	r3, [r3, #9]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <fault_mode+0x20>
	{
		Slot->batt_state=0x01;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
		Slot->charger_start_DIS=1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2224      	movs	r2, #36	; 0x24
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]
			}
		}

	}
	else Slot->state=Slot->lastState;
}
 80043f2:	e05e      	b.n	80044b2 <fault_mode+0xde>
	else if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2222      	movs	r2, #34	; 0x22
 80043f8:	5c9b      	ldrb	r3, [r3, r2]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <fault_mode+0x3e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2223      	movs	r2, #35	; 0x23
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <fault_mode+0x3e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2230      	movs	r2, #48	; 0x30
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d047      	beq.n	80044a2 <fault_mode+0xce>
		if(Slot->lastState==standby)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2275      	movs	r2, #117	; 0x75
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <fault_mode+0x64>
			if(Slot->can_charger_trouble_state==1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2230      	movs	r2, #48	; 0x30
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <fault_mode+0x5a>
				Slot->CAN_error_state=1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 800442c:	e040      	b.n	80044b0 <fault_mode+0xdc>
			else Slot->state=standby;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2274      	movs	r2, #116	; 0x74
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
		if(Slot->lastState==standby)
 8004436:	e03b      	b.n	80044b0 <fault_mode+0xdc>
		else if(Slot->lastState==swap)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2275      	movs	r2, #117	; 0x75
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d108      	bne.n	8004454 <fault_mode+0x80>
			if(Slot->can_charger_trouble_state==1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2230      	movs	r2, #48	; 0x30
 8004446:	5c9b      	ldrb	r3, [r3, r2]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d031      	beq.n	80044b0 <fault_mode+0xdc>
				Slot->CAN_error_state=1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 8004452:	e02d      	b.n	80044b0 <fault_mode+0xdc>
		else if(Slot->lastState==charging)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2275      	movs	r2, #117	; 0x75
 8004458:	5c9b      	ldrb	r3, [r3, r2]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d128      	bne.n	80044b0 <fault_mode+0xdc>
			if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2222      	movs	r2, #34	; 0x22
 8004462:	5c9b      	ldrb	r3, [r3, r2]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <fault_mode+0x9e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2223      	movs	r2, #35	; 0x23
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <fault_mode+0xa8>
			Slot->state=theft;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2274      	movs	r2, #116	; 0x74
 8004476:	2104      	movs	r1, #4
 8004478:	5499      	strb	r1, [r3, r2]
		if(Slot->lastState==standby)
 800447a:	e019      	b.n	80044b0 <fault_mode+0xdc>
			else if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2222      	movs	r2, #34	; 0x22
 8004480:	5c9b      	ldrb	r3, [r3, r2]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <fault_mode+0xc6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2223      	movs	r2, #35	; 0x23
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <fault_mode+0xc6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2230      	movs	r2, #48	; 0x30
 8004494:	5c9b      	ldrb	r3, [r3, r2]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <fault_mode+0xdc>
				Slot->CAN_error_state=1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 80044a0:	e006      	b.n	80044b0 <fault_mode+0xdc>
	else Slot->state=Slot->lastState;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2275      	movs	r2, #117	; 0x75
 80044a6:	5c99      	ldrb	r1, [r3, r2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2274      	movs	r2, #116	; 0x74
 80044ac:	5499      	strb	r1, [r3, r2]
}
 80044ae:	e000      	b.n	80044b2 <fault_mode+0xde>
		if(Slot->lastState==standby)
 80044b0:	46c0      	nop			; (mov r8, r8)
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_MspInit+0x44>)
 80044c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <HAL_MspInit+0x44>)
 80044c8:	2101      	movs	r1, #1
 80044ca:	430a      	orrs	r2, r1
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_MspInit+0x44>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2201      	movs	r2, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_MspInit+0x44>)
 80044dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_MspInit+0x44>)
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0549      	lsls	r1, r1, #21
 80044e4:	430a      	orrs	r2, r1
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_MspInit+0x44>)
 80044ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	055b      	lsls	r3, r3, #21
 80044f0:	4013      	ands	r3, r2
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b002      	add	sp, #8
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	40021000 	.word	0x40021000

08004504 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b09f      	sub	sp, #124	; 0x7c
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	2364      	movs	r3, #100	; 0x64
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	0018      	movs	r0, r3
 8004512:	2314      	movs	r3, #20
 8004514:	001a      	movs	r2, r3
 8004516:	2100      	movs	r1, #0
 8004518:	f006 fa5c 	bl	800a9d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800451c:	2418      	movs	r4, #24
 800451e:	193b      	adds	r3, r7, r4
 8004520:	0018      	movs	r0, r3
 8004522:	234c      	movs	r3, #76	; 0x4c
 8004524:	001a      	movs	r2, r3
 8004526:	2100      	movs	r1, #0
 8004528:	f006 fa54 	bl	800a9d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a5f      	ldr	r2, [pc, #380]	; (80046b0 <HAL_FDCAN_MspInit+0x1ac>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d15a      	bne.n	80045ec <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004536:	193b      	adds	r3, r7, r4
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0492      	lsls	r2, r2, #18
 800453c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800453e:	193b      	adds	r3, r7, r4
 8004540:	2200      	movs	r2, #0
 8004542:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004544:	193b      	adds	r3, r7, r4
 8004546:	0018      	movs	r0, r3
 8004548:	f003 f854 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d001      	beq.n	8004554 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004550:	f7ff fdea 	bl	8004128 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 800455c:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800455e:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004566:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456a:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	0149      	lsls	r1, r1, #5
 8004570:	430a      	orrs	r2, r1
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	015b      	lsls	r3, r3, #5
 800457c:	4013      	ands	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004582:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004586:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004588:	2101      	movs	r1, #1
 800458a:	430a      	orrs	r2, r1
 800458c:	635a      	str	r2, [r3, #52]	; 0x34
 800458e:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2201      	movs	r2, #1
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	187b      	adds	r3, r7, r1
 800459e:	22c0      	movs	r2, #192	; 0xc0
 80045a0:	0152      	lsls	r2, r2, #5
 80045a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	2202      	movs	r2, #2
 80045a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045aa:	187b      	adds	r3, r7, r1
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	2200      	movs	r2, #0
 80045b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80045b6:	187b      	adds	r3, r7, r1
 80045b8:	2203      	movs	r2, #3
 80045ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	187a      	adds	r2, r7, r1
 80045be:	23a0      	movs	r3, #160	; 0xa0
 80045c0:	05db      	lsls	r3, r3, #23
 80045c2:	0011      	movs	r1, r2
 80045c4:	0018      	movs	r0, r3
 80045c6:	f002 f953 	bl	8006870 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	2015      	movs	r0, #21
 80045d0:	f000 ff4a 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80045d4:	2015      	movs	r0, #21
 80045d6:	f000 ff5c 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2100      	movs	r1, #0
 80045de:	2016      	movs	r0, #22
 80045e0:	f000 ff42 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80045e4:	2016      	movs	r0, #22
 80045e6:	f000 ff54 	bl	8005492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80045ea:	e05d      	b.n	80046a8 <HAL_FDCAN_MspInit+0x1a4>
  else if(hfdcan->Instance==FDCAN2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a32      	ldr	r2, [pc, #200]	; (80046bc <HAL_FDCAN_MspInit+0x1b8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d158      	bne.n	80046a8 <HAL_FDCAN_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80045f6:	2118      	movs	r1, #24
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	0492      	lsls	r2, r2, #18
 80045fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004600:	187b      	adds	r3, r7, r1
 8004602:	2200      	movs	r2, #0
 8004604:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004606:	187b      	adds	r3, r7, r1
 8004608:	0018      	movs	r0, r3
 800460a:	f002 fff3 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d001      	beq.n	8004616 <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 8004612:	f7ff fd89 	bl	8004128 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 800461e:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_FDCAN_MspInit+0x1b0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10d      	bne.n	8004644 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004628:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 800462a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	0149      	lsls	r1, r1, #5
 8004632:	430a      	orrs	r2, r1
 8004634:	63da      	str	r2, [r3, #60]	; 0x3c
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	4013      	ands	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 800464a:	2102      	movs	r1, #2
 800464c:	430a      	orrs	r2, r1
 800464e:	635a      	str	r2, [r3, #52]	; 0x34
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_FDCAN_MspInit+0x1b4>)
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	2202      	movs	r2, #2
 8004656:	4013      	ands	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800465c:	2164      	movs	r1, #100	; 0x64
 800465e:	187b      	adds	r3, r7, r1
 8004660:	2203      	movs	r2, #3
 8004662:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004664:	187b      	adds	r3, r7, r1
 8004666:	2202      	movs	r2, #2
 8004668:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	187b      	adds	r3, r7, r1
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8004676:	187b      	adds	r3, r7, r1
 8004678:	2203      	movs	r2, #3
 800467a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800467c:	187b      	adds	r3, r7, r1
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <HAL_FDCAN_MspInit+0x1bc>)
 8004680:	0019      	movs	r1, r3
 8004682:	0010      	movs	r0, r2
 8004684:	f002 f8f4 	bl	8006870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	2100      	movs	r1, #0
 800468c:	2015      	movs	r0, #21
 800468e:	f000 feeb 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8004692:	2015      	movs	r0, #21
 8004694:	f000 fefd 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8004698:	2200      	movs	r2, #0
 800469a:	2100      	movs	r1, #0
 800469c:	2016      	movs	r0, #22
 800469e:	f000 fee3 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80046a2:	2016      	movs	r0, #22
 80046a4:	f000 fef5 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b01f      	add	sp, #124	; 0x7c
 80046ae:	bd90      	pop	{r4, r7, pc}
 80046b0:	40006400 	.word	0x40006400
 80046b4:	20000a58 	.word	0x20000a58
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40006800 	.word	0x40006800
 80046c0:	50000400 	.word	0x50000400

080046c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b097      	sub	sp, #92	; 0x5c
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046cc:	240c      	movs	r4, #12
 80046ce:	193b      	adds	r3, r7, r4
 80046d0:	0018      	movs	r0, r3
 80046d2:	234c      	movs	r3, #76	; 0x4c
 80046d4:	001a      	movs	r2, r3
 80046d6:	2100      	movs	r1, #0
 80046d8:	f006 f97c 	bl	800a9d4 <memset>
  if(htim_base->Instance==TIM1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a46      	ldr	r2, [pc, #280]	; (80047fc <HAL_TIM_Base_MspInit+0x138>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d000      	beq.n	80046e8 <HAL_TIM_Base_MspInit+0x24>
 80046e6:	e084      	b.n	80047f2 <HAL_TIM_Base_MspInit+0x12e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	0392      	lsls	r2, r2, #14
 80046ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80046f0:	193b      	adds	r3, r7, r4
 80046f2:	2200      	movs	r2, #0
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046f6:	193b      	adds	r3, r7, r4
 80046f8:	0018      	movs	r0, r3
 80046fa:	f002 ff7b 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8004702:	f7ff fd11 	bl	8004128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_TIM_Base_MspInit+0x13c>)
 8004708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_TIM_Base_MspInit+0x13c>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	0109      	lsls	r1, r1, #4
 8004710:	430a      	orrs	r2, r1
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
 8004714:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <HAL_TIM_Base_MspInit+0x13c>)
 8004716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4013      	ands	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 8004722:	4b38      	ldr	r3, [pc, #224]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_TIM_Base_MspInit+0x144>)
 8004726:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8004728:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 800472a:	2215      	movs	r2, #21
 800472c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800472e:	4b35      	ldr	r3, [pc, #212]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004730:	2210      	movs	r2, #16
 8004732:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004734:	4b33      	ldr	r3, [pc, #204]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800473a:	4b32      	ldr	r3, [pc, #200]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004740:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	0052      	lsls	r2, r2, #1
 8004746:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004748:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	00d2      	lsls	r2, r2, #3
 800474e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	0192      	lsls	r2, r2, #6
 800475c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800475e:	4b29      	ldr	r3, [pc, #164]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004760:	0018      	movs	r0, r3
 8004762:	f000 feb3 	bl	80054cc <HAL_DMA_Init>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <HAL_TIM_Base_MspInit+0xaa>
    {
      Error_Handler();
 800476a:	f7ff fcdd 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_TIM_Base_MspInit+0x140>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel2;
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_TIM_Base_MspInit+0x14c>)
 800477e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 8004782:	2216      	movs	r2, #22
 8004784:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004786:	4b21      	ldr	r3, [pc, #132]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 8004788:	2210      	movs	r2, #16
 800478a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	0052      	lsls	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	00d2      	lsls	r2, r2, #3
 80047a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	0192      	lsls	r2, r2, #6
 80047b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 fe87 	bl	80054cc <HAL_DMA_Init>
 80047be:	1e03      	subs	r3, r0, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_Base_MspInit+0x102>
    {
      Error_Handler();
 80047c2:	f7ff fcb1 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a10      	ldr	r2, [pc, #64]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <HAL_TIM_Base_MspInit+0x148>)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80047d2:	2200      	movs	r2, #0
 80047d4:	2100      	movs	r1, #0
 80047d6:	200d      	movs	r0, #13
 80047d8:	f000 fe46 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80047dc:	200d      	movs	r0, #13
 80047de:	f000 fe58 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80047e2:	2200      	movs	r2, #0
 80047e4:	2100      	movs	r1, #0
 80047e6:	200e      	movs	r0, #14
 80047e8:	f000 fe3e 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80047ec:	200e      	movs	r0, #14
 80047ee:	f000 fe50 	bl	8005492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b017      	add	sp, #92	; 0x5c
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40021000 	.word	0x40021000
 8004804:	200008a4 	.word	0x200008a4
 8004808:	40020008 	.word	0x40020008
 800480c:	20000904 	.word	0x20000904
 8004810:	4002001c 	.word	0x4002001c

08004814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	240c      	movs	r4, #12
 800481e:	193b      	adds	r3, r7, r4
 8004820:	0018      	movs	r0, r3
 8004822:	2314      	movs	r3, #20
 8004824:	001a      	movs	r2, r3
 8004826:	2100      	movs	r1, #0
 8004828:	f006 f8d4 	bl	800a9d4 <memset>
  if(htim->Instance==TIM1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_TIM_MspPostInit+0x70>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d121      	bne.n	800487a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_TIM_MspPostInit+0x74>)
 8004838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_TIM_MspPostInit+0x74>)
 800483c:	2102      	movs	r1, #2
 800483e:	430a      	orrs	r2, r1
 8004840:	635a      	str	r2, [r3, #52]	; 0x34
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_TIM_MspPostInit+0x74>)
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800484e:	0021      	movs	r1, r4
 8004850:	187b      	adds	r3, r7, r1
 8004852:	2248      	movs	r2, #72	; 0x48
 8004854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	187b      	adds	r3, r7, r1
 8004858:	2202      	movs	r2, #2
 800485a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	187b      	adds	r3, r7, r1
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	187b      	adds	r3, r7, r1
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004868:	187b      	adds	r3, r7, r1
 800486a:	2201      	movs	r2, #1
 800486c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486e:	187b      	adds	r3, r7, r1
 8004870:	4a06      	ldr	r2, [pc, #24]	; (800488c <HAL_TIM_MspPostInit+0x78>)
 8004872:	0019      	movs	r1, r3
 8004874:	0010      	movs	r0, r2
 8004876:	f001 fffb 	bl	8006870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b009      	add	sp, #36	; 0x24
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40021000 	.word	0x40021000
 800488c:	50000400 	.word	0x50000400

08004890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b09d      	sub	sp, #116	; 0x74
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004898:	235c      	movs	r3, #92	; 0x5c
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	0018      	movs	r0, r3
 800489e:	2314      	movs	r3, #20
 80048a0:	001a      	movs	r2, r3
 80048a2:	2100      	movs	r1, #0
 80048a4:	f006 f896 	bl	800a9d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048a8:	2410      	movs	r4, #16
 80048aa:	193b      	adds	r3, r7, r4
 80048ac:	0018      	movs	r0, r3
 80048ae:	234c      	movs	r3, #76	; 0x4c
 80048b0:	001a      	movs	r2, r3
 80048b2:	2100      	movs	r1, #0
 80048b4:	f006 f88e 	bl	800a9d4 <memset>
  if(huart->Instance==USART1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <HAL_UART_MspInit+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d171      	bne.n	80049a6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048c2:	193b      	adds	r3, r7, r4
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80048c8:	193b      	adds	r3, r7, r4
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ce:	193b      	adds	r3, r7, r4
 80048d0:	0018      	movs	r0, r3
 80048d2:	f002 fe8f 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 80048d6:	1e03      	subs	r3, r0, #0
 80048d8:	d001      	beq.n	80048de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80048da:	f7ff fc25 	bl	8004128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048de:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <HAL_UART_MspInit+0x124>)
 80048e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_UART_MspInit+0x124>)
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	01c9      	lsls	r1, r1, #7
 80048e8:	430a      	orrs	r2, r1
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
 80048ec:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <HAL_UART_MspInit+0x124>)
 80048ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <HAL_UART_MspInit+0x124>)
 80048fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fe:	4b2d      	ldr	r3, [pc, #180]	; (80049b4 <HAL_UART_MspInit+0x124>)
 8004900:	2101      	movs	r1, #1
 8004902:	430a      	orrs	r2, r1
 8004904:	635a      	str	r2, [r3, #52]	; 0x34
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <HAL_UART_MspInit+0x124>)
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004912:	215c      	movs	r1, #92	; 0x5c
 8004914:	187b      	adds	r3, r7, r1
 8004916:	22c0      	movs	r2, #192	; 0xc0
 8004918:	00d2      	lsls	r2, r2, #3
 800491a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491c:	187b      	adds	r3, r7, r1
 800491e:	2202      	movs	r2, #2
 8004920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	187b      	adds	r3, r7, r1
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2201      	movs	r2, #1
 8004932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	187a      	adds	r2, r7, r1
 8004936:	23a0      	movs	r3, #160	; 0xa0
 8004938:	05db      	lsls	r3, r3, #23
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f001 ff97 	bl	8006870 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004942:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004944:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_UART_MspInit+0x12c>)
 8004946:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <HAL_UART_MspInit+0x128>)
 800494a:	2232      	movs	r2, #50	; 0x32
 800494c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_UART_MspInit+0x128>)
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004962:	2200      	movs	r2, #0
 8004964:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_UART_MspInit+0x128>)
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004974:	2200      	movs	r2, #0
 8004976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_UART_MspInit+0x128>)
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fda6 	bl	80054cc <HAL_DMA_Init>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8004984:	f7ff fbd0 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <HAL_UART_MspInit+0x128>)
 800498e:	505a      	str	r2, [r3, r1]
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_UART_MspInit+0x128>)
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	201b      	movs	r0, #27
 800499c:	f000 fd64 	bl	8005468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049a0:	201b      	movs	r0, #27
 80049a2:	f000 fd76 	bl	8005492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b01d      	add	sp, #116	; 0x74
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40021000 	.word	0x40021000
 80049b8:	200009f8 	.word	0x200009f8
 80049bc:	40020030 	.word	0x40020030

080049c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049c4:	e7fe      	b.n	80049c4 <NMI_Handler+0x4>

080049c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ca:	e7fe      	b.n	80049ca <HardFault_Handler+0x4>

080049cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e4:	f000 fc54 	bl	8005290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <DMA1_Channel1_IRQHandler+0x14>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 ff62 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	200008a4 	.word	0x200008a4

08004a08 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 ff56 	bl	80058c0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 ff52 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	20000904 	.word	0x20000904
 8004a28:	200009f8 	.word	0x200009f8

08004a2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f003 fbc8 	bl	80081c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	20000858 	.word	0x20000858

08004a44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <TIM1_CC_IRQHandler+0x14>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f003 fbbc 	bl	80081c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	20000858 	.word	0x20000858

08004a5c <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 8004a62:	0018      	movs	r0, r3
 8004a64:	f001 fc80 	bl	8006368 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f001 fc7c 	bl	8006368 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	20000790 	.word	0x20000790
 8004a7c:	200007f4 	.word	0x200007f4

08004a80 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 8004a86:	0018      	movs	r0, r3
 8004a88:	f001 fc6e 	bl	8006368 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f001 fc6a 	bl	8006368 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000790 	.word	0x20000790
 8004aa0:	200007f4 	.word	0x200007f4

08004aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <USART1_IRQHandler+0x14>)
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f004 fd30 	bl	8009510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	20000964 	.word	0x20000964

08004abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <Set_LED>:
extern DMA_HandleTypeDef hdma_tim1_ch3;
extern DMA_HandleTypeDef hdma_tim1_ch2;
extern slot slot1,slot2;

void Set_LED (slot *Slot,int LEDnum, int Red, int Green, int Blue)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
	Slot->LED_Data[LEDnum][0] = LEDnum;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	b2d9      	uxtb	r1, r3
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	331e      	adds	r3, #30
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	1c0a      	adds	r2, r1, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][1] = Green;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2d8      	uxtb	r0, r3
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	217d      	movs	r1, #125	; 0x7d
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	185b      	adds	r3, r3, r1
 8004af8:	1c02      	adds	r2, r0, #0
 8004afa:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][2] = Red;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	b2d8      	uxtb	r0, r3
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	217e      	movs	r1, #126	; 0x7e
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	185b      	adds	r3, r3, r1
 8004b0c:	1c02      	adds	r2, r0, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][3] = Blue;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	b2d8      	uxtb	r0, r3
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	217f      	movs	r1, #127	; 0x7f
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	185b      	adds	r3, r3, r1
 8004b20:	1c02      	adds	r2, r0, #0
 8004b22:	701a      	strb	r2, [r3, #0]
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <Set_Brightness>:
#define PI 3.14159265
void Set_Brightness (slot *Slot,int brightness)  // 0-45
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b2d      	cmp	r3, #45	; 0x2d
 8004b3a:	dd01      	ble.n	8004b40 <Set_Brightness+0x14>
 8004b3c:	232d      	movs	r3, #45	; 0x2d
 8004b3e:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e068      	b.n	8004c18 <Set_Brightness+0xec>
	{
		Slot->LED_Mod[i][0] = Slot->LED_Data[i][0];
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	331e      	adds	r3, #30
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	3304      	adds	r3, #4
 8004b52:	7819      	ldrb	r1, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3328      	adds	r3, #40	; 0x28
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	18d3      	adds	r3, r2, r3
 8004b5e:	3304      	adds	r3, #4
 8004b60:	1c0a      	adds	r2, r1, #0
 8004b62:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8004b64:	2301      	movs	r3, #1
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e050      	b.n	8004c0c <Set_Brightness+0xe0>
		{
			float angle = 90-brightness;  // in degrees
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	225a      	movs	r2, #90	; 0x5a
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fc fa93 	bl	800109c <__aeabi_i2f>
 8004b76:	1c03      	adds	r3, r0, #0
 8004b78:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7fe f87e 	bl	8002c7c <__aeabi_f2d>
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <Set_Brightness+0xfc>)
 8004b82:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <Set_Brightness+0x100>)
 8004b84:	f7fd fa16 	bl	8001fb4 <__aeabi_dmul>
 8004b88:	0002      	movs	r2, r0
 8004b8a:	000b      	movs	r3, r1
 8004b8c:	0010      	movs	r0, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	2200      	movs	r2, #0
 8004b92:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <Set_Brightness+0x104>)
 8004b94:	f7fc fe0c 	bl	80017b0 <__aeabi_ddiv>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	000b      	movs	r3, r1
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	f7fe f8b4 	bl	8002d0c <__aeabi_d2f>
 8004ba4:	1c03      	adds	r3, r0, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
			Slot->LED_Mod[i][j] = (Slot->LED_Data[i][j])/(tan(angle));
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	217c      	movs	r1, #124	; 0x7c
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	18d2      	adds	r2, r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	18d3      	adds	r3, r2, r3
 8004bb6:	185b      	adds	r3, r3, r1
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fe f82e 	bl	8002c1c <__aeabi_i2d>
 8004bc0:	0004      	movs	r4, r0
 8004bc2:	000d      	movs	r5, r1
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7fe f859 	bl	8002c7c <__aeabi_f2d>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	000b      	movs	r3, r1
 8004bce:	0010      	movs	r0, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	f005 ff07 	bl	800a9e4 <tan>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	000b      	movs	r3, r1
 8004bda:	0020      	movs	r0, r4
 8004bdc:	0029      	movs	r1, r5
 8004bde:	f7fc fde7 	bl	80017b0 <__aeabi_ddiv>
 8004be2:	0002      	movs	r2, r0
 8004be4:	000b      	movs	r3, r1
 8004be6:	0010      	movs	r0, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	f7fb fcb1 	bl	8000550 <__aeabi_d2uiz>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	b2d8      	uxtb	r0, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	21a4      	movs	r1, #164	; 0xa4
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	18d2      	adds	r2, r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	18d3      	adds	r3, r2, r3
 8004c00:	185b      	adds	r3, r3, r1
 8004c02:	1c02      	adds	r2, r0, #0
 8004c04:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	ddab      	ble.n	8004b6a <Set_Brightness+0x3e>
	for (int i=0; i<MAX_LED; i++)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3301      	adds	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b09      	cmp	r3, #9
 8004c1c:	dd93      	ble.n	8004b46 <Set_Brightness+0x1a>
		}
	}

#endif

}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b006      	add	sp, #24
 8004c26:	bdb0      	pop	{r4, r5, r7, pc}
 8004c28:	53c8d4f1 	.word	0x53c8d4f1
 8004c2c:	400921fb 	.word	0x400921fb
 8004c30:	40668000 	.word	0x40668000

08004c34 <WS2812_Send>:
void WS2812_Send (void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e041      	b.n	8004cc8 <WS2812_Send+0x94>
	{
	  if (USE_BRIGHTNESS)
	  {
			color = ((slot1.LED_Mod[i][1]<<16) | (slot1.LED_Mod[i][2]<<8) | (slot1.LED_Mod[i][3]));
 8004c44:	4a35      	ldr	r2, [pc, #212]	; (8004d1c <WS2812_Send+0xe8>)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	21a5      	movs	r1, #165	; 0xa5
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	18d3      	adds	r3, r2, r3
 8004c4e:	185b      	adds	r3, r3, r1
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	041a      	lsls	r2, r3, #16
 8004c54:	4931      	ldr	r1, [pc, #196]	; (8004d1c <WS2812_Send+0xe8>)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	20a6      	movs	r0, #166	; 0xa6
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	18cb      	adds	r3, r1, r3
 8004c5e:	181b      	adds	r3, r3, r0
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4313      	orrs	r3, r2
 8004c66:	492d      	ldr	r1, [pc, #180]	; (8004d1c <WS2812_Send+0xe8>)
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	20a7      	movs	r0, #167	; 0xa7
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	188a      	adds	r2, r1, r2
 8004c70:	1812      	adds	r2, r2, r0
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	607b      	str	r3, [r7, #4]
	  {
			color = ((slot1.LED_Data[i][1]<<16) | (slot1.LED_Data[i][2]<<8) | (slot1.LED_Data[i][3]));
	  }


		for (int i=23; i>=0; i--)
 8004c78:	2317      	movs	r3, #23
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e01e      	b.n	8004cbc <WS2812_Send+0x88>
		{
			if (color&(1<<i))
 8004c7e:	2201      	movs	r2, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	001a      	movs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d008      	beq.n	8004ca0 <WS2812_Send+0x6c>
			{
				slot1.pwmData[indx] = 51;  // 2/3 of 79
 8004c8e:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <WS2812_Send+0xe8>)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3364      	adds	r3, #100	; 0x64
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2233      	movs	r2, #51	; 0x33
 8004c9c:	801a      	strh	r2, [r3, #0]
 8004c9e:	e007      	b.n	8004cb0 <WS2812_Send+0x7c>
			}

			else slot1.pwmData[indx] = 29;  // 1/3 of 79
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <WS2812_Send+0xe8>)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3364      	adds	r3, #100	; 0x64
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	3304      	adds	r3, #4
 8004cac:	221d      	movs	r2, #29
 8004cae:	801a      	strh	r2, [r3, #0]

			indx++;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dadd      	bge.n	8004c7e <WS2812_Send+0x4a>
	for (int i= 0; i<MAX_LED; i++)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b09      	cmp	r3, #9
 8004ccc:	ddba      	ble.n	8004c44 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	e00d      	b.n	8004cf0 <WS2812_Send+0xbc>
	{
		slot1.pwmData[indx] = 0;
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <WS2812_Send+0xe8>)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3364      	adds	r3, #100	; 0x64
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	3304      	adds	r3, #4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	801a      	strh	r2, [r3, #0]
		indx++;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b31      	cmp	r3, #49	; 0x31
 8004cf4:	ddee      	ble.n	8004cd4 <WS2812_Send+0xa0>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)slot1.pwmData, indx);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <WS2812_Send+0xec>)
 8004cfc:	4809      	ldr	r0, [pc, #36]	; (8004d24 <WS2812_Send+0xf0>)
 8004cfe:	2108      	movs	r1, #8
 8004d00:	f002 ff6c 	bl	8007bdc <HAL_TIM_PWM_Start_DMA>
	while (!slot1.datasentflag){};
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <WS2812_Send+0xe8>)
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0fb      	beq.n	8004d06 <WS2812_Send+0xd2>
	slot2.datasentflag = 0;
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <WS2812_Send+0xf4>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b006      	add	sp, #24
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200000b4 	.word	0x200000b4
 8004d20:	20000180 	.word	0x20000180
 8004d24:	20000858 	.word	0x20000858
 8004d28:	200003fc 	.word	0x200003fc

08004d2c <send_led>:
void send_led()
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	if(slot1.datasentflag==0&&slot2.datasentflag==1){WS2812_Send();}
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <send_led+0x34>)
 8004d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <send_led+0x1a>
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <send_led+0x38>)
 8004d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d102      	bne.n	8004d46 <send_led+0x1a>
 8004d40:	f7ff ff78 	bl	8004c34 <WS2812_Send>
	else if((slot2.datasentflag==0&&slot1.datasentflag==1)){WS2812_Send2();}

}
 8004d44:	e009      	b.n	8004d5a <send_led+0x2e>
	else if((slot2.datasentflag==0&&slot1.datasentflag==1)){WS2812_Send2();}
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <send_led+0x38>)
 8004d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <send_led+0x2e>
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <send_led+0x34>)
 8004d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <send_led+0x2e>
 8004d56:	f000 f807 	bl	8004d68 <WS2812_Send2>
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	200000b4 	.word	0x200000b4
 8004d64:	200003fc 	.word	0x200003fc

08004d68 <WS2812_Send2>:
void WS2812_Send2 (void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e041      	b.n	8004dfc <WS2812_Send2+0x94>
	{
	  if (USE_BRIGHTNESS)
	  {
			color = ((slot2.LED_Mod[i][1]<<16) | (slot2.LED_Mod[i][2]<<8) | (slot2.LED_Mod[i][3]));
 8004d78:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <WS2812_Send2+0xe8>)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	21a5      	movs	r1, #165	; 0xa5
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	18d3      	adds	r3, r2, r3
 8004d82:	185b      	adds	r3, r3, r1
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	041a      	lsls	r2, r3, #16
 8004d88:	4931      	ldr	r1, [pc, #196]	; (8004e50 <WS2812_Send2+0xe8>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	20a6      	movs	r0, #166	; 0xa6
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	18cb      	adds	r3, r1, r3
 8004d92:	181b      	adds	r3, r3, r0
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	492d      	ldr	r1, [pc, #180]	; (8004e50 <WS2812_Send2+0xe8>)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	20a7      	movs	r0, #167	; 0xa7
 8004da0:	0092      	lsls	r2, r2, #2
 8004da2:	188a      	adds	r2, r1, r2
 8004da4:	1812      	adds	r2, r2, r0
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	607b      	str	r3, [r7, #4]
	  {
			color = ((slot2.LED_Data[i][1]<<16) | (slot2.LED_Data[i][2]<<8) | (slot2.LED_Data[i][3]));
	  }


		for (int i=23; i>=0; i--)
 8004dac:	2317      	movs	r3, #23
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e01e      	b.n	8004df0 <WS2812_Send2+0x88>
		{
			if (color&(1<<i))
 8004db2:	2201      	movs	r2, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	409a      	lsls	r2, r3
 8004db8:	0013      	movs	r3, r2
 8004dba:	001a      	movs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d008      	beq.n	8004dd4 <WS2812_Send2+0x6c>
			{
				slot2.pwmData[indx] = 51;  // 2/3 of 79
 8004dc2:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <WS2812_Send2+0xe8>)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3364      	adds	r3, #100	; 0x64
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	18d3      	adds	r3, r2, r3
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2233      	movs	r2, #51	; 0x33
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	e007      	b.n	8004de4 <WS2812_Send2+0x7c>
			}

			else slot2.pwmData[indx] = 29;  // 1/3 of 79
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <WS2812_Send2+0xe8>)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	3364      	adds	r3, #100	; 0x64
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	3304      	adds	r3, #4
 8004de0:	221d      	movs	r2, #29
 8004de2:	801a      	strh	r2, [r3, #0]

			indx++;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dadd      	bge.n	8004db2 <WS2812_Send2+0x4a>
	for (int i= 0; i<MAX_LED; i++)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b09      	cmp	r3, #9
 8004e00:	ddba      	ble.n	8004d78 <WS2812_Send2+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	e00d      	b.n	8004e24 <WS2812_Send2+0xbc>
	{
		slot2.pwmData[indx] = 0;
 8004e08:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <WS2812_Send2+0xe8>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3364      	adds	r3, #100	; 0x64
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	18d3      	adds	r3, r2, r3
 8004e12:	3304      	adds	r3, #4
 8004e14:	2200      	movs	r2, #0
 8004e16:	801a      	strh	r2, [r3, #0]
		indx++;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b31      	cmp	r3, #49	; 0x31
 8004e28:	ddee      	ble.n	8004e08 <WS2812_Send2+0xa0>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)slot2.pwmData, indx);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <WS2812_Send2+0xec>)
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <WS2812_Send2+0xf0>)
 8004e32:	2104      	movs	r1, #4
 8004e34:	f002 fed2 	bl	8007bdc <HAL_TIM_PWM_Start_DMA>

	while (!slot2.datasentflag){};
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <WS2812_Send2+0xe8>)
 8004e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0fb      	beq.n	8004e3a <WS2812_Send2+0xd2>
	slot1.datasentflag = 0;
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <WS2812_Send2+0xf4>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200003fc 	.word	0x200003fc
 8004e54:	200004c8 	.word	0x200004c8
 8004e58:	20000858 	.word	0x20000858
 8004e5c:	200000b4 	.word	0x200000b4

08004e60 <charging_led>:
void charging_led(slot *Slot)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	6078      	str	r0, [r7, #4]
	int i=Slot->SOC_batt/10;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	4935      	ldr	r1, [pc, #212]	; (8004f44 <charging_led+0xe4>)
 8004e6e:	1c18      	adds	r0, r3, #0
 8004e70:	f7fb fc58 	bl	8000724 <__aeabi_fdiv>
 8004e74:	1c03      	adds	r3, r0, #0
 8004e76:	1c18      	adds	r0, r3, #0
 8004e78:	f7fc f8f0 	bl	800105c <__aeabi_f2iz>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	60bb      	str	r3, [r7, #8]
	for (int j=0;j<=MAX_LED;j++)
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e01d      	b.n	8004ec2 <charging_led+0x62>
	{

		if(j<i)Set_LED(Slot,j,255,0,0);
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	da08      	bge.n	8004ea0 <charging_led+0x40>
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2300      	movs	r3, #0
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	f7ff fe14 	bl	8004ac6 <Set_LED>
 8004e9e:	e00d      	b.n	8004ebc <charging_led+0x5c>
		else if(j==i)asm ("nop");
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d101      	bne.n	8004eac <charging_led+0x4c>
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	e007      	b.n	8004ebc <charging_led+0x5c>
		else Set_LED(Slot,j,0,0,0);
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f7ff fe05 	bl	8004ac6 <Set_LED>
	for (int j=0;j<=MAX_LED;j++)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b0a      	cmp	r3, #10
 8004ec6:	ddde      	ble.n	8004e86 <charging_led+0x26>
	}
	if(HAL_GetTick()-Slot->tick_led_charging>=1000)
 8004ec8:	f000 f9f4 	bl	80052b4 <HAL_GetTick>
 8004ecc:	0001      	movs	r1, r0
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	23c8      	movs	r3, #200	; 0xc8
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	58d3      	ldr	r3, [r2, r3]
 8004ed6:	1aca      	subs	r2, r1, r3
 8004ed8:	23fa      	movs	r3, #250	; 0xfa
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d327      	bcc.n	8004f30 <charging_led+0xd0>
	{
		if(Slot->flag_charge_led==1)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	23c9      	movs	r3, #201	; 0xc9
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <charging_led+0xa8>
		{
			Set_LED(Slot,i,255,0,0);
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	22ff      	movs	r2, #255	; 0xff
 8004ef8:	f7ff fde5 	bl	8004ac6 <Set_LED>
			Slot->flag_charge_led=0;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	23c9      	movs	r3, #201	; 0xc9
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	2100      	movs	r1, #0
 8004f04:	54d1      	strb	r1, [r2, r3]
 8004f06:	e00c      	b.n	8004f22 <charging_led+0xc2>
		}
		else
		{
			Set_LED(Slot,i,0,0,0);
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	2200      	movs	r2, #0
 8004f14:	f7ff fdd7 	bl	8004ac6 <Set_LED>
			Slot->flag_charge_led=1;
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	23c9      	movs	r3, #201	; 0xc9
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	2101      	movs	r1, #1
 8004f20:	54d1      	strb	r1, [r2, r3]
		}
		Slot->tick_led_charging=HAL_GetTick();
 8004f22:	f000 f9c7 	bl	80052b4 <HAL_GetTick>
 8004f26:	0001      	movs	r1, r0
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	23c8      	movs	r3, #200	; 0xc8
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	50d1      	str	r1, [r2, r3]
	}
	Set_Brightness(Slot,46);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	212e      	movs	r1, #46	; 0x2e
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7ff fdf9 	bl	8004b2c <Set_Brightness>
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	41200000 	.word	0x41200000

08004f48 <ready_pick_led>:
void ready_pick_led(slot *Slot)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<MAX_LED;i++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e00a      	b.n	8004f6c <ready_pick_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 255, 0);
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	23ff      	movs	r3, #255	; 0xff
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	f7ff fdb0 	bl	8004ac6 <Set_LED>
	  for(int i=0;i<MAX_LED;i++)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	ddf1      	ble.n	8004f56 <ready_pick_led+0xe>
	  }
	  if(HAL_GetTick()-Slot->tick_led_swap>=1000)
 8004f72:	f000 f99f 	bl	80052b4 <HAL_GetTick>
 8004f76:	0001      	movs	r1, r0
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	23c6      	movs	r3, #198	; 0xc6
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	58d3      	ldr	r3, [r2, r3]
 8004f80:	1aca      	subs	r2, r1, r3
 8004f82:	23fa      	movs	r3, #250	; 0xfa
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d322      	bcc.n	8004fd0 <ready_pick_led+0x88>
	  {
		  Slot->j++;
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	23c5      	movs	r3, #197	; 0xc5
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	58d3      	ldr	r3, [r2, r3]
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	23c5      	movs	r3, #197	; 0xc5
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	50d1      	str	r1, [r2, r3]
		if(Slot->j%2==0)Set_Brightness(Slot,35);
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	23c5      	movs	r3, #197	; 0xc5
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	58d3      	ldr	r3, [r2, r3]
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d105      	bne.n	8004fb8 <ready_pick_led+0x70>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2123      	movs	r1, #35	; 0x23
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff fdbb 	bl	8004b2c <Set_Brightness>
 8004fb6:	e004      	b.n	8004fc2 <ready_pick_led+0x7a>
		else Set_Brightness(Slot,0);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7ff fdb5 	bl	8004b2c <Set_Brightness>
		Slot->tick_led_swap=HAL_GetTick();
 8004fc2:	f000 f977 	bl	80052b4 <HAL_GetTick>
 8004fc6:	0001      	movs	r1, r0
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	23c6      	movs	r3, #198	; 0xc6
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	50d1      	str	r1, [r2, r3]
	  }

}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b004      	add	sp, #16
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <swap_led>:
void swap_led(slot *Slot)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e00a      	b.n	8004ffc <swap_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 255, 255);
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	23ff      	movs	r3, #255	; 0xff
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	23ff      	movs	r3, #255	; 0xff
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	f7ff fd68 	bl	8004ac6 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b0a      	cmp	r3, #10
 8005000:	ddf1      	ble.n	8004fe6 <swap_led+0xe>
	  }

	  if(HAL_GetTick()-Slot->tick_led_swap>=50)
 8005002:	f000 f957 	bl	80052b4 <HAL_GetTick>
 8005006:	0001      	movs	r1, r0
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	23c6      	movs	r3, #198	; 0xc6
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	58d3      	ldr	r3, [r2, r3]
 8005010:	1acb      	subs	r3, r1, r3
 8005012:	2b31      	cmp	r3, #49	; 0x31
 8005014:	d935      	bls.n	8005082 <swap_led+0xaa>
	  {
		if(Slot->j>35)Slot->a=1;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	23c5      	movs	r3, #197	; 0xc5
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	58d3      	ldr	r3, [r2, r3]
 800501e:	2b23      	cmp	r3, #35	; 0x23
 8005020:	dd04      	ble.n	800502c <swap_led+0x54>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	23c7      	movs	r3, #199	; 0xc7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	2101      	movs	r1, #1
 800502a:	54d1      	strb	r1, [r2, r3]
		if(Slot->j<3)Slot->a=0;
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	23c5      	movs	r3, #197	; 0xc5
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	58d3      	ldr	r3, [r2, r3]
 8005034:	2b02      	cmp	r3, #2
 8005036:	dc04      	bgt.n	8005042 <swap_led+0x6a>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	23c7      	movs	r3, #199	; 0xc7
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	2100      	movs	r1, #0
 8005040:	54d1      	strb	r1, [r2, r3]
		if(Slot->a==1)Slot->j--;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	23c7      	movs	r3, #199	; 0xc7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	5cd3      	ldrb	r3, [r2, r3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <swap_led+0x8a>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	23c5      	movs	r3, #197	; 0xc5
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	58d3      	ldr	r3, [r2, r3]
 8005056:	1e59      	subs	r1, r3, #1
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	23c5      	movs	r3, #197	; 0xc5
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	50d1      	str	r1, [r2, r3]
 8005060:	e008      	b.n	8005074 <swap_led+0x9c>
		else Slot->j++;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	23c5      	movs	r3, #197	; 0xc5
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	58d3      	ldr	r3, [r2, r3]
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	23c5      	movs	r3, #197	; 0xc5
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	50d1      	str	r1, [r2, r3]
		Slot->tick_led_swap=HAL_GetTick();
 8005074:	f000 f91e 	bl	80052b4 <HAL_GetTick>
 8005078:	0001      	movs	r1, r0
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	23c6      	movs	r3, #198	; 0xc6
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	50d1      	str	r1, [r2, r3]
	  }
		  Set_Brightness(Slot,Slot->j);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	23c5      	movs	r3, #197	; 0xc5
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	58d2      	ldr	r2, [r2, r3]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0011      	movs	r1, r2
 800508e:	0018      	movs	r0, r3
 8005090:	f7ff fd4c 	bl	8004b2c <Set_Brightness>
		  WS2812_Send();
 8005094:	f7ff fdce 	bl	8004c34 <WS2812_Send>



}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}

080050a0 <fault_led>:
void fault_led(slot *Slot)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e00a      	b.n	80050c4 <fault_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 0, 0);
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	2300      	movs	r3, #0
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2300      	movs	r3, #0
 80050b8:	22ff      	movs	r2, #255	; 0xff
 80050ba:	f7ff fd04 	bl	8004ac6 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b0a      	cmp	r3, #10
 80050c8:	ddf1      	ble.n	80050ae <fault_led+0xe>
	  }

		Set_Brightness(Slot,46);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	212e      	movs	r1, #46	; 0x2e
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7ff fd2c 	bl	8004b2c <Set_Brightness>
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b004      	add	sp, #16
 80050da:	bd80      	pop	{r7, pc}

080050dc <standby_led>:
void standby_led(slot *Slot)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e00a      	b.n	8005100 <standby_led+0x24>
	  {
		  Set_LED(Slot,i, 0, 0, 0);
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	2200      	movs	r2, #0
 80050f6:	f7ff fce6 	bl	8004ac6 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b0a      	cmp	r3, #10
 8005104:	ddf1      	ble.n	80050ea <standby_led+0xe>
	  }

		Set_Brightness(Slot,46);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	212e      	movs	r1, #46	; 0x2e
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff fd0e 	bl	8004b2c <Set_Brightness>
}
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b004      	add	sp, #16
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7f1b      	ldrb	r3, [r3, #28]
 8005124:	2b04      	cmp	r3, #4
 8005126:	d108      	bne.n	800513a <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800512a:	2108      	movs	r1, #8
 800512c:	0018      	movs	r0, r3
 800512e:	f002 ff5b 	bl	8007fe8 <HAL_TIM_PWM_Stop_DMA>
		slot1.datasentflag=1;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8005134:	2201      	movs	r2, #1
 8005136:	679a      	str	r2, [r3, #120]	; 0x78
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
		slot2.datasentflag=1;
	}


}
 8005138:	e00b      	b.n	8005152 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7f1b      	ldrb	r3, [r3, #28]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8005144:	2104      	movs	r1, #4
 8005146:	0018      	movs	r0, r3
 8005148:	f002 ff4e 	bl	8007fe8 <HAL_TIM_PWM_Stop_DMA>
		slot2.datasentflag=1;
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800514e:	2201      	movs	r2, #1
 8005150:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	20000858 	.word	0x20000858
 8005160:	200000b4 	.word	0x200000b4
 8005164:	200003fc 	.word	0x200003fc

08005168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005168:	480d      	ldr	r0, [pc, #52]	; (80051a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800516a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800516c:	f7ff fca6 	bl	8004abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005170:	480c      	ldr	r0, [pc, #48]	; (80051a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005172:	490d      	ldr	r1, [pc, #52]	; (80051a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <LoopForever+0xe>)
  movs r3, #0
 8005176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005178:	e002      	b.n	8005180 <LoopCopyDataInit>

0800517a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800517a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800517c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800517e:	3304      	adds	r3, #4

08005180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005184:	d3f9      	bcc.n	800517a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005188:	4c0a      	ldr	r4, [pc, #40]	; (80051b4 <LoopForever+0x16>)
  movs r3, #0
 800518a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800518c:	e001      	b.n	8005192 <LoopFillZerobss>

0800518e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800518e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005190:	3204      	adds	r2, #4

08005192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005194:	d3fb      	bcc.n	800518e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005196:	f005 fbf9 	bl	800a98c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800519a:	f7fe fc1f 	bl	80039dc <main>

0800519e <LoopForever>:

LoopForever:
  b LoopForever
 800519e:	e7fe      	b.n	800519e <LoopForever>
  ldr   r0, =_estack
 80051a0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80051a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80051ac:	0800bf40 	.word	0x0800bf40
  ldr r2, =_sbss
 80051b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80051b4:	20000a60 	.word	0x20000a60

080051b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051b8:	e7fe      	b.n	80051b8 <ADC1_COMP_IRQHandler>
	...

080051bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051c2:	1dfb      	adds	r3, r7, #7
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_Init+0x3c>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_Init+0x3c>)
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0049      	lsls	r1, r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051d6:	2003      	movs	r0, #3
 80051d8:	f000 f810 	bl	80051fc <HAL_InitTick>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d003      	beq.n	80051e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80051e0:	1dfb      	adds	r3, r7, #7
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e001      	b.n	80051ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80051e8:	f7ff f968 	bl	80044bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	781b      	ldrb	r3, [r3, #0]
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40022000 	.word	0x40022000

080051fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005204:	230f      	movs	r3, #15
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <HAL_InitTick+0x88>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02b      	beq.n	800526c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_InitTick+0x8c>)
 8005216:	681c      	ldr	r4, [r3, #0]
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <HAL_InitTick+0x88>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	0019      	movs	r1, r3
 800521e:	23fa      	movs	r3, #250	; 0xfa
 8005220:	0098      	lsls	r0, r3, #2
 8005222:	f7fa ff6f 	bl	8000104 <__udivsi3>
 8005226:	0003      	movs	r3, r0
 8005228:	0019      	movs	r1, r3
 800522a:	0020      	movs	r0, r4
 800522c:	f7fa ff6a 	bl	8000104 <__udivsi3>
 8005230:	0003      	movs	r3, r0
 8005232:	0018      	movs	r0, r3
 8005234:	f000 f93d 	bl	80054b2 <HAL_SYSTICK_Config>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d112      	bne.n	8005262 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d80a      	bhi.n	8005258 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	2301      	movs	r3, #1
 8005246:	425b      	negs	r3, r3
 8005248:	2200      	movs	r2, #0
 800524a:	0018      	movs	r0, r3
 800524c:	f000 f90c 	bl	8005468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <HAL_InitTick+0x90>)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e00d      	b.n	8005274 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005258:	230f      	movs	r3, #15
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e008      	b.n	8005274 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005262:	230f      	movs	r3, #15
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e003      	b.n	8005274 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800526c:	230f      	movs	r3, #15
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005274:	230f      	movs	r3, #15
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	781b      	ldrb	r3, [r3, #0]
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	b005      	add	sp, #20
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	20000010 	.word	0x20000010
 8005288:	20000008 	.word	0x20000008
 800528c:	2000000c 	.word	0x2000000c

08005290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_IncTick+0x1c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	001a      	movs	r2, r3
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_IncTick+0x20>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	18d2      	adds	r2, r2, r3
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_IncTick+0x20>)
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	20000010 	.word	0x20000010
 80052b0:	20000a5c 	.word	0x20000a5c

080052b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  return uwTick;
 80052b8:	4b02      	ldr	r3, [pc, #8]	; (80052c4 <HAL_GetTick+0x10>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	20000a5c 	.word	0x20000a5c

080052c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	d005      	beq.n	80052ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_Delay+0x44>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	001a      	movs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	f7ff ffe0 	bl	80052b4 <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d8f7      	bhi.n	80052f0 <HAL_Delay+0x28>
  {
  }
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	20000010 	.word	0x20000010

08005310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	0002      	movs	r2, r0
 8005318:	1dfb      	adds	r3, r7, #7
 800531a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800531c:	1dfb      	adds	r3, r7, #7
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b7f      	cmp	r3, #127	; 0x7f
 8005322:	d809      	bhi.n	8005338 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005324:	1dfb      	adds	r3, r7, #7
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	001a      	movs	r2, r3
 800532a:	231f      	movs	r3, #31
 800532c:	401a      	ands	r2, r3
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <__NVIC_EnableIRQ+0x30>)
 8005330:	2101      	movs	r1, #1
 8005332:	4091      	lsls	r1, r2
 8005334:	000a      	movs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}
 8005340:	e000e100 	.word	0xe000e100

08005344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	0002      	movs	r2, r0
 800534c:	6039      	str	r1, [r7, #0]
 800534e:	1dfb      	adds	r3, r7, #7
 8005350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005352:	1dfb      	adds	r3, r7, #7
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b7f      	cmp	r3, #127	; 0x7f
 8005358:	d828      	bhi.n	80053ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800535a:	4a2f      	ldr	r2, [pc, #188]	; (8005418 <__NVIC_SetPriority+0xd4>)
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b25b      	sxtb	r3, r3
 8005362:	089b      	lsrs	r3, r3, #2
 8005364:	33c0      	adds	r3, #192	; 0xc0
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	589b      	ldr	r3, [r3, r2]
 800536a:	1dfa      	adds	r2, r7, #7
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	0011      	movs	r1, r2
 8005370:	2203      	movs	r2, #3
 8005372:	400a      	ands	r2, r1
 8005374:	00d2      	lsls	r2, r2, #3
 8005376:	21ff      	movs	r1, #255	; 0xff
 8005378:	4091      	lsls	r1, r2
 800537a:	000a      	movs	r2, r1
 800537c:	43d2      	mvns	r2, r2
 800537e:	401a      	ands	r2, r3
 8005380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	401a      	ands	r2, r3
 800538a:	1dfb      	adds	r3, r7, #7
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	0018      	movs	r0, r3
 8005390:	2303      	movs	r3, #3
 8005392:	4003      	ands	r3, r0
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005398:	481f      	ldr	r0, [pc, #124]	; (8005418 <__NVIC_SetPriority+0xd4>)
 800539a:	1dfb      	adds	r3, r7, #7
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	430a      	orrs	r2, r1
 80053a4:	33c0      	adds	r3, #192	; 0xc0
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80053aa:	e031      	b.n	8005410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053ac:	4a1b      	ldr	r2, [pc, #108]	; (800541c <__NVIC_SetPriority+0xd8>)
 80053ae:	1dfb      	adds	r3, r7, #7
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	0019      	movs	r1, r3
 80053b4:	230f      	movs	r3, #15
 80053b6:	400b      	ands	r3, r1
 80053b8:	3b08      	subs	r3, #8
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	3306      	adds	r3, #6
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	18d3      	adds	r3, r2, r3
 80053c2:	3304      	adds	r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	1dfa      	adds	r2, r7, #7
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	0011      	movs	r1, r2
 80053cc:	2203      	movs	r2, #3
 80053ce:	400a      	ands	r2, r1
 80053d0:	00d2      	lsls	r2, r2, #3
 80053d2:	21ff      	movs	r1, #255	; 0xff
 80053d4:	4091      	lsls	r1, r2
 80053d6:	000a      	movs	r2, r1
 80053d8:	43d2      	mvns	r2, r2
 80053da:	401a      	ands	r2, r3
 80053dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	401a      	ands	r2, r3
 80053e6:	1dfb      	adds	r3, r7, #7
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	0018      	movs	r0, r3
 80053ec:	2303      	movs	r3, #3
 80053ee:	4003      	ands	r3, r0
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053f4:	4809      	ldr	r0, [pc, #36]	; (800541c <__NVIC_SetPriority+0xd8>)
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	001c      	movs	r4, r3
 80053fc:	230f      	movs	r3, #15
 80053fe:	4023      	ands	r3, r4
 8005400:	3b08      	subs	r3, #8
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	430a      	orrs	r2, r1
 8005406:	3306      	adds	r3, #6
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	18c3      	adds	r3, r0, r3
 800540c:	3304      	adds	r3, #4
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b003      	add	sp, #12
 8005416:	bd90      	pop	{r4, r7, pc}
 8005418:	e000e100 	.word	0xe000e100
 800541c:	e000ed00 	.word	0xe000ed00

08005420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1e5a      	subs	r2, r3, #1
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	045b      	lsls	r3, r3, #17
 8005430:	429a      	cmp	r2, r3
 8005432:	d301      	bcc.n	8005438 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005434:	2301      	movs	r3, #1
 8005436:	e010      	b.n	800545a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <SysTick_Config+0x44>)
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	3a01      	subs	r2, #1
 800543e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005440:	2301      	movs	r3, #1
 8005442:	425b      	negs	r3, r3
 8005444:	2103      	movs	r1, #3
 8005446:	0018      	movs	r0, r3
 8005448:	f7ff ff7c 	bl	8005344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <SysTick_Config+0x44>)
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005452:	4b04      	ldr	r3, [pc, #16]	; (8005464 <SysTick_Config+0x44>)
 8005454:	2207      	movs	r2, #7
 8005456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005458:	2300      	movs	r3, #0
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b002      	add	sp, #8
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	e000e010 	.word	0xe000e010

08005468 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	210f      	movs	r1, #15
 8005474:	187b      	adds	r3, r7, r1
 8005476:	1c02      	adds	r2, r0, #0
 8005478:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	187b      	adds	r3, r7, r1
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b25b      	sxtb	r3, r3
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f7ff ff5d 	bl	8005344 <__NVIC_SetPriority>
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	b004      	add	sp, #16
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	0002      	movs	r2, r0
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800549e:	1dfb      	adds	r3, r7, #7
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7ff ff33 	bl	8005310 <__NVIC_EnableIRQ>
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b002      	add	sp, #8
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff ffaf 	bl	8005420 <SysTick_Config>
 80054c2:	0003      	movs	r3, r0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e091      	b.n	8005602 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	001a      	movs	r2, r3
 80054e4:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_DMA_Init+0x140>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d810      	bhi.n	800550c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a48      	ldr	r2, [pc, #288]	; (8005610 <HAL_DMA_Init+0x144>)
 80054f0:	4694      	mov	ip, r2
 80054f2:	4463      	add	r3, ip
 80054f4:	2114      	movs	r1, #20
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fa fe04 	bl	8000104 <__udivsi3>
 80054fc:	0003      	movs	r3, r0
 80054fe:	009a      	lsls	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a43      	ldr	r2, [pc, #268]	; (8005614 <HAL_DMA_Init+0x148>)
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
 800550a:	e00f      	b.n	800552c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a41      	ldr	r2, [pc, #260]	; (8005618 <HAL_DMA_Init+0x14c>)
 8005512:	4694      	mov	ip, r2
 8005514:	4463      	add	r3, ip
 8005516:	2114      	movs	r1, #20
 8005518:	0018      	movs	r0, r3
 800551a:	f7fa fdf3 	bl	8000104 <__udivsi3>
 800551e:	0003      	movs	r3, r0
 8005520:	009a      	lsls	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a3c      	ldr	r2, [pc, #240]	; (800561c <HAL_DMA_Init+0x150>)
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2225      	movs	r2, #37	; 0x25
 8005530:	2102      	movs	r1, #2
 8005532:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4938      	ldr	r1, [pc, #224]	; (8005620 <HAL_DMA_Init+0x154>)
 8005540:	400a      	ands	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6819      	ldr	r1, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fa9f 	bl	8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	01db      	lsls	r3, r3, #7
 800558a:	429a      	cmp	r2, r3
 800558c:	d102      	bne.n	8005594 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559c:	217f      	movs	r1, #127	; 0x7f
 800559e:	400a      	ands	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055aa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_DMA_Init+0x10c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d80d      	bhi.n	80055d8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0018      	movs	r0, r3
 80055c0:	f000 fac8 	bl	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e008      	b.n	80055ea <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2225      	movs	r2, #37	; 0x25
 80055f4:	2101      	movs	r1, #1
 80055f6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	0018      	movs	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	b002      	add	sp, #8
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	40020407 	.word	0x40020407
 8005610:	bffdfff8 	.word	0xbffdfff8
 8005614:	40020000 	.word	0x40020000
 8005618:	bffdfbf8 	.word	0xbffdfbf8
 800561c:	40020400 	.word	0x40020400
 8005620:	ffff800f 	.word	0xffff800f

08005624 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005632:	2317      	movs	r3, #23
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	5c9b      	ldrb	r3, [r3, r2]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_DMA_Start_IT+0x24>
 8005644:	2302      	movs	r3, #2
 8005646:	e06f      	b.n	8005728 <HAL_DMA_Start_IT+0x104>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	2101      	movs	r1, #1
 800564e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2225      	movs	r2, #37	; 0x25
 8005654:	5c9b      	ldrb	r3, [r3, r2]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d157      	bne.n	800570c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2225      	movs	r2, #37	; 0x25
 8005660:	2102      	movs	r1, #2
 8005662:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	438a      	bics	r2, r1
 8005678:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f9e1 	bl	8005a48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	210e      	movs	r1, #14
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e00f      	b.n	80056c0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2104      	movs	r1, #4
 80056ac:	438a      	bics	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	210a      	movs	r1, #10
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	025b      	lsls	r3, r3, #9
 80056ca:	4013      	ands	r3, r2
 80056cc:	d008      	beq.n	80056e0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	2180      	movs	r1, #128	; 0x80
 80056da:	0049      	lsls	r1, r1, #1
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	0049      	lsls	r1, r1, #1
 80056f6:	430a      	orrs	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e00a      	b.n	8005722 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2224      	movs	r2, #36	; 0x24
 8005716:	2100      	movs	r1, #0
 8005718:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800571a:	2317      	movs	r3, #23
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005722:	2317      	movs	r3, #23
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	781b      	ldrb	r3, [r3, #0]
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b006      	add	sp, #24
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e04f      	b.n	80057e2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2225      	movs	r2, #37	; 0x25
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d008      	beq.n	8005760 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2204      	movs	r2, #4
 8005752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e040      	b.n	80057e2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	210e      	movs	r1, #14
 800576c:	438a      	bics	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577a:	491c      	ldr	r1, [pc, #112]	; (80057ec <HAL_DMA_Abort+0xbc>)
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2101      	movs	r1, #1
 800578c:	438a      	bics	r2, r1
 800578e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	221c      	movs	r2, #28
 8005796:	401a      	ands	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2101      	movs	r1, #1
 800579e:	4091      	lsls	r1, r2
 80057a0:	000a      	movs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	490a      	ldr	r1, [pc, #40]	; (80057ec <HAL_DMA_Abort+0xbc>)
 80057c2:	400a      	ands	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2225      	movs	r2, #37	; 0x25
 80057d4:	2101      	movs	r1, #1
 80057d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	fffffeff 	.word	0xfffffeff

080057f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	210f      	movs	r1, #15
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2225      	movs	r2, #37	; 0x25
 8005804:	5c9b      	ldrb	r3, [r3, r2]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d006      	beq.n	800581a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e048      	b.n	80058ac <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	210e      	movs	r1, #14
 8005826:	438a      	bics	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2101      	movs	r1, #1
 8005836:	438a      	bics	r2, r1
 8005838:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	491d      	ldr	r1, [pc, #116]	; (80058bc <HAL_DMA_Abort_IT+0xcc>)
 8005846:	400a      	ands	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	221c      	movs	r2, #28
 8005850:	401a      	ands	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	2101      	movs	r1, #1
 8005858:	4091      	lsls	r1, r2
 800585a:	000a      	movs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005866:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	4910      	ldr	r1, [pc, #64]	; (80058bc <HAL_DMA_Abort_IT+0xcc>)
 800587c:	400a      	ands	r2, r1
 800587e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005888:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2225      	movs	r2, #37	; 0x25
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	; 0x24
 8005896:	2100      	movs	r1, #0
 8005898:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	0010      	movs	r0, r2
 80058aa:	4798      	blx	r3
    }
  }
  return status;
 80058ac:	230f      	movs	r3, #15
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	781b      	ldrb	r3, [r3, #0]
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b004      	add	sp, #16
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	fffffeff 	.word	0xfffffeff

080058c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	221c      	movs	r2, #28
 80058de:	4013      	ands	r3, r2
 80058e0:	2204      	movs	r2, #4
 80058e2:	409a      	lsls	r2, r3
 80058e4:	0013      	movs	r3, r2
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4013      	ands	r3, r2
 80058ea:	d026      	beq.n	800593a <HAL_DMA_IRQHandler+0x7a>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2204      	movs	r2, #4
 80058f0:	4013      	ands	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2220      	movs	r2, #32
 80058fc:	4013      	ands	r3, r2
 80058fe:	d107      	bne.n	8005910 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2104      	movs	r1, #4
 800590c:	438a      	bics	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005914:	221c      	movs	r2, #28
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2104      	movs	r1, #4
 800591e:	4091      	lsls	r1, r2
 8005920:	000a      	movs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d100      	bne.n	800592e <HAL_DMA_IRQHandler+0x6e>
 800592c:	e080      	b.n	8005a30 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	0010      	movs	r0, r2
 8005936:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005938:	e07a      	b.n	8005a30 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	221c      	movs	r2, #28
 8005940:	4013      	ands	r3, r2
 8005942:	2202      	movs	r2, #2
 8005944:	409a      	lsls	r2, r3
 8005946:	0013      	movs	r3, r2
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4013      	ands	r3, r2
 800594c:	d03c      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x108>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2202      	movs	r2, #2
 8005952:	4013      	ands	r3, r2
 8005954:	d038      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2220      	movs	r2, #32
 800595e:	4013      	ands	r3, r2
 8005960:	d10b      	bne.n	800597a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	210a      	movs	r1, #10
 800596e:	438a      	bics	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2225      	movs	r2, #37	; 0x25
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	001a      	movs	r2, r3
 8005980:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <HAL_DMA_IRQHandler+0x17c>)
 8005982:	429a      	cmp	r2, r3
 8005984:	d909      	bls.n	800599a <HAL_DMA_IRQHandler+0xda>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	221c      	movs	r2, #28
 800598c:	401a      	ands	r2, r3
 800598e:	4b2c      	ldr	r3, [pc, #176]	; (8005a40 <HAL_DMA_IRQHandler+0x180>)
 8005990:	2102      	movs	r1, #2
 8005992:	4091      	lsls	r1, r2
 8005994:	000a      	movs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	e008      	b.n	80059ac <HAL_DMA_IRQHandler+0xec>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	221c      	movs	r2, #28
 80059a0:	401a      	ands	r2, r3
 80059a2:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <HAL_DMA_IRQHandler+0x184>)
 80059a4:	2102      	movs	r1, #2
 80059a6:	4091      	lsls	r1, r2
 80059a8:	000a      	movs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	2100      	movs	r1, #0
 80059b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d039      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	0010      	movs	r0, r2
 80059c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80059c6:	e033      	b.n	8005a30 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	221c      	movs	r2, #28
 80059ce:	4013      	ands	r3, r2
 80059d0:	2208      	movs	r2, #8
 80059d2:	409a      	lsls	r2, r3
 80059d4:	0013      	movs	r3, r2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	d02a      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x172>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2208      	movs	r2, #8
 80059e0:	4013      	ands	r3, r2
 80059e2:	d026      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	210e      	movs	r1, #14
 80059f0:	438a      	bics	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	221c      	movs	r2, #28
 80059fa:	401a      	ands	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	2101      	movs	r1, #1
 8005a02:	4091      	lsls	r1, r2
 8005a04:	000a      	movs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2225      	movs	r2, #37	; 0x25
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2224      	movs	r2, #36	; 0x24
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	0010      	movs	r0, r2
 8005a2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46c0      	nop			; (mov r8, r8)
}
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b004      	add	sp, #16
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	40020080 	.word	0x40020080
 8005a40:	40020400 	.word	0x40020400
 8005a44:	40020000 	.word	0x40020000

08005a48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	221c      	movs	r2, #28
 8005a78:	401a      	ands	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4091      	lsls	r1, r2
 8005a82:	000a      	movs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d108      	bne.n	8005aa8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005aa6:	e007      	b.n	8005ab8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b004      	add	sp, #16
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	001a      	movs	r2, r3
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d814      	bhi.n	8005afe <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a1a      	ldr	r2, [pc, #104]	; (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005ade:	189a      	adds	r2, r3, r2
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	001a      	movs	r2, r3
 8005aea:	23ff      	movs	r3, #255	; 0xff
 8005aec:	4013      	ands	r3, r2
 8005aee:	3b08      	subs	r3, #8
 8005af0:	2114      	movs	r1, #20
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7fa fb06 	bl	8000104 <__udivsi3>
 8005af8:	0003      	movs	r3, r0
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e014      	b.n	8005b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005b08:	189a      	adds	r2, r3, r2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	001a      	movs	r2, r3
 8005b14:	23ff      	movs	r3, #255	; 0xff
 8005b16:	4013      	ands	r3, r2
 8005b18:	3b08      	subs	r3, #8
 8005b1a:	2114      	movs	r1, #20
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fa faf1 	bl	8000104 <__udivsi3>
 8005b22:	0003      	movs	r3, r0
 8005b24:	3307      	adds	r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8005b2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	221f      	movs	r2, #31
 8005b32:	4013      	ands	r3, r2
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b004      	add	sp, #16
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40020407 	.word	0x40020407
 8005b48:	40020800 	.word	0x40020800
 8005b4c:	4002081c 	.word	0x4002081c
 8005b50:	40020880 	.word	0x40020880

08005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	227f      	movs	r2, #127	; 0x7f
 8005b62:	4013      	ands	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b6a:	4694      	mov	ip, r2
 8005b6c:	4463      	add	r3, ip
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	001a      	movs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2203      	movs	r2, #3
 8005b82:	4013      	ands	r3, r2
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b004      	add	sp, #16
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	1000823f 	.word	0x1000823f
 8005b98:	40020940 	.word	0x40020940

08005b9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e14e      	b.n	8005e4c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	225c      	movs	r2, #92	; 0x5c
 8005bb2:	5c9b      	ldrb	r3, [r3, r2]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	225d      	movs	r2, #93	; 0x5d
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7fe fc9d 	bl	8004504 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2110      	movs	r1, #16
 8005bd6:	438a      	bics	r2, r1
 8005bd8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bda:	f7ff fb6b 	bl	80052b4 <HAL_GetTick>
 8005bde:	0003      	movs	r3, r0
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005be2:	e012      	b.n	8005c0a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005be4:	f7ff fb66 	bl	80052b4 <HAL_GetTick>
 8005be8:	0002      	movs	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b0a      	cmp	r3, #10
 8005bf0:	d90b      	bls.n	8005c0a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	225c      	movs	r2, #92	; 0x5c
 8005c02:	2103      	movs	r1, #3
 8005c04:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e120      	b.n	8005e4c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	2208      	movs	r2, #8
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d0e5      	beq.n	8005be4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2101      	movs	r1, #1
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c28:	f7ff fb44 	bl	80052b4 <HAL_GetTick>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c30:	e012      	b.n	8005c58 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c32:	f7ff fb3f 	bl	80052b4 <HAL_GetTick>
 8005c36:	0002      	movs	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b0a      	cmp	r3, #10
 8005c3e:	d90b      	bls.n	8005c58 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c44:	2201      	movs	r2, #1
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	225c      	movs	r2, #92	; 0x5c
 8005c50:	2103      	movs	r1, #3
 8005c52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0f9      	b.n	8005e4c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4013      	ands	r3, r2
 8005c62:	d0e6      	beq.n	8005c32 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2102      	movs	r1, #2
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a76      	ldr	r2, [pc, #472]	; (8005e54 <HAL_FDCAN_Init+0x2b8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d103      	bne.n	8005c86 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005c7e:	4a76      	ldr	r2, [pc, #472]	; (8005e58 <HAL_FDCAN_Init+0x2bc>)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7c1b      	ldrb	r3, [r3, #16]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d108      	bne.n	8005ca0 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	438a      	bics	r2, r1
 8005c9c:	619a      	str	r2, [r3, #24]
 8005c9e:	e007      	b.n	8005cb0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2140      	movs	r1, #64	; 0x40
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7c5b      	ldrb	r3, [r3, #17]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d109      	bne.n	8005ccc <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2180      	movs	r1, #128	; 0x80
 8005cc4:	01c9      	lsls	r1, r1, #7
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
 8005cca:	e007      	b.n	8005cdc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4961      	ldr	r1, [pc, #388]	; (8005e5c <HAL_FDCAN_Init+0x2c0>)
 8005cd8:	400a      	ands	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	7c9b      	ldrb	r3, [r3, #18]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d108      	bne.n	8005cf6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	495c      	ldr	r1, [pc, #368]	; (8005e60 <HAL_FDCAN_Init+0x2c4>)
 8005cf0:	400a      	ands	r2, r1
 8005cf2:	619a      	str	r2, [r3, #24]
 8005cf4:	e008      	b.n	8005d08 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	0149      	lsls	r1, r1, #5
 8005d04:	430a      	orrs	r2, r1
 8005d06:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4a55      	ldr	r2, [pc, #340]	; (8005e64 <HAL_FDCAN_Init+0x2c8>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	21a4      	movs	r1, #164	; 0xa4
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	438a      	bics	r2, r1
 8005d3e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d108      	bne.n	8005d5a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2104      	movs	r1, #4
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
 8005d58:	e02c      	b.n	8005db4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d028      	beq.n	8005db4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d01c      	beq.n	8005da4 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2180      	movs	r1, #128	; 0x80
 8005d76:	430a      	orrs	r2, r1
 8005d78:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2110      	movs	r1, #16
 8005d86:	430a      	orrs	r2, r1
 8005d88:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d110      	bne.n	8005db4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	619a      	str	r2, [r3, #24]
 8005da2:	e007      	b.n	8005db4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2120      	movs	r1, #32
 8005db0:	430a      	orrs	r2, r1
 8005db2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dc4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ddc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dde:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	23c0      	movs	r3, #192	; 0xc0
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d115      	bne.n	8005e18 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	3b01      	subs	r3, #1
 8005df8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005dfa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	3b01      	subs	r3, #1
 8005e02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e04:	431a      	orrs	r2, r3
 8005e06:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	22c0      	movs	r2, #192	; 0xc0
 8005e1e:	5899      	ldr	r1, [r3, r2]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	21c0      	movs	r1, #192	; 0xc0
 8005e2c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fc35 	bl	80066a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	225c      	movs	r2, #92	; 0x5c
 8005e46:	2101      	movs	r1, #1
 8005e48:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b004      	add	sp, #16
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40006400 	.word	0x40006400
 8005e58:	40006500 	.word	0x40006500
 8005e5c:	ffffbfff 	.word	0xffffbfff
 8005e60:	ffffefff 	.word	0xffffefff
 8005e64:	fffffcff 	.word	0xfffffcff

08005e68 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e72:	2017      	movs	r0, #23
 8005e74:	183b      	adds	r3, r7, r0
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	215c      	movs	r1, #92	; 0x5c
 8005e7a:	5c52      	ldrb	r2, [r2, r1]
 8005e7c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e7e:	0002      	movs	r2, r0
 8005e80:	18bb      	adds	r3, r7, r2
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d003      	beq.n	8005e90 <HAL_FDCAN_ConfigFilter+0x28>
 8005e88:	18bb      	adds	r3, r7, r2
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d13d      	bne.n	8005f0c <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d119      	bne.n	8005ecc <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005ea4:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005eac:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	18d3      	adds	r3, r2, r3
 8005ec2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e01d      	b.n	8005f08 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	075a      	lsls	r2, r3, #29
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	079a      	lsls	r2, r3, #30
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3304      	adds	r3, #4
 8005f00:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e006      	b.n	8005f1a <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	2202      	movs	r2, #2
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
  }
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b006      	add	sp, #24
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	225c      	movs	r2, #92	; 0x5c
 8005f2e:	5c9b      	ldrb	r3, [r3, r2]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d110      	bne.n	8005f58 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	225c      	movs	r2, #92	; 0x5c
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2101      	movs	r1, #1
 8005f4a:	438a      	bics	r2, r1
 8005f4c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e006      	b.n	8005f66 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
  }
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	225c      	movs	r2, #92	; 0x5c
 8005f7e:	5c9b      	ldrb	r3, [r3, r2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d12d      	bne.n	8005fe2 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	22c4      	movs	r2, #196	; 0xc4
 8005f8c:	589a      	ldr	r2, [r3, r2]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	039b      	lsls	r3, r3, #14
 8005f92:	4013      	ands	r3, r2
 8005f94:	d008      	beq.n	8005fa8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	0092      	lsls	r2, r2, #2
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e023      	b.n	8005ff0 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	22c4      	movs	r2, #196	; 0xc4
 8005fae:	589b      	ldr	r3, [r3, r2]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fbda 	bl	8006778 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4091      	lsls	r1, r2
 8005fce:	000a      	movs	r2, r1
 8005fd0:	21cc      	movs	r1, #204	; 0xcc
 8005fd2:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e006      	b.n	8005ff0 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
  }
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b006      	add	sp, #24
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006006:	201b      	movs	r0, #27
 8006008:	183b      	adds	r3, r7, r0
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	215c      	movs	r1, #92	; 0x5c
 800600e:	5c52      	ldrb	r2, [r2, r1]
 8006010:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006012:	183b      	adds	r3, r7, r0
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d000      	beq.n	800601c <HAL_FDCAN_GetRxMessage+0x24>
 800601a:	e0c1      	b.n	80061a0 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d121      	bne.n	8006066 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2290      	movs	r2, #144	; 0x90
 8006028:	589b      	ldr	r3, [r3, r2]
 800602a:	220f      	movs	r2, #15
 800602c:	4013      	ands	r3, r2
 800602e:	d108      	bne.n	8006042 <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006034:	2280      	movs	r2, #128	; 0x80
 8006036:	0052      	lsls	r2, r2, #1
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e0b5      	b.n	80061ae <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2290      	movs	r2, #144	; 0x90
 8006048:	589b      	ldr	r3, [r3, r2]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	2203      	movs	r2, #3
 800604e:	4013      	ands	r3, r2
 8006050:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	0013      	movs	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	189b      	adds	r3, r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	18cb      	adds	r3, r1, r3
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
 8006064:	e020      	b.n	80060a8 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2298      	movs	r2, #152	; 0x98
 800606c:	589b      	ldr	r3, [r3, r2]
 800606e:	220f      	movs	r2, #15
 8006070:	4013      	ands	r3, r2
 8006072:	d108      	bne.n	8006086 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	0052      	lsls	r2, r2, #1
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e093      	b.n	80061ae <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2298      	movs	r2, #152	; 0x98
 800608c:	589b      	ldr	r3, [r3, r2]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	2203      	movs	r2, #3
 8006092:	4013      	ands	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	0013      	movs	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	189b      	adds	r3, r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	18cb      	adds	r3, r1, r3
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	05db      	lsls	r3, r3, #23
 80060b0:	401a      	ands	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	0c9b      	lsrs	r3, r3, #18
 80060c4:	055b      	lsls	r3, r3, #21
 80060c6:	0d5a      	lsrs	r2, r3, #21
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e005      	b.n	80060da <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	08da      	lsrs	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	401a      	ands	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0fdb      	lsrs	r3, r3, #31
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	3304      	adds	r3, #4
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	0c1a      	lsrs	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	23f0      	movs	r3, #240	; 0xf0
 800610c:	031b      	lsls	r3, r3, #12
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	035b      	lsls	r3, r3, #13
 800611c:	401a      	ands	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	039b      	lsls	r3, r3, #14
 800612a:	401a      	ands	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	227f      	movs	r2, #127	; 0x7f
 8006138:	401a      	ands	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0fda      	lsrs	r2, r3, #31
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	3304      	adds	r3, #4
 800614c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006152:	2300      	movs	r3, #0
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	e00a      	b.n	800616e <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	18d2      	adds	r2, r2, r3
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	18cb      	adds	r3, r1, r3
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	3301      	adds	r3, #1
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8006176:	5cd3      	ldrb	r3, [r2, r3]
 8006178:	001a      	movs	r2, r3
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	4293      	cmp	r3, r2
 800617e:	d3eb      	bcc.n	8006158 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d105      	bne.n	8006192 <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2194      	movs	r1, #148	; 0x94
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	505a      	str	r2, [r3, r1]
 8006190:	e004      	b.n	800619c <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	219c      	movs	r1, #156	; 0x9c
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e006      	b.n	80061ae <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	2208      	movs	r2, #8
 80061a6:	431a      	orrs	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
  }
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b00a      	add	sp, #40	; 0x28
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	0800bcc8 	.word	0x0800bcc8

080061bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80061c8:	2017      	movs	r0, #23
 80061ca:	183b      	adds	r3, r7, r0
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	215c      	movs	r1, #92	; 0x5c
 80061d0:	5c52      	ldrb	r2, [r2, r1]
 80061d2:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80061d4:	0002      	movs	r2, r0
 80061d6:	18bb      	adds	r3, r7, r2
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d004      	beq.n	80061e8 <HAL_FDCAN_ActivateNotification+0x2c>
 80061de:	18bb      	adds	r3, r7, r2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d000      	beq.n	80061e8 <HAL_FDCAN_ActivateNotification+0x2c>
 80061e6:	e0b4      	b.n	8006352 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2207      	movs	r2, #7
 80061f4:	4013      	ands	r3, r2
 80061f6:	d003      	beq.n	8006200 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2201      	movs	r2, #1
 80061fc:	4013      	ands	r3, r2
 80061fe:	d034      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2238      	movs	r2, #56	; 0x38
 8006204:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006206:	d003      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2202      	movs	r2, #2
 800620c:	4013      	ands	r3, r2
 800620e:	d02c      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	23e0      	movs	r3, #224	; 0xe0
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006218:	d003      	beq.n	8006222 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2204      	movs	r2, #4
 800621e:	4013      	ands	r3, r2
 8006220:	d023      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	23f0      	movs	r3, #240	; 0xf0
 8006226:	015b      	lsls	r3, r3, #5
 8006228:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800622a:	d003      	beq.n	8006234 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2208      	movs	r2, #8
 8006230:	4013      	ands	r3, r2
 8006232:	d01a      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	23e0      	movs	r3, #224	; 0xe0
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800623c:	d003      	beq.n	8006246 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2210      	movs	r2, #16
 8006242:	4013      	ands	r3, r2
 8006244:	d011      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	23c0      	movs	r3, #192	; 0xc0
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800624e:	d003      	beq.n	8006258 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2220      	movs	r2, #32
 8006254:	4013      	ands	r3, r2
 8006256:	d008      	beq.n	800626a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	23fc      	movs	r3, #252	; 0xfc
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006260:	d00b      	beq.n	800627a <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2240      	movs	r2, #64	; 0x40
 8006266:	4013      	ands	r3, r2
 8006268:	d107      	bne.n	800627a <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2101      	movs	r1, #1
 8006276:	430a      	orrs	r2, r1
 8006278:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2207      	movs	r2, #7
 800627e:	4013      	ands	r3, r2
 8006280:	d003      	beq.n	800628a <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d134      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2238      	movs	r2, #56	; 0x38
 800628e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006290:	d003      	beq.n	800629a <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2202      	movs	r2, #2
 8006296:	4013      	ands	r3, r2
 8006298:	d12c      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	23e0      	movs	r3, #224	; 0xe0
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80062a2:	d003      	beq.n	80062ac <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2204      	movs	r2, #4
 80062a8:	4013      	ands	r3, r2
 80062aa:	d123      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	23f0      	movs	r3, #240	; 0xf0
 80062b0:	015b      	lsls	r3, r3, #5
 80062b2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80062b4:	d003      	beq.n	80062be <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2208      	movs	r2, #8
 80062ba:	4013      	ands	r3, r2
 80062bc:	d11a      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	23e0      	movs	r3, #224	; 0xe0
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80062c6:	d003      	beq.n	80062d0 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2210      	movs	r2, #16
 80062cc:	4013      	ands	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	23c0      	movs	r3, #192	; 0xc0
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80062d8:	d003      	beq.n	80062e2 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2220      	movs	r2, #32
 80062de:	4013      	ands	r3, r2
 80062e0:	d108      	bne.n	80062f4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	23fc      	movs	r3, #252	; 0xfc
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80062ea:	d00b      	beq.n	8006304 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2240      	movs	r2, #64	; 0x40
 80062f0:	4013      	ands	r3, r2
 80062f2:	d007      	beq.n	8006304 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2102      	movs	r1, #2
 8006300:	430a      	orrs	r2, r1
 8006302:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	4013      	ands	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	22dc      	movs	r2, #220	; 0xdc
 8006312:	5899      	ldr	r1, [r3, r2]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	430a      	orrs	r2, r1
 800631c:	21dc      	movs	r1, #220	; 0xdc
 800631e:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	4013      	ands	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	22e0      	movs	r2, #224	; 0xe0
 8006330:	5899      	ldr	r1, [r3, r2]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	430a      	orrs	r2, r1
 800633a:	21e0      	movs	r1, #224	; 0xe0
 800633c:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	430a      	orrs	r2, r1
 800634c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e006      	b.n	8006360 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	2202      	movs	r2, #2
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
  }
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b006      	add	sp, #24
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006376:	23e0      	movs	r3, #224	; 0xe0
 8006378:	015b      	lsls	r3, r3, #5
 800637a:	4013      	ands	r3, r2
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	4013      	ands	r3, r2
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	2207      	movs	r2, #7
 8006392:	4013      	ands	r3, r2
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	4013      	ands	r3, r2
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	2238      	movs	r2, #56	; 0x38
 80063aa:	4013      	ands	r3, r2
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	4013      	ands	r3, r2
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063c0:	23f1      	movs	r3, #241	; 0xf1
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	4013      	ands	r3, r2
 80063c6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	4013      	ands	r3, r2
 80063d2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063da:	23e0      	movs	r3, #224	; 0xe0
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	4013      	ands	r3, r2
 80063e0:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4013      	ands	r3, r2
 80063ec:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fc:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	099b      	lsrs	r3, r3, #6
 8006402:	001a      	movs	r2, r3
 8006404:	2301      	movs	r3, #1
 8006406:	4013      	ands	r3, r2
 8006408:	d00d      	beq.n	8006426 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	001a      	movs	r2, r3
 8006410:	2301      	movs	r3, #1
 8006412:	4013      	ands	r3, r2
 8006414:	d007      	beq.n	8006426 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	0018      	movs	r0, r3
 8006422:	f000 f924 	bl	800666e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	001a      	movs	r2, r3
 800642c:	2301      	movs	r3, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d01c      	beq.n	800646c <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	001a      	movs	r2, r3
 8006438:	2301      	movs	r3, #1
 800643a:	4013      	ands	r3, r2
 800643c:	d016      	beq.n	800646c <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	22d8      	movs	r2, #216	; 0xd8
 8006444:	589b      	ldr	r3, [r3, r2]
 8006446:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	22e0      	movs	r2, #224	; 0xe0
 800644e:	589a      	ldr	r2, [r3, r2]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4013      	ands	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	0052      	lsls	r2, r2, #1
 800645e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0011      	movs	r1, r2
 8006466:	0018      	movs	r0, r3
 8006468:	f000 f8e8 	bl	800663c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	0011      	movs	r1, r2
 8006480:	0018      	movs	r0, r3
 8006482:	f000 f8b8 	bl	80065f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006492:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0011      	movs	r1, r2
 800649a:	0018      	movs	r0, r3
 800649c:	f7fc fe18 	bl	80030d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0011      	movs	r1, r2
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 f8a7 	bl	8006608 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	001a      	movs	r2, r3
 80064c0:	2301      	movs	r3, #1
 80064c2:	4013      	ands	r3, r2
 80064c4:	d00e      	beq.n	80064e4 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	0a5b      	lsrs	r3, r3, #9
 80064ca:	001a      	movs	r2, r3
 80064cc:	2301      	movs	r3, #1
 80064ce:	4013      	ands	r3, r2
 80064d0:	d008      	beq.n	80064e4 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 f89b 	bl	800661a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	09db      	lsrs	r3, r3, #7
 80064e8:	001a      	movs	r2, r3
 80064ea:	2301      	movs	r3, #1
 80064ec:	4013      	ands	r3, r2
 80064ee:	d01b      	beq.n	8006528 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	001a      	movs	r2, r3
 80064f6:	2301      	movs	r3, #1
 80064f8:	4013      	ands	r3, r2
 80064fa:	d015      	beq.n	8006528 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	22d4      	movs	r2, #212	; 0xd4
 8006502:	589b      	ldr	r3, [r3, r2]
 8006504:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	22dc      	movs	r2, #220	; 0xdc
 800650c:	589a      	ldr	r2, [r3, r2]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4013      	ands	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0011      	movs	r1, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f000 f881 	bl	800662a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	0b5b      	lsrs	r3, r3, #13
 800652c:	001a      	movs	r2, r3
 800652e:	2301      	movs	r3, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	0b5b      	lsrs	r3, r3, #13
 8006538:	001a      	movs	r2, r3
 800653a:	2301      	movs	r3, #1
 800653c:	4013      	ands	r3, r2
 800653e:	d008      	beq.n	8006552 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	0192      	lsls	r2, r2, #6
 8006548:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f87e 	bl	800664e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	0bdb      	lsrs	r3, r3, #15
 8006556:	001a      	movs	r2, r3
 8006558:	2301      	movs	r3, #1
 800655a:	4013      	ands	r3, r2
 800655c:	d00e      	beq.n	800657c <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	0bdb      	lsrs	r3, r3, #15
 8006562:	001a      	movs	r2, r3
 8006564:	2301      	movs	r3, #1
 8006566:	4013      	ands	r3, r2
 8006568:	d008      	beq.n	800657c <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	0212      	lsls	r2, r2, #8
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 f871 	bl	800665e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	0b9b      	lsrs	r3, r3, #14
 8006580:	001a      	movs	r2, r3
 8006582:	2301      	movs	r3, #1
 8006584:	4013      	ands	r3, r2
 8006586:	d010      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	0b9b      	lsrs	r3, r3, #14
 800658c:	001a      	movs	r2, r3
 800658e:	2301      	movs	r3, #1
 8006590:	4013      	ands	r3, r2
 8006592:	d00a      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	01d2      	lsls	r2, r2, #7
 800659c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 f865 	bl	800668e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f848 	bl	800667e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b00c      	add	sp, #48	; 0x30
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	46bd      	mov	sp, r7
 8006616:	b002      	add	sp, #8
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	46bd      	mov	sp, r7
 800665a:	b002      	add	sp, #8
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b002      	add	sp, #8
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	b002      	add	sp, #8
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	46bd      	mov	sp, r7
 800669c:	b002      	add	sp, #8
 800669e:	bd80      	pop	{r7, pc}

080066a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80066a8:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80066aa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a2e      	ldr	r2, [pc, #184]	; (800676c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d105      	bne.n	80066c2 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	22d4      	movs	r2, #212	; 0xd4
 80066ba:	0092      	lsls	r2, r2, #2
 80066bc:	4694      	mov	ip, r2
 80066be:	4463      	add	r3, ip
 80066c0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2280      	movs	r2, #128	; 0x80
 80066ce:	589b      	ldr	r3, [r3, r2]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	0019      	movs	r1, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	041a      	lsls	r2, r3, #16
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3370      	adds	r3, #112	; 0x70
 80066ea:	001a      	movs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	589b      	ldr	r3, [r3, r2]
 80066f8:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	0019      	movs	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	061a      	lsls	r2, r3, #24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	33b0      	adds	r3, #176	; 0xb0
 8006712:	001a      	movs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3389      	adds	r3, #137	; 0x89
 800671c:	33ff      	adds	r3, #255	; 0xff
 800671e:	001a      	movs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2298      	movs	r2, #152	; 0x98
 8006728:	0092      	lsls	r2, r2, #2
 800672a:	189a      	adds	r2, r3, r2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	229e      	movs	r2, #158	; 0x9e
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	189a      	adds	r2, r3, r2
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e005      	b.n	800674e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3304      	adds	r3, #4
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	22d4      	movs	r2, #212	; 0xd4
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	4694      	mov	ip, r2
 8006756:	4463      	add	r3, ip
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3f1      	bcc.n	8006742 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b004      	add	sp, #16
 8006766:	bd80      	pop	{r7, pc}
 8006768:	4000b400 	.word	0x4000b400
 800676c:	40006800 	.word	0x40006800
 8006770:	ffe0ffff 	.word	0xffe0ffff
 8006774:	f0ffffff 	.word	0xf0ffffff

08006778 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006796:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800679e:	4313      	orrs	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	e00b      	b.n	80067bc <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80067ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80067b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	05d2      	lsls	r2, r2, #23
 80067b8:	4313      	orrs	r3, r2
 80067ba:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80067c6:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80067cc:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80067d2:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	0013      	movs	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	18cb      	adds	r3, r1, r3
 80067ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	3304      	adds	r3, #4
 80067f8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3304      	adds	r3, #4
 8006804:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	e020      	b.n	800684e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3303      	adds	r3, #3
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	18d3      	adds	r3, r2, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3302      	adds	r3, #2
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	18cb      	adds	r3, r1, r3
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006824:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3301      	adds	r3, #1
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	18cb      	adds	r3, r1, r3
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006832:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	188a      	adds	r2, r1, r2
 800683a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800683c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3304      	adds	r3, #4
 8006846:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3304      	adds	r3, #4
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	4a05      	ldr	r2, [pc, #20]	; (800686c <FDCAN_CopyMessageToRAM+0xf4>)
 8006856:	5cd3      	ldrb	r3, [r2, r3]
 8006858:	001a      	movs	r2, r3
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	4293      	cmp	r3, r2
 800685e:	d3d5      	bcc.n	800680c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	46bd      	mov	sp, r7
 8006866:	b008      	add	sp, #32
 8006868:	bd80      	pop	{r7, pc}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	0800bcc8 	.word	0x0800bcc8

08006870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800687e:	e14d      	b.n	8006b1c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4091      	lsls	r1, r2
 800688a:	000a      	movs	r2, r1
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d100      	bne.n	8006898 <HAL_GPIO_Init+0x28>
 8006896:	e13e      	b.n	8006b16 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2203      	movs	r2, #3
 800689e:	4013      	ands	r3, r2
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d005      	beq.n	80068b0 <HAL_GPIO_Init+0x40>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d130      	bne.n	8006912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	2203      	movs	r2, #3
 80068bc:	409a      	lsls	r2, r3
 80068be:	0013      	movs	r3, r2
 80068c0:	43da      	mvns	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4013      	ands	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	409a      	lsls	r2, r3
 80068d2:	0013      	movs	r3, r2
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068e6:	2201      	movs	r2, #1
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	409a      	lsls	r2, r3
 80068ec:	0013      	movs	r3, r2
 80068ee:	43da      	mvns	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4013      	ands	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	091b      	lsrs	r3, r3, #4
 80068fc:	2201      	movs	r2, #1
 80068fe:	401a      	ands	r2, r3
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	409a      	lsls	r2, r3
 8006904:	0013      	movs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	4013      	ands	r3, r2
 800691a:	2b03      	cmp	r3, #3
 800691c:	d017      	beq.n	800694e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	2203      	movs	r2, #3
 800692a:	409a      	lsls	r2, r3
 800692c:	0013      	movs	r3, r2
 800692e:	43da      	mvns	r2, r3
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4013      	ands	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	0013      	movs	r3, r2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2203      	movs	r2, #3
 8006954:	4013      	ands	r3, r2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d123      	bne.n	80069a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	08da      	lsrs	r2, r3, #3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3208      	adds	r2, #8
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	58d3      	ldr	r3, [r2, r3]
 8006966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2207      	movs	r2, #7
 800696c:	4013      	ands	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	220f      	movs	r2, #15
 8006972:	409a      	lsls	r2, r3
 8006974:	0013      	movs	r3, r2
 8006976:	43da      	mvns	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2107      	movs	r1, #7
 8006986:	400b      	ands	r3, r1
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	409a      	lsls	r2, r3
 800698c:	0013      	movs	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	08da      	lsrs	r2, r3, #3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3208      	adds	r2, #8
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	6939      	ldr	r1, [r7, #16]
 80069a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2203      	movs	r2, #3
 80069ae:	409a      	lsls	r2, r3
 80069b0:	0013      	movs	r3, r2
 80069b2:	43da      	mvns	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2203      	movs	r2, #3
 80069c0:	401a      	ands	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	0013      	movs	r3, r2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	23c0      	movs	r3, #192	; 0xc0
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	4013      	ands	r3, r2
 80069e0:	d100      	bne.n	80069e4 <HAL_GPIO_Init+0x174>
 80069e2:	e098      	b.n	8006b16 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80069e4:	4a53      	ldr	r2, [pc, #332]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	3318      	adds	r3, #24
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	589b      	ldr	r3, [r3, r2]
 80069f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4013      	ands	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	220f      	movs	r2, #15
 80069fc:	409a      	lsls	r2, r3
 80069fe:	0013      	movs	r3, r2
 8006a00:	43da      	mvns	r2, r3
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4013      	ands	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	23a0      	movs	r3, #160	; 0xa0
 8006a0c:	05db      	lsls	r3, r3, #23
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d019      	beq.n	8006a46 <HAL_GPIO_Init+0x1d6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a48      	ldr	r2, [pc, #288]	; (8006b38 <HAL_GPIO_Init+0x2c8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_GPIO_Init+0x1d2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a47      	ldr	r2, [pc, #284]	; (8006b3c <HAL_GPIO_Init+0x2cc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00d      	beq.n	8006a3e <HAL_GPIO_Init+0x1ce>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a46      	ldr	r2, [pc, #280]	; (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <HAL_GPIO_Init+0x1ca>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a45      	ldr	r2, [pc, #276]	; (8006b44 <HAL_GPIO_Init+0x2d4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_GPIO_Init+0x1c6>
 8006a32:	2304      	movs	r3, #4
 8006a34:	e008      	b.n	8006a48 <HAL_GPIO_Init+0x1d8>
 8006a36:	2305      	movs	r3, #5
 8006a38:	e006      	b.n	8006a48 <HAL_GPIO_Init+0x1d8>
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e004      	b.n	8006a48 <HAL_GPIO_Init+0x1d8>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e002      	b.n	8006a48 <HAL_GPIO_Init+0x1d8>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <HAL_GPIO_Init+0x1d8>
 8006a46:	2300      	movs	r3, #0
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	2103      	movs	r1, #3
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	00d2      	lsls	r2, r2, #3
 8006a50:	4093      	lsls	r3, r2
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006a58:	4936      	ldr	r1, [pc, #216]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	3318      	adds	r3, #24
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a66:	4b33      	ldr	r3, [pc, #204]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	43da      	mvns	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4013      	ands	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	035b      	lsls	r3, r3, #13
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d003      	beq.n	8006a8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a8a:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	039b      	lsls	r3, r3, #14
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ab4:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006aba:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006abc:	2384      	movs	r3, #132	; 0x84
 8006abe:	58d3      	ldr	r3, [r2, r3]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	43da      	mvns	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ae0:	4914      	ldr	r1, [pc, #80]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006ae2:	2284      	movs	r2, #132	; 0x84
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006ae8:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006aea:	2380      	movs	r3, #128	; 0x80
 8006aec:	58d3      	ldr	r3, [r2, r3]
 8006aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43da      	mvns	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	025b      	lsls	r3, r3, #9
 8006b02:	4013      	ands	r3, r2
 8006b04:	d003      	beq.n	8006b0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b0e:	4909      	ldr	r1, [pc, #36]	; (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	40da      	lsrs	r2, r3
 8006b24:	1e13      	subs	r3, r2, #0
 8006b26:	d000      	beq.n	8006b2a <HAL_GPIO_Init+0x2ba>
 8006b28:	e6aa      	b.n	8006880 <HAL_GPIO_Init+0x10>
  }
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021800 	.word	0x40021800
 8006b38:	50000400 	.word	0x50000400
 8006b3c:	50000800 	.word	0x50000800
 8006b40:	50000c00 	.word	0x50000c00
 8006b44:	50001000 	.word	0x50001000

08006b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	0019      	movs	r1, r3
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d11f      	bne.n	8006bac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006b6c:	4b14      	ldr	r3, [pc, #80]	; (8006bc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	0013      	movs	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	189b      	adds	r3, r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4912      	ldr	r1, [pc, #72]	; (8006bc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7f9 fac2 	bl	8000104 <__udivsi3>
 8006b80:	0003      	movs	r3, r0
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b86:	e008      	b.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e001      	b.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e009      	b.n	8006bae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	2380      	movs	r3, #128	; 0x80
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	2380      	movs	r3, #128	; 0x80
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d0ed      	beq.n	8006b88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b004      	add	sp, #16
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	40007000 	.word	0x40007000
 8006bbc:	fffff9ff 	.word	0xfffff9ff
 8006bc0:	20000008 	.word	0x20000008
 8006bc4:	000f4240 	.word	0x000f4240

08006bc8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <LL_RCC_GetAPB1Prescaler+0x14>)
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	23e0      	movs	r3, #224	; 0xe0
 8006bd2:	01db      	lsls	r3, r3, #7
 8006bd4:	4013      	ands	r3, r2
}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40021000 	.word	0x40021000

08006be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f000 fb50 	bl	8007294 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d100      	bne.n	8006c00 <HAL_RCC_OscConfig+0x20>
 8006bfe:	e07c      	b.n	8006cfa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c00:	4bc3      	ldr	r3, [pc, #780]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2238      	movs	r2, #56	; 0x38
 8006c06:	4013      	ands	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c0a:	4bc1      	ldr	r3, [pc, #772]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2203      	movs	r2, #3
 8006c10:	4013      	ands	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d102      	bne.n	8006c20 <HAL_RCC_OscConfig+0x40>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d002      	beq.n	8006c26 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d10b      	bne.n	8006c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c26:	4bba      	ldr	r3, [pc, #744]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d062      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x118>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d15e      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e32a      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	025b      	lsls	r3, r3, #9
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_OscConfig+0x7a>
 8006c4a:	4bb1      	ldr	r3, [pc, #708]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4bb0      	ldr	r3, [pc, #704]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	0249      	lsls	r1, r1, #9
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e020      	b.n	8006c9c <HAL_RCC_OscConfig+0xbc>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	23a0      	movs	r3, #160	; 0xa0
 8006c60:	02db      	lsls	r3, r3, #11
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d10e      	bne.n	8006c84 <HAL_RCC_OscConfig+0xa4>
 8006c66:	4baa      	ldr	r3, [pc, #680]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4ba9      	ldr	r3, [pc, #676]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c6c:	2180      	movs	r1, #128	; 0x80
 8006c6e:	02c9      	lsls	r1, r1, #11
 8006c70:	430a      	orrs	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	4ba6      	ldr	r3, [pc, #664]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4ba5      	ldr	r3, [pc, #660]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	0249      	lsls	r1, r1, #9
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e00b      	b.n	8006c9c <HAL_RCC_OscConfig+0xbc>
 8006c84:	4ba2      	ldr	r3, [pc, #648]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4ba1      	ldr	r3, [pc, #644]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c8a:	49a2      	ldr	r1, [pc, #648]	; (8006f14 <HAL_RCC_OscConfig+0x334>)
 8006c8c:	400a      	ands	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	4b9f      	ldr	r3, [pc, #636]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b9e      	ldr	r3, [pc, #632]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006c96:	49a0      	ldr	r1, [pc, #640]	; (8006f18 <HAL_RCC_OscConfig+0x338>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d014      	beq.n	8006cce <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fe fb06 	bl	80052b4 <HAL_GetTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cae:	f7fe fb01 	bl	80052b4 <HAL_GetTick>
 8006cb2:	0002      	movs	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b64      	cmp	r3, #100	; 0x64
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e2e9      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cc0:	4b93      	ldr	r3, [pc, #588]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0xce>
 8006ccc:	e015      	b.n	8006cfa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cce:	f7fe faf1 	bl	80052b4 <HAL_GetTick>
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7fe faec 	bl	80052b4 <HAL_GetTick>
 8006cdc:	0002      	movs	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e2d4      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cea:	4b89      	ldr	r3, [pc, #548]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0xf8>
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	4013      	ands	r3, r2
 8006d02:	d100      	bne.n	8006d06 <HAL_RCC_OscConfig+0x126>
 8006d04:	e099      	b.n	8006e3a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d06:	4b82      	ldr	r3, [pc, #520]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2238      	movs	r2, #56	; 0x38
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d10:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2203      	movs	r2, #3
 8006d16:	4013      	ands	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCC_OscConfig+0x146>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d002      	beq.n	8006d2c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d135      	bne.n	8006d98 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d2c:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4013      	ands	r3, r2
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_OscConfig+0x164>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e2a7      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d44:	4b72      	ldr	r3, [pc, #456]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a74      	ldr	r2, [pc, #464]	; (8006f1c <HAL_RCC_OscConfig+0x33c>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	021a      	lsls	r2, r3, #8
 8006d54:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d112      	bne.n	8006d86 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006d60:	4b6b      	ldr	r3, [pc, #428]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6e      	ldr	r2, [pc, #440]	; (8006f20 <HAL_RCC_OscConfig+0x340>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	0019      	movs	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	4b68      	ldr	r3, [pc, #416]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006d74:	4b66      	ldr	r3, [pc, #408]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	0adb      	lsrs	r3, r3, #11
 8006d7a:	2207      	movs	r2, #7
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	4a69      	ldr	r2, [pc, #420]	; (8006f24 <HAL_RCC_OscConfig+0x344>)
 8006d80:	40da      	lsrs	r2, r3
 8006d82:	4b69      	ldr	r3, [pc, #420]	; (8006f28 <HAL_RCC_OscConfig+0x348>)
 8006d84:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d86:	4b69      	ldr	r3, [pc, #420]	; (8006f2c <HAL_RCC_OscConfig+0x34c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7fe fa36 	bl	80051fc <HAL_InitTick>
 8006d90:	1e03      	subs	r3, r0, #0
 8006d92:	d051      	beq.n	8006e38 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e27d      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d030      	beq.n	8006e02 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006da0:	4b5b      	ldr	r3, [pc, #364]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a5e      	ldr	r2, [pc, #376]	; (8006f20 <HAL_RCC_OscConfig+0x340>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006db4:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4b55      	ldr	r3, [pc, #340]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006dba:	2180      	movs	r1, #128	; 0x80
 8006dbc:	0049      	lsls	r1, r1, #1
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc2:	f7fe fa77 	bl	80052b4 <HAL_GetTick>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dcc:	f7fe fa72 	bl	80052b4 <HAL_GetTick>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e25a      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dde:	4b4c      	ldr	r3, [pc, #304]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4013      	ands	r3, r2
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dea:	4b49      	ldr	r3, [pc, #292]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4a4b      	ldr	r2, [pc, #300]	; (8006f1c <HAL_RCC_OscConfig+0x33c>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	0019      	movs	r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	021a      	lsls	r2, r3, #8
 8006dfa:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
 8006e00:	e01b      	b.n	8006e3a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006e02:	4b43      	ldr	r3, [pc, #268]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b42      	ldr	r3, [pc, #264]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e08:	4949      	ldr	r1, [pc, #292]	; (8006f30 <HAL_RCC_OscConfig+0x350>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fe fa51 	bl	80052b4 <HAL_GetTick>
 8006e12:	0003      	movs	r3, r0
 8006e14:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e18:	f7fe fa4c 	bl	80052b4 <HAL_GetTick>
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e234      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e2a:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4013      	ands	r3, r2
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x238>
 8006e36:	e000      	b.n	8006e3a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2208      	movs	r2, #8
 8006e40:	4013      	ands	r3, r2
 8006e42:	d047      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006e44:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2238      	movs	r2, #56	; 0x38
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b18      	cmp	r3, #24
 8006e4e:	d10a      	bne.n	8006e66 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006e50:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e54:	2202      	movs	r2, #2
 8006e56:	4013      	ands	r3, r2
 8006e58:	d03c      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x2f4>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d138      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e216      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d019      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006e6e:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e72:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e74:	2101      	movs	r1, #1
 8006e76:	430a      	orrs	r2, r1
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fe fa1b 	bl	80052b4 <HAL_GetTick>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e84:	f7fe fa16 	bl	80052b4 <HAL_GetTick>
 8006e88:	0002      	movs	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e1fe      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d0f1      	beq.n	8006e84 <HAL_RCC_OscConfig+0x2a4>
 8006ea0:	e018      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006ea2:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	438a      	bics	r2, r1
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fe fa01 	bl	80052b4 <HAL_GetTick>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb8:	f7fe f9fc 	bl	80052b4 <HAL_GetTick>
 8006ebc:	0002      	movs	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1e4      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006eca:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ece:	2202      	movs	r2, #2
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	d1f1      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2204      	movs	r2, #4
 8006eda:	4013      	ands	r3, r2
 8006edc:	d100      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x300>
 8006ede:	e0c7      	b.n	8007070 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee0:	231f      	movs	r3, #31
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2238      	movs	r2, #56	; 0x38
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d11f      	bne.n	8006f34 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_RCC_OscConfig+0x330>)
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	2202      	movs	r2, #2
 8006efa:	4013      	ands	r3, r2
 8006efc:	d100      	bne.n	8006f00 <HAL_RCC_OscConfig+0x320>
 8006efe:	e0b7      	b.n	8007070 <HAL_RCC_OscConfig+0x490>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d000      	beq.n	8006f0a <HAL_RCC_OscConfig+0x32a>
 8006f08:	e0b2      	b.n	8007070 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e1c2      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	40021000 	.word	0x40021000
 8006f14:	fffeffff 	.word	0xfffeffff
 8006f18:	fffbffff 	.word	0xfffbffff
 8006f1c:	ffff80ff 	.word	0xffff80ff
 8006f20:	ffffc7ff 	.word	0xffffc7ff
 8006f24:	00f42400 	.word	0x00f42400
 8006f28:	20000008 	.word	0x20000008
 8006f2c:	2000000c 	.word	0x2000000c
 8006f30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f34:	4bb5      	ldr	r3, [pc, #724]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	055b      	lsls	r3, r3, #21
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <HAL_RCC_OscConfig+0x364>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x366>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d011      	beq.n	8006f6e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006f4a:	4bb0      	ldr	r3, [pc, #704]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f4e:	4baf      	ldr	r3, [pc, #700]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006f50:	2180      	movs	r1, #128	; 0x80
 8006f52:	0549      	lsls	r1, r1, #21
 8006f54:	430a      	orrs	r2, r1
 8006f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f58:	4bac      	ldr	r3, [pc, #688]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	055b      	lsls	r3, r3, #21
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006f66:	231f      	movs	r3, #31
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f6e:	4ba8      	ldr	r3, [pc, #672]	; (8007210 <HAL_RCC_OscConfig+0x630>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4013      	ands	r3, r2
 8006f78:	d11a      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f7a:	4ba5      	ldr	r3, [pc, #660]	; (8007210 <HAL_RCC_OscConfig+0x630>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4ba4      	ldr	r3, [pc, #656]	; (8007210 <HAL_RCC_OscConfig+0x630>)
 8006f80:	2180      	movs	r1, #128	; 0x80
 8006f82:	0049      	lsls	r1, r1, #1
 8006f84:	430a      	orrs	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006f88:	f7fe f994 	bl	80052b4 <HAL_GetTick>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fe f98f 	bl	80052b4 <HAL_GetTick>
 8006f96:	0002      	movs	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e177      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa4:	4b9a      	ldr	r3, [pc, #616]	; (8007210 <HAL_RCC_OscConfig+0x630>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4013      	ands	r3, r2
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x3e6>
 8006fb8:	4b94      	ldr	r3, [pc, #592]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fbc:	4b93      	ldr	r3, [pc, #588]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fc4:	e01c      	b.n	8007000 <HAL_RCC_OscConfig+0x420>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x408>
 8006fce:	4b8f      	ldr	r3, [pc, #572]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd2:	4b8e      	ldr	r3, [pc, #568]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fd4:	2104      	movs	r1, #4
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fda:	4b8c      	ldr	r3, [pc, #560]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fde:	4b8b      	ldr	r3, [pc, #556]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fe6:	e00b      	b.n	8007000 <HAL_RCC_OscConfig+0x420>
 8006fe8:	4b88      	ldr	r3, [pc, #544]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fec:	4b87      	ldr	r3, [pc, #540]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006fee:	2101      	movs	r1, #1
 8006ff0:	438a      	bics	r2, r1
 8006ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ff4:	4b85      	ldr	r3, [pc, #532]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ff8:	4b84      	ldr	r3, [pc, #528]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	438a      	bics	r2, r1
 8006ffe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d014      	beq.n	8007032 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fe f954 	bl	80052b4 <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007010:	e009      	b.n	8007026 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007012:	f7fe f94f 	bl	80052b4 <HAL_GetTick>
 8007016:	0002      	movs	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	4a7d      	ldr	r2, [pc, #500]	; (8007214 <HAL_RCC_OscConfig+0x634>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e136      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007026:	4b79      	ldr	r3, [pc, #484]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702a:	2202      	movs	r2, #2
 800702c:	4013      	ands	r3, r2
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x432>
 8007030:	e013      	b.n	800705a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007032:	f7fe f93f 	bl	80052b4 <HAL_GetTick>
 8007036:	0003      	movs	r3, r0
 8007038:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800703a:	e009      	b.n	8007050 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703c:	f7fe f93a 	bl	80052b4 <HAL_GetTick>
 8007040:	0002      	movs	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	4a73      	ldr	r2, [pc, #460]	; (8007214 <HAL_RCC_OscConfig+0x634>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e121      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007050:	4b6e      	ldr	r3, [pc, #440]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	2202      	movs	r2, #2
 8007056:	4013      	ands	r3, r2
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800705a:	231f      	movs	r3, #31
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d105      	bne.n	8007070 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007064:	4b69      	ldr	r3, [pc, #420]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007068:	4b68      	ldr	r3, [pc, #416]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 800706a:	496b      	ldr	r1, [pc, #428]	; (8007218 <HAL_RCC_OscConfig+0x638>)
 800706c:	400a      	ands	r2, r1
 800706e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2220      	movs	r2, #32
 8007076:	4013      	ands	r3, r2
 8007078:	d039      	beq.n	80070ee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01b      	beq.n	80070ba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007082:	4b62      	ldr	r3, [pc, #392]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b61      	ldr	r3, [pc, #388]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	03c9      	lsls	r1, r1, #15
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007090:	f7fe f910 	bl	80052b4 <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800709a:	f7fe f90b 	bl	80052b4 <HAL_GetTick>
 800709e:	0002      	movs	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e0f3      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80070ac:	4b57      	ldr	r3, [pc, #348]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	4013      	ands	r3, r2
 80070b6:	d0f0      	beq.n	800709a <HAL_RCC_OscConfig+0x4ba>
 80070b8:	e019      	b.n	80070ee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070ba:	4b54      	ldr	r3, [pc, #336]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b53      	ldr	r3, [pc, #332]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80070c0:	4956      	ldr	r1, [pc, #344]	; (800721c <HAL_RCC_OscConfig+0x63c>)
 80070c2:	400a      	ands	r2, r1
 80070c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fe f8f5 	bl	80052b4 <HAL_GetTick>
 80070ca:	0003      	movs	r3, r0
 80070cc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070d0:	f7fe f8f0 	bl	80052b4 <HAL_GetTick>
 80070d4:	0002      	movs	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e0d8      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80070e2:	4b4a      	ldr	r3, [pc, #296]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	041b      	lsls	r3, r3, #16
 80070ea:	4013      	ands	r3, r2
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d100      	bne.n	80070f8 <HAL_RCC_OscConfig+0x518>
 80070f6:	e0cc      	b.n	8007292 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070f8:	4b44      	ldr	r3, [pc, #272]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2238      	movs	r2, #56	; 0x38
 80070fe:	4013      	ands	r3, r2
 8007100:	2b10      	cmp	r3, #16
 8007102:	d100      	bne.n	8007106 <HAL_RCC_OscConfig+0x526>
 8007104:	e07b      	b.n	80071fe <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d156      	bne.n	80071bc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710e:	4b3f      	ldr	r3, [pc, #252]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b3e      	ldr	r3, [pc, #248]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007114:	4942      	ldr	r1, [pc, #264]	; (8007220 <HAL_RCC_OscConfig+0x640>)
 8007116:	400a      	ands	r2, r1
 8007118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fe f8cb 	bl	80052b4 <HAL_GetTick>
 800711e:	0003      	movs	r3, r0
 8007120:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007124:	f7fe f8c6 	bl	80052b4 <HAL_GetTick>
 8007128:	0002      	movs	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e0ae      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007136:	4b35      	ldr	r3, [pc, #212]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	2380      	movs	r3, #128	; 0x80
 800713c:	049b      	lsls	r3, r3, #18
 800713e:	4013      	ands	r3, r2
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007142:	4b32      	ldr	r3, [pc, #200]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	4a37      	ldr	r2, [pc, #220]	; (8007224 <HAL_RCC_OscConfig+0x644>)
 8007148:	4013      	ands	r3, r2
 800714a:	0019      	movs	r1, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	431a      	orrs	r2, r3
 8007170:	4b26      	ldr	r3, [pc, #152]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007172:	430a      	orrs	r2, r1
 8007174:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007176:	4b25      	ldr	r3, [pc, #148]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	0449      	lsls	r1, r1, #17
 8007180:	430a      	orrs	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007184:	4b21      	ldr	r3, [pc, #132]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	4b20      	ldr	r3, [pc, #128]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 800718a:	2180      	movs	r1, #128	; 0x80
 800718c:	0549      	lsls	r1, r1, #21
 800718e:	430a      	orrs	r2, r1
 8007190:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fe f88f 	bl	80052b4 <HAL_GetTick>
 8007196:	0003      	movs	r3, r0
 8007198:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719c:	f7fe f88a 	bl	80052b4 <HAL_GetTick>
 80071a0:	0002      	movs	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e072      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	049b      	lsls	r3, r3, #18
 80071b6:	4013      	ands	r3, r2
 80071b8:	d0f0      	beq.n	800719c <HAL_RCC_OscConfig+0x5bc>
 80071ba:	e06a      	b.n	8007292 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071bc:	4b13      	ldr	r3, [pc, #76]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	4b12      	ldr	r3, [pc, #72]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071c2:	4917      	ldr	r1, [pc, #92]	; (8007220 <HAL_RCC_OscConfig+0x640>)
 80071c4:	400a      	ands	r2, r1
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fe f874 	bl	80052b4 <HAL_GetTick>
 80071cc:	0003      	movs	r3, r0
 80071ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fe f86f 	bl	80052b4 <HAL_GetTick>
 80071d6:	0002      	movs	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e057      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	049b      	lsls	r3, r3, #18
 80071ec:	4013      	ands	r3, r2
 80071ee:	d1f0      	bne.n	80071d2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <HAL_RCC_OscConfig+0x62c>)
 80071f6:	490c      	ldr	r1, [pc, #48]	; (8007228 <HAL_RCC_OscConfig+0x648>)
 80071f8:	400a      	ands	r2, r1
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	e049      	b.n	8007292 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d112      	bne.n	800722c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e044      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	40021000 	.word	0x40021000
 8007210:	40007000 	.word	0x40007000
 8007214:	00001388 	.word	0x00001388
 8007218:	efffffff 	.word	0xefffffff
 800721c:	ffbfffff 	.word	0xffbfffff
 8007220:	feffffff 	.word	0xfeffffff
 8007224:	11c1808c 	.word	0x11c1808c
 8007228:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800722c:	4b1b      	ldr	r3, [pc, #108]	; (800729c <HAL_RCC_OscConfig+0x6bc>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2203      	movs	r2, #3
 8007236:	401a      	ands	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	429a      	cmp	r2, r3
 800723e:	d126      	bne.n	800728e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2270      	movs	r2, #112	; 0x70
 8007244:	401a      	ands	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d11f      	bne.n	800728e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	23fe      	movs	r3, #254	; 0xfe
 8007252:	01db      	lsls	r3, r3, #7
 8007254:	401a      	ands	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800725c:	429a      	cmp	r2, r3
 800725e:	d116      	bne.n	800728e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	23f8      	movs	r3, #248	; 0xf8
 8007264:	039b      	lsls	r3, r3, #14
 8007266:	401a      	ands	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d10e      	bne.n	800728e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	23e0      	movs	r3, #224	; 0xe0
 8007274:	051b      	lsls	r3, r3, #20
 8007276:	401a      	ands	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800727c:	429a      	cmp	r2, r3
 800727e:	d106      	bne.n	800728e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	0f5b      	lsrs	r3, r3, #29
 8007284:	075a      	lsls	r2, r3, #29
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d001      	beq.n	8007292 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	0018      	movs	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	b008      	add	sp, #32
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40021000 	.word	0x40021000

080072a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0e9      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072b4:	4b76      	ldr	r3, [pc, #472]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2207      	movs	r2, #7
 80072ba:	4013      	ands	r3, r2
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d91e      	bls.n	8007300 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072c2:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2207      	movs	r2, #7
 80072c8:	4393      	bics	r3, r2
 80072ca:	0019      	movs	r1, r3
 80072cc:	4b70      	ldr	r3, [pc, #448]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072d4:	f7fd ffee 	bl	80052b4 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072dc:	e009      	b.n	80072f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072de:	f7fd ffe9 	bl	80052b4 <HAL_GetTick>
 80072e2:	0002      	movs	r2, r0
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	4a6a      	ldr	r2, [pc, #424]	; (8007494 <HAL_RCC_ClockConfig+0x1f4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e0ca      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072f2:	4b67      	ldr	r3, [pc, #412]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2207      	movs	r2, #7
 80072f8:	4013      	ands	r3, r2
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d1ee      	bne.n	80072de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2202      	movs	r2, #2
 8007306:	4013      	ands	r3, r2
 8007308:	d015      	beq.n	8007336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2204      	movs	r2, #4
 8007310:	4013      	ands	r3, r2
 8007312:	d006      	beq.n	8007322 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007314:	4b60      	ldr	r3, [pc, #384]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	4b5f      	ldr	r3, [pc, #380]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 800731a:	21e0      	movs	r1, #224	; 0xe0
 800731c:	01c9      	lsls	r1, r1, #7
 800731e:	430a      	orrs	r2, r1
 8007320:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007322:	4b5d      	ldr	r3, [pc, #372]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4a5d      	ldr	r2, [pc, #372]	; (800749c <HAL_RCC_ClockConfig+0x1fc>)
 8007328:	4013      	ands	r3, r2
 800732a:	0019      	movs	r1, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	4b59      	ldr	r3, [pc, #356]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	4013      	ands	r3, r2
 800733e:	d057      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d107      	bne.n	8007358 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007348:	4b53      	ldr	r3, [pc, #332]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2380      	movs	r3, #128	; 0x80
 800734e:	029b      	lsls	r3, r3, #10
 8007350:	4013      	ands	r3, r2
 8007352:	d12b      	bne.n	80073ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e097      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d107      	bne.n	8007370 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007360:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	049b      	lsls	r3, r3, #18
 8007368:	4013      	ands	r3, r2
 800736a:	d11f      	bne.n	80073ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e08b      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007378:	4b47      	ldr	r3, [pc, #284]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4013      	ands	r3, r2
 8007382:	d113      	bne.n	80073ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e07f      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d106      	bne.n	800739e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007390:	4b41      	ldr	r3, [pc, #260]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007394:	2202      	movs	r2, #2
 8007396:	4013      	ands	r3, r2
 8007398:	d108      	bne.n	80073ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e074      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800739e:	4b3e      	ldr	r3, [pc, #248]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	2202      	movs	r2, #2
 80073a4:	4013      	ands	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e06d      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073ac:	4b3a      	ldr	r3, [pc, #232]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2207      	movs	r2, #7
 80073b2:	4393      	bics	r3, r2
 80073b4:	0019      	movs	r1, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	4b37      	ldr	r3, [pc, #220]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c0:	f7fd ff78 	bl	80052b4 <HAL_GetTick>
 80073c4:	0003      	movs	r3, r0
 80073c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c8:	e009      	b.n	80073de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ca:	f7fd ff73 	bl	80052b4 <HAL_GetTick>
 80073ce:	0002      	movs	r2, r0
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <HAL_RCC_ClockConfig+0x1f4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e054      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073de:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2238      	movs	r2, #56	; 0x38
 80073e4:	401a      	ands	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d1ec      	bne.n	80073ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2207      	movs	r2, #7
 80073f6:	4013      	ands	r3, r2
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d21e      	bcs.n	800743c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2207      	movs	r2, #7
 8007404:	4393      	bics	r3, r2
 8007406:	0019      	movs	r1, r3
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007410:	f7fd ff50 	bl	80052b4 <HAL_GetTick>
 8007414:	0003      	movs	r3, r0
 8007416:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007418:	e009      	b.n	800742e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800741a:	f7fd ff4b 	bl	80052b4 <HAL_GetTick>
 800741e:	0002      	movs	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <HAL_RCC_ClockConfig+0x1f4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e02c      	b.n	8007488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800742e:	4b18      	ldr	r3, [pc, #96]	; (8007490 <HAL_RCC_ClockConfig+0x1f0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2207      	movs	r2, #7
 8007434:	4013      	ands	r3, r2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d1ee      	bne.n	800741a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	4013      	ands	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <HAL_RCC_ClockConfig+0x200>)
 800744c:	4013      	ands	r3, r2
 800744e:	0019      	movs	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	4b10      	ldr	r3, [pc, #64]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007456:	430a      	orrs	r2, r1
 8007458:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800745a:	f000 f829 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 800745e:	0001      	movs	r1, r0
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <HAL_RCC_ClockConfig+0x1f8>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	220f      	movs	r2, #15
 8007468:	401a      	ands	r2, r3
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <HAL_RCC_ClockConfig+0x204>)
 800746c:	0092      	lsls	r2, r2, #2
 800746e:	58d3      	ldr	r3, [r2, r3]
 8007470:	221f      	movs	r2, #31
 8007472:	4013      	ands	r3, r2
 8007474:	000a      	movs	r2, r1
 8007476:	40da      	lsrs	r2, r3
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <HAL_RCC_ClockConfig+0x208>)
 800747a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800747c:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <HAL_RCC_ClockConfig+0x20c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	0018      	movs	r0, r3
 8007482:	f7fd febb 	bl	80051fc <HAL_InitTick>
 8007486:	0003      	movs	r3, r0
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40022000 	.word	0x40022000
 8007494:	00001388 	.word	0x00001388
 8007498:	40021000 	.word	0x40021000
 800749c:	fffff0ff 	.word	0xfffff0ff
 80074a0:	ffff8fff 	.word	0xffff8fff
 80074a4:	0800bc68 	.word	0x0800bc68
 80074a8:	20000008 	.word	0x20000008
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80074b6:	4b3c      	ldr	r3, [pc, #240]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2238      	movs	r2, #56	; 0x38
 80074bc:	4013      	ands	r3, r2
 80074be:	d10f      	bne.n	80074e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80074c0:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	0adb      	lsrs	r3, r3, #11
 80074c6:	2207      	movs	r2, #7
 80074c8:	4013      	ands	r3, r2
 80074ca:	2201      	movs	r2, #1
 80074cc:	409a      	lsls	r2, r3
 80074ce:	0013      	movs	r3, r2
 80074d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	4835      	ldr	r0, [pc, #212]	; (80075ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80074d6:	f7f8 fe15 	bl	8000104 <__udivsi3>
 80074da:	0003      	movs	r3, r0
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	e05d      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e0:	4b31      	ldr	r3, [pc, #196]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2238      	movs	r2, #56	; 0x38
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d102      	bne.n	80074f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074ec:	4b30      	ldr	r3, [pc, #192]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	e054      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074f2:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2238      	movs	r2, #56	; 0x38
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d138      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80074fe:	4b2a      	ldr	r3, [pc, #168]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2203      	movs	r2, #3
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007508:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	091b      	lsrs	r3, r3, #4
 800750e:	2207      	movs	r2, #7
 8007510:	4013      	ands	r3, r2
 8007512:	3301      	adds	r3, #1
 8007514:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b03      	cmp	r3, #3
 800751a:	d10d      	bne.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	4824      	ldr	r0, [pc, #144]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8007520:	f7f8 fdf0 	bl	8000104 <__udivsi3>
 8007524:	0003      	movs	r3, r0
 8007526:	0019      	movs	r1, r3
 8007528:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	227f      	movs	r2, #127	; 0x7f
 8007530:	4013      	ands	r3, r2
 8007532:	434b      	muls	r3, r1
 8007534:	617b      	str	r3, [r7, #20]
        break;
 8007536:	e00d      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	481c      	ldr	r0, [pc, #112]	; (80075ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800753c:	f7f8 fde2 	bl	8000104 <__udivsi3>
 8007540:	0003      	movs	r3, r0
 8007542:	0019      	movs	r1, r3
 8007544:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	227f      	movs	r2, #127	; 0x7f
 800754c:	4013      	ands	r3, r2
 800754e:	434b      	muls	r3, r1
 8007550:	617b      	str	r3, [r7, #20]
        break;
 8007552:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007554:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	0f5b      	lsrs	r3, r3, #29
 800755a:	2207      	movs	r2, #7
 800755c:	4013      	ands	r3, r2
 800755e:	3301      	adds	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	f7f8 fdcd 	bl	8000104 <__udivsi3>
 800756a:	0003      	movs	r3, r0
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	e015      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2238      	movs	r2, #56	; 0x38
 8007576:	4013      	ands	r3, r2
 8007578:	2b20      	cmp	r3, #32
 800757a:	d103      	bne.n	8007584 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	e00b      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2238      	movs	r2, #56	; 0x38
 800758a:	4013      	ands	r3, r2
 800758c:	2b18      	cmp	r3, #24
 800758e:	d103      	bne.n	8007598 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007590:	23fa      	movs	r3, #250	; 0xfa
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e001      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800759c:	693b      	ldr	r3, [r7, #16]
}
 800759e:	0018      	movs	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b006      	add	sp, #24
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	40021000 	.word	0x40021000
 80075ac:	00f42400 	.word	0x00f42400
 80075b0:	007a1200 	.word	0x007a1200

080075b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b8:	4b02      	ldr	r3, [pc, #8]	; (80075c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80075ba:	681b      	ldr	r3, [r3, #0]
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	20000008 	.word	0x20000008

080075c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80075cc:	f7ff fff2 	bl	80075b4 <HAL_RCC_GetHCLKFreq>
 80075d0:	0004      	movs	r4, r0
 80075d2:	f7ff faf9 	bl	8006bc8 <LL_RCC_GetAPB1Prescaler>
 80075d6:	0003      	movs	r3, r0
 80075d8:	0b1a      	lsrs	r2, r3, #12
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075dc:	0092      	lsls	r2, r2, #2
 80075de:	58d3      	ldr	r3, [r2, r3]
 80075e0:	221f      	movs	r2, #31
 80075e2:	4013      	ands	r3, r2
 80075e4:	40dc      	lsrs	r4, r3
 80075e6:	0023      	movs	r3, r4
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bdb0      	pop	{r4, r5, r7, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	0800bca8 	.word	0x0800bca8

080075f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80075fc:	2313      	movs	r3, #19
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007604:	2312      	movs	r3, #18
 8007606:	18fb      	adds	r3, r7, r3
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	4013      	ands	r3, r2
 8007616:	d100      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007618:	e0ad      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800761a:	2011      	movs	r0, #17
 800761c:	183b      	adds	r3, r7, r0
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007622:	4b47      	ldr	r3, [pc, #284]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	055b      	lsls	r3, r3, #21
 800762a:	4013      	ands	r3, r2
 800762c:	d110      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800762e:	4b44      	ldr	r3, [pc, #272]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007632:	4b43      	ldr	r3, [pc, #268]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007634:	2180      	movs	r1, #128	; 0x80
 8007636:	0549      	lsls	r1, r1, #21
 8007638:	430a      	orrs	r2, r1
 800763a:	63da      	str	r2, [r3, #60]	; 0x3c
 800763c:	4b40      	ldr	r3, [pc, #256]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800763e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	055b      	lsls	r3, r3, #21
 8007644:	4013      	ands	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
 8007648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800764a:	183b      	adds	r3, r7, r0
 800764c:	2201      	movs	r2, #1
 800764e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007650:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b3b      	ldr	r3, [pc, #236]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007656:	2180      	movs	r1, #128	; 0x80
 8007658:	0049      	lsls	r1, r1, #1
 800765a:	430a      	orrs	r2, r1
 800765c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800765e:	f7fd fe29 	bl	80052b4 <HAL_GetTick>
 8007662:	0003      	movs	r3, r0
 8007664:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007666:	e00b      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007668:	f7fd fe24 	bl	80052b4 <HAL_GetTick>
 800766c:	0002      	movs	r2, r0
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d904      	bls.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007676:	2313      	movs	r3, #19
 8007678:	18fb      	adds	r3, r7, r3
 800767a:	2203      	movs	r2, #3
 800767c:	701a      	strb	r2, [r3, #0]
        break;
 800767e:	e005      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007680:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4013      	ands	r3, r2
 800768a:	d0ed      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800768c:	2313      	movs	r3, #19
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d15e      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007696:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800769a:	23c0      	movs	r3, #192	; 0xc0
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4013      	ands	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d019      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d014      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b6:	4a24      	ldr	r2, [pc, #144]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076c0:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	0249      	lsls	r1, r1, #9
 80076c6:	430a      	orrs	r2, r1
 80076c8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076ca:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076ce:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076d0:	491e      	ldr	r1, [pc, #120]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80076d2:	400a      	ands	r2, r1
 80076d4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2201      	movs	r2, #1
 80076e0:	4013      	ands	r3, r2
 80076e2:	d016      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fd fde6 	bl	80052b4 <HAL_GetTick>
 80076e8:	0003      	movs	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ec:	e00c      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ee:	f7fd fde1 	bl	80052b4 <HAL_GetTick>
 80076f2:	0002      	movs	r2, r0
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	4a15      	ldr	r2, [pc, #84]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d904      	bls.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80076fe:	2313      	movs	r3, #19
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	2203      	movs	r2, #3
 8007704:	701a      	strb	r2, [r3, #0]
            break;
 8007706:	e004      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800770a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770c:	2202      	movs	r2, #2
 800770e:	4013      	ands	r3, r2
 8007710:	d0ed      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007712:	2313      	movs	r3, #19
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800771e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007720:	4a09      	ldr	r2, [pc, #36]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007722:	4013      	ands	r3, r2
 8007724:	0019      	movs	r1, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800772c:	430a      	orrs	r2, r1
 800772e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007730:	e016      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007732:	2312      	movs	r3, #18
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	2213      	movs	r2, #19
 8007738:	18ba      	adds	r2, r7, r2
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	e00f      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007740:	40021000 	.word	0x40021000
 8007744:	40007000 	.word	0x40007000
 8007748:	fffffcff 	.word	0xfffffcff
 800774c:	fffeffff 	.word	0xfffeffff
 8007750:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007754:	2312      	movs	r3, #18
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	2213      	movs	r2, #19
 800775a:	18ba      	adds	r2, r7, r2
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007760:	2311      	movs	r3, #17
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800776a:	4bb6      	ldr	r3, [pc, #728]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800776c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776e:	4bb5      	ldr	r3, [pc, #724]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007770:	49b5      	ldr	r1, [pc, #724]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007772:	400a      	ands	r2, r1
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007780:	4bb0      	ldr	r3, [pc, #704]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	2203      	movs	r2, #3
 8007786:	4393      	bics	r3, r2
 8007788:	0019      	movs	r1, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4bad      	ldr	r3, [pc, #692]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007790:	430a      	orrs	r2, r1
 8007792:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2202      	movs	r2, #2
 800779a:	4013      	ands	r3, r2
 800779c:	d009      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800779e:	4ba9      	ldr	r3, [pc, #676]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	220c      	movs	r2, #12
 80077a4:	4393      	bics	r3, r2
 80077a6:	0019      	movs	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	4ba5      	ldr	r3, [pc, #660]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077ae:	430a      	orrs	r2, r1
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2204      	movs	r2, #4
 80077b8:	4013      	ands	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077bc:	4ba1      	ldr	r3, [pc, #644]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	2230      	movs	r2, #48	; 0x30
 80077c2:	4393      	bics	r3, r2
 80077c4:	0019      	movs	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	4b9e      	ldr	r3, [pc, #632]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077cc:	430a      	orrs	r2, r1
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2210      	movs	r2, #16
 80077d6:	4013      	ands	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077da:	4b9a      	ldr	r3, [pc, #616]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	4a9b      	ldr	r2, [pc, #620]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	0019      	movs	r1, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	4b96      	ldr	r3, [pc, #600]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077ea:	430a      	orrs	r2, r1
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	2380      	movs	r3, #128	; 0x80
 80077f4:	015b      	lsls	r3, r3, #5
 80077f6:	4013      	ands	r3, r2
 80077f8:	d009      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80077fa:	4b92      	ldr	r3, [pc, #584]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80077fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fe:	4a94      	ldr	r2, [pc, #592]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007800:	4013      	ands	r3, r2
 8007802:	0019      	movs	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	4b8e      	ldr	r3, [pc, #568]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800780a:	430a      	orrs	r2, r1
 800780c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	2380      	movs	r3, #128	; 0x80
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4013      	ands	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800781a:	4b8a      	ldr	r3, [pc, #552]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	4a8d      	ldr	r2, [pc, #564]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007820:	4013      	ands	r3, r2
 8007822:	0019      	movs	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007828:	4b86      	ldr	r3, [pc, #536]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800782a:	430a      	orrs	r2, r1
 800782c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4013      	ands	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800783a:	4b82      	ldr	r3, [pc, #520]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	4a86      	ldr	r2, [pc, #536]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007840:	4013      	ands	r3, r2
 8007842:	0019      	movs	r1, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4b7e      	ldr	r3, [pc, #504]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800784a:	430a      	orrs	r2, r1
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2220      	movs	r2, #32
 8007854:	4013      	ands	r3, r2
 8007856:	d009      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007858:	4b7a      	ldr	r3, [pc, #488]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	4a7f      	ldr	r2, [pc, #508]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800785e:	4013      	ands	r3, r2
 8007860:	0019      	movs	r1, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	4b77      	ldr	r3, [pc, #476]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007868:	430a      	orrs	r2, r1
 800786a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2240      	movs	r2, #64	; 0x40
 8007872:	4013      	ands	r3, r2
 8007874:	d009      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007876:	4b73      	ldr	r3, [pc, #460]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	4a79      	ldr	r2, [pc, #484]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800787c:	4013      	ands	r3, r2
 800787e:	0019      	movs	r1, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	4b6f      	ldr	r3, [pc, #444]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007886:	430a      	orrs	r2, r1
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	2380      	movs	r3, #128	; 0x80
 8007890:	01db      	lsls	r3, r3, #7
 8007892:	4013      	ands	r3, r2
 8007894:	d015      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007896:	4b6b      	ldr	r3, [pc, #428]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	0899      	lsrs	r1, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a2:	4b68      	ldr	r3, [pc, #416]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078a4:	430a      	orrs	r2, r1
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	05db      	lsls	r3, r3, #23
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d106      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80078b4:	4b63      	ldr	r3, [pc, #396]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	0249      	lsls	r1, r1, #9
 80078be:	430a      	orrs	r2, r1
 80078c0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	4013      	ands	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078ce:	4b5d      	ldr	r3, [pc, #372]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	2240      	movs	r2, #64	; 0x40
 80078d4:	4393      	bics	r3, r2
 80078d6:	0019      	movs	r1, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078dc:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078de:	430a      	orrs	r2, r1
 80078e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	039b      	lsls	r3, r3, #14
 80078ea:	4013      	ands	r3, r2
 80078ec:	d016      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80078ee:	4b55      	ldr	r3, [pc, #340]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	4a5c      	ldr	r2, [pc, #368]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	0019      	movs	r1, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078fc:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80078fe:	430a      	orrs	r2, r1
 8007900:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007906:	2380      	movs	r3, #128	; 0x80
 8007908:	03db      	lsls	r3, r3, #15
 800790a:	429a      	cmp	r2, r3
 800790c:	d106      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800790e:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	0449      	lsls	r1, r1, #17
 8007918:	430a      	orrs	r2, r1
 800791a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	03db      	lsls	r3, r3, #15
 8007924:	4013      	ands	r3, r2
 8007926:	d016      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007928:	4b46      	ldr	r3, [pc, #280]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	4a4e      	ldr	r2, [pc, #312]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800792e:	4013      	ands	r3, r2
 8007930:	0019      	movs	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007936:	4b43      	ldr	r3, [pc, #268]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007938:	430a      	orrs	r2, r1
 800793a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	045b      	lsls	r3, r3, #17
 8007944:	429a      	cmp	r2, r3
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007948:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800794e:	2180      	movs	r1, #128	; 0x80
 8007950:	0449      	lsls	r1, r1, #17
 8007952:	430a      	orrs	r2, r1
 8007954:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	2380      	movs	r3, #128	; 0x80
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	4013      	ands	r3, r2
 8007960:	d014      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007962:	4b38      	ldr	r3, [pc, #224]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	2203      	movs	r2, #3
 8007968:	4393      	bics	r3, r2
 800796a:	0019      	movs	r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	4b34      	ldr	r3, [pc, #208]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007972:	430a      	orrs	r2, r1
 8007974:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d106      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	4b30      	ldr	r3, [pc, #192]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	0249      	lsls	r1, r1, #9
 8007988:	430a      	orrs	r2, r1
 800798a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	019b      	lsls	r3, r3, #6
 8007994:	4013      	ands	r3, r2
 8007996:	d014      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007998:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	220c      	movs	r2, #12
 800799e:	4393      	bics	r3, r2
 80079a0:	0019      	movs	r1, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079a8:	430a      	orrs	r2, r1
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d106      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80079b4:	4b23      	ldr	r3, [pc, #140]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	0249      	lsls	r1, r1, #9
 80079be:	430a      	orrs	r2, r1
 80079c0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	2380      	movs	r3, #128	; 0x80
 80079c8:	045b      	lsls	r3, r3, #17
 80079ca:	4013      	ands	r3, r2
 80079cc:	d016      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079ce:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	4a22      	ldr	r2, [pc, #136]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079dc:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079de:	430a      	orrs	r2, r1
 80079e0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	019b      	lsls	r3, r3, #6
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d106      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079f4:	2180      	movs	r1, #128	; 0x80
 80079f6:	0449      	lsls	r1, r1, #17
 80079f8:	430a      	orrs	r2, r1
 80079fa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	049b      	lsls	r3, r3, #18
 8007a04:	4013      	ands	r3, r2
 8007a06:	d016      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	0019      	movs	r1, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d106      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	0449      	lsls	r1, r1, #17
 8007a32:	430a      	orrs	r2, r1
 8007a34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007a36:	2312      	movs	r3, #18
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	781b      	ldrb	r3, [r3, #0]
}
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b006      	add	sp, #24
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000
 8007a48:	efffffff 	.word	0xefffffff
 8007a4c:	fffff3ff 	.word	0xfffff3ff
 8007a50:	fffffcff 	.word	0xfffffcff
 8007a54:	fff3ffff 	.word	0xfff3ffff
 8007a58:	ffcfffff 	.word	0xffcfffff
 8007a5c:	ffffcfff 	.word	0xffffcfff
 8007a60:	ffff3fff 	.word	0xffff3fff
 8007a64:	ffbfffff 	.word	0xffbfffff
 8007a68:	feffffff 	.word	0xfeffffff

08007a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e04a      	b.n	8007b14 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	223d      	movs	r2, #61	; 0x3d
 8007a82:	5c9b      	ldrb	r3, [r3, r2]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	223c      	movs	r2, #60	; 0x3c
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7fc fe15 	bl	80046c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	223d      	movs	r2, #61	; 0x3d
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	0019      	movs	r1, r3
 8007aac:	0010      	movs	r0, r2
 8007aae:	f000 ff97 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2248      	movs	r2, #72	; 0x48
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	223e      	movs	r2, #62	; 0x3e
 8007abe:	2101      	movs	r1, #1
 8007ac0:	5499      	strb	r1, [r3, r2]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	223f      	movs	r2, #63	; 0x3f
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	5499      	strb	r1, [r3, r2]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2240      	movs	r2, #64	; 0x40
 8007ace:	2101      	movs	r1, #1
 8007ad0:	5499      	strb	r1, [r3, r2]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2241      	movs	r2, #65	; 0x41
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	5499      	strb	r1, [r3, r2]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2242      	movs	r2, #66	; 0x42
 8007ade:	2101      	movs	r1, #1
 8007ae0:	5499      	strb	r1, [r3, r2]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2243      	movs	r2, #67	; 0x43
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2244      	movs	r2, #68	; 0x44
 8007aee:	2101      	movs	r1, #1
 8007af0:	5499      	strb	r1, [r3, r2]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2245      	movs	r2, #69	; 0x45
 8007af6:	2101      	movs	r1, #1
 8007af8:	5499      	strb	r1, [r3, r2]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2246      	movs	r2, #70	; 0x46
 8007afe:	2101      	movs	r1, #1
 8007b00:	5499      	strb	r1, [r3, r2]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2247      	movs	r2, #71	; 0x47
 8007b06:	2101      	movs	r1, #1
 8007b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	223d      	movs	r2, #61	; 0x3d
 8007b0e:	2101      	movs	r1, #1
 8007b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e04a      	b.n	8007bc4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	223d      	movs	r2, #61	; 0x3d
 8007b32:	5c9b      	ldrb	r3, [r3, r2]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	223c      	movs	r2, #60	; 0x3c
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 f841 	bl	8007bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	223d      	movs	r2, #61	; 0x3d
 8007b4e:	2102      	movs	r1, #2
 8007b50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	0010      	movs	r0, r2
 8007b5e:	f000 ff3f 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2248      	movs	r2, #72	; 0x48
 8007b66:	2101      	movs	r1, #1
 8007b68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	223e      	movs	r2, #62	; 0x3e
 8007b6e:	2101      	movs	r1, #1
 8007b70:	5499      	strb	r1, [r3, r2]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	223f      	movs	r2, #63	; 0x3f
 8007b76:	2101      	movs	r1, #1
 8007b78:	5499      	strb	r1, [r3, r2]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2240      	movs	r2, #64	; 0x40
 8007b7e:	2101      	movs	r1, #1
 8007b80:	5499      	strb	r1, [r3, r2]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2241      	movs	r2, #65	; 0x41
 8007b86:	2101      	movs	r1, #1
 8007b88:	5499      	strb	r1, [r3, r2]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2242      	movs	r2, #66	; 0x42
 8007b8e:	2101      	movs	r1, #1
 8007b90:	5499      	strb	r1, [r3, r2]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2243      	movs	r2, #67	; 0x43
 8007b96:	2101      	movs	r1, #1
 8007b98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2244      	movs	r2, #68	; 0x44
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	5499      	strb	r1, [r3, r2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2245      	movs	r2, #69	; 0x45
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	5499      	strb	r1, [r3, r2]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2246      	movs	r2, #70	; 0x46
 8007bae:	2101      	movs	r1, #1
 8007bb0:	5499      	strb	r1, [r3, r2]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2247      	movs	r2, #71	; 0x47
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	223d      	movs	r2, #61	; 0x3d
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b002      	add	sp, #8
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	001a      	movs	r2, r3
 8007bea:	1cbb      	adds	r3, r7, #2
 8007bec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bee:	2317      	movs	r3, #23
 8007bf0:	18fb      	adds	r3, r7, r3
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <HAL_TIM_PWM_Start_DMA+0x32>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	223e      	movs	r2, #62	; 0x3e
 8007c00:	5c9b      	ldrb	r3, [r3, r2]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	3b02      	subs	r3, #2
 8007c06:	425a      	negs	r2, r3
 8007c08:	4153      	adcs	r3, r2
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	e037      	b.n	8007c7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d108      	bne.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x4a>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	223f      	movs	r2, #63	; 0x3f
 8007c18:	5c9b      	ldrb	r3, [r3, r2]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3b02      	subs	r3, #2
 8007c1e:	425a      	negs	r2, r3
 8007c20:	4153      	adcs	r3, r2
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	e02b      	b.n	8007c7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d108      	bne.n	8007c3e <HAL_TIM_PWM_Start_DMA+0x62>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2240      	movs	r2, #64	; 0x40
 8007c30:	5c9b      	ldrb	r3, [r3, r2]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	3b02      	subs	r3, #2
 8007c36:	425a      	negs	r2, r3
 8007c38:	4153      	adcs	r3, r2
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	e01f      	b.n	8007c7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b0c      	cmp	r3, #12
 8007c42:	d108      	bne.n	8007c56 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2241      	movs	r2, #65	; 0x41
 8007c48:	5c9b      	ldrb	r3, [r3, r2]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	3b02      	subs	r3, #2
 8007c4e:	425a      	negs	r2, r3
 8007c50:	4153      	adcs	r3, r2
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	e013      	b.n	8007c7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d108      	bne.n	8007c6e <HAL_TIM_PWM_Start_DMA+0x92>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2242      	movs	r2, #66	; 0x42
 8007c60:	5c9b      	ldrb	r3, [r3, r2]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	3b02      	subs	r3, #2
 8007c66:	425a      	negs	r2, r3
 8007c68:	4153      	adcs	r3, r2
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e007      	b.n	8007c7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2243      	movs	r2, #67	; 0x43
 8007c72:	5c9b      	ldrb	r3, [r3, r2]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	3b02      	subs	r3, #2
 8007c78:	425a      	negs	r2, r3
 8007c7a:	4153      	adcs	r3, r2
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8007c82:	2302      	movs	r3, #2
 8007c84:	e198      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d108      	bne.n	8007c9e <HAL_TIM_PWM_Start_DMA+0xc2>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	223e      	movs	r2, #62	; 0x3e
 8007c90:	5c9b      	ldrb	r3, [r3, r2]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	425a      	negs	r2, r3
 8007c98:	4153      	adcs	r3, r2
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e037      	b.n	8007d0e <HAL_TIM_PWM_Start_DMA+0x132>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d108      	bne.n	8007cb6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	223f      	movs	r2, #63	; 0x3f
 8007ca8:	5c9b      	ldrb	r3, [r3, r2]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	425a      	negs	r2, r3
 8007cb0:	4153      	adcs	r3, r2
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	e02b      	b.n	8007d0e <HAL_TIM_PWM_Start_DMA+0x132>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d108      	bne.n	8007cce <HAL_TIM_PWM_Start_DMA+0xf2>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2240      	movs	r2, #64	; 0x40
 8007cc0:	5c9b      	ldrb	r3, [r3, r2]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	425a      	negs	r2, r3
 8007cc8:	4153      	adcs	r3, r2
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e01f      	b.n	8007d0e <HAL_TIM_PWM_Start_DMA+0x132>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b0c      	cmp	r3, #12
 8007cd2:	d108      	bne.n	8007ce6 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2241      	movs	r2, #65	; 0x41
 8007cd8:	5c9b      	ldrb	r3, [r3, r2]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	425a      	negs	r2, r3
 8007ce0:	4153      	adcs	r3, r2
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	e013      	b.n	8007d0e <HAL_TIM_PWM_Start_DMA+0x132>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	d108      	bne.n	8007cfe <HAL_TIM_PWM_Start_DMA+0x122>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2242      	movs	r2, #66	; 0x42
 8007cf0:	5c9b      	ldrb	r3, [r3, r2]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	425a      	negs	r2, r3
 8007cf8:	4153      	adcs	r3, r2
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	e007      	b.n	8007d0e <HAL_TIM_PWM_Start_DMA+0x132>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2243      	movs	r2, #67	; 0x43
 8007d02:	5c9b      	ldrb	r3, [r3, r2]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	425a      	negs	r2, r3
 8007d0a:	4153      	adcs	r3, r2
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d035      	beq.n	8007d7e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_TIM_PWM_Start_DMA+0x144>
 8007d18:	1cbb      	adds	r3, r7, #2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e149      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d104      	bne.n	8007d34 <HAL_TIM_PWM_Start_DMA+0x158>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	223e      	movs	r2, #62	; 0x3e
 8007d2e:	2102      	movs	r1, #2
 8007d30:	5499      	strb	r1, [r3, r2]
 8007d32:	e026      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d104      	bne.n	8007d44 <HAL_TIM_PWM_Start_DMA+0x168>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	223f      	movs	r2, #63	; 0x3f
 8007d3e:	2102      	movs	r1, #2
 8007d40:	5499      	strb	r1, [r3, r2]
 8007d42:	e01e      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d104      	bne.n	8007d54 <HAL_TIM_PWM_Start_DMA+0x178>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	2102      	movs	r1, #2
 8007d50:	5499      	strb	r1, [r3, r2]
 8007d52:	e016      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b0c      	cmp	r3, #12
 8007d58:	d104      	bne.n	8007d64 <HAL_TIM_PWM_Start_DMA+0x188>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2241      	movs	r2, #65	; 0x41
 8007d5e:	2102      	movs	r1, #2
 8007d60:	5499      	strb	r1, [r3, r2]
 8007d62:	e00e      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d104      	bne.n	8007d74 <HAL_TIM_PWM_Start_DMA+0x198>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2242      	movs	r2, #66	; 0x42
 8007d6e:	2102      	movs	r1, #2
 8007d70:	5499      	strb	r1, [r3, r2]
 8007d72:	e006      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2243      	movs	r2, #67	; 0x43
 8007d78:	2102      	movs	r1, #2
 8007d7a:	5499      	strb	r1, [r3, r2]
 8007d7c:	e001      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e11a      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b0c      	cmp	r3, #12
 8007d86:	d100      	bne.n	8007d8a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8007d88:	e080      	b.n	8007e8c <HAL_TIM_PWM_Start_DMA+0x2b0>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b0c      	cmp	r3, #12
 8007d8e:	d900      	bls.n	8007d92 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8007d90:	e0a1      	b.n	8007ed6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d054      	beq.n	8007e42 <HAL_TIM_PWM_Start_DMA+0x266>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d900      	bls.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8007d9e:	e09a      	b.n	8007ed6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_PWM_Start_DMA+0x1d2>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d025      	beq.n	8007df8 <HAL_TIM_PWM_Start_DMA+0x21c>
 8007dac:	e093      	b.n	8007ed6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	4a83      	ldr	r2, [pc, #524]	; (8007fc0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007db4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	4a82      	ldr	r2, [pc, #520]	; (8007fc4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	4a81      	ldr	r2, [pc, #516]	; (8007fc8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007dc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3334      	adds	r3, #52	; 0x34
 8007dd2:	001a      	movs	r2, r3
 8007dd4:	1cbb      	adds	r3, r7, #2
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	f7fd fc24 	bl	8005624 <HAL_DMA_Start_IT>
 8007ddc:	1e03      	subs	r3, r0, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0e9      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	0089      	lsls	r1, r1, #2
 8007df2:	430a      	orrs	r2, r1
 8007df4:	60da      	str	r2, [r3, #12]
      break;
 8007df6:	e073      	b.n	8007ee0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	4a70      	ldr	r2, [pc, #448]	; (8007fc0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	4a6f      	ldr	r2, [pc, #444]	; (8007fc4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	4a6e      	ldr	r2, [pc, #440]	; (8007fc8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3338      	adds	r3, #56	; 0x38
 8007e1c:	001a      	movs	r2, r3
 8007e1e:	1cbb      	adds	r3, r7, #2
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	f7fd fbff 	bl	8005624 <HAL_DMA_Start_IT>
 8007e26:	1e03      	subs	r3, r0, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e0c4      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	00c9      	lsls	r1, r1, #3
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	60da      	str	r2, [r3, #12]
      break;
 8007e40:	e04e      	b.n	8007ee0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	4a5e      	ldr	r2, [pc, #376]	; (8007fc0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4a5d      	ldr	r2, [pc, #372]	; (8007fc4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	4a5c      	ldr	r2, [pc, #368]	; (8007fc8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	333c      	adds	r3, #60	; 0x3c
 8007e66:	001a      	movs	r2, r3
 8007e68:	1cbb      	adds	r3, r7, #2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	f7fd fbda 	bl	8005624 <HAL_DMA_Start_IT>
 8007e70:	1e03      	subs	r3, r0, #0
 8007e72:	d001      	beq.n	8007e78 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e09f      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	0109      	lsls	r1, r1, #4
 8007e86:	430a      	orrs	r2, r1
 8007e88:	60da      	str	r2, [r3, #12]
      break;
 8007e8a:	e029      	b.n	8007ee0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	4a4b      	ldr	r2, [pc, #300]	; (8007fc0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	4a4a      	ldr	r2, [pc, #296]	; (8007fc4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	4a49      	ldr	r2, [pc, #292]	; (8007fc8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007ea2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3340      	adds	r3, #64	; 0x40
 8007eb0:	001a      	movs	r2, r3
 8007eb2:	1cbb      	adds	r3, r7, #2
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	f7fd fbb5 	bl	8005624 <HAL_DMA_Start_IT>
 8007eba:	1e03      	subs	r3, r0, #0
 8007ebc:	d001      	beq.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e07a      	b.n	8007fb8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	0149      	lsls	r1, r1, #5
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	60da      	str	r2, [r3, #12]
      break;
 8007ed4:	e004      	b.n	8007ee0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8007ed6:	2317      	movs	r3, #23
 8007ed8:	18fb      	adds	r3, r7, r3
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
      break;
 8007ede:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007ee0:	2317      	movs	r3, #23
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d163      	bne.n	8007fb2 <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f001 f95e 	bl	80091b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a33      	ldr	r2, [pc, #204]	; (8007fcc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00e      	beq.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x344>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a32      	ldr	r2, [pc, #200]	; (8007fd0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x344>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a30      	ldr	r2, [pc, #192]	; (8007fd4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x344>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d101      	bne.n	8007f24 <HAL_TIM_PWM_Start_DMA+0x348>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <HAL_TIM_PWM_Start_DMA+0x34a>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	0209      	lsls	r1, r1, #8
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d014      	beq.n	8007f70 <HAL_TIM_PWM_Start_DMA+0x394>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	2380      	movs	r3, #128	; 0x80
 8007f4c:	05db      	lsls	r3, r3, #23
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d00e      	beq.n	8007f70 <HAL_TIM_PWM_Start_DMA+0x394>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a21      	ldr	r2, [pc, #132]	; (8007fdc <HAL_TIM_PWM_Start_DMA+0x400>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d009      	beq.n	8007f70 <HAL_TIM_PWM_Start_DMA+0x394>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1f      	ldr	r2, [pc, #124]	; (8007fe0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <HAL_TIM_PWM_Start_DMA+0x394>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d116      	bne.n	8007f9e <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4a1b      	ldr	r2, [pc, #108]	; (8007fe4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d016      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3d4>
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	025b      	lsls	r3, r3, #9
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d011      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2101      	movs	r1, #1
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9c:	e008      	b.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2101      	movs	r1, #1
 8007faa:	430a      	orrs	r2, r1
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e000      	b.n	8007fb2 <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8007fb2:	2317      	movs	r3, #23
 8007fb4:	18fb      	adds	r3, r7, r3
 8007fb6:	781b      	ldrb	r3, [r3, #0]
}
 8007fb8:	0018      	movs	r0, r3
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b006      	add	sp, #24
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	080088cd 	.word	0x080088cd
 8007fc4:	08008977 	.word	0x08008977
 8007fc8:	08008839 	.word	0x08008839
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	00010007 	.word	0x00010007

08007fe8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff2:	230f      	movs	r3, #15
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b0c      	cmp	r3, #12
 8007ffe:	d039      	beq.n	8008074 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b0c      	cmp	r3, #12
 8008004:	d844      	bhi.n	8008090 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b08      	cmp	r3, #8
 800800a:	d025      	beq.n	8008058 <HAL_TIM_PWM_Stop_DMA+0x70>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b08      	cmp	r3, #8
 8008010:	d83e      	bhi.n	8008090 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_TIM_PWM_Stop_DMA+0x38>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b04      	cmp	r3, #4
 800801c:	d00e      	beq.n	800803c <HAL_TIM_PWM_Stop_DMA+0x54>
 800801e:	e037      	b.n	8008090 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	495c      	ldr	r1, [pc, #368]	; (800819c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800802c:	400a      	ands	r2, r1
 800802e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	0018      	movs	r0, r3
 8008036:	f7fd fbdb 	bl	80057f0 <HAL_DMA_Abort_IT>
      break;
 800803a:	e02e      	b.n	800809a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4956      	ldr	r1, [pc, #344]	; (80081a0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8008048:	400a      	ands	r2, r1
 800804a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	0018      	movs	r0, r3
 8008052:	f7fd fbcd 	bl	80057f0 <HAL_DMA_Abort_IT>
      break;
 8008056:	e020      	b.n	800809a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4950      	ldr	r1, [pc, #320]	; (80081a4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8008064:	400a      	ands	r2, r1
 8008066:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	0018      	movs	r0, r3
 800806e:	f7fd fbbf 	bl	80057f0 <HAL_DMA_Abort_IT>
      break;
 8008072:	e012      	b.n	800809a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	494a      	ldr	r1, [pc, #296]	; (80081a8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8008080:	400a      	ands	r2, r1
 8008082:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	0018      	movs	r0, r3
 800808a:	f7fd fbb1 	bl	80057f0 <HAL_DMA_Abort_IT>
      break;
 800808e:	e004      	b.n	800809a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8008090:	230f      	movs	r3, #15
 8008092:	18fb      	adds	r3, r7, r3
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
      break;
 8008098:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800809a:	230f      	movs	r3, #15
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d000      	beq.n	80080a6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80080a4:	e073      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	2200      	movs	r2, #0
 80080ae:	0018      	movs	r0, r3
 80080b0:	f001 f880 	bl	80091b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a3c      	ldr	r2, [pc, #240]	; (80081ac <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a3b      	ldr	r2, [pc, #236]	; (80081b0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a39      	ldr	r2, [pc, #228]	; (80081b4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a38      	ldr	r2, [pc, #224]	; (80081b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80080dc:	2301      	movs	r3, #1
 80080de:	e000      	b.n	80080e2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 80080e0:	2300      	movs	r3, #0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	4a33      	ldr	r2, [pc, #204]	; (80081bc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	d10d      	bne.n	800810e <HAL_TIM_PWM_Stop_DMA+0x126>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	4a31      	ldr	r2, [pc, #196]	; (80081c0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	d107      	bne.n	800810e <HAL_TIM_PWM_Stop_DMA+0x126>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	492e      	ldr	r1, [pc, #184]	; (80081c4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800810a:	400a      	ands	r2, r1
 800810c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	4a29      	ldr	r2, [pc, #164]	; (80081bc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008116:	4013      	ands	r3, r2
 8008118:	d10d      	bne.n	8008136 <HAL_TIM_PWM_Stop_DMA+0x14e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	4a27      	ldr	r2, [pc, #156]	; (80081c0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008122:	4013      	ands	r3, r2
 8008124:	d107      	bne.n	8008136 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2101      	movs	r1, #1
 8008132:	438a      	bics	r2, r1
 8008134:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	223e      	movs	r2, #62	; 0x3e
 8008140:	2101      	movs	r1, #1
 8008142:	5499      	strb	r1, [r3, r2]
 8008144:	e023      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d104      	bne.n	8008156 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	223f      	movs	r2, #63	; 0x3f
 8008150:	2101      	movs	r1, #1
 8008152:	5499      	strb	r1, [r3, r2]
 8008154:	e01b      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b08      	cmp	r3, #8
 800815a:	d104      	bne.n	8008166 <HAL_TIM_PWM_Stop_DMA+0x17e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2240      	movs	r2, #64	; 0x40
 8008160:	2101      	movs	r1, #1
 8008162:	5499      	strb	r1, [r3, r2]
 8008164:	e013      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b0c      	cmp	r3, #12
 800816a:	d104      	bne.n	8008176 <HAL_TIM_PWM_Stop_DMA+0x18e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2241      	movs	r2, #65	; 0x41
 8008170:	2101      	movs	r1, #1
 8008172:	5499      	strb	r1, [r3, r2]
 8008174:	e00b      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b10      	cmp	r3, #16
 800817a:	d104      	bne.n	8008186 <HAL_TIM_PWM_Stop_DMA+0x19e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2242      	movs	r2, #66	; 0x42
 8008180:	2101      	movs	r1, #1
 8008182:	5499      	strb	r1, [r3, r2]
 8008184:	e003      	b.n	800818e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2243      	movs	r2, #67	; 0x43
 800818a:	2101      	movs	r1, #1
 800818c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800818e:	230f      	movs	r3, #15
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	781b      	ldrb	r3, [r3, #0]
}
 8008194:	0018      	movs	r0, r3
 8008196:	46bd      	mov	sp, r7
 8008198:	b004      	add	sp, #16
 800819a:	bd80      	pop	{r7, pc}
 800819c:	fffffdff 	.word	0xfffffdff
 80081a0:	fffffbff 	.word	0xfffffbff
 80081a4:	fffff7ff 	.word	0xfffff7ff
 80081a8:	ffffefff 	.word	0xffffefff
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400
 80081b8:	40014800 	.word	0x40014800
 80081bc:	00001111 	.word	0x00001111
 80081c0:	00000444 	.word	0x00000444
 80081c4:	ffff7fff 	.word	0xffff7fff

080081c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2202      	movs	r2, #2
 80081d8:	4013      	ands	r3, r2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d124      	bne.n	8008228 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2202      	movs	r2, #2
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d11d      	bne.n	8008228 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2203      	movs	r2, #3
 80081f2:	4252      	negs	r2, r2
 80081f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	2203      	movs	r2, #3
 8008204:	4013      	ands	r3, r2
 8008206:	d004      	beq.n	8008212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	0018      	movs	r0, r3
 800820c:	f000 faf4 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 8008210:	e007      	b.n	8008222 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	0018      	movs	r0, r3
 8008216:	f000 fae7 	bl	80087e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	0018      	movs	r0, r3
 800821e:	f7fc ff7b 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2204      	movs	r2, #4
 8008230:	4013      	ands	r3, r2
 8008232:	2b04      	cmp	r3, #4
 8008234:	d125      	bne.n	8008282 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	2204      	movs	r2, #4
 800823e:	4013      	ands	r3, r2
 8008240:	2b04      	cmp	r3, #4
 8008242:	d11e      	bne.n	8008282 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2205      	movs	r2, #5
 800824a:	4252      	negs	r2, r2
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	23c0      	movs	r3, #192	; 0xc0
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4013      	ands	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	0018      	movs	r0, r3
 8008266:	f000 fac7 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 800826a:	e007      	b.n	800827c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0018      	movs	r0, r3
 8008270:	f000 faba 	bl	80087e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	0018      	movs	r0, r3
 8008278:	f7fc ff4e 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2208      	movs	r2, #8
 800828a:	4013      	ands	r3, r2
 800828c:	2b08      	cmp	r3, #8
 800828e:	d124      	bne.n	80082da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2208      	movs	r2, #8
 8008298:	4013      	ands	r3, r2
 800829a:	2b08      	cmp	r3, #8
 800829c:	d11d      	bne.n	80082da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2209      	movs	r2, #9
 80082a4:	4252      	negs	r2, r2
 80082a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2204      	movs	r2, #4
 80082ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4013      	ands	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	0018      	movs	r0, r3
 80082be:	f000 fa9b 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 80082c2:	e007      	b.n	80082d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fa8e 	bl	80087e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fc ff22 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2210      	movs	r2, #16
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d125      	bne.n	8008334 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	2210      	movs	r2, #16
 80082f0:	4013      	ands	r3, r2
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d11e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2211      	movs	r2, #17
 80082fc:	4252      	negs	r2, r2
 80082fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2208      	movs	r2, #8
 8008304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	23c0      	movs	r3, #192	; 0xc0
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4013      	ands	r3, r2
 8008312:	d004      	beq.n	800831e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0018      	movs	r0, r3
 8008318:	f000 fa6e 	bl	80087f8 <HAL_TIM_IC_CaptureCallback>
 800831c:	e007      	b.n	800832e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	0018      	movs	r0, r3
 8008322:	f000 fa61 	bl	80087e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	0018      	movs	r0, r3
 800832a:	f7fc fef5 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2201      	movs	r2, #1
 800833c:	4013      	ands	r3, r2
 800833e:	2b01      	cmp	r3, #1
 8008340:	d10f      	bne.n	8008362 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	4013      	ands	r3, r2
 800834c:	2b01      	cmp	r3, #1
 800834e:	d108      	bne.n	8008362 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2202      	movs	r2, #2
 8008356:	4252      	negs	r2, r2
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	0018      	movs	r0, r3
 800835e:	f000 fa3b 	bl	80087d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2280      	movs	r2, #128	; 0x80
 800836a:	4013      	ands	r3, r2
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d10f      	bne.n	8008390 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2280      	movs	r2, #128	; 0x80
 8008378:	4013      	ands	r3, r2
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d108      	bne.n	8008390 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2281      	movs	r2, #129	; 0x81
 8008384:	4252      	negs	r2, r2
 8008386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	0018      	movs	r0, r3
 800838c:	f001 f85a 	bl	8009444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	401a      	ands	r2, r3
 800839c:	2380      	movs	r3, #128	; 0x80
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d10e      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2280      	movs	r2, #128	; 0x80
 80083ac:	4013      	ands	r3, r2
 80083ae:	2b80      	cmp	r3, #128	; 0x80
 80083b0:	d107      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1c      	ldr	r2, [pc, #112]	; (8008428 <HAL_TIM_IRQHandler+0x260>)
 80083b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	0018      	movs	r0, r3
 80083be:	f001 f849 	bl	8009454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2240      	movs	r2, #64	; 0x40
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d10f      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2240      	movs	r2, #64	; 0x40
 80083d8:	4013      	ands	r3, r2
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d108      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2241      	movs	r2, #65	; 0x41
 80083e4:	4252      	negs	r2, r2
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	0018      	movs	r0, r3
 80083ec:	f000 fa14 	bl	8008818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2220      	movs	r2, #32
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d10f      	bne.n	800841e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2220      	movs	r2, #32
 8008406:	4013      	ands	r3, r2
 8008408:	2b20      	cmp	r3, #32
 800840a:	d108      	bne.n	800841e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2221      	movs	r2, #33	; 0x21
 8008412:	4252      	negs	r2, r2
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	0018      	movs	r0, r3
 800841a:	f001 f80b 	bl	8009434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	fffffeff 	.word	0xfffffeff

0800842c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008438:	2317      	movs	r3, #23
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	223c      	movs	r2, #60	; 0x3c
 8008444:	5c9b      	ldrb	r3, [r3, r2]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d101      	bne.n	800844e <HAL_TIM_PWM_ConfigChannel+0x22>
 800844a:	2302      	movs	r3, #2
 800844c:	e0e5      	b.n	800861a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	223c      	movs	r2, #60	; 0x3c
 8008452:	2101      	movs	r1, #1
 8008454:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b14      	cmp	r3, #20
 800845a:	d900      	bls.n	800845e <HAL_TIM_PWM_ConfigChannel+0x32>
 800845c:	e0d1      	b.n	8008602 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	009a      	lsls	r2, r3, #2
 8008462:	4b70      	ldr	r3, [pc, #448]	; (8008624 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008464:	18d3      	adds	r3, r2, r3
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	0011      	movs	r1, r2
 8008472:	0018      	movs	r0, r3
 8008474:	f000 fb3e 	bl	8008af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2108      	movs	r1, #8
 8008484:	430a      	orrs	r2, r1
 8008486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2104      	movs	r1, #4
 8008494:	438a      	bics	r2, r1
 8008496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6999      	ldr	r1, [r3, #24]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	691a      	ldr	r2, [r3, #16]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	619a      	str	r2, [r3, #24]
      break;
 80084aa:	e0af      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	0011      	movs	r1, r2
 80084b4:	0018      	movs	r0, r3
 80084b6:	f000 fba7 	bl	8008c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699a      	ldr	r2, [r3, #24]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2180      	movs	r1, #128	; 0x80
 80084c6:	0109      	lsls	r1, r1, #4
 80084c8:	430a      	orrs	r2, r1
 80084ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4954      	ldr	r1, [pc, #336]	; (8008628 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80084d8:	400a      	ands	r2, r1
 80084da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6999      	ldr	r1, [r3, #24]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	021a      	lsls	r2, r3, #8
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	619a      	str	r2, [r3, #24]
      break;
 80084f0:	e08c      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	0011      	movs	r1, r2
 80084fa:	0018      	movs	r0, r3
 80084fc:	f000 fc08 	bl	8008d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2108      	movs	r1, #8
 800850c:	430a      	orrs	r2, r1
 800850e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69da      	ldr	r2, [r3, #28]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2104      	movs	r1, #4
 800851c:	438a      	bics	r2, r1
 800851e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69d9      	ldr	r1, [r3, #28]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	61da      	str	r2, [r3, #28]
      break;
 8008532:	e06b      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	0011      	movs	r1, r2
 800853c:	0018      	movs	r0, r3
 800853e:	f000 fc6f 	bl	8008e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2180      	movs	r1, #128	; 0x80
 800854e:	0109      	lsls	r1, r1, #4
 8008550:	430a      	orrs	r2, r1
 8008552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69da      	ldr	r2, [r3, #28]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4932      	ldr	r1, [pc, #200]	; (8008628 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008560:	400a      	ands	r2, r1
 8008562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69d9      	ldr	r1, [r3, #28]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	021a      	lsls	r2, r3, #8
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	61da      	str	r2, [r3, #28]
      break;
 8008578:	e048      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	0011      	movs	r1, r2
 8008582:	0018      	movs	r0, r3
 8008584:	f000 fcb6 	bl	8008ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2108      	movs	r1, #8
 8008594:	430a      	orrs	r2, r1
 8008596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2104      	movs	r1, #4
 80085a4:	438a      	bics	r2, r1
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085ba:	e027      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	0011      	movs	r1, r2
 80085c4:	0018      	movs	r0, r3
 80085c6:	f000 fcf5 	bl	8008fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	0109      	lsls	r1, r1, #4
 80085d8:	430a      	orrs	r2, r1
 80085da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4910      	ldr	r1, [pc, #64]	; (8008628 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80085e8:	400a      	ands	r2, r1
 80085ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008600:	e004      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008602:	2317      	movs	r3, #23
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
      break;
 800860a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	223c      	movs	r2, #60	; 0x3c
 8008610:	2100      	movs	r1, #0
 8008612:	5499      	strb	r1, [r3, r2]

  return status;
 8008614:	2317      	movs	r3, #23
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	781b      	ldrb	r3, [r3, #0]
}
 800861a:	0018      	movs	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	b006      	add	sp, #24
 8008620:	bd80      	pop	{r7, pc}
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	0800bcd8 	.word	0x0800bcd8
 8008628:	fffffbff 	.word	0xfffffbff

0800862c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008636:	230f      	movs	r3, #15
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	223c      	movs	r2, #60	; 0x3c
 8008642:	5c9b      	ldrb	r3, [r3, r2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIM_ConfigClockSource+0x20>
 8008648:	2302      	movs	r3, #2
 800864a:	e0bc      	b.n	80087c6 <HAL_TIM_ConfigClockSource+0x19a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	223c      	movs	r2, #60	; 0x3c
 8008650:	2101      	movs	r1, #1
 8008652:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	223d      	movs	r2, #61	; 0x3d
 8008658:	2102      	movs	r1, #2
 800865a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4a5a      	ldr	r2, [pc, #360]	; (80087d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008668:	4013      	ands	r3, r2
 800866a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4a59      	ldr	r2, [pc, #356]	; (80087d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8008670:	4013      	ands	r3, r2
 8008672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	0192      	lsls	r2, r2, #6
 8008684:	4293      	cmp	r3, r2
 8008686:	d040      	beq.n	800870a <HAL_TIM_ConfigClockSource+0xde>
 8008688:	2280      	movs	r2, #128	; 0x80
 800868a:	0192      	lsls	r2, r2, #6
 800868c:	4293      	cmp	r3, r2
 800868e:	d900      	bls.n	8008692 <HAL_TIM_ConfigClockSource+0x66>
 8008690:	e088      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 8008692:	2280      	movs	r2, #128	; 0x80
 8008694:	0152      	lsls	r2, r2, #5
 8008696:	4293      	cmp	r3, r2
 8008698:	d100      	bne.n	800869c <HAL_TIM_ConfigClockSource+0x70>
 800869a:	e088      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x182>
 800869c:	2280      	movs	r2, #128	; 0x80
 800869e:	0152      	lsls	r2, r2, #5
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d900      	bls.n	80086a6 <HAL_TIM_ConfigClockSource+0x7a>
 80086a4:	e07e      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086a6:	2b70      	cmp	r3, #112	; 0x70
 80086a8:	d018      	beq.n	80086dc <HAL_TIM_ConfigClockSource+0xb0>
 80086aa:	d900      	bls.n	80086ae <HAL_TIM_ConfigClockSource+0x82>
 80086ac:	e07a      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086ae:	2b60      	cmp	r3, #96	; 0x60
 80086b0:	d04f      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x126>
 80086b2:	d900      	bls.n	80086b6 <HAL_TIM_ConfigClockSource+0x8a>
 80086b4:	e076      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086b6:	2b50      	cmp	r3, #80	; 0x50
 80086b8:	d03b      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x106>
 80086ba:	d900      	bls.n	80086be <HAL_TIM_ConfigClockSource+0x92>
 80086bc:	e072      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086be:	2b40      	cmp	r3, #64	; 0x40
 80086c0:	d057      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x146>
 80086c2:	d900      	bls.n	80086c6 <HAL_TIM_ConfigClockSource+0x9a>
 80086c4:	e06e      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086c6:	2b30      	cmp	r3, #48	; 0x30
 80086c8:	d063      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x166>
 80086ca:	d86b      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d060      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x166>
 80086d0:	d868      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d05d      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x166>
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d05b      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x166>
 80086da:	e063      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6899      	ldr	r1, [r3, #8]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f000 fd42 	bl	8009174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2277      	movs	r2, #119	; 0x77
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	609a      	str	r2, [r3, #8]
      break;
 8008708:	e052      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6899      	ldr	r1, [r3, #8]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f000 fd2b 	bl	8009174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	01c9      	lsls	r1, r1, #7
 800872c:	430a      	orrs	r2, r1
 800872e:	609a      	str	r2, [r3, #8]
      break;
 8008730:	e03e      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	001a      	movs	r2, r3
 8008740:	f000 fc9c 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2150      	movs	r1, #80	; 0x50
 800874a:	0018      	movs	r0, r3
 800874c:	f000 fcf6 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008750:	e02e      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	001a      	movs	r2, r3
 8008760:	f000 fcba 	bl	80090d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2160      	movs	r1, #96	; 0x60
 800876a:	0018      	movs	r0, r3
 800876c:	f000 fce6 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008770:	e01e      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	001a      	movs	r2, r3
 8008780:	f000 fc7c 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2140      	movs	r1, #64	; 0x40
 800878a:	0018      	movs	r0, r3
 800878c:	f000 fcd6 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008790:	e00e      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	0019      	movs	r1, r3
 800879c:	0010      	movs	r0, r2
 800879e:	f000 fccd 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 80087a2:	e005      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80087a4:	230f      	movs	r3, #15
 80087a6:	18fb      	adds	r3, r7, r3
 80087a8:	2201      	movs	r2, #1
 80087aa:	701a      	strb	r2, [r3, #0]
      break;
 80087ac:	e000      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80087ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	223d      	movs	r2, #61	; 0x3d
 80087b4:	2101      	movs	r1, #1
 80087b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	223c      	movs	r2, #60	; 0x3c
 80087bc:	2100      	movs	r1, #0
 80087be:	5499      	strb	r1, [r3, r2]

  return status;
 80087c0:	230f      	movs	r3, #15
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	781b      	ldrb	r3, [r3, #0]
}
 80087c6:	0018      	movs	r0, r3
 80087c8:	46bd      	mov	sp, r7
 80087ca:	b004      	add	sp, #16
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	ffceff88 	.word	0xffceff88
 80087d4:	ffff00ff 	.word	0xffff00ff

080087d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087e0:	46c0      	nop			; (mov r8, r8)
 80087e2:	46bd      	mov	sp, r7
 80087e4:	b002      	add	sp, #8
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f0:	46c0      	nop			; (mov r8, r8)
 80087f2:	46bd      	mov	sp, r7
 80087f4:	b002      	add	sp, #8
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008800:	46c0      	nop			; (mov r8, r8)
 8008802:	46bd      	mov	sp, r7
 8008804:	b002      	add	sp, #8
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	46bd      	mov	sp, r7
 8008814:	b002      	add	sp, #8
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	46bd      	mov	sp, r7
 8008824:	b002      	add	sp, #8
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008830:	46c0      	nop			; (mov r8, r8)
 8008832:	46bd      	mov	sp, r7
 8008834:	b002      	add	sp, #8
 8008836:	bd80      	pop	{r7, pc}

08008838 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d107      	bne.n	8008860 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	223e      	movs	r2, #62	; 0x3e
 800885a:	2101      	movs	r1, #1
 800885c:	5499      	strb	r1, [r3, r2]
 800885e:	e02a      	b.n	80088b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	429a      	cmp	r2, r3
 8008868:	d107      	bne.n	800887a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2202      	movs	r2, #2
 800886e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	223f      	movs	r2, #63	; 0x3f
 8008874:	2101      	movs	r1, #1
 8008876:	5499      	strb	r1, [r3, r2]
 8008878:	e01d      	b.n	80088b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d107      	bne.n	8008894 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2204      	movs	r2, #4
 8008888:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2240      	movs	r2, #64	; 0x40
 800888e:	2101      	movs	r1, #1
 8008890:	5499      	strb	r1, [r3, r2]
 8008892:	e010      	b.n	80088b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	429a      	cmp	r2, r3
 800889c:	d107      	bne.n	80088ae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2208      	movs	r2, #8
 80088a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2241      	movs	r2, #65	; 0x41
 80088a8:	2101      	movs	r1, #1
 80088aa:	5499      	strb	r1, [r3, r2]
 80088ac:	e003      	b.n	80088b6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	223d      	movs	r2, #61	; 0x3d
 80088b2:	2101      	movs	r1, #1
 80088b4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	0018      	movs	r0, r3
 80088ba:	f7ff ffb5 	bl	8008828 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	771a      	strb	r2, [r3, #28]
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b004      	add	sp, #16
 80088ca:	bd80      	pop	{r7, pc}

080088cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d10b      	bne.n	80088fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d136      	bne.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	223e      	movs	r2, #62	; 0x3e
 80088f6:	2101      	movs	r1, #1
 80088f8:	5499      	strb	r1, [r3, r2]
 80088fa:	e031      	b.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d10b      	bne.n	800891e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2202      	movs	r2, #2
 800890a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d125      	bne.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	223f      	movs	r2, #63	; 0x3f
 8008918:	2101      	movs	r1, #1
 800891a:	5499      	strb	r1, [r3, r2]
 800891c:	e020      	b.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d10b      	bne.n	8008940 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2204      	movs	r2, #4
 800892c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d114      	bne.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2240      	movs	r2, #64	; 0x40
 800893a:	2101      	movs	r1, #1
 800893c:	5499      	strb	r1, [r3, r2]
 800893e:	e00f      	b.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d10a      	bne.n	8008960 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2208      	movs	r2, #8
 800894e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d103      	bne.n	8008960 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2241      	movs	r2, #65	; 0x41
 800895c:	2101      	movs	r1, #1
 800895e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	0018      	movs	r0, r3
 8008964:	f7fc fbd8 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	771a      	strb	r2, [r3, #28]
}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	46bd      	mov	sp, r7
 8008972:	b004      	add	sp, #16
 8008974:	bd80      	pop	{r7, pc}

08008976 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d103      	bne.n	8008996 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	771a      	strb	r2, [r3, #28]
 8008994:	e019      	b.n	80089ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d103      	bne.n	80089a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2202      	movs	r2, #2
 80089a4:	771a      	strb	r2, [r3, #28]
 80089a6:	e010      	b.n	80089ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d103      	bne.n	80089ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2204      	movs	r2, #4
 80089b6:	771a      	strb	r2, [r3, #28]
 80089b8:	e007      	b.n	80089ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d102      	bne.n	80089ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2208      	movs	r2, #8
 80089c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7ff ff1b 	bl	8008808 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b004      	add	sp, #16
 80089de:	bd80      	pop	{r7, pc}

080089e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a38      	ldr	r2, [pc, #224]	; (8008ad4 <TIM_Base_SetConfig+0xf4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00c      	beq.n	8008a12 <TIM_Base_SetConfig+0x32>
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	2380      	movs	r3, #128	; 0x80
 80089fc:	05db      	lsls	r3, r3, #23
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d007      	beq.n	8008a12 <TIM_Base_SetConfig+0x32>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a34      	ldr	r2, [pc, #208]	; (8008ad8 <TIM_Base_SetConfig+0xf8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d003      	beq.n	8008a12 <TIM_Base_SetConfig+0x32>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a33      	ldr	r2, [pc, #204]	; (8008adc <TIM_Base_SetConfig+0xfc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d108      	bne.n	8008a24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2270      	movs	r2, #112	; 0x70
 8008a16:	4393      	bics	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a2b      	ldr	r2, [pc, #172]	; (8008ad4 <TIM_Base_SetConfig+0xf4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d01c      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	2380      	movs	r3, #128	; 0x80
 8008a30:	05db      	lsls	r3, r3, #23
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d017      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a27      	ldr	r2, [pc, #156]	; (8008ad8 <TIM_Base_SetConfig+0xf8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a26      	ldr	r2, [pc, #152]	; (8008adc <TIM_Base_SetConfig+0xfc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00f      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a25      	ldr	r2, [pc, #148]	; (8008ae0 <TIM_Base_SetConfig+0x100>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a24      	ldr	r2, [pc, #144]	; (8008ae4 <TIM_Base_SetConfig+0x104>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a23      	ldr	r2, [pc, #140]	; (8008ae8 <TIM_Base_SetConfig+0x108>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_Base_SetConfig+0x86>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a22      	ldr	r2, [pc, #136]	; (8008aec <TIM_Base_SetConfig+0x10c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d108      	bne.n	8008a78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4a21      	ldr	r2, [pc, #132]	; (8008af0 <TIM_Base_SetConfig+0x110>)
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2280      	movs	r2, #128	; 0x80
 8008a7c:	4393      	bics	r3, r2
 8008a7e:	001a      	movs	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	; (8008ad4 <TIM_Base_SetConfig+0xf4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_Base_SetConfig+0xde>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a0e      	ldr	r2, [pc, #56]	; (8008ae4 <TIM_Base_SetConfig+0x104>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_Base_SetConfig+0xde>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a0d      	ldr	r2, [pc, #52]	; (8008ae8 <TIM_Base_SetConfig+0x108>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_Base_SetConfig+0xde>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a0c      	ldr	r2, [pc, #48]	; (8008aec <TIM_Base_SetConfig+0x10c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d103      	bne.n	8008ac6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	615a      	str	r2, [r3, #20]
}
 8008acc:	46c0      	nop			; (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b004      	add	sp, #16
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40002000 	.word	0x40002000
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800
 8008af0:	fffffcff 	.word	0xfffffcff

08008af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	2201      	movs	r2, #1
 8008b04:	4393      	bics	r3, r2
 8008b06:	001a      	movs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4a32      	ldr	r2, [pc, #200]	; (8008bec <TIM_OC1_SetConfig+0xf8>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4393      	bics	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	4393      	bics	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a28      	ldr	r2, [pc, #160]	; (8008bf0 <TIM_OC1_SetConfig+0xfc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00b      	beq.n	8008b6a <TIM_OC1_SetConfig+0x76>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a27      	ldr	r2, [pc, #156]	; (8008bf4 <TIM_OC1_SetConfig+0x100>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d007      	beq.n	8008b6a <TIM_OC1_SetConfig+0x76>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a26      	ldr	r2, [pc, #152]	; (8008bf8 <TIM_OC1_SetConfig+0x104>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d003      	beq.n	8008b6a <TIM_OC1_SetConfig+0x76>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a25      	ldr	r2, [pc, #148]	; (8008bfc <TIM_OC1_SetConfig+0x108>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d10c      	bne.n	8008b84 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	4393      	bics	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	4393      	bics	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a1a      	ldr	r2, [pc, #104]	; (8008bf0 <TIM_OC1_SetConfig+0xfc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00b      	beq.n	8008ba4 <TIM_OC1_SetConfig+0xb0>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a19      	ldr	r2, [pc, #100]	; (8008bf4 <TIM_OC1_SetConfig+0x100>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d007      	beq.n	8008ba4 <TIM_OC1_SetConfig+0xb0>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <TIM_OC1_SetConfig+0x104>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <TIM_OC1_SetConfig+0xb0>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <TIM_OC1_SetConfig+0x108>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d111      	bne.n	8008bc8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <TIM_OC1_SetConfig+0x10c>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4a15      	ldr	r2, [pc, #84]	; (8008c04 <TIM_OC1_SetConfig+0x110>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	621a      	str	r2, [r3, #32]
}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	46bd      	mov	sp, r7
 8008be6:	b006      	add	sp, #24
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	fffeff8f 	.word	0xfffeff8f
 8008bf0:	40012c00 	.word	0x40012c00
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800
 8008c00:	fffffeff 	.word	0xfffffeff
 8008c04:	fffffdff 	.word	0xfffffdff

08008c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	2210      	movs	r2, #16
 8008c18:	4393      	bics	r3, r2
 8008c1a:	001a      	movs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4a2e      	ldr	r2, [pc, #184]	; (8008cf0 <TIM_OC2_SetConfig+0xe8>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4a2d      	ldr	r2, [pc, #180]	; (8008cf4 <TIM_OC2_SetConfig+0xec>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2220      	movs	r2, #32
 8008c52:	4393      	bics	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a24      	ldr	r2, [pc, #144]	; (8008cf8 <TIM_OC2_SetConfig+0xf0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d10d      	bne.n	8008c86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2280      	movs	r2, #128	; 0x80
 8008c6e:	4393      	bics	r3, r2
 8008c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2240      	movs	r2, #64	; 0x40
 8008c82:	4393      	bics	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <TIM_OC2_SetConfig+0xf0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <TIM_OC2_SetConfig+0x9e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <TIM_OC2_SetConfig+0xf4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <TIM_OC2_SetConfig+0x9e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a19      	ldr	r2, [pc, #100]	; (8008d00 <TIM_OC2_SetConfig+0xf8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_OC2_SetConfig+0x9e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a18      	ldr	r2, [pc, #96]	; (8008d04 <TIM_OC2_SetConfig+0xfc>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d113      	bne.n	8008cce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <TIM_OC2_SetConfig+0x100>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4a16      	ldr	r2, [pc, #88]	; (8008d0c <TIM_OC2_SetConfig+0x104>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	621a      	str	r2, [r3, #32]
}
 8008ce8:	46c0      	nop			; (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b006      	add	sp, #24
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	feff8fff 	.word	0xfeff8fff
 8008cf4:	fffffcff 	.word	0xfffffcff
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800
 8008d08:	fffffbff 	.word	0xfffffbff
 8008d0c:	fffff7ff 	.word	0xfffff7ff

08008d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	4a35      	ldr	r2, [pc, #212]	; (8008df4 <TIM_OC3_SetConfig+0xe4>)
 8008d20:	401a      	ands	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a2f      	ldr	r2, [pc, #188]	; (8008df8 <TIM_OC3_SetConfig+0xe8>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2203      	movs	r2, #3
 8008d44:	4393      	bics	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	4a29      	ldr	r2, [pc, #164]	; (8008dfc <TIM_OC3_SetConfig+0xec>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <TIM_OC3_SetConfig+0xf0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d10d      	bne.n	8008d8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <TIM_OC3_SetConfig+0xf4>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <TIM_OC3_SetConfig+0xf8>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <TIM_OC3_SetConfig+0xf0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00b      	beq.n	8008daa <TIM_OC3_SetConfig+0x9a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <TIM_OC3_SetConfig+0xfc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <TIM_OC3_SetConfig+0x9a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <TIM_OC3_SetConfig+0x100>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_OC3_SetConfig+0x9a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <TIM_OC3_SetConfig+0x104>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d113      	bne.n	8008dd2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4a1a      	ldr	r2, [pc, #104]	; (8008e18 <TIM_OC3_SetConfig+0x108>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <TIM_OC3_SetConfig+0x10c>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	46c0      	nop			; (mov r8, r8)
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b006      	add	sp, #24
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	fffffeff 	.word	0xfffffeff
 8008df8:	fffeff8f 	.word	0xfffeff8f
 8008dfc:	fffffdff 	.word	0xfffffdff
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	fffff7ff 	.word	0xfffff7ff
 8008e08:	fffffbff 	.word	0xfffffbff
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	40014400 	.word	0x40014400
 8008e14:	40014800 	.word	0x40014800
 8008e18:	ffffefff 	.word	0xffffefff
 8008e1c:	ffffdfff 	.word	0xffffdfff

08008e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	4a28      	ldr	r2, [pc, #160]	; (8008ed0 <TIM_OC4_SetConfig+0xb0>)
 8008e30:	401a      	ands	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a22      	ldr	r2, [pc, #136]	; (8008ed4 <TIM_OC4_SetConfig+0xb4>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4a21      	ldr	r2, [pc, #132]	; (8008ed8 <TIM_OC4_SetConfig+0xb8>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <TIM_OC4_SetConfig+0xbc>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	031b      	lsls	r3, r3, #12
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <TIM_OC4_SetConfig+0xc0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00b      	beq.n	8008e98 <TIM_OC4_SetConfig+0x78>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <TIM_OC4_SetConfig+0xc4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <TIM_OC4_SetConfig+0x78>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <TIM_OC4_SetConfig+0xc8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <TIM_OC4_SetConfig+0x78>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a16      	ldr	r2, [pc, #88]	; (8008eec <TIM_OC4_SetConfig+0xcc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d109      	bne.n	8008eac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <TIM_OC4_SetConfig+0xd0>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	019b      	lsls	r3, r3, #6
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	b006      	add	sp, #24
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	ffffefff 	.word	0xffffefff
 8008ed4:	feff8fff 	.word	0xfeff8fff
 8008ed8:	fffffcff 	.word	0xfffffcff
 8008edc:	ffffdfff 	.word	0xffffdfff
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800
 8008ef0:	ffffbfff 	.word	0xffffbfff

08008ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	4a25      	ldr	r2, [pc, #148]	; (8008f98 <TIM_OC5_SetConfig+0xa4>)
 8008f04:	401a      	ands	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <TIM_OC5_SetConfig+0xa8>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <TIM_OC5_SetConfig+0xac>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	041b      	lsls	r3, r3, #16
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a17      	ldr	r2, [pc, #92]	; (8008fa4 <TIM_OC5_SetConfig+0xb0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00b      	beq.n	8008f62 <TIM_OC5_SetConfig+0x6e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a16      	ldr	r2, [pc, #88]	; (8008fa8 <TIM_OC5_SetConfig+0xb4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d007      	beq.n	8008f62 <TIM_OC5_SetConfig+0x6e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a15      	ldr	r2, [pc, #84]	; (8008fac <TIM_OC5_SetConfig+0xb8>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d003      	beq.n	8008f62 <TIM_OC5_SetConfig+0x6e>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a14      	ldr	r2, [pc, #80]	; (8008fb0 <TIM_OC5_SetConfig+0xbc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d109      	bne.n	8008f76 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	4a0c      	ldr	r2, [pc, #48]	; (8008f98 <TIM_OC5_SetConfig+0xa4>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	46c0      	nop			; (mov r8, r8)
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b006      	add	sp, #24
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	fffeffff 	.word	0xfffeffff
 8008f9c:	fffeff8f 	.word	0xfffeff8f
 8008fa0:	fffdffff 	.word	0xfffdffff
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	40014800 	.word	0x40014800

08008fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	4a26      	ldr	r2, [pc, #152]	; (800905c <TIM_OC6_SetConfig+0xa8>)
 8008fc4:	401a      	ands	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a20      	ldr	r2, [pc, #128]	; (8009060 <TIM_OC6_SetConfig+0xac>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	4a1c      	ldr	r2, [pc, #112]	; (8009064 <TIM_OC6_SetConfig+0xb0>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	051b      	lsls	r3, r3, #20
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a18      	ldr	r2, [pc, #96]	; (8009068 <TIM_OC6_SetConfig+0xb4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00b      	beq.n	8009024 <TIM_OC6_SetConfig+0x70>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a17      	ldr	r2, [pc, #92]	; (800906c <TIM_OC6_SetConfig+0xb8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_OC6_SetConfig+0x70>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a16      	ldr	r2, [pc, #88]	; (8009070 <TIM_OC6_SetConfig+0xbc>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_OC6_SetConfig+0x70>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a15      	ldr	r2, [pc, #84]	; (8009074 <TIM_OC6_SetConfig+0xc0>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d109      	bne.n	8009038 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	4a14      	ldr	r2, [pc, #80]	; (8009078 <TIM_OC6_SetConfig+0xc4>)
 8009028:	4013      	ands	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	029b      	lsls	r3, r3, #10
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	46bd      	mov	sp, r7
 8009056:	b006      	add	sp, #24
 8009058:	bd80      	pop	{r7, pc}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	ffefffff 	.word	0xffefffff
 8009060:	feff8fff 	.word	0xfeff8fff
 8009064:	ffdfffff 	.word	0xffdfffff
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800
 8009078:	fffbffff 	.word	0xfffbffff

0800907c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	2201      	movs	r2, #1
 8009094:	4393      	bics	r3, r2
 8009096:	001a      	movs	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	22f0      	movs	r2, #240	; 0xf0
 80090a6:	4393      	bics	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	220a      	movs	r2, #10
 80090b8:	4393      	bics	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	621a      	str	r2, [r3, #32]
}
 80090d0:	46c0      	nop			; (mov r8, r8)
 80090d2:	46bd      	mov	sp, r7
 80090d4:	b006      	add	sp, #24
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	2210      	movs	r2, #16
 80090ea:	4393      	bics	r3, r2
 80090ec:	001a      	movs	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <TIM_TI2_ConfigInputStage+0x60>)
 8009102:	4013      	ands	r3, r2
 8009104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	031b      	lsls	r3, r3, #12
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	22a0      	movs	r2, #160	; 0xa0
 8009114:	4393      	bics	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	46bd      	mov	sp, r7
 8009132:	b006      	add	sp, #24
 8009134:	bd80      	pop	{r7, pc}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	ffff0fff 	.word	0xffff0fff

0800913c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a08      	ldr	r2, [pc, #32]	; (8009170 <TIM_ITRx_SetConfig+0x34>)
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	2207      	movs	r2, #7
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
}
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	46bd      	mov	sp, r7
 800916a:	b004      	add	sp, #16
 800916c:	bd80      	pop	{r7, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	ffcfff8f 	.word	0xffcfff8f

08009174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <TIM_ETR_SetConfig+0x3c>)
 800918c:	4013      	ands	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	021a      	lsls	r2, r3, #8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	431a      	orrs	r2, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4313      	orrs	r3, r2
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	4313      	orrs	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	609a      	str	r2, [r3, #8]
}
 80091a8:	46c0      	nop			; (mov r8, r8)
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b006      	add	sp, #24
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	ffff00ff 	.word	0xffff00ff

080091b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	221f      	movs	r2, #31
 80091c4:	4013      	ands	r3, r2
 80091c6:	2201      	movs	r2, #1
 80091c8:	409a      	lsls	r2, r3
 80091ca:	0013      	movs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	43d2      	mvns	r2, r2
 80091d6:	401a      	ands	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1a      	ldr	r2, [r3, #32]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	211f      	movs	r1, #31
 80091e4:	400b      	ands	r3, r1
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4099      	lsls	r1, r3
 80091ea:	000b      	movs	r3, r1
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	621a      	str	r2, [r3, #32]
}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	46bd      	mov	sp, r7
 80091f6:	b006      	add	sp, #24
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	223c      	movs	r2, #60	; 0x3c
 800920a:	5c9b      	ldrb	r3, [r3, r2]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009210:	2302      	movs	r3, #2
 8009212:	e05a      	b.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	223c      	movs	r2, #60	; 0x3c
 8009218:	2101      	movs	r1, #1
 800921a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	223d      	movs	r2, #61	; 0x3d
 8009220:	2102      	movs	r1, #2
 8009222:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a26      	ldr	r2, [pc, #152]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d108      	bne.n	8009250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4a25      	ldr	r2, [pc, #148]	; (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009242:	4013      	ands	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2270      	movs	r2, #112	; 0x70
 8009254:	4393      	bics	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a19      	ldr	r2, [pc, #100]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d014      	beq.n	800929e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	2380      	movs	r3, #128	; 0x80
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	429a      	cmp	r2, r3
 800927e:	d00e      	beq.n	800929e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a15      	ldr	r2, [pc, #84]	; (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a12      	ldr	r2, [pc, #72]	; (80092e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d10c      	bne.n	80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2280      	movs	r2, #128	; 0x80
 80092a2:	4393      	bics	r3, r2
 80092a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	223d      	movs	r2, #61	; 0x3d
 80092bc:	2101      	movs	r1, #1
 80092be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	223c      	movs	r2, #60	; 0x3c
 80092c4:	2100      	movs	r1, #0
 80092c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	0018      	movs	r0, r3
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b004      	add	sp, #16
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	40012c00 	.word	0x40012c00
 80092d8:	ff0fffff 	.word	0xff0fffff
 80092dc:	40000400 	.word	0x40000400
 80092e0:	40000800 	.word	0x40000800
 80092e4:	40014000 	.word	0x40014000

080092e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	223c      	movs	r2, #60	; 0x3c
 80092fa:	5c9b      	ldrb	r3, [r3, r2]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009300:	2302      	movs	r3, #2
 8009302:	e079      	b.n	80093f8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	223c      	movs	r2, #60	; 0x3c
 8009308:	2101      	movs	r1, #1
 800930a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	22ff      	movs	r2, #255	; 0xff
 8009310:	4393      	bics	r3, r2
 8009312:	001a      	movs	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a38      	ldr	r2, [pc, #224]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8009320:	401a      	ands	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a35      	ldr	r2, [pc, #212]	; (8009404 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800932e:	401a      	ands	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a33      	ldr	r2, [pc, #204]	; (8009408 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800933c:	401a      	ands	r2, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4a30      	ldr	r2, [pc, #192]	; (800940c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800934a:	401a      	ands	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4a2e      	ldr	r2, [pc, #184]	; (8009410 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009358:	401a      	ands	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a2b      	ldr	r2, [pc, #172]	; (8009414 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009366:	401a      	ands	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a29      	ldr	r2, [pc, #164]	; (8009418 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009374:	401a      	ands	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a25      	ldr	r2, [pc, #148]	; (800941c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d106      	bne.n	8009398 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4a24      	ldr	r2, [pc, #144]	; (8009420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800938e:	401a      	ands	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a1f      	ldr	r2, [pc, #124]	; (800941c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d121      	bne.n	80093e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80093a6:	401a      	ands	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	051b      	lsls	r3, r3, #20
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80093b6:	401a      	ands	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	; (800942c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80093c4:	401a      	ands	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a12      	ldr	r2, [pc, #72]	; (800941c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d106      	bne.n	80093e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4a15      	ldr	r2, [pc, #84]	; (8009430 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80093dc:	401a      	ands	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	223c      	movs	r2, #60	; 0x3c
 80093f2:	2100      	movs	r1, #0
 80093f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b004      	add	sp, #16
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	fffffcff 	.word	0xfffffcff
 8009404:	fffffbff 	.word	0xfffffbff
 8009408:	fffff7ff 	.word	0xfffff7ff
 800940c:	ffffefff 	.word	0xffffefff
 8009410:	ffffdfff 	.word	0xffffdfff
 8009414:	ffffbfff 	.word	0xffffbfff
 8009418:	fff0ffff 	.word	0xfff0ffff
 800941c:	40012c00 	.word	0x40012c00
 8009420:	efffffff 	.word	0xefffffff
 8009424:	ff0fffff 	.word	0xff0fffff
 8009428:	feffffff 	.word	0xfeffffff
 800942c:	fdffffff 	.word	0xfdffffff
 8009430:	dfffffff 	.word	0xdfffffff

08009434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800943c:	46c0      	nop			; (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b002      	add	sp, #8
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800944c:	46c0      	nop			; (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	b002      	add	sp, #8
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800945c:	46c0      	nop			; (mov r8, r8)
 800945e:	46bd      	mov	sp, r7
 8009460:	b002      	add	sp, #8
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e046      	b.n	8009504 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2288      	movs	r2, #136	; 0x88
 800947a:	589b      	ldr	r3, [r3, r2]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d107      	bne.n	8009490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2284      	movs	r2, #132	; 0x84
 8009484:	2100      	movs	r1, #0
 8009486:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	0018      	movs	r0, r3
 800948c:	f7fb fa00 	bl	8004890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2288      	movs	r2, #136	; 0x88
 8009494:	2124      	movs	r1, #36	; 0x24
 8009496:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2101      	movs	r1, #1
 80094a4:	438a      	bics	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	0018      	movs	r0, r3
 80094ac:	f000 fb72 	bl	8009b94 <UART_SetConfig>
 80094b0:	0003      	movs	r3, r0
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e024      	b.n	8009504 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 febb 	bl	800a240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	490d      	ldr	r1, [pc, #52]	; (800950c <HAL_UART_Init+0xa8>)
 80094d6:	400a      	ands	r2, r1
 80094d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	212a      	movs	r1, #42	; 0x2a
 80094e6:	438a      	bics	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2101      	movs	r1, #1
 80094f6:	430a      	orrs	r2, r1
 80094f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	0018      	movs	r0, r3
 80094fe:	f000 ff53 	bl	800a3a8 <UART_CheckIdleState>
 8009502:	0003      	movs	r3, r0
}
 8009504:	0018      	movs	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	b002      	add	sp, #8
 800950a:	bd80      	pop	{r7, pc}
 800950c:	ffffb7ff 	.word	0xffffb7ff

08009510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009510:	b5b0      	push	{r4, r5, r7, lr}
 8009512:	b0aa      	sub	sp, #168	; 0xa8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	22a4      	movs	r2, #164	; 0xa4
 8009520:	18b9      	adds	r1, r7, r2
 8009522:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	20a0      	movs	r0, #160	; 0xa0
 800952c:	1839      	adds	r1, r7, r0
 800952e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	249c      	movs	r4, #156	; 0x9c
 8009538:	1939      	adds	r1, r7, r4
 800953a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800953c:	0011      	movs	r1, r2
 800953e:	18bb      	adds	r3, r7, r2
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4aa2      	ldr	r2, [pc, #648]	; (80097cc <HAL_UART_IRQHandler+0x2bc>)
 8009544:	4013      	ands	r3, r2
 8009546:	2298      	movs	r2, #152	; 0x98
 8009548:	18bd      	adds	r5, r7, r2
 800954a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800954c:	18bb      	adds	r3, r7, r2
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11a      	bne.n	800958a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009554:	187b      	adds	r3, r7, r1
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2220      	movs	r2, #32
 800955a:	4013      	ands	r3, r2
 800955c:	d015      	beq.n	800958a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800955e:	183b      	adds	r3, r7, r0
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2220      	movs	r2, #32
 8009564:	4013      	ands	r3, r2
 8009566:	d105      	bne.n	8009574 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009568:	193b      	adds	r3, r7, r4
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	055b      	lsls	r3, r3, #21
 8009570:	4013      	ands	r3, r2
 8009572:	d00a      	beq.n	800958a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009578:	2b00      	cmp	r3, #0
 800957a:	d100      	bne.n	800957e <HAL_UART_IRQHandler+0x6e>
 800957c:	e2dc      	b.n	8009b38 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	0010      	movs	r0, r2
 8009586:	4798      	blx	r3
      }
      return;
 8009588:	e2d6      	b.n	8009b38 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800958a:	2398      	movs	r3, #152	; 0x98
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d100      	bne.n	8009596 <HAL_UART_IRQHandler+0x86>
 8009594:	e122      	b.n	80097dc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009596:	239c      	movs	r3, #156	; 0x9c
 8009598:	18fb      	adds	r3, r7, r3
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a8c      	ldr	r2, [pc, #560]	; (80097d0 <HAL_UART_IRQHandler+0x2c0>)
 800959e:	4013      	ands	r3, r2
 80095a0:	d106      	bne.n	80095b0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095a2:	23a0      	movs	r3, #160	; 0xa0
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a8a      	ldr	r2, [pc, #552]	; (80097d4 <HAL_UART_IRQHandler+0x2c4>)
 80095aa:	4013      	ands	r3, r2
 80095ac:	d100      	bne.n	80095b0 <HAL_UART_IRQHandler+0xa0>
 80095ae:	e115      	b.n	80097dc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095b0:	23a4      	movs	r3, #164	; 0xa4
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	4013      	ands	r3, r2
 80095ba:	d012      	beq.n	80095e2 <HAL_UART_IRQHandler+0xd2>
 80095bc:	23a0      	movs	r3, #160	; 0xa0
 80095be:	18fb      	adds	r3, r7, r3
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	2380      	movs	r3, #128	; 0x80
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4013      	ands	r3, r2
 80095c8:	d00b      	beq.n	80095e2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2201      	movs	r2, #1
 80095d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2290      	movs	r2, #144	; 0x90
 80095d6:	589b      	ldr	r3, [r3, r2]
 80095d8:	2201      	movs	r2, #1
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2190      	movs	r1, #144	; 0x90
 80095e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095e2:	23a4      	movs	r3, #164	; 0xa4
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2202      	movs	r2, #2
 80095ea:	4013      	ands	r3, r2
 80095ec:	d011      	beq.n	8009612 <HAL_UART_IRQHandler+0x102>
 80095ee:	239c      	movs	r3, #156	; 0x9c
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	4013      	ands	r3, r2
 80095f8:	d00b      	beq.n	8009612 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2202      	movs	r2, #2
 8009600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2290      	movs	r2, #144	; 0x90
 8009606:	589b      	ldr	r3, [r3, r2]
 8009608:	2204      	movs	r2, #4
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2190      	movs	r1, #144	; 0x90
 8009610:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009612:	23a4      	movs	r3, #164	; 0xa4
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2204      	movs	r2, #4
 800961a:	4013      	ands	r3, r2
 800961c:	d011      	beq.n	8009642 <HAL_UART_IRQHandler+0x132>
 800961e:	239c      	movs	r3, #156	; 0x9c
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2201      	movs	r2, #1
 8009626:	4013      	ands	r3, r2
 8009628:	d00b      	beq.n	8009642 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2204      	movs	r2, #4
 8009630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2290      	movs	r2, #144	; 0x90
 8009636:	589b      	ldr	r3, [r3, r2]
 8009638:	2202      	movs	r2, #2
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2190      	movs	r1, #144	; 0x90
 8009640:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009642:	23a4      	movs	r3, #164	; 0xa4
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2208      	movs	r2, #8
 800964a:	4013      	ands	r3, r2
 800964c:	d017      	beq.n	800967e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800964e:	23a0      	movs	r3, #160	; 0xa0
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2220      	movs	r2, #32
 8009656:	4013      	ands	r3, r2
 8009658:	d105      	bne.n	8009666 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800965a:	239c      	movs	r3, #156	; 0x9c
 800965c:	18fb      	adds	r3, r7, r3
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a5b      	ldr	r2, [pc, #364]	; (80097d0 <HAL_UART_IRQHandler+0x2c0>)
 8009662:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009664:	d00b      	beq.n	800967e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2208      	movs	r2, #8
 800966c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2290      	movs	r2, #144	; 0x90
 8009672:	589b      	ldr	r3, [r3, r2]
 8009674:	2208      	movs	r2, #8
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2190      	movs	r1, #144	; 0x90
 800967c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800967e:	23a4      	movs	r3, #164	; 0xa4
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	4013      	ands	r3, r2
 800968a:	d013      	beq.n	80096b4 <HAL_UART_IRQHandler+0x1a4>
 800968c:	23a0      	movs	r3, #160	; 0xa0
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	2380      	movs	r3, #128	; 0x80
 8009694:	04db      	lsls	r3, r3, #19
 8009696:	4013      	ands	r3, r2
 8009698:	d00c      	beq.n	80096b4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2280      	movs	r2, #128	; 0x80
 80096a0:	0112      	lsls	r2, r2, #4
 80096a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2290      	movs	r2, #144	; 0x90
 80096a8:	589b      	ldr	r3, [r3, r2]
 80096aa:	2220      	movs	r2, #32
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2190      	movs	r1, #144	; 0x90
 80096b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2290      	movs	r2, #144	; 0x90
 80096b8:	589b      	ldr	r3, [r3, r2]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d100      	bne.n	80096c0 <HAL_UART_IRQHandler+0x1b0>
 80096be:	e23d      	b.n	8009b3c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096c0:	23a4      	movs	r3, #164	; 0xa4
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2220      	movs	r2, #32
 80096c8:	4013      	ands	r3, r2
 80096ca:	d015      	beq.n	80096f8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096cc:	23a0      	movs	r3, #160	; 0xa0
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2220      	movs	r2, #32
 80096d4:	4013      	ands	r3, r2
 80096d6:	d106      	bne.n	80096e6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096d8:	239c      	movs	r3, #156	; 0x9c
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	2380      	movs	r3, #128	; 0x80
 80096e0:	055b      	lsls	r3, r3, #21
 80096e2:	4013      	ands	r3, r2
 80096e4:	d008      	beq.n	80096f8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	0010      	movs	r0, r2
 80096f6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2290      	movs	r2, #144	; 0x90
 80096fc:	589b      	ldr	r3, [r3, r2]
 80096fe:	2194      	movs	r1, #148	; 0x94
 8009700:	187a      	adds	r2, r7, r1
 8009702:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	4013      	ands	r3, r2
 800970e:	2b40      	cmp	r3, #64	; 0x40
 8009710:	d004      	beq.n	800971c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009712:	187b      	adds	r3, r7, r1
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2228      	movs	r2, #40	; 0x28
 8009718:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800971a:	d04c      	beq.n	80097b6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	0018      	movs	r0, r3
 8009720:	f000 ff58 	bl	800a5d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2240      	movs	r2, #64	; 0x40
 800972c:	4013      	ands	r3, r2
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d13c      	bne.n	80097ac <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009732:	f3ef 8310 	mrs	r3, PRIMASK
 8009736:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800973a:	2090      	movs	r0, #144	; 0x90
 800973c:	183a      	adds	r2, r7, r0
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	2301      	movs	r3, #1
 8009742:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009746:	f383 8810 	msr	PRIMASK, r3
}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2140      	movs	r1, #64	; 0x40
 8009758:	438a      	bics	r2, r1
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	183b      	adds	r3, r7, r0
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009764:	f383 8810 	msr	PRIMASK, r3
}
 8009768:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2280      	movs	r2, #128	; 0x80
 800976e:	589b      	ldr	r3, [r3, r2]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d016      	beq.n	80097a2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	589b      	ldr	r3, [r3, r2]
 800977a:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <HAL_UART_IRQHandler+0x2c8>)
 800977c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2280      	movs	r2, #128	; 0x80
 8009782:	589b      	ldr	r3, [r3, r2]
 8009784:	0018      	movs	r0, r3
 8009786:	f7fc f833 	bl	80057f0 <HAL_DMA_Abort_IT>
 800978a:	1e03      	subs	r3, r0, #0
 800978c:	d01c      	beq.n	80097c8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2280      	movs	r2, #128	; 0x80
 8009792:	589b      	ldr	r3, [r3, r2]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	5852      	ldr	r2, [r2, r1]
 800979c:	0010      	movs	r0, r2
 800979e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a0:	e012      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	0018      	movs	r0, r3
 80097a6:	f000 f9e1 	bl	8009b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097aa:	e00d      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	0018      	movs	r0, r3
 80097b0:	f000 f9dc 	bl	8009b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b4:	e008      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	0018      	movs	r0, r3
 80097ba:	f000 f9d7 	bl	8009b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2290      	movs	r2, #144	; 0x90
 80097c2:	2100      	movs	r1, #0
 80097c4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80097c6:	e1b9      	b.n	8009b3c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	46c0      	nop			; (mov r8, r8)
    return;
 80097ca:	e1b7      	b.n	8009b3c <HAL_UART_IRQHandler+0x62c>
 80097cc:	0000080f 	.word	0x0000080f
 80097d0:	10000001 	.word	0x10000001
 80097d4:	04000120 	.word	0x04000120
 80097d8:	0800a6a1 	.word	0x0800a6a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d000      	beq.n	80097e6 <HAL_UART_IRQHandler+0x2d6>
 80097e4:	e13e      	b.n	8009a64 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097e6:	23a4      	movs	r3, #164	; 0xa4
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2210      	movs	r2, #16
 80097ee:	4013      	ands	r3, r2
 80097f0:	d100      	bne.n	80097f4 <HAL_UART_IRQHandler+0x2e4>
 80097f2:	e137      	b.n	8009a64 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097f4:	23a0      	movs	r3, #160	; 0xa0
 80097f6:	18fb      	adds	r3, r7, r3
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2210      	movs	r2, #16
 80097fc:	4013      	ands	r3, r2
 80097fe:	d100      	bne.n	8009802 <HAL_UART_IRQHandler+0x2f2>
 8009800:	e130      	b.n	8009a64 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2210      	movs	r2, #16
 8009808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2240      	movs	r2, #64	; 0x40
 8009812:	4013      	ands	r3, r2
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	d000      	beq.n	800981a <HAL_UART_IRQHandler+0x30a>
 8009818:	e0a4      	b.n	8009964 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2280      	movs	r2, #128	; 0x80
 800981e:	589b      	ldr	r3, [r3, r2]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	217e      	movs	r1, #126	; 0x7e
 8009826:	187b      	adds	r3, r7, r1
 8009828:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800982a:	187b      	adds	r3, r7, r1
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d100      	bne.n	8009834 <HAL_UART_IRQHandler+0x324>
 8009832:	e185      	b.n	8009b40 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	225c      	movs	r2, #92	; 0x5c
 8009838:	5a9b      	ldrh	r3, [r3, r2]
 800983a:	187a      	adds	r2, r7, r1
 800983c:	8812      	ldrh	r2, [r2, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d300      	bcc.n	8009844 <HAL_UART_IRQHandler+0x334>
 8009842:	e17d      	b.n	8009b40 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	187a      	adds	r2, r7, r1
 8009848:	215e      	movs	r1, #94	; 0x5e
 800984a:	8812      	ldrh	r2, [r2, #0]
 800984c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2280      	movs	r2, #128	; 0x80
 8009852:	589b      	ldr	r3, [r3, r2]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2220      	movs	r2, #32
 800985a:	4013      	ands	r3, r2
 800985c:	d170      	bne.n	8009940 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985e:	f3ef 8310 	mrs	r3, PRIMASK
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009866:	67bb      	str	r3, [r7, #120]	; 0x78
 8009868:	2301      	movs	r3, #1
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	f383 8810 	msr	PRIMASK, r3
}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	49b4      	ldr	r1, [pc, #720]	; (8009b50 <HAL_UART_IRQHandler+0x640>)
 8009880:	400a      	ands	r2, r1
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009886:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009890:	f3ef 8310 	mrs	r3, PRIMASK
 8009894:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009898:	677b      	str	r3, [r7, #116]	; 0x74
 800989a:	2301      	movs	r3, #1
 800989c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a0:	f383 8810 	msr	PRIMASK, r3
}
 80098a4:	46c0      	nop			; (mov r8, r8)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2101      	movs	r1, #1
 80098b2:	438a      	bics	r2, r1
 80098b4:	609a      	str	r2, [r3, #8]
 80098b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098bc:	f383 8810 	msr	PRIMASK, r3
}
 80098c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098c2:	f3ef 8310 	mrs	r3, PRIMASK
 80098c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80098c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ca:	673b      	str	r3, [r7, #112]	; 0x70
 80098cc:	2301      	movs	r3, #1
 80098ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d2:	f383 8810 	msr	PRIMASK, r3
}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2140      	movs	r1, #64	; 0x40
 80098e4:	438a      	bics	r2, r1
 80098e6:	609a      	str	r2, [r3, #8]
 80098e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098ea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ee:	f383 8810 	msr	PRIMASK, r3
}
 80098f2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	228c      	movs	r2, #140	; 0x8c
 80098f8:	2120      	movs	r1, #32
 80098fa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009902:	f3ef 8310 	mrs	r3, PRIMASK
 8009906:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009908:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800990a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800990c:	2301      	movs	r3, #1
 800990e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009912:	f383 8810 	msr	PRIMASK, r3
}
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2110      	movs	r1, #16
 8009924:	438a      	bics	r2, r1
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800992c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992e:	f383 8810 	msr	PRIMASK, r3
}
 8009932:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2280      	movs	r2, #128	; 0x80
 8009938:	589b      	ldr	r3, [r3, r2]
 800993a:	0018      	movs	r0, r3
 800993c:	f7fb fef8 	bl	8005730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	225c      	movs	r2, #92	; 0x5c
 800994a:	5a9a      	ldrh	r2, [r3, r2]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	215e      	movs	r1, #94	; 0x5e
 8009950:	5a5b      	ldrh	r3, [r3, r1]
 8009952:	b29b      	uxth	r3, r3
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	0011      	movs	r1, r2
 800995c:	0018      	movs	r0, r3
 800995e:	f000 f90d 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009962:	e0ed      	b.n	8009b40 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	225c      	movs	r2, #92	; 0x5c
 8009968:	5a99      	ldrh	r1, [r3, r2]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	225e      	movs	r2, #94	; 0x5e
 800996e:	5a9b      	ldrh	r3, [r3, r2]
 8009970:	b29a      	uxth	r2, r3
 8009972:	208e      	movs	r0, #142	; 0x8e
 8009974:	183b      	adds	r3, r7, r0
 8009976:	1a8a      	subs	r2, r1, r2
 8009978:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	225e      	movs	r2, #94	; 0x5e
 800997e:	5a9b      	ldrh	r3, [r3, r2]
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d100      	bne.n	8009988 <HAL_UART_IRQHandler+0x478>
 8009986:	e0dd      	b.n	8009b44 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8009988:	183b      	adds	r3, r7, r0
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d100      	bne.n	8009992 <HAL_UART_IRQHandler+0x482>
 8009990:	e0d8      	b.n	8009b44 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009992:	f3ef 8310 	mrs	r3, PRIMASK
 8009996:	60fb      	str	r3, [r7, #12]
  return(result);
 8009998:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800999a:	2488      	movs	r4, #136	; 0x88
 800999c:	193a      	adds	r2, r7, r4
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	2301      	movs	r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f383 8810 	msr	PRIMASK, r3
}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4967      	ldr	r1, [pc, #412]	; (8009b54 <HAL_UART_IRQHandler+0x644>)
 80099b8:	400a      	ands	r2, r1
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f383 8810 	msr	PRIMASK, r3
}
 80099c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ca:	f3ef 8310 	mrs	r3, PRIMASK
 80099ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80099d0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d2:	2484      	movs	r4, #132	; 0x84
 80099d4:	193a      	adds	r2, r7, r4
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	2301      	movs	r3, #1
 80099da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f383 8810 	msr	PRIMASK, r3
}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	495a      	ldr	r1, [pc, #360]	; (8009b58 <HAL_UART_IRQHandler+0x648>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	609a      	str	r2, [r3, #8]
 80099f4:	193b      	adds	r3, r7, r4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	f383 8810 	msr	PRIMASK, r3
}
 8009a00:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	228c      	movs	r2, #140	; 0x8c
 8009a06:	2120      	movs	r1, #32
 8009a08:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a16:	f3ef 8310 	mrs	r3, PRIMASK
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1e:	2480      	movs	r4, #128	; 0x80
 8009a20:	193a      	adds	r2, r7, r4
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	2301      	movs	r3, #1
 8009a26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f383 8810 	msr	PRIMASK, r3
}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2110      	movs	r1, #16
 8009a3c:	438a      	bics	r2, r1
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	193b      	adds	r3, r7, r4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	f383 8810 	msr	PRIMASK, r3
}
 8009a4c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a54:	183b      	adds	r3, r7, r0
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	0011      	movs	r1, r2
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f000 f88d 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a62:	e06f      	b.n	8009b44 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a64:	23a4      	movs	r3, #164	; 0xa4
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	2380      	movs	r3, #128	; 0x80
 8009a6c:	035b      	lsls	r3, r3, #13
 8009a6e:	4013      	ands	r3, r2
 8009a70:	d010      	beq.n	8009a94 <HAL_UART_IRQHandler+0x584>
 8009a72:	239c      	movs	r3, #156	; 0x9c
 8009a74:	18fb      	adds	r3, r7, r3
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	03db      	lsls	r3, r3, #15
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2280      	movs	r2, #128	; 0x80
 8009a86:	0352      	lsls	r2, r2, #13
 8009a88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f000 fe4a 	bl	800a726 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a92:	e05a      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a94:	23a4      	movs	r3, #164	; 0xa4
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2280      	movs	r2, #128	; 0x80
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	d016      	beq.n	8009ace <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009aa0:	23a0      	movs	r3, #160	; 0xa0
 8009aa2:	18fb      	adds	r3, r7, r3
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2280      	movs	r2, #128	; 0x80
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d106      	bne.n	8009aba <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009aac:	239c      	movs	r3, #156	; 0x9c
 8009aae:	18fb      	adds	r3, r7, r3
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	041b      	lsls	r3, r3, #16
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	d009      	beq.n	8009ace <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d042      	beq.n	8009b48 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	0010      	movs	r0, r2
 8009aca:	4798      	blx	r3
    }
    return;
 8009acc:	e03c      	b.n	8009b48 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ace:	23a4      	movs	r3, #164	; 0xa4
 8009ad0:	18fb      	adds	r3, r7, r3
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2240      	movs	r2, #64	; 0x40
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	d00a      	beq.n	8009af0 <HAL_UART_IRQHandler+0x5e0>
 8009ada:	23a0      	movs	r3, #160	; 0xa0
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2240      	movs	r2, #64	; 0x40
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	d004      	beq.n	8009af0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f000 fdf0 	bl	800a6ce <UART_EndTransmit_IT>
    return;
 8009aee:	e02c      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009af0:	23a4      	movs	r3, #164	; 0xa4
 8009af2:	18fb      	adds	r3, r7, r3
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	2380      	movs	r3, #128	; 0x80
 8009af8:	041b      	lsls	r3, r3, #16
 8009afa:	4013      	ands	r3, r2
 8009afc:	d00b      	beq.n	8009b16 <HAL_UART_IRQHandler+0x606>
 8009afe:	23a0      	movs	r3, #160	; 0xa0
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	05db      	lsls	r3, r3, #23
 8009b08:	4013      	ands	r3, r2
 8009b0a:	d004      	beq.n	8009b16 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f000 fe19 	bl	800a746 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b14:	e019      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b16:	23a4      	movs	r3, #164	; 0xa4
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	045b      	lsls	r3, r3, #17
 8009b20:	4013      	ands	r3, r2
 8009b22:	d012      	beq.n	8009b4a <HAL_UART_IRQHandler+0x63a>
 8009b24:	23a0      	movs	r3, #160	; 0xa0
 8009b26:	18fb      	adds	r3, r7, r3
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da0d      	bge.n	8009b4a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	0018      	movs	r0, r3
 8009b32:	f000 fe00 	bl	800a736 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b36:	e008      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
      return;
 8009b38:	46c0      	nop			; (mov r8, r8)
 8009b3a:	e006      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
    return;
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	e004      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
      return;
 8009b40:	46c0      	nop			; (mov r8, r8)
 8009b42:	e002      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
      return;
 8009b44:	46c0      	nop			; (mov r8, r8)
 8009b46:	e000      	b.n	8009b4a <HAL_UART_IRQHandler+0x63a>
    return;
 8009b48:	46c0      	nop			; (mov r8, r8)
  }
}
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	b02a      	add	sp, #168	; 0xa8
 8009b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b50:	fffffeff 	.word	0xfffffeff
 8009b54:	fffffedf 	.word	0xfffffedf
 8009b58:	effffffe 	.word	0xeffffffe

08009b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b64:	46c0      	nop			; (mov r8, r8)
 8009b66:	46bd      	mov	sp, r7
 8009b68:	b002      	add	sp, #8
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b002      	add	sp, #8
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	000a      	movs	r2, r1
 8009b86:	1cbb      	adds	r3, r7, #2
 8009b88:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	b002      	add	sp, #8
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b94:	b5b0      	push	{r4, r5, r7, lr}
 8009b96:	b090      	sub	sp, #64	; 0x40
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b9c:	231a      	movs	r3, #26
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	189b      	adds	r3, r3, r2
 8009ba2:	19db      	adds	r3, r3, r7
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4ac1      	ldr	r2, [pc, #772]	; (8009ecc <UART_SetConfig+0x338>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	0019      	movs	r1, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	4abc      	ldr	r2, [pc, #752]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009bde:	4013      	ands	r3, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	68d9      	ldr	r1, [r3, #12]
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	0003      	movs	r3, r0
 8009bec:	430b      	orrs	r3, r1
 8009bee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4ab6      	ldr	r2, [pc, #728]	; (8009ed4 <UART_SetConfig+0x340>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <UART_SetConfig+0x80>
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4ab4      	ldr	r2, [pc, #720]	; (8009ed8 <UART_SetConfig+0x344>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d004      	beq.n	8009c14 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c10:	4313      	orrs	r3, r2
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	4ab0      	ldr	r2, [pc, #704]	; (8009edc <UART_SetConfig+0x348>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	0019      	movs	r1, r3
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	430b      	orrs	r3, r1
 8009c28:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	220f      	movs	r2, #15
 8009c32:	4393      	bics	r3, r2
 8009c34:	0018      	movs	r0, r3
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	0003      	movs	r3, r0
 8009c40:	430b      	orrs	r3, r1
 8009c42:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4aa5      	ldr	r2, [pc, #660]	; (8009ee0 <UART_SetConfig+0x34c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d131      	bne.n	8009cb2 <UART_SetConfig+0x11e>
 8009c4e:	4ba5      	ldr	r3, [pc, #660]	; (8009ee4 <UART_SetConfig+0x350>)
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	2203      	movs	r2, #3
 8009c54:	4013      	ands	r3, r2
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d01d      	beq.n	8009c96 <UART_SetConfig+0x102>
 8009c5a:	d823      	bhi.n	8009ca4 <UART_SetConfig+0x110>
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d00c      	beq.n	8009c7a <UART_SetConfig+0xe6>
 8009c60:	d820      	bhi.n	8009ca4 <UART_SetConfig+0x110>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <UART_SetConfig+0xd8>
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d00e      	beq.n	8009c88 <UART_SetConfig+0xf4>
 8009c6a:	e01b      	b.n	8009ca4 <UART_SetConfig+0x110>
 8009c6c:	231b      	movs	r3, #27
 8009c6e:	2220      	movs	r2, #32
 8009c70:	189b      	adds	r3, r3, r2
 8009c72:	19db      	adds	r3, r3, r7
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
 8009c78:	e154      	b.n	8009f24 <UART_SetConfig+0x390>
 8009c7a:	231b      	movs	r3, #27
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	19db      	adds	r3, r3, r7
 8009c82:	2202      	movs	r2, #2
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e14d      	b.n	8009f24 <UART_SetConfig+0x390>
 8009c88:	231b      	movs	r3, #27
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	189b      	adds	r3, r3, r2
 8009c8e:	19db      	adds	r3, r3, r7
 8009c90:	2204      	movs	r2, #4
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	e146      	b.n	8009f24 <UART_SetConfig+0x390>
 8009c96:	231b      	movs	r3, #27
 8009c98:	2220      	movs	r2, #32
 8009c9a:	189b      	adds	r3, r3, r2
 8009c9c:	19db      	adds	r3, r3, r7
 8009c9e:	2208      	movs	r2, #8
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	e13f      	b.n	8009f24 <UART_SetConfig+0x390>
 8009ca4:	231b      	movs	r3, #27
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	19db      	adds	r3, r3, r7
 8009cac:	2210      	movs	r2, #16
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	e138      	b.n	8009f24 <UART_SetConfig+0x390>
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a8c      	ldr	r2, [pc, #560]	; (8009ee8 <UART_SetConfig+0x354>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d131      	bne.n	8009d20 <UART_SetConfig+0x18c>
 8009cbc:	4b89      	ldr	r3, [pc, #548]	; (8009ee4 <UART_SetConfig+0x350>)
 8009cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc0:	220c      	movs	r2, #12
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	2b0c      	cmp	r3, #12
 8009cc6:	d01d      	beq.n	8009d04 <UART_SetConfig+0x170>
 8009cc8:	d823      	bhi.n	8009d12 <UART_SetConfig+0x17e>
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d00c      	beq.n	8009ce8 <UART_SetConfig+0x154>
 8009cce:	d820      	bhi.n	8009d12 <UART_SetConfig+0x17e>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <UART_SetConfig+0x146>
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d00e      	beq.n	8009cf6 <UART_SetConfig+0x162>
 8009cd8:	e01b      	b.n	8009d12 <UART_SetConfig+0x17e>
 8009cda:	231b      	movs	r3, #27
 8009cdc:	2220      	movs	r2, #32
 8009cde:	189b      	adds	r3, r3, r2
 8009ce0:	19db      	adds	r3, r3, r7
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	e11d      	b.n	8009f24 <UART_SetConfig+0x390>
 8009ce8:	231b      	movs	r3, #27
 8009cea:	2220      	movs	r2, #32
 8009cec:	189b      	adds	r3, r3, r2
 8009cee:	19db      	adds	r3, r3, r7
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	e116      	b.n	8009f24 <UART_SetConfig+0x390>
 8009cf6:	231b      	movs	r3, #27
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	19db      	adds	r3, r3, r7
 8009cfe:	2204      	movs	r2, #4
 8009d00:	701a      	strb	r2, [r3, #0]
 8009d02:	e10f      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d04:	231b      	movs	r3, #27
 8009d06:	2220      	movs	r2, #32
 8009d08:	189b      	adds	r3, r3, r2
 8009d0a:	19db      	adds	r3, r3, r7
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e108      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d12:	231b      	movs	r3, #27
 8009d14:	2220      	movs	r2, #32
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	19db      	adds	r3, r3, r7
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	e101      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a71      	ldr	r2, [pc, #452]	; (8009eec <UART_SetConfig+0x358>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d131      	bne.n	8009d8e <UART_SetConfig+0x1fa>
 8009d2a:	4b6e      	ldr	r3, [pc, #440]	; (8009ee4 <UART_SetConfig+0x350>)
 8009d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2e:	2230      	movs	r2, #48	; 0x30
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b30      	cmp	r3, #48	; 0x30
 8009d34:	d01d      	beq.n	8009d72 <UART_SetConfig+0x1de>
 8009d36:	d823      	bhi.n	8009d80 <UART_SetConfig+0x1ec>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d00c      	beq.n	8009d56 <UART_SetConfig+0x1c2>
 8009d3c:	d820      	bhi.n	8009d80 <UART_SetConfig+0x1ec>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <UART_SetConfig+0x1b4>
 8009d42:	2b10      	cmp	r3, #16
 8009d44:	d00e      	beq.n	8009d64 <UART_SetConfig+0x1d0>
 8009d46:	e01b      	b.n	8009d80 <UART_SetConfig+0x1ec>
 8009d48:	231b      	movs	r3, #27
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	189b      	adds	r3, r3, r2
 8009d4e:	19db      	adds	r3, r3, r7
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e0e6      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d56:	231b      	movs	r3, #27
 8009d58:	2220      	movs	r2, #32
 8009d5a:	189b      	adds	r3, r3, r2
 8009d5c:	19db      	adds	r3, r3, r7
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	e0df      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d64:	231b      	movs	r3, #27
 8009d66:	2220      	movs	r2, #32
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	19db      	adds	r3, r3, r7
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	e0d8      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d72:	231b      	movs	r3, #27
 8009d74:	2220      	movs	r2, #32
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	19db      	adds	r3, r3, r7
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e0d1      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d80:	231b      	movs	r3, #27
 8009d82:	2220      	movs	r2, #32
 8009d84:	189b      	adds	r3, r3, r2
 8009d86:	19db      	adds	r3, r3, r7
 8009d88:	2210      	movs	r2, #16
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	e0ca      	b.n	8009f24 <UART_SetConfig+0x390>
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a57      	ldr	r2, [pc, #348]	; (8009ef0 <UART_SetConfig+0x35c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d106      	bne.n	8009da6 <UART_SetConfig+0x212>
 8009d98:	231b      	movs	r3, #27
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	189b      	adds	r3, r3, r2
 8009d9e:	19db      	adds	r3, r3, r7
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e0be      	b.n	8009f24 <UART_SetConfig+0x390>
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a52      	ldr	r2, [pc, #328]	; (8009ef4 <UART_SetConfig+0x360>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d106      	bne.n	8009dbe <UART_SetConfig+0x22a>
 8009db0:	231b      	movs	r3, #27
 8009db2:	2220      	movs	r2, #32
 8009db4:	189b      	adds	r3, r3, r2
 8009db6:	19db      	adds	r3, r3, r7
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	e0b2      	b.n	8009f24 <UART_SetConfig+0x390>
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4d      	ldr	r2, [pc, #308]	; (8009ef8 <UART_SetConfig+0x364>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d106      	bne.n	8009dd6 <UART_SetConfig+0x242>
 8009dc8:	231b      	movs	r3, #27
 8009dca:	2220      	movs	r2, #32
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	19db      	adds	r3, r3, r7
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e0a6      	b.n	8009f24 <UART_SetConfig+0x390>
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a3e      	ldr	r2, [pc, #248]	; (8009ed4 <UART_SetConfig+0x340>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d13e      	bne.n	8009e5e <UART_SetConfig+0x2ca>
 8009de0:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <UART_SetConfig+0x350>)
 8009de2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009de4:	23c0      	movs	r3, #192	; 0xc0
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	4013      	ands	r3, r2
 8009dea:	22c0      	movs	r2, #192	; 0xc0
 8009dec:	0112      	lsls	r2, r2, #4
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d027      	beq.n	8009e42 <UART_SetConfig+0x2ae>
 8009df2:	22c0      	movs	r2, #192	; 0xc0
 8009df4:	0112      	lsls	r2, r2, #4
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d82a      	bhi.n	8009e50 <UART_SetConfig+0x2bc>
 8009dfa:	2280      	movs	r2, #128	; 0x80
 8009dfc:	0112      	lsls	r2, r2, #4
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d011      	beq.n	8009e26 <UART_SetConfig+0x292>
 8009e02:	2280      	movs	r2, #128	; 0x80
 8009e04:	0112      	lsls	r2, r2, #4
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d822      	bhi.n	8009e50 <UART_SetConfig+0x2bc>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <UART_SetConfig+0x284>
 8009e0e:	2280      	movs	r2, #128	; 0x80
 8009e10:	00d2      	lsls	r2, r2, #3
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00e      	beq.n	8009e34 <UART_SetConfig+0x2a0>
 8009e16:	e01b      	b.n	8009e50 <UART_SetConfig+0x2bc>
 8009e18:	231b      	movs	r3, #27
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	19db      	adds	r3, r3, r7
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e07e      	b.n	8009f24 <UART_SetConfig+0x390>
 8009e26:	231b      	movs	r3, #27
 8009e28:	2220      	movs	r2, #32
 8009e2a:	189b      	adds	r3, r3, r2
 8009e2c:	19db      	adds	r3, r3, r7
 8009e2e:	2202      	movs	r2, #2
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	e077      	b.n	8009f24 <UART_SetConfig+0x390>
 8009e34:	231b      	movs	r3, #27
 8009e36:	2220      	movs	r2, #32
 8009e38:	189b      	adds	r3, r3, r2
 8009e3a:	19db      	adds	r3, r3, r7
 8009e3c:	2204      	movs	r2, #4
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	e070      	b.n	8009f24 <UART_SetConfig+0x390>
 8009e42:	231b      	movs	r3, #27
 8009e44:	2220      	movs	r2, #32
 8009e46:	189b      	adds	r3, r3, r2
 8009e48:	19db      	adds	r3, r3, r7
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	e069      	b.n	8009f24 <UART_SetConfig+0x390>
 8009e50:	231b      	movs	r3, #27
 8009e52:	2220      	movs	r2, #32
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	19db      	adds	r3, r3, r7
 8009e58:	2210      	movs	r2, #16
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	e062      	b.n	8009f24 <UART_SetConfig+0x390>
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <UART_SetConfig+0x344>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d157      	bne.n	8009f18 <UART_SetConfig+0x384>
 8009e68:	4b1e      	ldr	r3, [pc, #120]	; (8009ee4 <UART_SetConfig+0x350>)
 8009e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e6c:	23c0      	movs	r3, #192	; 0xc0
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4013      	ands	r3, r2
 8009e72:	22c0      	movs	r2, #192	; 0xc0
 8009e74:	0092      	lsls	r2, r2, #2
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d040      	beq.n	8009efc <UART_SetConfig+0x368>
 8009e7a:	22c0      	movs	r2, #192	; 0xc0
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d843      	bhi.n	8009f0a <UART_SetConfig+0x376>
 8009e82:	2280      	movs	r2, #128	; 0x80
 8009e84:	0092      	lsls	r2, r2, #2
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d011      	beq.n	8009eae <UART_SetConfig+0x31a>
 8009e8a:	2280      	movs	r2, #128	; 0x80
 8009e8c:	0092      	lsls	r2, r2, #2
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d83b      	bhi.n	8009f0a <UART_SetConfig+0x376>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <UART_SetConfig+0x30c>
 8009e96:	2280      	movs	r2, #128	; 0x80
 8009e98:	0052      	lsls	r2, r2, #1
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00e      	beq.n	8009ebc <UART_SetConfig+0x328>
 8009e9e:	e034      	b.n	8009f0a <UART_SetConfig+0x376>
 8009ea0:	231b      	movs	r3, #27
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	189b      	adds	r3, r3, r2
 8009ea6:	19db      	adds	r3, r3, r7
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	e03a      	b.n	8009f24 <UART_SetConfig+0x390>
 8009eae:	231b      	movs	r3, #27
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	189b      	adds	r3, r3, r2
 8009eb4:	19db      	adds	r3, r3, r7
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	e033      	b.n	8009f24 <UART_SetConfig+0x390>
 8009ebc:	231b      	movs	r3, #27
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	19db      	adds	r3, r3, r7
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	e02c      	b.n	8009f24 <UART_SetConfig+0x390>
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	cfff69f3 	.word	0xcfff69f3
 8009ed0:	ffffcfff 	.word	0xffffcfff
 8009ed4:	40008000 	.word	0x40008000
 8009ed8:	40008400 	.word	0x40008400
 8009edc:	11fff4ff 	.word	0x11fff4ff
 8009ee0:	40013800 	.word	0x40013800
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	40004400 	.word	0x40004400
 8009eec:	40004800 	.word	0x40004800
 8009ef0:	40004c00 	.word	0x40004c00
 8009ef4:	40005000 	.word	0x40005000
 8009ef8:	40013c00 	.word	0x40013c00
 8009efc:	231b      	movs	r3, #27
 8009efe:	2220      	movs	r2, #32
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	19db      	adds	r3, r3, r7
 8009f04:	2208      	movs	r2, #8
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e00c      	b.n	8009f24 <UART_SetConfig+0x390>
 8009f0a:	231b      	movs	r3, #27
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	19db      	adds	r3, r3, r7
 8009f12:	2210      	movs	r2, #16
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e005      	b.n	8009f24 <UART_SetConfig+0x390>
 8009f18:	231b      	movs	r3, #27
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	189b      	adds	r3, r3, r2
 8009f1e:	19db      	adds	r3, r3, r7
 8009f20:	2210      	movs	r2, #16
 8009f22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4ac1      	ldr	r2, [pc, #772]	; (800a230 <UART_SetConfig+0x69c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d005      	beq.n	8009f3a <UART_SetConfig+0x3a6>
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4ac0      	ldr	r2, [pc, #768]	; (800a234 <UART_SetConfig+0x6a0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d000      	beq.n	8009f3a <UART_SetConfig+0x3a6>
 8009f38:	e093      	b.n	800a062 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f3a:	231b      	movs	r3, #27
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	189b      	adds	r3, r3, r2
 8009f40:	19db      	adds	r3, r3, r7
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d015      	beq.n	8009f74 <UART_SetConfig+0x3e0>
 8009f48:	dc18      	bgt.n	8009f7c <UART_SetConfig+0x3e8>
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d00d      	beq.n	8009f6a <UART_SetConfig+0x3d6>
 8009f4e:	dc15      	bgt.n	8009f7c <UART_SetConfig+0x3e8>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <UART_SetConfig+0x3c6>
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d005      	beq.n	8009f64 <UART_SetConfig+0x3d0>
 8009f58:	e010      	b.n	8009f7c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f5a:	f7fd fb35 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f62:	e014      	b.n	8009f8e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f64:	4bb4      	ldr	r3, [pc, #720]	; (800a238 <UART_SetConfig+0x6a4>)
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f68:	e011      	b.n	8009f8e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6a:	f7fd faa1 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f72:	e00c      	b.n	8009f8e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	021b      	lsls	r3, r3, #8
 8009f78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f7a:	e008      	b.n	8009f8e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009f80:	231a      	movs	r3, #26
 8009f82:	2220      	movs	r2, #32
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	19db      	adds	r3, r3, r7
 8009f88:	2201      	movs	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]
        break;
 8009f8c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d100      	bne.n	8009f96 <UART_SetConfig+0x402>
 8009f94:	e135      	b.n	800a202 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f9a:	4ba8      	ldr	r3, [pc, #672]	; (800a23c <UART_SetConfig+0x6a8>)
 8009f9c:	0052      	lsls	r2, r2, #1
 8009f9e:	5ad3      	ldrh	r3, [r2, r3]
 8009fa0:	0019      	movs	r1, r3
 8009fa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009fa4:	f7f6 f8ae 	bl	8000104 <__udivsi3>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	0013      	movs	r3, r2
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	189b      	adds	r3, r3, r2
 8009fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d305      	bcc.n	8009fc8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d906      	bls.n	8009fd6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8009fc8:	231a      	movs	r3, #26
 8009fca:	2220      	movs	r2, #32
 8009fcc:	189b      	adds	r3, r3, r2
 8009fce:	19db      	adds	r3, r3, r7
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	e044      	b.n	800a060 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fe2:	4b96      	ldr	r3, [pc, #600]	; (800a23c <UART_SetConfig+0x6a8>)
 8009fe4:	0052      	lsls	r2, r2, #1
 8009fe6:	5ad3      	ldrh	r3, [r2, r3]
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	69b8      	ldr	r0, [r7, #24]
 8009ff4:	69f9      	ldr	r1, [r7, #28]
 8009ff6:	f7f6 fa73 	bl	80004e0 <__aeabi_uldivmod>
 8009ffa:	0002      	movs	r2, r0
 8009ffc:	000b      	movs	r3, r1
 8009ffe:	0e11      	lsrs	r1, r2, #24
 800a000:	021d      	lsls	r5, r3, #8
 800a002:	430d      	orrs	r5, r1
 800a004:	0214      	lsls	r4, r2, #8
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	68f9      	ldr	r1, [r7, #12]
 800a016:	1900      	adds	r0, r0, r4
 800a018:	4169      	adcs	r1, r5
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	607b      	str	r3, [r7, #4]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f7f6 fa5a 	bl	80004e0 <__aeabi_uldivmod>
 800a02c:	0002      	movs	r2, r0
 800a02e:	000b      	movs	r3, r1
 800a030:	0013      	movs	r3, r2
 800a032:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a036:	23c0      	movs	r3, #192	; 0xc0
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d309      	bcc.n	800a052 <UART_SetConfig+0x4be>
 800a03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	035b      	lsls	r3, r3, #13
 800a044:	429a      	cmp	r2, r3
 800a046:	d204      	bcs.n	800a052 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	60da      	str	r2, [r3, #12]
 800a050:	e006      	b.n	800a060 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a052:	231a      	movs	r3, #26
 800a054:	2220      	movs	r2, #32
 800a056:	189b      	adds	r3, r3, r2
 800a058:	19db      	adds	r3, r3, r7
 800a05a:	2201      	movs	r2, #1
 800a05c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800a05e:	e0d0      	b.n	800a202 <UART_SetConfig+0x66e>
 800a060:	e0cf      	b.n	800a202 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	69da      	ldr	r2, [r3, #28]
 800a066:	2380      	movs	r3, #128	; 0x80
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d000      	beq.n	800a070 <UART_SetConfig+0x4dc>
 800a06e:	e070      	b.n	800a152 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800a070:	231b      	movs	r3, #27
 800a072:	2220      	movs	r2, #32
 800a074:	189b      	adds	r3, r3, r2
 800a076:	19db      	adds	r3, r3, r7
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	d015      	beq.n	800a0aa <UART_SetConfig+0x516>
 800a07e:	dc18      	bgt.n	800a0b2 <UART_SetConfig+0x51e>
 800a080:	2b04      	cmp	r3, #4
 800a082:	d00d      	beq.n	800a0a0 <UART_SetConfig+0x50c>
 800a084:	dc15      	bgt.n	800a0b2 <UART_SetConfig+0x51e>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <UART_SetConfig+0x4fc>
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d005      	beq.n	800a09a <UART_SetConfig+0x506>
 800a08e:	e010      	b.n	800a0b2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a090:	f7fd fa9a 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800a094:	0003      	movs	r3, r0
 800a096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a098:	e014      	b.n	800a0c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a09a:	4b67      	ldr	r3, [pc, #412]	; (800a238 <UART_SetConfig+0x6a4>)
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a09e:	e011      	b.n	800a0c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0a0:	f7fd fa06 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 800a0a4:	0003      	movs	r3, r0
 800a0a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0a8:	e00c      	b.n	800a0c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0aa:	2380      	movs	r3, #128	; 0x80
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0b0:	e008      	b.n	800a0c4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a0b6:	231a      	movs	r3, #26
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	19db      	adds	r3, r3, r7
 800a0be:	2201      	movs	r2, #1
 800a0c0:	701a      	strb	r2, [r3, #0]
        break;
 800a0c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d100      	bne.n	800a0cc <UART_SetConfig+0x538>
 800a0ca:	e09a      	b.n	800a202 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0d0:	4b5a      	ldr	r3, [pc, #360]	; (800a23c <UART_SetConfig+0x6a8>)
 800a0d2:	0052      	lsls	r2, r2, #1
 800a0d4:	5ad3      	ldrh	r3, [r2, r3]
 800a0d6:	0019      	movs	r1, r3
 800a0d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a0da:	f7f6 f813 	bl	8000104 <__udivsi3>
 800a0de:	0003      	movs	r3, r0
 800a0e0:	005a      	lsls	r2, r3, #1
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	18d2      	adds	r2, r2, r3
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	0019      	movs	r1, r3
 800a0f0:	0010      	movs	r0, r2
 800a0f2:	f7f6 f807 	bl	8000104 <__udivsi3>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	2b0f      	cmp	r3, #15
 800a0fe:	d921      	bls.n	800a144 <UART_SetConfig+0x5b0>
 800a100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a102:	2380      	movs	r3, #128	; 0x80
 800a104:	025b      	lsls	r3, r3, #9
 800a106:	429a      	cmp	r2, r3
 800a108:	d21c      	bcs.n	800a144 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	200e      	movs	r0, #14
 800a110:	2420      	movs	r4, #32
 800a112:	1903      	adds	r3, r0, r4
 800a114:	19db      	adds	r3, r3, r7
 800a116:	210f      	movs	r1, #15
 800a118:	438a      	bics	r2, r1
 800a11a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	085b      	lsrs	r3, r3, #1
 800a120:	b29b      	uxth	r3, r3
 800a122:	2207      	movs	r2, #7
 800a124:	4013      	ands	r3, r2
 800a126:	b299      	uxth	r1, r3
 800a128:	1903      	adds	r3, r0, r4
 800a12a:	19db      	adds	r3, r3, r7
 800a12c:	1902      	adds	r2, r0, r4
 800a12e:	19d2      	adds	r2, r2, r7
 800a130:	8812      	ldrh	r2, [r2, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	1902      	adds	r2, r0, r4
 800a13c:	19d2      	adds	r2, r2, r7
 800a13e:	8812      	ldrh	r2, [r2, #0]
 800a140:	60da      	str	r2, [r3, #12]
 800a142:	e05e      	b.n	800a202 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a144:	231a      	movs	r3, #26
 800a146:	2220      	movs	r2, #32
 800a148:	189b      	adds	r3, r3, r2
 800a14a:	19db      	adds	r3, r3, r7
 800a14c:	2201      	movs	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e057      	b.n	800a202 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a152:	231b      	movs	r3, #27
 800a154:	2220      	movs	r2, #32
 800a156:	189b      	adds	r3, r3, r2
 800a158:	19db      	adds	r3, r3, r7
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d015      	beq.n	800a18c <UART_SetConfig+0x5f8>
 800a160:	dc18      	bgt.n	800a194 <UART_SetConfig+0x600>
 800a162:	2b04      	cmp	r3, #4
 800a164:	d00d      	beq.n	800a182 <UART_SetConfig+0x5ee>
 800a166:	dc15      	bgt.n	800a194 <UART_SetConfig+0x600>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <UART_SetConfig+0x5de>
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d005      	beq.n	800a17c <UART_SetConfig+0x5e8>
 800a170:	e010      	b.n	800a194 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a172:	f7fd fa29 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800a176:	0003      	movs	r3, r0
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a17a:	e014      	b.n	800a1a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a17c:	4b2e      	ldr	r3, [pc, #184]	; (800a238 <UART_SetConfig+0x6a4>)
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a180:	e011      	b.n	800a1a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a182:	f7fd f995 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 800a186:	0003      	movs	r3, r0
 800a188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a18a:	e00c      	b.n	800a1a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18c:	2380      	movs	r3, #128	; 0x80
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a192:	e008      	b.n	800a1a6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a198:	231a      	movs	r3, #26
 800a19a:	2220      	movs	r2, #32
 800a19c:	189b      	adds	r3, r3, r2
 800a19e:	19db      	adds	r3, r3, r7
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	701a      	strb	r2, [r3, #0]
        break;
 800a1a4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d02a      	beq.n	800a202 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1b0:	4b22      	ldr	r3, [pc, #136]	; (800a23c <UART_SetConfig+0x6a8>)
 800a1b2:	0052      	lsls	r2, r2, #1
 800a1b4:	5ad3      	ldrh	r3, [r2, r3]
 800a1b6:	0019      	movs	r1, r3
 800a1b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1ba:	f7f5 ffa3 	bl	8000104 <__udivsi3>
 800a1be:	0003      	movs	r3, r0
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	18d2      	adds	r2, r2, r3
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	0019      	movs	r1, r3
 800a1d0:	0010      	movs	r0, r2
 800a1d2:	f7f5 ff97 	bl	8000104 <__udivsi3>
 800a1d6:	0003      	movs	r3, r0
 800a1d8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2b0f      	cmp	r3, #15
 800a1de:	d90a      	bls.n	800a1f6 <UART_SetConfig+0x662>
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	025b      	lsls	r3, r3, #9
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d205      	bcs.n	800a1f6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	e005      	b.n	800a202 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f6:	231a      	movs	r3, #26
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	189b      	adds	r3, r3, r2
 800a1fc:	19db      	adds	r3, r3, r7
 800a1fe:	2201      	movs	r2, #1
 800a200:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	226a      	movs	r2, #106	; 0x6a
 800a206:	2101      	movs	r1, #1
 800a208:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	2268      	movs	r2, #104	; 0x68
 800a20e:	2101      	movs	r1, #1
 800a210:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	2200      	movs	r2, #0
 800a216:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	2200      	movs	r2, #0
 800a21c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a21e:	231a      	movs	r3, #26
 800a220:	2220      	movs	r2, #32
 800a222:	189b      	adds	r3, r3, r2
 800a224:	19db      	adds	r3, r3, r7
 800a226:	781b      	ldrb	r3, [r3, #0]
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	b010      	add	sp, #64	; 0x40
 800a22e:	bdb0      	pop	{r4, r5, r7, pc}
 800a230:	40008000 	.word	0x40008000
 800a234:	40008400 	.word	0x40008400
 800a238:	00f42400 	.word	0x00f42400
 800a23c:	0800bd2c 	.word	0x0800bd2c

0800a240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24c:	2201      	movs	r2, #1
 800a24e:	4013      	ands	r3, r2
 800a250:	d00b      	beq.n	800a26a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4a4a      	ldr	r2, [pc, #296]	; (800a384 <UART_AdvFeatureConfig+0x144>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	0019      	movs	r1, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	2202      	movs	r2, #2
 800a270:	4013      	ands	r3, r2
 800a272:	d00b      	beq.n	800a28c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	4a43      	ldr	r2, [pc, #268]	; (800a388 <UART_AdvFeatureConfig+0x148>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	0019      	movs	r1, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a290:	2204      	movs	r2, #4
 800a292:	4013      	ands	r3, r2
 800a294:	d00b      	beq.n	800a2ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	4a3b      	ldr	r2, [pc, #236]	; (800a38c <UART_AdvFeatureConfig+0x14c>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	d00b      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	4a34      	ldr	r2, [pc, #208]	; (800a390 <UART_AdvFeatureConfig+0x150>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	0019      	movs	r1, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d00b      	beq.n	800a2f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	4a2c      	ldr	r2, [pc, #176]	; (800a394 <UART_AdvFeatureConfig+0x154>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	0019      	movs	r1, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d00b      	beq.n	800a314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	4a25      	ldr	r2, [pc, #148]	; (800a398 <UART_AdvFeatureConfig+0x158>)
 800a304:	4013      	ands	r3, r2
 800a306:	0019      	movs	r1, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	2240      	movs	r2, #64	; 0x40
 800a31a:	4013      	ands	r3, r2
 800a31c:	d01d      	beq.n	800a35a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	4a1d      	ldr	r2, [pc, #116]	; (800a39c <UART_AdvFeatureConfig+0x15c>)
 800a326:	4013      	ands	r3, r2
 800a328:	0019      	movs	r1, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a33a:	2380      	movs	r3, #128	; 0x80
 800a33c:	035b      	lsls	r3, r3, #13
 800a33e:	429a      	cmp	r2, r3
 800a340:	d10b      	bne.n	800a35a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4a15      	ldr	r2, [pc, #84]	; (800a3a0 <UART_AdvFeatureConfig+0x160>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	0019      	movs	r1, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	2280      	movs	r2, #128	; 0x80
 800a360:	4013      	ands	r3, r2
 800a362:	d00b      	beq.n	800a37c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <UART_AdvFeatureConfig+0x164>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	0019      	movs	r1, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	605a      	str	r2, [r3, #4]
  }
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	46bd      	mov	sp, r7
 800a380:	b002      	add	sp, #8
 800a382:	bd80      	pop	{r7, pc}
 800a384:	fffdffff 	.word	0xfffdffff
 800a388:	fffeffff 	.word	0xfffeffff
 800a38c:	fffbffff 	.word	0xfffbffff
 800a390:	ffff7fff 	.word	0xffff7fff
 800a394:	ffffefff 	.word	0xffffefff
 800a398:	ffffdfff 	.word	0xffffdfff
 800a39c:	ffefffff 	.word	0xffefffff
 800a3a0:	ff9fffff 	.word	0xff9fffff
 800a3a4:	fff7ffff 	.word	0xfff7ffff

0800a3a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af02      	add	r7, sp, #8
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2290      	movs	r2, #144	; 0x90
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3b8:	f7fa ff7c 	bl	80052b4 <HAL_GetTick>
 800a3bc:	0003      	movs	r3, r0
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d10c      	bne.n	800a3e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2280      	movs	r2, #128	; 0x80
 800a3d2:	0391      	lsls	r1, r2, #14
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <UART_CheckIdleState+0x98>)
 800a3d8:	9200      	str	r2, [sp, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f000 f832 	bl	800a444 <UART_WaitOnFlagUntilTimeout>
 800a3e0:	1e03      	subs	r3, r0, #0
 800a3e2:	d001      	beq.n	800a3e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e026      	b.n	800a436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2204      	movs	r2, #4
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d10c      	bne.n	800a410 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2280      	movs	r2, #128	; 0x80
 800a3fa:	03d1      	lsls	r1, r2, #15
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4a10      	ldr	r2, [pc, #64]	; (800a440 <UART_CheckIdleState+0x98>)
 800a400:	9200      	str	r2, [sp, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	f000 f81e 	bl	800a444 <UART_WaitOnFlagUntilTimeout>
 800a408:	1e03      	subs	r3, r0, #0
 800a40a:	d001      	beq.n	800a410 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e012      	b.n	800a436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2288      	movs	r2, #136	; 0x88
 800a414:	2120      	movs	r1, #32
 800a416:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	228c      	movs	r2, #140	; 0x8c
 800a41c:	2120      	movs	r1, #32
 800a41e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2284      	movs	r2, #132	; 0x84
 800a430:	2100      	movs	r1, #0
 800a432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	0018      	movs	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	b004      	add	sp, #16
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	01ffffff 	.word	0x01ffffff

0800a444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b094      	sub	sp, #80	; 0x50
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	1dfb      	adds	r3, r7, #7
 800a452:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a454:	e0a7      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a458:	3301      	adds	r3, #1
 800a45a:	d100      	bne.n	800a45e <UART_WaitOnFlagUntilTimeout+0x1a>
 800a45c:	e0a3      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45e:	f7fa ff29 	bl	80052b4 <HAL_GetTick>
 800a462:	0002      	movs	r2, r0
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d302      	bcc.n	800a474 <UART_WaitOnFlagUntilTimeout+0x30>
 800a46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a470:	2b00      	cmp	r3, #0
 800a472:	d13f      	bne.n	800a4f4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a474:	f3ef 8310 	mrs	r3, PRIMASK
 800a478:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a47c:	647b      	str	r3, [r7, #68]	; 0x44
 800a47e:	2301      	movs	r3, #1
 800a480:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	f383 8810 	msr	PRIMASK, r3
}
 800a488:	46c0      	nop			; (mov r8, r8)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	494e      	ldr	r1, [pc, #312]	; (800a5d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a496:	400a      	ands	r2, r1
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	f383 8810 	msr	PRIMASK, r3
}
 800a4a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a4aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	f383 8810 	msr	PRIMASK, r3
}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	438a      	bics	r2, r1
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d2:	f383 8810 	msr	PRIMASK, r3
}
 800a4d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2288      	movs	r2, #136	; 0x88
 800a4dc:	2120      	movs	r1, #32
 800a4de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	228c      	movs	r2, #140	; 0x8c
 800a4e4:	2120      	movs	r1, #32
 800a4e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2284      	movs	r2, #132	; 0x84
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e069      	b.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	d052      	beq.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	69da      	ldr	r2, [r3, #28]
 800a506:	2380      	movs	r3, #128	; 0x80
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	401a      	ands	r2, r3
 800a50c:	2380      	movs	r3, #128	; 0x80
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	429a      	cmp	r2, r3
 800a512:	d148      	bne.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2280      	movs	r2, #128	; 0x80
 800a51a:	0112      	lsls	r2, r2, #4
 800a51c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a51e:	f3ef 8310 	mrs	r3, PRIMASK
 800a522:	613b      	str	r3, [r7, #16]
  return(result);
 800a524:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a526:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a528:	2301      	movs	r3, #1
 800a52a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f383 8810 	msr	PRIMASK, r3
}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4924      	ldr	r1, [pc, #144]	; (800a5d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a540:	400a      	ands	r2, r1
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a546:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	f383 8810 	msr	PRIMASK, r3
}
 800a54e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a550:	f3ef 8310 	mrs	r3, PRIMASK
 800a554:	61fb      	str	r3, [r7, #28]
  return(result);
 800a556:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a558:	64bb      	str	r3, [r7, #72]	; 0x48
 800a55a:	2301      	movs	r3, #1
 800a55c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f383 8810 	msr	PRIMASK, r3
}
 800a564:	46c0      	nop			; (mov r8, r8)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2101      	movs	r1, #1
 800a572:	438a      	bics	r2, r1
 800a574:	609a      	str	r2, [r3, #8]
 800a576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	f383 8810 	msr	PRIMASK, r3
}
 800a580:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2288      	movs	r2, #136	; 0x88
 800a586:	2120      	movs	r1, #32
 800a588:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	228c      	movs	r2, #140	; 0x8c
 800a58e:	2120      	movs	r1, #32
 800a590:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2290      	movs	r2, #144	; 0x90
 800a596:	2120      	movs	r1, #32
 800a598:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2284      	movs	r2, #132	; 0x84
 800a59e:	2100      	movs	r1, #0
 800a5a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e010      	b.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	425a      	negs	r2, r3
 800a5b6:	4153      	adcs	r3, r2
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	001a      	movs	r2, r3
 800a5bc:	1dfb      	adds	r3, r7, #7
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d100      	bne.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x182>
 800a5c4:	e747      	b.n	800a456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b014      	add	sp, #80	; 0x50
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	fffffe5f 	.word	0xfffffe5f

0800a5d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08e      	sub	sp, #56	; 0x38
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e0:	617b      	str	r3, [r7, #20]
  return(result);
 800a5e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	f383 8810 	msr	PRIMASK, r3
}
 800a5f0:	46c0      	nop			; (mov r8, r8)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4926      	ldr	r1, [pc, #152]	; (800a698 <UART_EndRxTransfer+0xc4>)
 800a5fe:	400a      	ands	r2, r1
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f383 8810 	msr	PRIMASK, r3
}
 800a60c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60e:	f3ef 8310 	mrs	r3, PRIMASK
 800a612:	623b      	str	r3, [r7, #32]
  return(result);
 800a614:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a616:	633b      	str	r3, [r7, #48]	; 0x30
 800a618:	2301      	movs	r3, #1
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	f383 8810 	msr	PRIMASK, r3
}
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	491b      	ldr	r1, [pc, #108]	; (800a69c <UART_EndRxTransfer+0xc8>)
 800a630:	400a      	ands	r2, r1
 800a632:	609a      	str	r2, [r3, #8]
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	f383 8810 	msr	PRIMASK, r3
}
 800a63e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a644:	2b01      	cmp	r3, #1
 800a646:	d118      	bne.n	800a67a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a648:	f3ef 8310 	mrs	r3, PRIMASK
 800a64c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a64e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a652:	2301      	movs	r3, #1
 800a654:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f383 8810 	msr	PRIMASK, r3
}
 800a65c:	46c0      	nop			; (mov r8, r8)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2110      	movs	r1, #16
 800a66a:	438a      	bics	r2, r1
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f383 8810 	msr	PRIMASK, r3
}
 800a678:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	228c      	movs	r2, #140	; 0x8c
 800a67e:	2120      	movs	r1, #32
 800a680:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	46bd      	mov	sp, r7
 800a692:	b00e      	add	sp, #56	; 0x38
 800a694:	bd80      	pop	{r7, pc}
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	fffffedf 	.word	0xfffffedf
 800a69c:	effffffe 	.word	0xeffffffe

0800a6a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	225e      	movs	r2, #94	; 0x5e
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2256      	movs	r2, #86	; 0x56
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f7ff fa53 	bl	8009b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	b004      	add	sp, #16
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b086      	sub	sp, #24
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a6da:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2140      	movs	r1, #64	; 0x40
 800a6f8:	438a      	bics	r2, r1
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f383 8810 	msr	PRIMASK, r3
}
 800a706:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2288      	movs	r2, #136	; 0x88
 800a70c:	2120      	movs	r1, #32
 800a70e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	0018      	movs	r0, r3
 800a71a:	f7ff fa1f 	bl	8009b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	46bd      	mov	sp, r7
 800a722:	b006      	add	sp, #24
 800a724:	bd80      	pop	{r7, pc}

0800a726 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a72e:	46c0      	nop			; (mov r8, r8)
 800a730:	46bd      	mov	sp, r7
 800a732:	b002      	add	sp, #8
 800a734:	bd80      	pop	{r7, pc}

0800a736 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	46bd      	mov	sp, r7
 800a742:	b002      	add	sp, #8
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a74e:	46c0      	nop			; (mov r8, r8)
 800a750:	46bd      	mov	sp, r7
 800a752:	b002      	add	sp, #8
 800a754:	bd80      	pop	{r7, pc}
	...

0800a758 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2284      	movs	r2, #132	; 0x84
 800a764:	5c9b      	ldrb	r3, [r3, r2]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UARTEx_DisableFifoMode+0x16>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e027      	b.n	800a7be <HAL_UARTEx_DisableFifoMode+0x66>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2284      	movs	r2, #132	; 0x84
 800a772:	2101      	movs	r1, #1
 800a774:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2288      	movs	r2, #136	; 0x88
 800a77a:	2124      	movs	r1, #36	; 0x24
 800a77c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2101      	movs	r1, #1
 800a792:	438a      	bics	r2, r1
 800a794:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a0b      	ldr	r2, [pc, #44]	; (800a7c8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a79a:	4013      	ands	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2288      	movs	r2, #136	; 0x88
 800a7b0:	2120      	movs	r1, #32
 800a7b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2284      	movs	r2, #132	; 0x84
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	0018      	movs	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	b004      	add	sp, #16
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	dfffffff 	.word	0xdfffffff

0800a7cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2284      	movs	r2, #132	; 0x84
 800a7da:	5c9b      	ldrb	r3, [r3, r2]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e02e      	b.n	800a842 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2284      	movs	r2, #132	; 0x84
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2288      	movs	r2, #136	; 0x88
 800a7f0:	2124      	movs	r1, #36	; 0x24
 800a7f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2101      	movs	r1, #1
 800a808:	438a      	bics	r2, r1
 800a80a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	08d9      	lsrs	r1, r3, #3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	0018      	movs	r0, r3
 800a824:	f000 f854 	bl	800a8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2288      	movs	r2, #136	; 0x88
 800a834:	2120      	movs	r1, #32
 800a836:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2284      	movs	r2, #132	; 0x84
 800a83c:	2100      	movs	r1, #0
 800a83e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	0018      	movs	r0, r3
 800a844:	46bd      	mov	sp, r7
 800a846:	b004      	add	sp, #16
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2284      	movs	r2, #132	; 0x84
 800a85a:	5c9b      	ldrb	r3, [r3, r2]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a860:	2302      	movs	r3, #2
 800a862:	e02f      	b.n	800a8c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2284      	movs	r2, #132	; 0x84
 800a868:	2101      	movs	r1, #1
 800a86a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2288      	movs	r2, #136	; 0x88
 800a870:	2124      	movs	r1, #36	; 0x24
 800a872:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2101      	movs	r1, #1
 800a888:	438a      	bics	r2, r1
 800a88a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	4a0e      	ldr	r2, [pc, #56]	; (800a8cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a894:	4013      	ands	r3, r2
 800a896:	0019      	movs	r1, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f000 f813 	bl	800a8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2288      	movs	r2, #136	; 0x88
 800a8b6:	2120      	movs	r1, #32
 800a8b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2284      	movs	r2, #132	; 0x84
 800a8be:	2100      	movs	r1, #0
 800a8c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	b004      	add	sp, #16
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	f1ffffff 	.word	0xf1ffffff

0800a8d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	226a      	movs	r2, #106	; 0x6a
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2268      	movs	r2, #104	; 0x68
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8f0:	e043      	b.n	800a97a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8f2:	260f      	movs	r6, #15
 800a8f4:	19bb      	adds	r3, r7, r6
 800a8f6:	2208      	movs	r2, #8
 800a8f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8fa:	200e      	movs	r0, #14
 800a8fc:	183b      	adds	r3, r7, r0
 800a8fe:	2208      	movs	r2, #8
 800a900:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	0e5b      	lsrs	r3, r3, #25
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	240d      	movs	r4, #13
 800a90e:	193b      	adds	r3, r7, r4
 800a910:	2107      	movs	r1, #7
 800a912:	400a      	ands	r2, r1
 800a914:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	0f5b      	lsrs	r3, r3, #29
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	250c      	movs	r5, #12
 800a922:	197b      	adds	r3, r7, r5
 800a924:	2107      	movs	r1, #7
 800a926:	400a      	ands	r2, r1
 800a928:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a92a:	183b      	adds	r3, r7, r0
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	197a      	adds	r2, r7, r5
 800a930:	7812      	ldrb	r2, [r2, #0]
 800a932:	4914      	ldr	r1, [pc, #80]	; (800a984 <UARTEx_SetNbDataToProcess+0xb4>)
 800a934:	5c8a      	ldrb	r2, [r1, r2]
 800a936:	435a      	muls	r2, r3
 800a938:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a93a:	197b      	adds	r3, r7, r5
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	4a12      	ldr	r2, [pc, #72]	; (800a988 <UARTEx_SetNbDataToProcess+0xb8>)
 800a940:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a942:	0019      	movs	r1, r3
 800a944:	f7f5 fc68 	bl	8000218 <__divsi3>
 800a948:	0003      	movs	r3, r0
 800a94a:	b299      	uxth	r1, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	226a      	movs	r2, #106	; 0x6a
 800a950:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a952:	19bb      	adds	r3, r7, r6
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	193a      	adds	r2, r7, r4
 800a958:	7812      	ldrb	r2, [r2, #0]
 800a95a:	490a      	ldr	r1, [pc, #40]	; (800a984 <UARTEx_SetNbDataToProcess+0xb4>)
 800a95c:	5c8a      	ldrb	r2, [r1, r2]
 800a95e:	435a      	muls	r2, r3
 800a960:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a962:	193b      	adds	r3, r7, r4
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	4a08      	ldr	r2, [pc, #32]	; (800a988 <UARTEx_SetNbDataToProcess+0xb8>)
 800a968:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a96a:	0019      	movs	r1, r3
 800a96c:	f7f5 fc54 	bl	8000218 <__divsi3>
 800a970:	0003      	movs	r3, r0
 800a972:	b299      	uxth	r1, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2268      	movs	r2, #104	; 0x68
 800a978:	5299      	strh	r1, [r3, r2]
}
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b005      	add	sp, #20
 800a980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	0800bd44 	.word	0x0800bd44
 800a988:	0800bd4c 	.word	0x0800bd4c

0800a98c <__libc_init_array>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	2600      	movs	r6, #0
 800a990:	4d0c      	ldr	r5, [pc, #48]	; (800a9c4 <__libc_init_array+0x38>)
 800a992:	4c0d      	ldr	r4, [pc, #52]	; (800a9c8 <__libc_init_array+0x3c>)
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	42a6      	cmp	r6, r4
 800a99a:	d109      	bne.n	800a9b0 <__libc_init_array+0x24>
 800a99c:	2600      	movs	r6, #0
 800a99e:	f001 f89d 	bl	800badc <_init>
 800a9a2:	4d0a      	ldr	r5, [pc, #40]	; (800a9cc <__libc_init_array+0x40>)
 800a9a4:	4c0a      	ldr	r4, [pc, #40]	; (800a9d0 <__libc_init_array+0x44>)
 800a9a6:	1b64      	subs	r4, r4, r5
 800a9a8:	10a4      	asrs	r4, r4, #2
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	d105      	bne.n	800a9ba <__libc_init_array+0x2e>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	00b3      	lsls	r3, r6, #2
 800a9b2:	58eb      	ldr	r3, [r5, r3]
 800a9b4:	4798      	blx	r3
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7ee      	b.n	800a998 <__libc_init_array+0xc>
 800a9ba:	00b3      	lsls	r3, r6, #2
 800a9bc:	58eb      	ldr	r3, [r5, r3]
 800a9be:	4798      	blx	r3
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7f2      	b.n	800a9aa <__libc_init_array+0x1e>
 800a9c4:	0800bf38 	.word	0x0800bf38
 800a9c8:	0800bf38 	.word	0x0800bf38
 800a9cc:	0800bf38 	.word	0x0800bf38
 800a9d0:	0800bf3c 	.word	0x0800bf3c

0800a9d4 <memset>:
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	1882      	adds	r2, r0, r2
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d100      	bne.n	800a9de <memset+0xa>
 800a9dc:	4770      	bx	lr
 800a9de:	7019      	strb	r1, [r3, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	e7f9      	b.n	800a9d8 <memset+0x4>

0800a9e4 <tan>:
 800a9e4:	b5d0      	push	{r4, r6, r7, lr}
 800a9e6:	4a12      	ldr	r2, [pc, #72]	; (800aa30 <tan+0x4c>)
 800a9e8:	004b      	lsls	r3, r1, #1
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	085b      	lsrs	r3, r3, #1
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	dc06      	bgt.n	800aa00 <tan+0x1c>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f000 fd77 	bl	800b4ec <__kernel_tan>
 800a9fe:	e006      	b.n	800aa0e <tan+0x2a>
 800aa00:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <tan+0x50>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	dd05      	ble.n	800aa12 <tan+0x2e>
 800aa06:	0002      	movs	r2, r0
 800aa08:	000b      	movs	r3, r1
 800aa0a:	f7f7 fd3f 	bl	800248c <__aeabi_dsub>
 800aa0e:	b006      	add	sp, #24
 800aa10:	bdd0      	pop	{r4, r6, r7, pc}
 800aa12:	aa02      	add	r2, sp, #8
 800aa14:	f000 f810 	bl	800aa38 <__ieee754_rem_pio2>
 800aa18:	9a04      	ldr	r2, [sp, #16]
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	2102      	movs	r1, #2
 800aa1e:	0040      	lsls	r0, r0, #1
 800aa20:	4008      	ands	r0, r1
 800aa22:	3901      	subs	r1, #1
 800aa24:	1a08      	subs	r0, r1, r0
 800aa26:	9000      	str	r0, [sp, #0]
 800aa28:	9802      	ldr	r0, [sp, #8]
 800aa2a:	9903      	ldr	r1, [sp, #12]
 800aa2c:	e7e5      	b.n	800a9fa <tan+0x16>
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	3fe921fb 	.word	0x3fe921fb
 800aa34:	7fefffff 	.word	0x7fefffff

0800aa38 <__ieee754_rem_pio2>:
 800aa38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa3a:	004b      	lsls	r3, r1, #1
 800aa3c:	b091      	sub	sp, #68	; 0x44
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	9302      	str	r3, [sp, #8]
 800aa42:	0017      	movs	r7, r2
 800aa44:	4bb6      	ldr	r3, [pc, #728]	; (800ad20 <__ieee754_rem_pio2+0x2e8>)
 800aa46:	9a02      	ldr	r2, [sp, #8]
 800aa48:	0004      	movs	r4, r0
 800aa4a:	000d      	movs	r5, r1
 800aa4c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	dc09      	bgt.n	800aa66 <__ieee754_rem_pio2+0x2e>
 800aa52:	0002      	movs	r2, r0
 800aa54:	000b      	movs	r3, r1
 800aa56:	603a      	str	r2, [r7, #0]
 800aa58:	607b      	str	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60ba      	str	r2, [r7, #8]
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	2600      	movs	r6, #0
 800aa64:	e025      	b.n	800aab2 <__ieee754_rem_pio2+0x7a>
 800aa66:	4baf      	ldr	r3, [pc, #700]	; (800ad24 <__ieee754_rem_pio2+0x2ec>)
 800aa68:	9a02      	ldr	r2, [sp, #8]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	dd00      	ble.n	800aa70 <__ieee754_rem_pio2+0x38>
 800aa6e:	e06e      	b.n	800ab4e <__ieee754_rem_pio2+0x116>
 800aa70:	4ead      	ldr	r6, [pc, #692]	; (800ad28 <__ieee754_rem_pio2+0x2f0>)
 800aa72:	4aae      	ldr	r2, [pc, #696]	; (800ad2c <__ieee754_rem_pio2+0x2f4>)
 800aa74:	2d00      	cmp	r5, #0
 800aa76:	dd35      	ble.n	800aae4 <__ieee754_rem_pio2+0xac>
 800aa78:	0020      	movs	r0, r4
 800aa7a:	0029      	movs	r1, r5
 800aa7c:	4baa      	ldr	r3, [pc, #680]	; (800ad28 <__ieee754_rem_pio2+0x2f0>)
 800aa7e:	f7f7 fd05 	bl	800248c <__aeabi_dsub>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	0004      	movs	r4, r0
 800aa86:	000d      	movs	r5, r1
 800aa88:	42b3      	cmp	r3, r6
 800aa8a:	d015      	beq.n	800aab8 <__ieee754_rem_pio2+0x80>
 800aa8c:	4aa8      	ldr	r2, [pc, #672]	; (800ad30 <__ieee754_rem_pio2+0x2f8>)
 800aa8e:	4ba9      	ldr	r3, [pc, #676]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800aa90:	f7f7 fcfc 	bl	800248c <__aeabi_dsub>
 800aa94:	0002      	movs	r2, r0
 800aa96:	000b      	movs	r3, r1
 800aa98:	0020      	movs	r0, r4
 800aa9a:	603a      	str	r2, [r7, #0]
 800aa9c:	607b      	str	r3, [r7, #4]
 800aa9e:	0029      	movs	r1, r5
 800aaa0:	f7f7 fcf4 	bl	800248c <__aeabi_dsub>
 800aaa4:	4aa2      	ldr	r2, [pc, #648]	; (800ad30 <__ieee754_rem_pio2+0x2f8>)
 800aaa6:	4ba3      	ldr	r3, [pc, #652]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800aaa8:	f7f7 fcf0 	bl	800248c <__aeabi_dsub>
 800aaac:	2601      	movs	r6, #1
 800aaae:	60b8      	str	r0, [r7, #8]
 800aab0:	60f9      	str	r1, [r7, #12]
 800aab2:	0030      	movs	r0, r6
 800aab4:	b011      	add	sp, #68	; 0x44
 800aab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aab8:	22d3      	movs	r2, #211	; 0xd3
 800aaba:	4b9e      	ldr	r3, [pc, #632]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800aabc:	0552      	lsls	r2, r2, #21
 800aabe:	f7f7 fce5 	bl	800248c <__aeabi_dsub>
 800aac2:	4a9d      	ldr	r2, [pc, #628]	; (800ad38 <__ieee754_rem_pio2+0x300>)
 800aac4:	4b9d      	ldr	r3, [pc, #628]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800aac6:	0004      	movs	r4, r0
 800aac8:	000d      	movs	r5, r1
 800aaca:	f7f7 fcdf 	bl	800248c <__aeabi_dsub>
 800aace:	0002      	movs	r2, r0
 800aad0:	000b      	movs	r3, r1
 800aad2:	0020      	movs	r0, r4
 800aad4:	603a      	str	r2, [r7, #0]
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	0029      	movs	r1, r5
 800aada:	f7f7 fcd7 	bl	800248c <__aeabi_dsub>
 800aade:	4a96      	ldr	r2, [pc, #600]	; (800ad38 <__ieee754_rem_pio2+0x300>)
 800aae0:	4b96      	ldr	r3, [pc, #600]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800aae2:	e7e1      	b.n	800aaa8 <__ieee754_rem_pio2+0x70>
 800aae4:	0020      	movs	r0, r4
 800aae6:	0029      	movs	r1, r5
 800aae8:	4b8f      	ldr	r3, [pc, #572]	; (800ad28 <__ieee754_rem_pio2+0x2f0>)
 800aaea:	f7f6 fb25 	bl	8001138 <__aeabi_dadd>
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	0004      	movs	r4, r0
 800aaf2:	000d      	movs	r5, r1
 800aaf4:	42b3      	cmp	r3, r6
 800aaf6:	d014      	beq.n	800ab22 <__ieee754_rem_pio2+0xea>
 800aaf8:	4a8d      	ldr	r2, [pc, #564]	; (800ad30 <__ieee754_rem_pio2+0x2f8>)
 800aafa:	4b8e      	ldr	r3, [pc, #568]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800aafc:	f7f6 fb1c 	bl	8001138 <__aeabi_dadd>
 800ab00:	0002      	movs	r2, r0
 800ab02:	000b      	movs	r3, r1
 800ab04:	0020      	movs	r0, r4
 800ab06:	603a      	str	r2, [r7, #0]
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	0029      	movs	r1, r5
 800ab0c:	f7f7 fcbe 	bl	800248c <__aeabi_dsub>
 800ab10:	4a87      	ldr	r2, [pc, #540]	; (800ad30 <__ieee754_rem_pio2+0x2f8>)
 800ab12:	4b88      	ldr	r3, [pc, #544]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800ab14:	f7f6 fb10 	bl	8001138 <__aeabi_dadd>
 800ab18:	2601      	movs	r6, #1
 800ab1a:	60b8      	str	r0, [r7, #8]
 800ab1c:	60f9      	str	r1, [r7, #12]
 800ab1e:	4276      	negs	r6, r6
 800ab20:	e7c7      	b.n	800aab2 <__ieee754_rem_pio2+0x7a>
 800ab22:	22d3      	movs	r2, #211	; 0xd3
 800ab24:	4b83      	ldr	r3, [pc, #524]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800ab26:	0552      	lsls	r2, r2, #21
 800ab28:	f7f6 fb06 	bl	8001138 <__aeabi_dadd>
 800ab2c:	4a82      	ldr	r2, [pc, #520]	; (800ad38 <__ieee754_rem_pio2+0x300>)
 800ab2e:	4b83      	ldr	r3, [pc, #524]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800ab30:	0004      	movs	r4, r0
 800ab32:	000d      	movs	r5, r1
 800ab34:	f7f6 fb00 	bl	8001138 <__aeabi_dadd>
 800ab38:	0002      	movs	r2, r0
 800ab3a:	000b      	movs	r3, r1
 800ab3c:	0020      	movs	r0, r4
 800ab3e:	603a      	str	r2, [r7, #0]
 800ab40:	607b      	str	r3, [r7, #4]
 800ab42:	0029      	movs	r1, r5
 800ab44:	f7f7 fca2 	bl	800248c <__aeabi_dsub>
 800ab48:	4a7b      	ldr	r2, [pc, #492]	; (800ad38 <__ieee754_rem_pio2+0x300>)
 800ab4a:	4b7c      	ldr	r3, [pc, #496]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800ab4c:	e7e2      	b.n	800ab14 <__ieee754_rem_pio2+0xdc>
 800ab4e:	4b7c      	ldr	r3, [pc, #496]	; (800ad40 <__ieee754_rem_pio2+0x308>)
 800ab50:	9a02      	ldr	r2, [sp, #8]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	dd00      	ble.n	800ab58 <__ieee754_rem_pio2+0x120>
 800ab56:	e0d3      	b.n	800ad00 <__ieee754_rem_pio2+0x2c8>
 800ab58:	0020      	movs	r0, r4
 800ab5a:	0029      	movs	r1, r5
 800ab5c:	f000 febc 	bl	800b8d8 <fabs>
 800ab60:	4a78      	ldr	r2, [pc, #480]	; (800ad44 <__ieee754_rem_pio2+0x30c>)
 800ab62:	4b79      	ldr	r3, [pc, #484]	; (800ad48 <__ieee754_rem_pio2+0x310>)
 800ab64:	0004      	movs	r4, r0
 800ab66:	000d      	movs	r5, r1
 800ab68:	f7f7 fa24 	bl	8001fb4 <__aeabi_dmul>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4b77      	ldr	r3, [pc, #476]	; (800ad4c <__ieee754_rem_pio2+0x314>)
 800ab70:	f7f6 fae2 	bl	8001138 <__aeabi_dadd>
 800ab74:	f7f8 f81c 	bl	8002bb0 <__aeabi_d2iz>
 800ab78:	0006      	movs	r6, r0
 800ab7a:	f7f8 f84f 	bl	8002c1c <__aeabi_i2d>
 800ab7e:	4a6b      	ldr	r2, [pc, #428]	; (800ad2c <__ieee754_rem_pio2+0x2f4>)
 800ab80:	4b69      	ldr	r3, [pc, #420]	; (800ad28 <__ieee754_rem_pio2+0x2f0>)
 800ab82:	9006      	str	r0, [sp, #24]
 800ab84:	9107      	str	r1, [sp, #28]
 800ab86:	f7f7 fa15 	bl	8001fb4 <__aeabi_dmul>
 800ab8a:	0002      	movs	r2, r0
 800ab8c:	000b      	movs	r3, r1
 800ab8e:	0020      	movs	r0, r4
 800ab90:	0029      	movs	r1, r5
 800ab92:	f7f7 fc7b 	bl	800248c <__aeabi_dsub>
 800ab96:	4a66      	ldr	r2, [pc, #408]	; (800ad30 <__ieee754_rem_pio2+0x2f8>)
 800ab98:	9004      	str	r0, [sp, #16]
 800ab9a:	9105      	str	r1, [sp, #20]
 800ab9c:	9806      	ldr	r0, [sp, #24]
 800ab9e:	9907      	ldr	r1, [sp, #28]
 800aba0:	4b64      	ldr	r3, [pc, #400]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800aba2:	f7f7 fa07 	bl	8001fb4 <__aeabi_dmul>
 800aba6:	0004      	movs	r4, r0
 800aba8:	000d      	movs	r5, r1
 800abaa:	2e1f      	cmp	r6, #31
 800abac:	dc0f      	bgt.n	800abce <__ieee754_rem_pio2+0x196>
 800abae:	4a68      	ldr	r2, [pc, #416]	; (800ad50 <__ieee754_rem_pio2+0x318>)
 800abb0:	1e73      	subs	r3, r6, #1
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	589b      	ldr	r3, [r3, r2]
 800abb6:	9a02      	ldr	r2, [sp, #8]
 800abb8:	4293      	cmp	r3, r2
 800abba:	d008      	beq.n	800abce <__ieee754_rem_pio2+0x196>
 800abbc:	9804      	ldr	r0, [sp, #16]
 800abbe:	9905      	ldr	r1, [sp, #20]
 800abc0:	0022      	movs	r2, r4
 800abc2:	002b      	movs	r3, r5
 800abc4:	f7f7 fc62 	bl	800248c <__aeabi_dsub>
 800abc8:	6038      	str	r0, [r7, #0]
 800abca:	6079      	str	r1, [r7, #4]
 800abcc:	e012      	b.n	800abf4 <__ieee754_rem_pio2+0x1bc>
 800abce:	0022      	movs	r2, r4
 800abd0:	9804      	ldr	r0, [sp, #16]
 800abd2:	9905      	ldr	r1, [sp, #20]
 800abd4:	002b      	movs	r3, r5
 800abd6:	f7f7 fc59 	bl	800248c <__aeabi_dsub>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	151b      	asrs	r3, r3, #20
 800abde:	9308      	str	r3, [sp, #32]
 800abe0:	9a08      	ldr	r2, [sp, #32]
 800abe2:	004b      	lsls	r3, r1, #1
 800abe4:	0d5b      	lsrs	r3, r3, #21
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b10      	cmp	r3, #16
 800abea:	dc21      	bgt.n	800ac30 <__ieee754_rem_pio2+0x1f8>
 800abec:	0002      	movs	r2, r0
 800abee:	000b      	movs	r3, r1
 800abf0:	603a      	str	r2, [r7, #0]
 800abf2:	607b      	str	r3, [r7, #4]
 800abf4:	9804      	ldr	r0, [sp, #16]
 800abf6:	9905      	ldr	r1, [sp, #20]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	9302      	str	r3, [sp, #8]
 800abfe:	9b02      	ldr	r3, [sp, #8]
 800ac00:	f7f7 fc44 	bl	800248c <__aeabi_dsub>
 800ac04:	0022      	movs	r2, r4
 800ac06:	002b      	movs	r3, r5
 800ac08:	f7f7 fc40 	bl	800248c <__aeabi_dsub>
 800ac0c:	000b      	movs	r3, r1
 800ac0e:	0002      	movs	r2, r0
 800ac10:	60ba      	str	r2, [r7, #8]
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	db00      	blt.n	800ac1c <__ieee754_rem_pio2+0x1e4>
 800ac1a:	e74a      	b.n	800aab2 <__ieee754_rem_pio2+0x7a>
 800ac1c:	2380      	movs	r3, #128	; 0x80
 800ac1e:	061b      	lsls	r3, r3, #24
 800ac20:	469c      	mov	ip, r3
 800ac22:	9c02      	ldr	r4, [sp, #8]
 800ac24:	18c9      	adds	r1, r1, r3
 800ac26:	4464      	add	r4, ip
 800ac28:	607c      	str	r4, [r7, #4]
 800ac2a:	60b8      	str	r0, [r7, #8]
 800ac2c:	60f9      	str	r1, [r7, #12]
 800ac2e:	e776      	b.n	800ab1e <__ieee754_rem_pio2+0xe6>
 800ac30:	22d3      	movs	r2, #211	; 0xd3
 800ac32:	9806      	ldr	r0, [sp, #24]
 800ac34:	9907      	ldr	r1, [sp, #28]
 800ac36:	4b3f      	ldr	r3, [pc, #252]	; (800ad34 <__ieee754_rem_pio2+0x2fc>)
 800ac38:	0552      	lsls	r2, r2, #21
 800ac3a:	f7f7 f9bb 	bl	8001fb4 <__aeabi_dmul>
 800ac3e:	0004      	movs	r4, r0
 800ac40:	000d      	movs	r5, r1
 800ac42:	0002      	movs	r2, r0
 800ac44:	000b      	movs	r3, r1
 800ac46:	9804      	ldr	r0, [sp, #16]
 800ac48:	9905      	ldr	r1, [sp, #20]
 800ac4a:	f7f7 fc1f 	bl	800248c <__aeabi_dsub>
 800ac4e:	0002      	movs	r2, r0
 800ac50:	000b      	movs	r3, r1
 800ac52:	9002      	str	r0, [sp, #8]
 800ac54:	9103      	str	r1, [sp, #12]
 800ac56:	9804      	ldr	r0, [sp, #16]
 800ac58:	9905      	ldr	r1, [sp, #20]
 800ac5a:	f7f7 fc17 	bl	800248c <__aeabi_dsub>
 800ac5e:	0022      	movs	r2, r4
 800ac60:	002b      	movs	r3, r5
 800ac62:	f7f7 fc13 	bl	800248c <__aeabi_dsub>
 800ac66:	0004      	movs	r4, r0
 800ac68:	000d      	movs	r5, r1
 800ac6a:	9806      	ldr	r0, [sp, #24]
 800ac6c:	9907      	ldr	r1, [sp, #28]
 800ac6e:	4a32      	ldr	r2, [pc, #200]	; (800ad38 <__ieee754_rem_pio2+0x300>)
 800ac70:	4b32      	ldr	r3, [pc, #200]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800ac72:	f7f7 f99f 	bl	8001fb4 <__aeabi_dmul>
 800ac76:	0022      	movs	r2, r4
 800ac78:	002b      	movs	r3, r5
 800ac7a:	f7f7 fc07 	bl	800248c <__aeabi_dsub>
 800ac7e:	0002      	movs	r2, r0
 800ac80:	000b      	movs	r3, r1
 800ac82:	0004      	movs	r4, r0
 800ac84:	000d      	movs	r5, r1
 800ac86:	9802      	ldr	r0, [sp, #8]
 800ac88:	9903      	ldr	r1, [sp, #12]
 800ac8a:	f7f7 fbff 	bl	800248c <__aeabi_dsub>
 800ac8e:	9a08      	ldr	r2, [sp, #32]
 800ac90:	004b      	lsls	r3, r1, #1
 800ac92:	0d5b      	lsrs	r3, r3, #21
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b31      	cmp	r3, #49	; 0x31
 800ac98:	dc08      	bgt.n	800acac <__ieee754_rem_pio2+0x274>
 800ac9a:	0002      	movs	r2, r0
 800ac9c:	000b      	movs	r3, r1
 800ac9e:	603a      	str	r2, [r7, #0]
 800aca0:	607b      	str	r3, [r7, #4]
 800aca2:	9a02      	ldr	r2, [sp, #8]
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	9204      	str	r2, [sp, #16]
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	e7a3      	b.n	800abf4 <__ieee754_rem_pio2+0x1bc>
 800acac:	22b8      	movs	r2, #184	; 0xb8
 800acae:	9806      	ldr	r0, [sp, #24]
 800acb0:	9907      	ldr	r1, [sp, #28]
 800acb2:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <__ieee754_rem_pio2+0x304>)
 800acb4:	0592      	lsls	r2, r2, #22
 800acb6:	f7f7 f97d 	bl	8001fb4 <__aeabi_dmul>
 800acba:	0004      	movs	r4, r0
 800acbc:	000d      	movs	r5, r1
 800acbe:	0002      	movs	r2, r0
 800acc0:	000b      	movs	r3, r1
 800acc2:	9802      	ldr	r0, [sp, #8]
 800acc4:	9903      	ldr	r1, [sp, #12]
 800acc6:	f7f7 fbe1 	bl	800248c <__aeabi_dsub>
 800acca:	0002      	movs	r2, r0
 800accc:	000b      	movs	r3, r1
 800acce:	9004      	str	r0, [sp, #16]
 800acd0:	9105      	str	r1, [sp, #20]
 800acd2:	9802      	ldr	r0, [sp, #8]
 800acd4:	9903      	ldr	r1, [sp, #12]
 800acd6:	f7f7 fbd9 	bl	800248c <__aeabi_dsub>
 800acda:	0022      	movs	r2, r4
 800acdc:	002b      	movs	r3, r5
 800acde:	f7f7 fbd5 	bl	800248c <__aeabi_dsub>
 800ace2:	0004      	movs	r4, r0
 800ace4:	000d      	movs	r5, r1
 800ace6:	9806      	ldr	r0, [sp, #24]
 800ace8:	9907      	ldr	r1, [sp, #28]
 800acea:	4a1a      	ldr	r2, [pc, #104]	; (800ad54 <__ieee754_rem_pio2+0x31c>)
 800acec:	4b1a      	ldr	r3, [pc, #104]	; (800ad58 <__ieee754_rem_pio2+0x320>)
 800acee:	f7f7 f961 	bl	8001fb4 <__aeabi_dmul>
 800acf2:	0022      	movs	r2, r4
 800acf4:	002b      	movs	r3, r5
 800acf6:	f7f7 fbc9 	bl	800248c <__aeabi_dsub>
 800acfa:	0004      	movs	r4, r0
 800acfc:	000d      	movs	r5, r1
 800acfe:	e75d      	b.n	800abbc <__ieee754_rem_pio2+0x184>
 800ad00:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <__ieee754_rem_pio2+0x324>)
 800ad02:	9a02      	ldr	r2, [sp, #8]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	dd2b      	ble.n	800ad60 <__ieee754_rem_pio2+0x328>
 800ad08:	0022      	movs	r2, r4
 800ad0a:	002b      	movs	r3, r5
 800ad0c:	0020      	movs	r0, r4
 800ad0e:	0029      	movs	r1, r5
 800ad10:	f7f7 fbbc 	bl	800248c <__aeabi_dsub>
 800ad14:	60b8      	str	r0, [r7, #8]
 800ad16:	60f9      	str	r1, [r7, #12]
 800ad18:	6038      	str	r0, [r7, #0]
 800ad1a:	6079      	str	r1, [r7, #4]
 800ad1c:	e6a1      	b.n	800aa62 <__ieee754_rem_pio2+0x2a>
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	3fe921fb 	.word	0x3fe921fb
 800ad24:	4002d97b 	.word	0x4002d97b
 800ad28:	3ff921fb 	.word	0x3ff921fb
 800ad2c:	54400000 	.word	0x54400000
 800ad30:	1a626331 	.word	0x1a626331
 800ad34:	3dd0b461 	.word	0x3dd0b461
 800ad38:	2e037073 	.word	0x2e037073
 800ad3c:	3ba3198a 	.word	0x3ba3198a
 800ad40:	413921fb 	.word	0x413921fb
 800ad44:	6dc9c883 	.word	0x6dc9c883
 800ad48:	3fe45f30 	.word	0x3fe45f30
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	0800bd54 	.word	0x0800bd54
 800ad54:	252049c1 	.word	0x252049c1
 800ad58:	397b839a 	.word	0x397b839a
 800ad5c:	7fefffff 	.word	0x7fefffff
 800ad60:	9a02      	ldr	r2, [sp, #8]
 800ad62:	0020      	movs	r0, r4
 800ad64:	1516      	asrs	r6, r2, #20
 800ad66:	4a29      	ldr	r2, [pc, #164]	; (800ae0c <__ieee754_rem_pio2+0x3d4>)
 800ad68:	18b6      	adds	r6, r6, r2
 800ad6a:	9a02      	ldr	r2, [sp, #8]
 800ad6c:	0533      	lsls	r3, r6, #20
 800ad6e:	1ad5      	subs	r5, r2, r3
 800ad70:	0029      	movs	r1, r5
 800ad72:	f7f7 ff1d 	bl	8002bb0 <__aeabi_d2iz>
 800ad76:	f7f7 ff51 	bl	8002c1c <__aeabi_i2d>
 800ad7a:	0002      	movs	r2, r0
 800ad7c:	000b      	movs	r3, r1
 800ad7e:	0020      	movs	r0, r4
 800ad80:	0029      	movs	r1, r5
 800ad82:	920a      	str	r2, [sp, #40]	; 0x28
 800ad84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad86:	f7f7 fb81 	bl	800248c <__aeabi_dsub>
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <__ieee754_rem_pio2+0x3d8>)
 800ad8e:	f7f7 f911 	bl	8001fb4 <__aeabi_dmul>
 800ad92:	000d      	movs	r5, r1
 800ad94:	0004      	movs	r4, r0
 800ad96:	f7f7 ff0b 	bl	8002bb0 <__aeabi_d2iz>
 800ad9a:	f7f7 ff3f 	bl	8002c1c <__aeabi_i2d>
 800ad9e:	0002      	movs	r2, r0
 800ada0:	000b      	movs	r3, r1
 800ada2:	0020      	movs	r0, r4
 800ada4:	0029      	movs	r1, r5
 800ada6:	920c      	str	r2, [sp, #48]	; 0x30
 800ada8:	930d      	str	r3, [sp, #52]	; 0x34
 800adaa:	f7f7 fb6f 	bl	800248c <__aeabi_dsub>
 800adae:	2200      	movs	r2, #0
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <__ieee754_rem_pio2+0x3d8>)
 800adb2:	f7f7 f8ff 	bl	8001fb4 <__aeabi_dmul>
 800adb6:	2503      	movs	r5, #3
 800adb8:	900e      	str	r0, [sp, #56]	; 0x38
 800adba:	910f      	str	r1, [sp, #60]	; 0x3c
 800adbc:	ac0a      	add	r4, sp, #40	; 0x28
 800adbe:	2200      	movs	r2, #0
 800adc0:	6920      	ldr	r0, [r4, #16]
 800adc2:	6961      	ldr	r1, [r4, #20]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9502      	str	r5, [sp, #8]
 800adc8:	3c08      	subs	r4, #8
 800adca:	3d01      	subs	r5, #1
 800adcc:	f7f5 fb20 	bl	8000410 <__aeabi_dcmpeq>
 800add0:	2800      	cmp	r0, #0
 800add2:	d1f4      	bne.n	800adbe <__ieee754_rem_pio2+0x386>
 800add4:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <__ieee754_rem_pio2+0x3dc>)
 800add6:	0032      	movs	r2, r6
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	2302      	movs	r3, #2
 800addc:	0039      	movs	r1, r7
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	a80a      	add	r0, sp, #40	; 0x28
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	f000 f818 	bl	800ae18 <__kernel_rem_pio2>
 800ade8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adea:	0006      	movs	r6, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	db00      	blt.n	800adf2 <__ieee754_rem_pio2+0x3ba>
 800adf0:	e65f      	b.n	800aab2 <__ieee754_rem_pio2+0x7a>
 800adf2:	2180      	movs	r1, #128	; 0x80
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	0609      	lsls	r1, r1, #24
 800adfa:	1843      	adds	r3, r0, r1
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	603a      	str	r2, [r7, #0]
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	1843      	adds	r3, r0, r1
 800ae06:	60ba      	str	r2, [r7, #8]
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e688      	b.n	800ab1e <__ieee754_rem_pio2+0xe6>
 800ae0c:	fffffbea 	.word	0xfffffbea
 800ae10:	41700000 	.word	0x41700000
 800ae14:	0800bdd4 	.word	0x0800bdd4

0800ae18 <__kernel_rem_pio2>:
 800ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae1a:	4ccb      	ldr	r4, [pc, #812]	; (800b148 <__kernel_rem_pio2+0x330>)
 800ae1c:	44a5      	add	sp, r4
 800ae1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ae22:	0014      	movs	r4, r2
 800ae24:	009a      	lsls	r2, r3, #2
 800ae26:	4bc9      	ldr	r3, [pc, #804]	; (800b14c <__kernel_rem_pio2+0x334>)
 800ae28:	900e      	str	r0, [sp, #56]	; 0x38
 800ae2a:	58d3      	ldr	r3, [r2, r3]
 800ae2c:	9107      	str	r1, [sp, #28]
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae32:	3b01      	subs	r3, #1
 800ae34:	930c      	str	r3, [sp, #48]	; 0x30
 800ae36:	2300      	movs	r3, #0
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	0023      	movs	r3, r4
 800ae3c:	3314      	adds	r3, #20
 800ae3e:	db04      	blt.n	800ae4a <__kernel_rem_pio2+0x32>
 800ae40:	2118      	movs	r1, #24
 800ae42:	1ee0      	subs	r0, r4, #3
 800ae44:	f7f5 f9e8 	bl	8000218 <__divsi3>
 800ae48:	9000      	str	r0, [sp, #0]
 800ae4a:	2218      	movs	r2, #24
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	4252      	negs	r2, r2
 800ae50:	3301      	adds	r3, #1
 800ae52:	435a      	muls	r2, r3
 800ae54:	1913      	adds	r3, r2, r4
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae5a:	9b00      	ldr	r3, [sp, #0]
 800ae5c:	ae26      	add	r6, sp, #152	; 0x98
 800ae5e:	1a9d      	subs	r5, r3, r2
 800ae60:	002c      	movs	r4, r5
 800ae62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae64:	189f      	adds	r7, r3, r2
 800ae66:	1b63      	subs	r3, r4, r5
 800ae68:	429f      	cmp	r7, r3
 800ae6a:	da0f      	bge.n	800ae8c <__kernel_rem_pio2+0x74>
 800ae6c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ae6e:	af76      	add	r7, sp, #472	; 0x1d8
 800ae70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae74:	1af3      	subs	r3, r6, r3
 800ae76:	429a      	cmp	r2, r3
 800ae78:	db30      	blt.n	800aedc <__kernel_rem_pio2+0xc4>
 800ae7a:	ab26      	add	r3, sp, #152	; 0x98
 800ae7c:	00f4      	lsls	r4, r6, #3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	18e4      	adds	r4, r4, r3
 800ae82:	2300      	movs	r3, #0
 800ae84:	2500      	movs	r5, #0
 800ae86:	9204      	str	r2, [sp, #16]
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	e01e      	b.n	800aeca <__kernel_rem_pio2+0xb2>
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	db07      	blt.n	800aea0 <__kernel_rem_pio2+0x88>
 800ae90:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800ae92:	00a3      	lsls	r3, r4, #2
 800ae94:	58d0      	ldr	r0, [r2, r3]
 800ae96:	f7f7 fec1 	bl	8002c1c <__aeabi_i2d>
 800ae9a:	c603      	stmia	r6!, {r0, r1}
 800ae9c:	3401      	adds	r4, #1
 800ae9e:	e7e2      	b.n	800ae66 <__kernel_rem_pio2+0x4e>
 800aea0:	2000      	movs	r0, #0
 800aea2:	2100      	movs	r1, #0
 800aea4:	e7f9      	b.n	800ae9a <__kernel_rem_pio2+0x82>
 800aea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aea8:	00e9      	lsls	r1, r5, #3
 800aeaa:	1859      	adds	r1, r3, r1
 800aeac:	6808      	ldr	r0, [r1, #0]
 800aeae:	6849      	ldr	r1, [r1, #4]
 800aeb0:	6822      	ldr	r2, [r4, #0]
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	f7f7 f87e 	bl	8001fb4 <__aeabi_dmul>
 800aeb8:	0002      	movs	r2, r0
 800aeba:	000b      	movs	r3, r1
 800aebc:	9804      	ldr	r0, [sp, #16]
 800aebe:	9905      	ldr	r1, [sp, #20]
 800aec0:	f7f6 f93a 	bl	8001138 <__aeabi_dadd>
 800aec4:	9004      	str	r0, [sp, #16]
 800aec6:	9105      	str	r1, [sp, #20]
 800aec8:	3501      	adds	r5, #1
 800aeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aecc:	3c08      	subs	r4, #8
 800aece:	429d      	cmp	r5, r3
 800aed0:	dde9      	ble.n	800aea6 <__kernel_rem_pio2+0x8e>
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	9c05      	ldr	r4, [sp, #20]
 800aed6:	3601      	adds	r6, #1
 800aed8:	c718      	stmia	r7!, {r3, r4}
 800aeda:	e7c9      	b.n	800ae70 <__kernel_rem_pio2+0x58>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	aa12      	add	r2, sp, #72	; 0x48
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	189b      	adds	r3, r3, r2
 800aee4:	9310      	str	r3, [sp, #64]	; 0x40
 800aee6:	9b00      	ldr	r3, [sp, #0]
 800aee8:	0098      	lsls	r0, r3, #2
 800aeea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800aeec:	181b      	adds	r3, r3, r0
 800aeee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	aa76      	add	r2, sp, #472	; 0x1d8
 800aef8:	00db      	lsls	r3, r3, #3
 800aefa:	18d3      	adds	r3, r2, r3
 800aefc:	681c      	ldr	r4, [r3, #0]
 800aefe:	685d      	ldr	r5, [r3, #4]
 800af00:	ab12      	add	r3, sp, #72	; 0x48
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	9309      	str	r3, [sp, #36]	; 0x24
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	9211      	str	r2, [sp, #68]	; 0x44
 800af0a:	9308      	str	r3, [sp, #32]
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc74      	bgt.n	800affc <__kernel_rem_pio2+0x1e4>
 800af12:	0020      	movs	r0, r4
 800af14:	0029      	movs	r1, r5
 800af16:	9a02      	ldr	r2, [sp, #8]
 800af18:	f000 fd6c 	bl	800b9f4 <scalbn>
 800af1c:	23ff      	movs	r3, #255	; 0xff
 800af1e:	2200      	movs	r2, #0
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	0004      	movs	r4, r0
 800af24:	000d      	movs	r5, r1
 800af26:	f7f7 f845 	bl	8001fb4 <__aeabi_dmul>
 800af2a:	f000 fcd9 	bl	800b8e0 <floor>
 800af2e:	2200      	movs	r2, #0
 800af30:	4b87      	ldr	r3, [pc, #540]	; (800b150 <__kernel_rem_pio2+0x338>)
 800af32:	f7f7 f83f 	bl	8001fb4 <__aeabi_dmul>
 800af36:	0002      	movs	r2, r0
 800af38:	000b      	movs	r3, r1
 800af3a:	0020      	movs	r0, r4
 800af3c:	0029      	movs	r1, r5
 800af3e:	f7f7 faa5 	bl	800248c <__aeabi_dsub>
 800af42:	000d      	movs	r5, r1
 800af44:	0004      	movs	r4, r0
 800af46:	f7f7 fe33 	bl	8002bb0 <__aeabi_d2iz>
 800af4a:	9009      	str	r0, [sp, #36]	; 0x24
 800af4c:	f7f7 fe66 	bl	8002c1c <__aeabi_i2d>
 800af50:	000b      	movs	r3, r1
 800af52:	0002      	movs	r2, r0
 800af54:	0029      	movs	r1, r5
 800af56:	0020      	movs	r0, r4
 800af58:	f7f7 fa98 	bl	800248c <__aeabi_dsub>
 800af5c:	9b02      	ldr	r3, [sp, #8]
 800af5e:	0006      	movs	r6, r0
 800af60:	000f      	movs	r7, r1
 800af62:	2b00      	cmp	r3, #0
 800af64:	dd74      	ble.n	800b050 <__kernel_rem_pio2+0x238>
 800af66:	2118      	movs	r1, #24
 800af68:	9b04      	ldr	r3, [sp, #16]
 800af6a:	aa12      	add	r2, sp, #72	; 0x48
 800af6c:	3b01      	subs	r3, #1
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	589a      	ldr	r2, [r3, r2]
 800af72:	9802      	ldr	r0, [sp, #8]
 800af74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800af76:	1a09      	subs	r1, r1, r0
 800af78:	0010      	movs	r0, r2
 800af7a:	4108      	asrs	r0, r1
 800af7c:	1824      	adds	r4, r4, r0
 800af7e:	4088      	lsls	r0, r1
 800af80:	a912      	add	r1, sp, #72	; 0x48
 800af82:	1a12      	subs	r2, r2, r0
 800af84:	505a      	str	r2, [r3, r1]
 800af86:	2317      	movs	r3, #23
 800af88:	9902      	ldr	r1, [sp, #8]
 800af8a:	9409      	str	r4, [sp, #36]	; 0x24
 800af8c:	1a5b      	subs	r3, r3, r1
 800af8e:	411a      	asrs	r2, r3
 800af90:	9208      	str	r2, [sp, #32]
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd6d      	ble.n	800b074 <__kernel_rem_pio2+0x25c>
 800af98:	2200      	movs	r2, #0
 800af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9c:	2080      	movs	r0, #128	; 0x80
 800af9e:	3301      	adds	r3, #1
 800afa0:	9309      	str	r3, [sp, #36]	; 0x24
 800afa2:	4b6c      	ldr	r3, [pc, #432]	; (800b154 <__kernel_rem_pio2+0x33c>)
 800afa4:	0014      	movs	r4, r2
 800afa6:	469c      	mov	ip, r3
 800afa8:	2501      	movs	r5, #1
 800afaa:	0440      	lsls	r0, r0, #17
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	4293      	cmp	r3, r2
 800afb0:	dd00      	ble.n	800afb4 <__kernel_rem_pio2+0x19c>
 800afb2:	e099      	b.n	800b0e8 <__kernel_rem_pio2+0x2d0>
 800afb4:	9b02      	ldr	r3, [sp, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dd05      	ble.n	800afc6 <__kernel_rem_pio2+0x1ae>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d100      	bne.n	800afc0 <__kernel_rem_pio2+0x1a8>
 800afbe:	e0a9      	b.n	800b114 <__kernel_rem_pio2+0x2fc>
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d100      	bne.n	800afc6 <__kernel_rem_pio2+0x1ae>
 800afc4:	e0b1      	b.n	800b12a <__kernel_rem_pio2+0x312>
 800afc6:	9b08      	ldr	r3, [sp, #32]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d153      	bne.n	800b074 <__kernel_rem_pio2+0x25c>
 800afcc:	0032      	movs	r2, r6
 800afce:	003b      	movs	r3, r7
 800afd0:	2000      	movs	r0, #0
 800afd2:	4961      	ldr	r1, [pc, #388]	; (800b158 <__kernel_rem_pio2+0x340>)
 800afd4:	f7f7 fa5a 	bl	800248c <__aeabi_dsub>
 800afd8:	0006      	movs	r6, r0
 800afda:	000f      	movs	r7, r1
 800afdc:	2c00      	cmp	r4, #0
 800afde:	d049      	beq.n	800b074 <__kernel_rem_pio2+0x25c>
 800afe0:	9a02      	ldr	r2, [sp, #8]
 800afe2:	2000      	movs	r0, #0
 800afe4:	495c      	ldr	r1, [pc, #368]	; (800b158 <__kernel_rem_pio2+0x340>)
 800afe6:	f000 fd05 	bl	800b9f4 <scalbn>
 800afea:	0002      	movs	r2, r0
 800afec:	000b      	movs	r3, r1
 800afee:	0030      	movs	r0, r6
 800aff0:	0039      	movs	r1, r7
 800aff2:	f7f7 fa4b 	bl	800248c <__aeabi_dsub>
 800aff6:	0006      	movs	r6, r0
 800aff8:	000f      	movs	r7, r1
 800affa:	e03b      	b.n	800b074 <__kernel_rem_pio2+0x25c>
 800affc:	2200      	movs	r2, #0
 800affe:	4b57      	ldr	r3, [pc, #348]	; (800b15c <__kernel_rem_pio2+0x344>)
 800b000:	0020      	movs	r0, r4
 800b002:	0029      	movs	r1, r5
 800b004:	f7f6 ffd6 	bl	8001fb4 <__aeabi_dmul>
 800b008:	f7f7 fdd2 	bl	8002bb0 <__aeabi_d2iz>
 800b00c:	f7f7 fe06 	bl	8002c1c <__aeabi_i2d>
 800b010:	2200      	movs	r2, #0
 800b012:	4b53      	ldr	r3, [pc, #332]	; (800b160 <__kernel_rem_pio2+0x348>)
 800b014:	0006      	movs	r6, r0
 800b016:	000f      	movs	r7, r1
 800b018:	f7f6 ffcc 	bl	8001fb4 <__aeabi_dmul>
 800b01c:	0002      	movs	r2, r0
 800b01e:	000b      	movs	r3, r1
 800b020:	0020      	movs	r0, r4
 800b022:	0029      	movs	r1, r5
 800b024:	f7f7 fa32 	bl	800248c <__aeabi_dsub>
 800b028:	f7f7 fdc2 	bl	8002bb0 <__aeabi_d2iz>
 800b02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b030:	c301      	stmia	r3!, {r0}
 800b032:	9309      	str	r3, [sp, #36]	; 0x24
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	0030      	movs	r0, r6
 800b038:	3b01      	subs	r3, #1
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	18d3      	adds	r3, r2, r3
 800b040:	0039      	movs	r1, r7
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f7f6 f877 	bl	8001138 <__aeabi_dadd>
 800b04a:	0004      	movs	r4, r0
 800b04c:	000d      	movs	r5, r1
 800b04e:	e75d      	b.n	800af0c <__kernel_rem_pio2+0xf4>
 800b050:	9b02      	ldr	r3, [sp, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d107      	bne.n	800b066 <__kernel_rem_pio2+0x24e>
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	aa12      	add	r2, sp, #72	; 0x48
 800b05a:	3b01      	subs	r3, #1
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	5898      	ldr	r0, [r3, r2]
 800b060:	15c3      	asrs	r3, r0, #23
 800b062:	9308      	str	r3, [sp, #32]
 800b064:	e795      	b.n	800af92 <__kernel_rem_pio2+0x17a>
 800b066:	2200      	movs	r2, #0
 800b068:	4b3e      	ldr	r3, [pc, #248]	; (800b164 <__kernel_rem_pio2+0x34c>)
 800b06a:	f7f5 f9f5 	bl	8000458 <__aeabi_dcmpge>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d137      	bne.n	800b0e2 <__kernel_rem_pio2+0x2ca>
 800b072:	9008      	str	r0, [sp, #32]
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	0030      	movs	r0, r6
 800b07a:	0039      	movs	r1, r7
 800b07c:	f7f5 f9c8 	bl	8000410 <__aeabi_dcmpeq>
 800b080:	2800      	cmp	r0, #0
 800b082:	d100      	bne.n	800b086 <__kernel_rem_pio2+0x26e>
 800b084:	e0b9      	b.n	800b1fa <__kernel_rem_pio2+0x3e2>
 800b086:	2200      	movs	r2, #0
 800b088:	9b04      	ldr	r3, [sp, #16]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b090:	428b      	cmp	r3, r1
 800b092:	da53      	bge.n	800b13c <__kernel_rem_pio2+0x324>
 800b094:	2a00      	cmp	r2, #0
 800b096:	d100      	bne.n	800b09a <__kernel_rem_pio2+0x282>
 800b098:	e095      	b.n	800b1c6 <__kernel_rem_pio2+0x3ae>
 800b09a:	9b02      	ldr	r3, [sp, #8]
 800b09c:	aa12      	add	r2, sp, #72	; 0x48
 800b09e:	3b18      	subs	r3, #24
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	589b      	ldr	r3, [r3, r2]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d100      	bne.n	800b0ae <__kernel_rem_pio2+0x296>
 800b0ac:	e0a1      	b.n	800b1f2 <__kernel_rem_pio2+0x3da>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	9a02      	ldr	r2, [sp, #8]
 800b0b2:	4929      	ldr	r1, [pc, #164]	; (800b158 <__kernel_rem_pio2+0x340>)
 800b0b4:	f000 fc9e 	bl	800b9f4 <scalbn>
 800b0b8:	0006      	movs	r6, r0
 800b0ba:	000f      	movs	r7, r1
 800b0bc:	9c00      	ldr	r4, [sp, #0]
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	db00      	blt.n	800b0c4 <__kernel_rem_pio2+0x2ac>
 800b0c2:	e0d9      	b.n	800b278 <__kernel_rem_pio2+0x460>
 800b0c4:	9c00      	ldr	r4, [sp, #0]
 800b0c6:	2c00      	cmp	r4, #0
 800b0c8:	da00      	bge.n	800b0cc <__kernel_rem_pio2+0x2b4>
 800b0ca:	e10c      	b.n	800b2e6 <__kernel_rem_pio2+0x4ce>
 800b0cc:	ab76      	add	r3, sp, #472	; 0x1d8
 800b0ce:	00e6      	lsls	r6, r4, #3
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	18f6      	adds	r6, r6, r3
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9202      	str	r2, [sp, #8]
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	9b00      	ldr	r3, [sp, #0]
 800b0dc:	2500      	movs	r5, #0
 800b0de:	1b1f      	subs	r7, r3, r4
 800b0e0:	e0f3      	b.n	800b2ca <__kernel_rem_pio2+0x4b2>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	9308      	str	r3, [sp, #32]
 800b0e6:	e757      	b.n	800af98 <__kernel_rem_pio2+0x180>
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2c00      	cmp	r4, #0
 800b0ee:	d10b      	bne.n	800b108 <__kernel_rem_pio2+0x2f0>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <__kernel_rem_pio2+0x2e4>
 800b0f4:	9c00      	ldr	r4, [sp, #0]
 800b0f6:	1ac3      	subs	r3, r0, r3
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	002b      	movs	r3, r5
 800b0fc:	9c00      	ldr	r4, [sp, #0]
 800b0fe:	3201      	adds	r2, #1
 800b100:	3404      	adds	r4, #4
 800b102:	9400      	str	r4, [sp, #0]
 800b104:	001c      	movs	r4, r3
 800b106:	e751      	b.n	800afac <__kernel_rem_pio2+0x194>
 800b108:	4661      	mov	r1, ip
 800b10a:	1acb      	subs	r3, r1, r3
 800b10c:	9900      	ldr	r1, [sp, #0]
 800b10e:	600b      	str	r3, [r1, #0]
 800b110:	0023      	movs	r3, r4
 800b112:	e7f3      	b.n	800b0fc <__kernel_rem_pio2+0x2e4>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	aa12      	add	r2, sp, #72	; 0x48
 800b118:	3b01      	subs	r3, #1
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	589a      	ldr	r2, [r3, r2]
 800b11e:	9200      	str	r2, [sp, #0]
 800b120:	0252      	lsls	r2, r2, #9
 800b122:	0a52      	lsrs	r2, r2, #9
 800b124:	a912      	add	r1, sp, #72	; 0x48
 800b126:	505a      	str	r2, [r3, r1]
 800b128:	e74d      	b.n	800afc6 <__kernel_rem_pio2+0x1ae>
 800b12a:	9b04      	ldr	r3, [sp, #16]
 800b12c:	aa12      	add	r2, sp, #72	; 0x48
 800b12e:	3b01      	subs	r3, #1
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	589a      	ldr	r2, [r3, r2]
 800b134:	9200      	str	r2, [sp, #0]
 800b136:	0292      	lsls	r2, r2, #10
 800b138:	0a92      	lsrs	r2, r2, #10
 800b13a:	e7f3      	b.n	800b124 <__kernel_rem_pio2+0x30c>
 800b13c:	0099      	lsls	r1, r3, #2
 800b13e:	a812      	add	r0, sp, #72	; 0x48
 800b140:	5809      	ldr	r1, [r1, r0]
 800b142:	3b01      	subs	r3, #1
 800b144:	430a      	orrs	r2, r1
 800b146:	e7a2      	b.n	800b08e <__kernel_rem_pio2+0x276>
 800b148:	fffffd84 	.word	0xfffffd84
 800b14c:	0800bf20 	.word	0x0800bf20
 800b150:	40200000 	.word	0x40200000
 800b154:	00ffffff 	.word	0x00ffffff
 800b158:	3ff00000 	.word	0x3ff00000
 800b15c:	3e700000 	.word	0x3e700000
 800b160:	41700000 	.word	0x41700000
 800b164:	3fe00000 	.word	0x3fe00000
 800b168:	3301      	adds	r3, #1
 800b16a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b16c:	009a      	lsls	r2, r3, #2
 800b16e:	4252      	negs	r2, r2
 800b170:	588a      	ldr	r2, [r1, r2]
 800b172:	2a00      	cmp	r2, #0
 800b174:	d0f8      	beq.n	800b168 <__kernel_rem_pio2+0x350>
 800b176:	9a04      	ldr	r2, [sp, #16]
 800b178:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b17a:	1c57      	adds	r7, r2, #1
 800b17c:	1854      	adds	r4, r2, r1
 800b17e:	00e4      	lsls	r4, r4, #3
 800b180:	aa26      	add	r2, sp, #152	; 0x98
 800b182:	1914      	adds	r4, r2, r4
 800b184:	9a04      	ldr	r2, [sp, #16]
 800b186:	18d3      	adds	r3, r2, r3
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	42bb      	cmp	r3, r7
 800b18e:	da00      	bge.n	800b192 <__kernel_rem_pio2+0x37a>
 800b190:	e6b0      	b.n	800aef4 <__kernel_rem_pio2+0xdc>
 800b192:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b194:	00bb      	lsls	r3, r7, #2
 800b196:	58d0      	ldr	r0, [r2, r3]
 800b198:	f7f7 fd40 	bl	8002c1c <__aeabi_i2d>
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	0026      	movs	r6, r4
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	6020      	str	r0, [r4, #0]
 800b1a6:	6061      	str	r1, [r4, #4]
 800b1a8:	9200      	str	r2, [sp, #0]
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	dd0b      	ble.n	800b1ca <__kernel_rem_pio2+0x3b2>
 800b1b2:	00fb      	lsls	r3, r7, #3
 800b1b4:	aa76      	add	r2, sp, #472	; 0x1d8
 800b1b6:	18d3      	adds	r3, r2, r3
 800b1b8:	3701      	adds	r7, #1
 800b1ba:	9900      	ldr	r1, [sp, #0]
 800b1bc:	9a01      	ldr	r2, [sp, #4]
 800b1be:	3408      	adds	r4, #8
 800b1c0:	6019      	str	r1, [r3, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	e7e1      	b.n	800b18a <__kernel_rem_pio2+0x372>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e7cf      	b.n	800b16a <__kernel_rem_pio2+0x352>
 800b1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1cc:	00e9      	lsls	r1, r5, #3
 800b1ce:	1859      	adds	r1, r3, r1
 800b1d0:	6808      	ldr	r0, [r1, #0]
 800b1d2:	6849      	ldr	r1, [r1, #4]
 800b1d4:	6832      	ldr	r2, [r6, #0]
 800b1d6:	6873      	ldr	r3, [r6, #4]
 800b1d8:	f7f6 feec 	bl	8001fb4 <__aeabi_dmul>
 800b1dc:	0002      	movs	r2, r0
 800b1de:	000b      	movs	r3, r1
 800b1e0:	9800      	ldr	r0, [sp, #0]
 800b1e2:	9901      	ldr	r1, [sp, #4]
 800b1e4:	f7f5 ffa8 	bl	8001138 <__aeabi_dadd>
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	9000      	str	r0, [sp, #0]
 800b1ec:	9101      	str	r1, [sp, #4]
 800b1ee:	3e08      	subs	r6, #8
 800b1f0:	e7dc      	b.n	800b1ac <__kernel_rem_pio2+0x394>
 800b1f2:	9b00      	ldr	r3, [sp, #0]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	e74f      	b.n	800b09a <__kernel_rem_pio2+0x282>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	0030      	movs	r0, r6
 800b1fe:	425a      	negs	r2, r3
 800b200:	0039      	movs	r1, r7
 800b202:	f000 fbf7 	bl	800b9f4 <scalbn>
 800b206:	2200      	movs	r2, #0
 800b208:	4bb5      	ldr	r3, [pc, #724]	; (800b4e0 <__kernel_rem_pio2+0x6c8>)
 800b20a:	0004      	movs	r4, r0
 800b20c:	000d      	movs	r5, r1
 800b20e:	f7f5 f923 	bl	8000458 <__aeabi_dcmpge>
 800b212:	2800      	cmp	r0, #0
 800b214:	d025      	beq.n	800b262 <__kernel_rem_pio2+0x44a>
 800b216:	2200      	movs	r2, #0
 800b218:	4bb2      	ldr	r3, [pc, #712]	; (800b4e4 <__kernel_rem_pio2+0x6cc>)
 800b21a:	0020      	movs	r0, r4
 800b21c:	0029      	movs	r1, r5
 800b21e:	f7f6 fec9 	bl	8001fb4 <__aeabi_dmul>
 800b222:	f7f7 fcc5 	bl	8002bb0 <__aeabi_d2iz>
 800b226:	9b04      	ldr	r3, [sp, #16]
 800b228:	0006      	movs	r6, r0
 800b22a:	009f      	lsls	r7, r3, #2
 800b22c:	f7f7 fcf6 	bl	8002c1c <__aeabi_i2d>
 800b230:	2200      	movs	r2, #0
 800b232:	4bab      	ldr	r3, [pc, #684]	; (800b4e0 <__kernel_rem_pio2+0x6c8>)
 800b234:	f7f6 febe 	bl	8001fb4 <__aeabi_dmul>
 800b238:	0002      	movs	r2, r0
 800b23a:	000b      	movs	r3, r1
 800b23c:	0020      	movs	r0, r4
 800b23e:	0029      	movs	r1, r5
 800b240:	f7f7 f924 	bl	800248c <__aeabi_dsub>
 800b244:	f7f7 fcb4 	bl	8002bb0 <__aeabi_d2iz>
 800b248:	ab12      	add	r3, sp, #72	; 0x48
 800b24a:	51d8      	str	r0, [r3, r7]
 800b24c:	9b04      	ldr	r3, [sp, #16]
 800b24e:	aa12      	add	r2, sp, #72	; 0x48
 800b250:	3301      	adds	r3, #1
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	9b02      	ldr	r3, [sp, #8]
 800b256:	3318      	adds	r3, #24
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	509e      	str	r6, [r3, r2]
 800b260:	e725      	b.n	800b0ae <__kernel_rem_pio2+0x296>
 800b262:	9b04      	ldr	r3, [sp, #16]
 800b264:	0020      	movs	r0, r4
 800b266:	0029      	movs	r1, r5
 800b268:	009e      	lsls	r6, r3, #2
 800b26a:	f7f7 fca1 	bl	8002bb0 <__aeabi_d2iz>
 800b26e:	ab12      	add	r3, sp, #72	; 0x48
 800b270:	5198      	str	r0, [r3, r6]
 800b272:	9b04      	ldr	r3, [sp, #16]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	e71a      	b.n	800b0ae <__kernel_rem_pio2+0x296>
 800b278:	00e5      	lsls	r5, r4, #3
 800b27a:	ab76      	add	r3, sp, #472	; 0x1d8
 800b27c:	aa12      	add	r2, sp, #72	; 0x48
 800b27e:	195d      	adds	r5, r3, r5
 800b280:	00a3      	lsls	r3, r4, #2
 800b282:	5898      	ldr	r0, [r3, r2]
 800b284:	f7f7 fcca 	bl	8002c1c <__aeabi_i2d>
 800b288:	0032      	movs	r2, r6
 800b28a:	003b      	movs	r3, r7
 800b28c:	f7f6 fe92 	bl	8001fb4 <__aeabi_dmul>
 800b290:	2200      	movs	r2, #0
 800b292:	6028      	str	r0, [r5, #0]
 800b294:	6069      	str	r1, [r5, #4]
 800b296:	4b93      	ldr	r3, [pc, #588]	; (800b4e4 <__kernel_rem_pio2+0x6cc>)
 800b298:	0030      	movs	r0, r6
 800b29a:	0039      	movs	r1, r7
 800b29c:	f7f6 fe8a 	bl	8001fb4 <__aeabi_dmul>
 800b2a0:	3c01      	subs	r4, #1
 800b2a2:	0006      	movs	r6, r0
 800b2a4:	000f      	movs	r7, r1
 800b2a6:	e70a      	b.n	800b0be <__kernel_rem_pio2+0x2a6>
 800b2a8:	4b8f      	ldr	r3, [pc, #572]	; (800b4e8 <__kernel_rem_pio2+0x6d0>)
 800b2aa:	00e9      	lsls	r1, r5, #3
 800b2ac:	1859      	adds	r1, r3, r1
 800b2ae:	6808      	ldr	r0, [r1, #0]
 800b2b0:	6849      	ldr	r1, [r1, #4]
 800b2b2:	ce0c      	ldmia	r6!, {r2, r3}
 800b2b4:	f7f6 fe7e 	bl	8001fb4 <__aeabi_dmul>
 800b2b8:	0002      	movs	r2, r0
 800b2ba:	000b      	movs	r3, r1
 800b2bc:	9802      	ldr	r0, [sp, #8]
 800b2be:	9903      	ldr	r1, [sp, #12]
 800b2c0:	f7f5 ff3a 	bl	8001138 <__aeabi_dadd>
 800b2c4:	9002      	str	r0, [sp, #8]
 800b2c6:	9103      	str	r1, [sp, #12]
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	dc01      	bgt.n	800b2d4 <__kernel_rem_pio2+0x4bc>
 800b2d0:	42bd      	cmp	r5, r7
 800b2d2:	dde9      	ble.n	800b2a8 <__kernel_rem_pio2+0x490>
 800b2d4:	ab4e      	add	r3, sp, #312	; 0x138
 800b2d6:	00ff      	lsls	r7, r7, #3
 800b2d8:	19df      	adds	r7, r3, r7
 800b2da:	3c01      	subs	r4, #1
 800b2dc:	9a02      	ldr	r2, [sp, #8]
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	603a      	str	r2, [r7, #0]
 800b2e2:	607b      	str	r3, [r7, #4]
 800b2e4:	e6ef      	b.n	800b0c6 <__kernel_rem_pio2+0x2ae>
 800b2e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	dc0e      	bgt.n	800b30a <__kernel_rem_pio2+0x4f2>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd00      	ble.n	800b2f2 <__kernel_rem_pio2+0x4da>
 800b2f0:	e08c      	b.n	800b40c <__kernel_rem_pio2+0x5f4>
 800b2f2:	2500      	movs	r5, #0
 800b2f4:	002c      	movs	r4, r5
 800b2f6:	42ab      	cmp	r3, r5
 800b2f8:	d046      	beq.n	800b388 <__kernel_rem_pio2+0x570>
 800b2fa:	2007      	movs	r0, #7
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	4003      	ands	r3, r0
 800b300:	0018      	movs	r0, r3
 800b302:	239f      	movs	r3, #159	; 0x9f
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	449d      	add	sp, r3
 800b308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b30a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d1f4      	bne.n	800b2fa <__kernel_rem_pio2+0x4e2>
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	00dc      	lsls	r4, r3, #3
 800b314:	ab4e      	add	r3, sp, #312	; 0x138
 800b316:	191c      	adds	r4, r3, r4
 800b318:	0025      	movs	r5, r4
 800b31a:	9b00      	ldr	r3, [sp, #0]
 800b31c:	9302      	str	r3, [sp, #8]
 800b31e:	9b02      	ldr	r3, [sp, #8]
 800b320:	3d08      	subs	r5, #8
 800b322:	2b00      	cmp	r3, #0
 800b324:	dd00      	ble.n	800b328 <__kernel_rem_pio2+0x510>
 800b326:	e07f      	b.n	800b428 <__kernel_rem_pio2+0x610>
 800b328:	9d00      	ldr	r5, [sp, #0]
 800b32a:	3c08      	subs	r4, #8
 800b32c:	2d01      	cmp	r5, #1
 800b32e:	dd00      	ble.n	800b332 <__kernel_rem_pio2+0x51a>
 800b330:	e09c      	b.n	800b46c <__kernel_rem_pio2+0x654>
 800b332:	2400      	movs	r4, #0
 800b334:	0021      	movs	r1, r4
 800b336:	9b00      	ldr	r3, [sp, #0]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	dd00      	ble.n	800b33e <__kernel_rem_pio2+0x526>
 800b33c:	e0b4      	b.n	800b4a8 <__kernel_rem_pio2+0x690>
 800b33e:	9b08      	ldr	r3, [sp, #32]
 800b340:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800b342:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800b344:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800b346:	9851      	ldr	r0, [sp, #324]	; 0x144
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d000      	beq.n	800b34e <__kernel_rem_pio2+0x536>
 800b34c:	e0ba      	b.n	800b4c4 <__kernel_rem_pio2+0x6ac>
 800b34e:	0033      	movs	r3, r6
 800b350:	003a      	movs	r2, r7
 800b352:	9e07      	ldr	r6, [sp, #28]
 800b354:	6032      	str	r2, [r6, #0]
 800b356:	6073      	str	r3, [r6, #4]
 800b358:	002a      	movs	r2, r5
 800b35a:	0003      	movs	r3, r0
 800b35c:	60b2      	str	r2, [r6, #8]
 800b35e:	60f3      	str	r3, [r6, #12]
 800b360:	0022      	movs	r2, r4
 800b362:	000b      	movs	r3, r1
 800b364:	6132      	str	r2, [r6, #16]
 800b366:	6173      	str	r3, [r6, #20]
 800b368:	e7c7      	b.n	800b2fa <__kernel_rem_pio2+0x4e2>
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	aa4e      	add	r2, sp, #312	; 0x138
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	18d3      	adds	r3, r2, r3
 800b372:	0028      	movs	r0, r5
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	0021      	movs	r1, r4
 800b37a:	f7f5 fedd 	bl	8001138 <__aeabi_dadd>
 800b37e:	0005      	movs	r5, r0
 800b380:	000c      	movs	r4, r1
 800b382:	9b00      	ldr	r3, [sp, #0]
 800b384:	3b01      	subs	r3, #1
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	9b00      	ldr	r3, [sp, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	daed      	bge.n	800b36a <__kernel_rem_pio2+0x552>
 800b38e:	9b08      	ldr	r3, [sp, #32]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <__kernel_rem_pio2+0x582>
 800b394:	2380      	movs	r3, #128	; 0x80
 800b396:	061b      	lsls	r3, r3, #24
 800b398:	18e4      	adds	r4, r4, r3
 800b39a:	002a      	movs	r2, r5
 800b39c:	0023      	movs	r3, r4
 800b39e:	9907      	ldr	r1, [sp, #28]
 800b3a0:	600a      	str	r2, [r1, #0]
 800b3a2:	604b      	str	r3, [r1, #4]
 800b3a4:	e7a9      	b.n	800b2fa <__kernel_rem_pio2+0x4e2>
 800b3a6:	00e3      	lsls	r3, r4, #3
 800b3a8:	aa4e      	add	r2, sp, #312	; 0x138
 800b3aa:	18d3      	adds	r3, r2, r3
 800b3ac:	0030      	movs	r0, r6
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	0029      	movs	r1, r5
 800b3b4:	f7f5 fec0 	bl	8001138 <__aeabi_dadd>
 800b3b8:	0006      	movs	r6, r0
 800b3ba:	000d      	movs	r5, r1
 800b3bc:	3c01      	subs	r4, #1
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	daf1      	bge.n	800b3a6 <__kernel_rem_pio2+0x58e>
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	0029      	movs	r1, r5
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <__kernel_rem_pio2+0x5b8>
 800b3ca:	2380      	movs	r3, #128	; 0x80
 800b3cc:	061b      	lsls	r3, r3, #24
 800b3ce:	18e9      	adds	r1, r5, r3
 800b3d0:	0032      	movs	r2, r6
 800b3d2:	000b      	movs	r3, r1
 800b3d4:	9907      	ldr	r1, [sp, #28]
 800b3d6:	2401      	movs	r4, #1
 800b3d8:	600a      	str	r2, [r1, #0]
 800b3da:	604b      	str	r3, [r1, #4]
 800b3dc:	984e      	ldr	r0, [sp, #312]	; 0x138
 800b3de:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800b3e0:	002b      	movs	r3, r5
 800b3e2:	f7f7 f853 	bl	800248c <__aeabi_dsub>
 800b3e6:	0007      	movs	r7, r0
 800b3e8:	000e      	movs	r6, r1
 800b3ea:	ad4e      	add	r5, sp, #312	; 0x138
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	3508      	adds	r5, #8
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	da0f      	bge.n	800b414 <__kernel_rem_pio2+0x5fc>
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <__kernel_rem_pio2+0x5e8>
 800b3fa:	2380      	movs	r3, #128	; 0x80
 800b3fc:	061b      	lsls	r3, r3, #24
 800b3fe:	18f6      	adds	r6, r6, r3
 800b400:	003a      	movs	r2, r7
 800b402:	0033      	movs	r3, r6
 800b404:	9907      	ldr	r1, [sp, #28]
 800b406:	608a      	str	r2, [r1, #8]
 800b408:	60cb      	str	r3, [r1, #12]
 800b40a:	e776      	b.n	800b2fa <__kernel_rem_pio2+0x4e2>
 800b40c:	2600      	movs	r6, #0
 800b40e:	9c00      	ldr	r4, [sp, #0]
 800b410:	0035      	movs	r5, r6
 800b412:	e7d4      	b.n	800b3be <__kernel_rem_pio2+0x5a6>
 800b414:	0038      	movs	r0, r7
 800b416:	682a      	ldr	r2, [r5, #0]
 800b418:	686b      	ldr	r3, [r5, #4]
 800b41a:	0031      	movs	r1, r6
 800b41c:	f7f5 fe8c 	bl	8001138 <__aeabi_dadd>
 800b420:	3401      	adds	r4, #1
 800b422:	0007      	movs	r7, r0
 800b424:	000e      	movs	r6, r1
 800b426:	e7e1      	b.n	800b3ec <__kernel_rem_pio2+0x5d4>
 800b428:	9b02      	ldr	r3, [sp, #8]
 800b42a:	68ae      	ldr	r6, [r5, #8]
 800b42c:	68ef      	ldr	r7, [r5, #12]
 800b42e:	3b01      	subs	r3, #1
 800b430:	9302      	str	r3, [sp, #8]
 800b432:	682a      	ldr	r2, [r5, #0]
 800b434:	686b      	ldr	r3, [r5, #4]
 800b436:	9204      	str	r2, [sp, #16]
 800b438:	9305      	str	r3, [sp, #20]
 800b43a:	9804      	ldr	r0, [sp, #16]
 800b43c:	9905      	ldr	r1, [sp, #20]
 800b43e:	0032      	movs	r2, r6
 800b440:	003b      	movs	r3, r7
 800b442:	f7f5 fe79 	bl	8001138 <__aeabi_dadd>
 800b446:	0002      	movs	r2, r0
 800b448:	000b      	movs	r3, r1
 800b44a:	900a      	str	r0, [sp, #40]	; 0x28
 800b44c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b44e:	9804      	ldr	r0, [sp, #16]
 800b450:	9905      	ldr	r1, [sp, #20]
 800b452:	f7f7 f81b 	bl	800248c <__aeabi_dsub>
 800b456:	0032      	movs	r2, r6
 800b458:	003b      	movs	r3, r7
 800b45a:	f7f5 fe6d 	bl	8001138 <__aeabi_dadd>
 800b45e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b462:	60a8      	str	r0, [r5, #8]
 800b464:	60e9      	str	r1, [r5, #12]
 800b466:	602a      	str	r2, [r5, #0]
 800b468:	606b      	str	r3, [r5, #4]
 800b46a:	e758      	b.n	800b31e <__kernel_rem_pio2+0x506>
 800b46c:	6826      	ldr	r6, [r4, #0]
 800b46e:	6867      	ldr	r7, [r4, #4]
 800b470:	68a2      	ldr	r2, [r4, #8]
 800b472:	68e3      	ldr	r3, [r4, #12]
 800b474:	0030      	movs	r0, r6
 800b476:	0039      	movs	r1, r7
 800b478:	9202      	str	r2, [sp, #8]
 800b47a:	9303      	str	r3, [sp, #12]
 800b47c:	f7f5 fe5c 	bl	8001138 <__aeabi_dadd>
 800b480:	0002      	movs	r2, r0
 800b482:	000b      	movs	r3, r1
 800b484:	9004      	str	r0, [sp, #16]
 800b486:	9105      	str	r1, [sp, #20]
 800b488:	0030      	movs	r0, r6
 800b48a:	0039      	movs	r1, r7
 800b48c:	f7f6 fffe 	bl	800248c <__aeabi_dsub>
 800b490:	9a02      	ldr	r2, [sp, #8]
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	f7f5 fe50 	bl	8001138 <__aeabi_dadd>
 800b498:	9a04      	ldr	r2, [sp, #16]
 800b49a:	9b05      	ldr	r3, [sp, #20]
 800b49c:	60a0      	str	r0, [r4, #8]
 800b49e:	60e1      	str	r1, [r4, #12]
 800b4a0:	6022      	str	r2, [r4, #0]
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	3d01      	subs	r5, #1
 800b4a6:	e740      	b.n	800b32a <__kernel_rem_pio2+0x512>
 800b4a8:	9b00      	ldr	r3, [sp, #0]
 800b4aa:	aa4e      	add	r2, sp, #312	; 0x138
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	18d3      	adds	r3, r2, r3
 800b4b0:	0020      	movs	r0, r4
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f7f5 fe3f 	bl	8001138 <__aeabi_dadd>
 800b4ba:	9b00      	ldr	r3, [sp, #0]
 800b4bc:	0004      	movs	r4, r0
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	e738      	b.n	800b336 <__kernel_rem_pio2+0x51e>
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	9a07      	ldr	r2, [sp, #28]
 800b4c8:	601f      	str	r7, [r3, #0]
 800b4ca:	2380      	movs	r3, #128	; 0x80
 800b4cc:	061b      	lsls	r3, r3, #24
 800b4ce:	18f6      	adds	r6, r6, r3
 800b4d0:	18c0      	adds	r0, r0, r3
 800b4d2:	18c9      	adds	r1, r1, r3
 800b4d4:	6056      	str	r6, [r2, #4]
 800b4d6:	6095      	str	r5, [r2, #8]
 800b4d8:	60d0      	str	r0, [r2, #12]
 800b4da:	6114      	str	r4, [r2, #16]
 800b4dc:	6151      	str	r1, [r2, #20]
 800b4de:	e70c      	b.n	800b2fa <__kernel_rem_pio2+0x4e2>
 800b4e0:	41700000 	.word	0x41700000
 800b4e4:	3e700000 	.word	0x3e700000
 800b4e8:	0800bee0 	.word	0x0800bee0

0800b4ec <__kernel_tan>:
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	b08f      	sub	sp, #60	; 0x3c
 800b4f0:	9302      	str	r3, [sp, #8]
 800b4f2:	004b      	lsls	r3, r1, #1
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	9306      	str	r3, [sp, #24]
 800b4f8:	9204      	str	r2, [sp, #16]
 800b4fa:	4bd5      	ldr	r3, [pc, #852]	; (800b850 <__kernel_tan+0x364>)
 800b4fc:	9a06      	ldr	r2, [sp, #24]
 800b4fe:	9001      	str	r0, [sp, #4]
 800b500:	9100      	str	r1, [sp, #0]
 800b502:	9108      	str	r1, [sp, #32]
 800b504:	429a      	cmp	r2, r3
 800b506:	dc5f      	bgt.n	800b5c8 <__kernel_tan+0xdc>
 800b508:	9801      	ldr	r0, [sp, #4]
 800b50a:	9900      	ldr	r1, [sp, #0]
 800b50c:	f7f7 fb50 	bl	8002bb0 <__aeabi_d2iz>
 800b510:	1e04      	subs	r4, r0, #0
 800b512:	d000      	beq.n	800b516 <__kernel_tan+0x2a>
 800b514:	e07f      	b.n	800b616 <__kernel_tan+0x12a>
 800b516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	3301      	adds	r3, #1
 800b51c:	4313      	orrs	r3, r2
 800b51e:	9a06      	ldr	r2, [sp, #24]
 800b520:	4313      	orrs	r3, r2
 800b522:	d10f      	bne.n	800b544 <__kernel_tan+0x58>
 800b524:	9801      	ldr	r0, [sp, #4]
 800b526:	9900      	ldr	r1, [sp, #0]
 800b528:	f000 f9d6 	bl	800b8d8 <fabs>
 800b52c:	0002      	movs	r2, r0
 800b52e:	000b      	movs	r3, r1
 800b530:	2000      	movs	r0, #0
 800b532:	49c8      	ldr	r1, [pc, #800]	; (800b854 <__kernel_tan+0x368>)
 800b534:	f7f6 f93c 	bl	80017b0 <__aeabi_ddiv>
 800b538:	9001      	str	r0, [sp, #4]
 800b53a:	9100      	str	r1, [sp, #0]
 800b53c:	9801      	ldr	r0, [sp, #4]
 800b53e:	9900      	ldr	r1, [sp, #0]
 800b540:	b00f      	add	sp, #60	; 0x3c
 800b542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b546:	2b01      	cmp	r3, #1
 800b548:	d0f8      	beq.n	800b53c <__kernel_tan+0x50>
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	9b02      	ldr	r3, [sp, #8]
 800b54e:	9801      	ldr	r0, [sp, #4]
 800b550:	9900      	ldr	r1, [sp, #0]
 800b552:	f7f5 fdf1 	bl	8001138 <__aeabi_dadd>
 800b556:	0002      	movs	r2, r0
 800b558:	0020      	movs	r0, r4
 800b55a:	000b      	movs	r3, r1
 800b55c:	9006      	str	r0, [sp, #24]
 800b55e:	9107      	str	r1, [sp, #28]
 800b560:	2000      	movs	r0, #0
 800b562:	49bd      	ldr	r1, [pc, #756]	; (800b858 <__kernel_tan+0x36c>)
 800b564:	f7f6 f924 	bl	80017b0 <__aeabi_ddiv>
 800b568:	9a01      	ldr	r2, [sp, #4]
 800b56a:	9008      	str	r0, [sp, #32]
 800b56c:	9109      	str	r1, [sp, #36]	; 0x24
 800b56e:	9806      	ldr	r0, [sp, #24]
 800b570:	9907      	ldr	r1, [sp, #28]
 800b572:	9e08      	ldr	r6, [sp, #32]
 800b574:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	f7f6 ff88 	bl	800248c <__aeabi_dsub>
 800b57c:	0002      	movs	r2, r0
 800b57e:	000b      	movs	r3, r1
 800b580:	9804      	ldr	r0, [sp, #16]
 800b582:	9902      	ldr	r1, [sp, #8]
 800b584:	f7f6 ff82 	bl	800248c <__aeabi_dsub>
 800b588:	0022      	movs	r2, r4
 800b58a:	003b      	movs	r3, r7
 800b58c:	f7f6 fd12 	bl	8001fb4 <__aeabi_dmul>
 800b590:	0026      	movs	r6, r4
 800b592:	000d      	movs	r5, r1
 800b594:	0004      	movs	r4, r0
 800b596:	9806      	ldr	r0, [sp, #24]
 800b598:	9907      	ldr	r1, [sp, #28]
 800b59a:	0032      	movs	r2, r6
 800b59c:	003b      	movs	r3, r7
 800b59e:	f7f6 fd09 	bl	8001fb4 <__aeabi_dmul>
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4bab      	ldr	r3, [pc, #684]	; (800b854 <__kernel_tan+0x368>)
 800b5a6:	f7f5 fdc7 	bl	8001138 <__aeabi_dadd>
 800b5aa:	0002      	movs	r2, r0
 800b5ac:	000b      	movs	r3, r1
 800b5ae:	0020      	movs	r0, r4
 800b5b0:	0029      	movs	r1, r5
 800b5b2:	f7f5 fdc1 	bl	8001138 <__aeabi_dadd>
 800b5b6:	9a08      	ldr	r2, [sp, #32]
 800b5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ba:	f7f6 fcfb 	bl	8001fb4 <__aeabi_dmul>
 800b5be:	0032      	movs	r2, r6
 800b5c0:	003b      	movs	r3, r7
 800b5c2:	f7f5 fdb9 	bl	8001138 <__aeabi_dadd>
 800b5c6:	e7b7      	b.n	800b538 <__kernel_tan+0x4c>
 800b5c8:	4ba4      	ldr	r3, [pc, #656]	; (800b85c <__kernel_tan+0x370>)
 800b5ca:	9a06      	ldr	r2, [sp, #24]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	dd22      	ble.n	800b616 <__kernel_tan+0x12a>
 800b5d0:	9b08      	ldr	r3, [sp, #32]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	da08      	bge.n	800b5e8 <__kernel_tan+0xfc>
 800b5d6:	2080      	movs	r0, #128	; 0x80
 800b5d8:	0600      	lsls	r0, r0, #24
 800b5da:	4684      	mov	ip, r0
 800b5dc:	9900      	ldr	r1, [sp, #0]
 800b5de:	9b02      	ldr	r3, [sp, #8]
 800b5e0:	4461      	add	r1, ip
 800b5e2:	4463      	add	r3, ip
 800b5e4:	9100      	str	r1, [sp, #0]
 800b5e6:	9302      	str	r3, [sp, #8]
 800b5e8:	9a01      	ldr	r2, [sp, #4]
 800b5ea:	9b00      	ldr	r3, [sp, #0]
 800b5ec:	489c      	ldr	r0, [pc, #624]	; (800b860 <__kernel_tan+0x374>)
 800b5ee:	499d      	ldr	r1, [pc, #628]	; (800b864 <__kernel_tan+0x378>)
 800b5f0:	f7f6 ff4c 	bl	800248c <__aeabi_dsub>
 800b5f4:	0004      	movs	r4, r0
 800b5f6:	000d      	movs	r5, r1
 800b5f8:	9a04      	ldr	r2, [sp, #16]
 800b5fa:	9b02      	ldr	r3, [sp, #8]
 800b5fc:	489a      	ldr	r0, [pc, #616]	; (800b868 <__kernel_tan+0x37c>)
 800b5fe:	499b      	ldr	r1, [pc, #620]	; (800b86c <__kernel_tan+0x380>)
 800b600:	f7f6 ff44 	bl	800248c <__aeabi_dsub>
 800b604:	002b      	movs	r3, r5
 800b606:	0022      	movs	r2, r4
 800b608:	f7f5 fd96 	bl	8001138 <__aeabi_dadd>
 800b60c:	2300      	movs	r3, #0
 800b60e:	9001      	str	r0, [sp, #4]
 800b610:	9100      	str	r1, [sp, #0]
 800b612:	9304      	str	r3, [sp, #16]
 800b614:	9302      	str	r3, [sp, #8]
 800b616:	9a01      	ldr	r2, [sp, #4]
 800b618:	9b00      	ldr	r3, [sp, #0]
 800b61a:	0010      	movs	r0, r2
 800b61c:	0019      	movs	r1, r3
 800b61e:	f7f6 fcc9 	bl	8001fb4 <__aeabi_dmul>
 800b622:	0002      	movs	r2, r0
 800b624:	000b      	movs	r3, r1
 800b626:	0006      	movs	r6, r0
 800b628:	000f      	movs	r7, r1
 800b62a:	f7f6 fcc3 	bl	8001fb4 <__aeabi_dmul>
 800b62e:	0032      	movs	r2, r6
 800b630:	0004      	movs	r4, r0
 800b632:	000d      	movs	r5, r1
 800b634:	003b      	movs	r3, r7
 800b636:	9801      	ldr	r0, [sp, #4]
 800b638:	9900      	ldr	r1, [sp, #0]
 800b63a:	f7f6 fcbb 	bl	8001fb4 <__aeabi_dmul>
 800b63e:	4a8c      	ldr	r2, [pc, #560]	; (800b870 <__kernel_tan+0x384>)
 800b640:	900a      	str	r0, [sp, #40]	; 0x28
 800b642:	910b      	str	r1, [sp, #44]	; 0x2c
 800b644:	4b8b      	ldr	r3, [pc, #556]	; (800b874 <__kernel_tan+0x388>)
 800b646:	0020      	movs	r0, r4
 800b648:	0029      	movs	r1, r5
 800b64a:	f7f6 fcb3 	bl	8001fb4 <__aeabi_dmul>
 800b64e:	4a8a      	ldr	r2, [pc, #552]	; (800b878 <__kernel_tan+0x38c>)
 800b650:	4b8a      	ldr	r3, [pc, #552]	; (800b87c <__kernel_tan+0x390>)
 800b652:	f7f5 fd71 	bl	8001138 <__aeabi_dadd>
 800b656:	0022      	movs	r2, r4
 800b658:	002b      	movs	r3, r5
 800b65a:	f7f6 fcab 	bl	8001fb4 <__aeabi_dmul>
 800b65e:	4a88      	ldr	r2, [pc, #544]	; (800b880 <__kernel_tan+0x394>)
 800b660:	4b88      	ldr	r3, [pc, #544]	; (800b884 <__kernel_tan+0x398>)
 800b662:	f7f5 fd69 	bl	8001138 <__aeabi_dadd>
 800b666:	0022      	movs	r2, r4
 800b668:	002b      	movs	r3, r5
 800b66a:	f7f6 fca3 	bl	8001fb4 <__aeabi_dmul>
 800b66e:	4a86      	ldr	r2, [pc, #536]	; (800b888 <__kernel_tan+0x39c>)
 800b670:	4b86      	ldr	r3, [pc, #536]	; (800b88c <__kernel_tan+0x3a0>)
 800b672:	f7f5 fd61 	bl	8001138 <__aeabi_dadd>
 800b676:	0022      	movs	r2, r4
 800b678:	002b      	movs	r3, r5
 800b67a:	f7f6 fc9b 	bl	8001fb4 <__aeabi_dmul>
 800b67e:	4a84      	ldr	r2, [pc, #528]	; (800b890 <__kernel_tan+0x3a4>)
 800b680:	4b84      	ldr	r3, [pc, #528]	; (800b894 <__kernel_tan+0x3a8>)
 800b682:	f7f5 fd59 	bl	8001138 <__aeabi_dadd>
 800b686:	0022      	movs	r2, r4
 800b688:	002b      	movs	r3, r5
 800b68a:	f7f6 fc93 	bl	8001fb4 <__aeabi_dmul>
 800b68e:	4a82      	ldr	r2, [pc, #520]	; (800b898 <__kernel_tan+0x3ac>)
 800b690:	4b82      	ldr	r3, [pc, #520]	; (800b89c <__kernel_tan+0x3b0>)
 800b692:	f7f5 fd51 	bl	8001138 <__aeabi_dadd>
 800b696:	0032      	movs	r2, r6
 800b698:	003b      	movs	r3, r7
 800b69a:	f7f6 fc8b 	bl	8001fb4 <__aeabi_dmul>
 800b69e:	4a80      	ldr	r2, [pc, #512]	; (800b8a0 <__kernel_tan+0x3b4>)
 800b6a0:	900c      	str	r0, [sp, #48]	; 0x30
 800b6a2:	910d      	str	r1, [sp, #52]	; 0x34
 800b6a4:	4b7f      	ldr	r3, [pc, #508]	; (800b8a4 <__kernel_tan+0x3b8>)
 800b6a6:	0020      	movs	r0, r4
 800b6a8:	0029      	movs	r1, r5
 800b6aa:	f7f6 fc83 	bl	8001fb4 <__aeabi_dmul>
 800b6ae:	4a7e      	ldr	r2, [pc, #504]	; (800b8a8 <__kernel_tan+0x3bc>)
 800b6b0:	4b7e      	ldr	r3, [pc, #504]	; (800b8ac <__kernel_tan+0x3c0>)
 800b6b2:	f7f5 fd41 	bl	8001138 <__aeabi_dadd>
 800b6b6:	0022      	movs	r2, r4
 800b6b8:	002b      	movs	r3, r5
 800b6ba:	f7f6 fc7b 	bl	8001fb4 <__aeabi_dmul>
 800b6be:	4a7c      	ldr	r2, [pc, #496]	; (800b8b0 <__kernel_tan+0x3c4>)
 800b6c0:	4b7c      	ldr	r3, [pc, #496]	; (800b8b4 <__kernel_tan+0x3c8>)
 800b6c2:	f7f5 fd39 	bl	8001138 <__aeabi_dadd>
 800b6c6:	0022      	movs	r2, r4
 800b6c8:	002b      	movs	r3, r5
 800b6ca:	f7f6 fc73 	bl	8001fb4 <__aeabi_dmul>
 800b6ce:	4a7a      	ldr	r2, [pc, #488]	; (800b8b8 <__kernel_tan+0x3cc>)
 800b6d0:	4b7a      	ldr	r3, [pc, #488]	; (800b8bc <__kernel_tan+0x3d0>)
 800b6d2:	f7f5 fd31 	bl	8001138 <__aeabi_dadd>
 800b6d6:	0022      	movs	r2, r4
 800b6d8:	002b      	movs	r3, r5
 800b6da:	f7f6 fc6b 	bl	8001fb4 <__aeabi_dmul>
 800b6de:	4a78      	ldr	r2, [pc, #480]	; (800b8c0 <__kernel_tan+0x3d4>)
 800b6e0:	4b78      	ldr	r3, [pc, #480]	; (800b8c4 <__kernel_tan+0x3d8>)
 800b6e2:	f7f5 fd29 	bl	8001138 <__aeabi_dadd>
 800b6e6:	0022      	movs	r2, r4
 800b6e8:	002b      	movs	r3, r5
 800b6ea:	f7f6 fc63 	bl	8001fb4 <__aeabi_dmul>
 800b6ee:	4a76      	ldr	r2, [pc, #472]	; (800b8c8 <__kernel_tan+0x3dc>)
 800b6f0:	4b76      	ldr	r3, [pc, #472]	; (800b8cc <__kernel_tan+0x3e0>)
 800b6f2:	f7f5 fd21 	bl	8001138 <__aeabi_dadd>
 800b6f6:	0002      	movs	r2, r0
 800b6f8:	000b      	movs	r3, r1
 800b6fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6fe:	f7f5 fd1b 	bl	8001138 <__aeabi_dadd>
 800b702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b706:	f7f6 fc55 	bl	8001fb4 <__aeabi_dmul>
 800b70a:	9a04      	ldr	r2, [sp, #16]
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	f7f5 fd13 	bl	8001138 <__aeabi_dadd>
 800b712:	0032      	movs	r2, r6
 800b714:	003b      	movs	r3, r7
 800b716:	f7f6 fc4d 	bl	8001fb4 <__aeabi_dmul>
 800b71a:	9a04      	ldr	r2, [sp, #16]
 800b71c:	9b02      	ldr	r3, [sp, #8]
 800b71e:	f7f5 fd0b 	bl	8001138 <__aeabi_dadd>
 800b722:	0004      	movs	r4, r0
 800b724:	000d      	movs	r5, r1
 800b726:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b72a:	4a69      	ldr	r2, [pc, #420]	; (800b8d0 <__kernel_tan+0x3e4>)
 800b72c:	4b69      	ldr	r3, [pc, #420]	; (800b8d4 <__kernel_tan+0x3e8>)
 800b72e:	f7f6 fc41 	bl	8001fb4 <__aeabi_dmul>
 800b732:	0022      	movs	r2, r4
 800b734:	002b      	movs	r3, r5
 800b736:	f7f5 fcff 	bl	8001138 <__aeabi_dadd>
 800b73a:	0002      	movs	r2, r0
 800b73c:	000b      	movs	r3, r1
 800b73e:	0004      	movs	r4, r0
 800b740:	000d      	movs	r5, r1
 800b742:	9801      	ldr	r0, [sp, #4]
 800b744:	9900      	ldr	r1, [sp, #0]
 800b746:	f7f5 fcf7 	bl	8001138 <__aeabi_dadd>
 800b74a:	4b44      	ldr	r3, [pc, #272]	; (800b85c <__kernel_tan+0x370>)
 800b74c:	9a06      	ldr	r2, [sp, #24]
 800b74e:	0006      	movs	r6, r0
 800b750:	000f      	movs	r7, r1
 800b752:	429a      	cmp	r2, r3
 800b754:	dd3d      	ble.n	800b7d2 <__kernel_tan+0x2e6>
 800b756:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b758:	f7f7 fa60 	bl	8002c1c <__aeabi_i2d>
 800b75c:	0032      	movs	r2, r6
 800b75e:	9002      	str	r0, [sp, #8]
 800b760:	9103      	str	r1, [sp, #12]
 800b762:	003b      	movs	r3, r7
 800b764:	0030      	movs	r0, r6
 800b766:	0039      	movs	r1, r7
 800b768:	f7f6 fc24 	bl	8001fb4 <__aeabi_dmul>
 800b76c:	9a02      	ldr	r2, [sp, #8]
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	9004      	str	r0, [sp, #16]
 800b772:	9105      	str	r1, [sp, #20]
 800b774:	0030      	movs	r0, r6
 800b776:	0039      	movs	r1, r7
 800b778:	f7f5 fcde 	bl	8001138 <__aeabi_dadd>
 800b77c:	0002      	movs	r2, r0
 800b77e:	000b      	movs	r3, r1
 800b780:	9804      	ldr	r0, [sp, #16]
 800b782:	9905      	ldr	r1, [sp, #20]
 800b784:	f7f6 f814 	bl	80017b0 <__aeabi_ddiv>
 800b788:	0022      	movs	r2, r4
 800b78a:	002b      	movs	r3, r5
 800b78c:	f7f6 fe7e 	bl	800248c <__aeabi_dsub>
 800b790:	0002      	movs	r2, r0
 800b792:	000b      	movs	r3, r1
 800b794:	9801      	ldr	r0, [sp, #4]
 800b796:	9900      	ldr	r1, [sp, #0]
 800b798:	f7f6 fe78 	bl	800248c <__aeabi_dsub>
 800b79c:	0002      	movs	r2, r0
 800b79e:	000b      	movs	r3, r1
 800b7a0:	f7f5 fcca 	bl	8001138 <__aeabi_dadd>
 800b7a4:	0002      	movs	r2, r0
 800b7a6:	000b      	movs	r3, r1
 800b7a8:	9802      	ldr	r0, [sp, #8]
 800b7aa:	9903      	ldr	r1, [sp, #12]
 800b7ac:	f7f6 fe6e 	bl	800248c <__aeabi_dsub>
 800b7b0:	9b08      	ldr	r3, [sp, #32]
 800b7b2:	0004      	movs	r4, r0
 800b7b4:	1798      	asrs	r0, r3, #30
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	4018      	ands	r0, r3
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	1a18      	subs	r0, r3, r0
 800b7be:	000d      	movs	r5, r1
 800b7c0:	f7f7 fa2c 	bl	8002c1c <__aeabi_i2d>
 800b7c4:	0002      	movs	r2, r0
 800b7c6:	000b      	movs	r3, r1
 800b7c8:	0020      	movs	r0, r4
 800b7ca:	0029      	movs	r1, r5
 800b7cc:	f7f6 fbf2 	bl	8001fb4 <__aeabi_dmul>
 800b7d0:	e6b2      	b.n	800b538 <__kernel_tan+0x4c>
 800b7d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d037      	beq.n	800b848 <__kernel_tan+0x35c>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9602      	str	r6, [sp, #8]
 800b7dc:	9703      	str	r7, [sp, #12]
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	9a02      	ldr	r2, [sp, #8]
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	9204      	str	r2, [sp, #16]
 800b7e6:	9305      	str	r3, [sp, #20]
 800b7e8:	0002      	movs	r2, r0
 800b7ea:	000b      	movs	r3, r1
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	491a      	ldr	r1, [pc, #104]	; (800b858 <__kernel_tan+0x36c>)
 800b7f0:	f7f5 ffde 	bl	80017b0 <__aeabi_ddiv>
 800b7f4:	9a01      	ldr	r2, [sp, #4]
 800b7f6:	9006      	str	r0, [sp, #24]
 800b7f8:	9107      	str	r1, [sp, #28]
 800b7fa:	9804      	ldr	r0, [sp, #16]
 800b7fc:	9905      	ldr	r1, [sp, #20]
 800b7fe:	9e06      	ldr	r6, [sp, #24]
 800b800:	9f07      	ldr	r7, [sp, #28]
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	f7f6 fe42 	bl	800248c <__aeabi_dsub>
 800b808:	2600      	movs	r6, #0
 800b80a:	0002      	movs	r2, r0
 800b80c:	000b      	movs	r3, r1
 800b80e:	0020      	movs	r0, r4
 800b810:	0029      	movs	r1, r5
 800b812:	f7f6 fe3b 	bl	800248c <__aeabi_dsub>
 800b816:	0032      	movs	r2, r6
 800b818:	003b      	movs	r3, r7
 800b81a:	f7f6 fbcb 	bl	8001fb4 <__aeabi_dmul>
 800b81e:	0032      	movs	r2, r6
 800b820:	0004      	movs	r4, r0
 800b822:	000d      	movs	r5, r1
 800b824:	9804      	ldr	r0, [sp, #16]
 800b826:	9905      	ldr	r1, [sp, #20]
 800b828:	003b      	movs	r3, r7
 800b82a:	f7f6 fbc3 	bl	8001fb4 <__aeabi_dmul>
 800b82e:	2200      	movs	r2, #0
 800b830:	4b08      	ldr	r3, [pc, #32]	; (800b854 <__kernel_tan+0x368>)
 800b832:	f7f5 fc81 	bl	8001138 <__aeabi_dadd>
 800b836:	0002      	movs	r2, r0
 800b838:	000b      	movs	r3, r1
 800b83a:	0020      	movs	r0, r4
 800b83c:	0029      	movs	r1, r5
 800b83e:	f7f5 fc7b 	bl	8001138 <__aeabi_dadd>
 800b842:	9a06      	ldr	r2, [sp, #24]
 800b844:	9b07      	ldr	r3, [sp, #28]
 800b846:	e6b8      	b.n	800b5ba <__kernel_tan+0xce>
 800b848:	9001      	str	r0, [sp, #4]
 800b84a:	9100      	str	r1, [sp, #0]
 800b84c:	e676      	b.n	800b53c <__kernel_tan+0x50>
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	3e2fffff 	.word	0x3e2fffff
 800b854:	3ff00000 	.word	0x3ff00000
 800b858:	bff00000 	.word	0xbff00000
 800b85c:	3fe59427 	.word	0x3fe59427
 800b860:	54442d18 	.word	0x54442d18
 800b864:	3fe921fb 	.word	0x3fe921fb
 800b868:	33145c07 	.word	0x33145c07
 800b86c:	3c81a626 	.word	0x3c81a626
 800b870:	74bf7ad4 	.word	0x74bf7ad4
 800b874:	3efb2a70 	.word	0x3efb2a70
 800b878:	32f0a7e9 	.word	0x32f0a7e9
 800b87c:	3f12b80f 	.word	0x3f12b80f
 800b880:	1a8d1068 	.word	0x1a8d1068
 800b884:	3f3026f7 	.word	0x3f3026f7
 800b888:	fee08315 	.word	0xfee08315
 800b88c:	3f57dbc8 	.word	0x3f57dbc8
 800b890:	e96e8493 	.word	0xe96e8493
 800b894:	3f8226e3 	.word	0x3f8226e3
 800b898:	1bb341fe 	.word	0x1bb341fe
 800b89c:	3faba1ba 	.word	0x3faba1ba
 800b8a0:	db605373 	.word	0xdb605373
 800b8a4:	bef375cb 	.word	0xbef375cb
 800b8a8:	a03792a6 	.word	0xa03792a6
 800b8ac:	3f147e88 	.word	0x3f147e88
 800b8b0:	f2f26501 	.word	0xf2f26501
 800b8b4:	3f4344d8 	.word	0x3f4344d8
 800b8b8:	c9560328 	.word	0xc9560328
 800b8bc:	3f6d6d22 	.word	0x3f6d6d22
 800b8c0:	8406d637 	.word	0x8406d637
 800b8c4:	3f9664f4 	.word	0x3f9664f4
 800b8c8:	1110fe7a 	.word	0x1110fe7a
 800b8cc:	3fc11111 	.word	0x3fc11111
 800b8d0:	55555563 	.word	0x55555563
 800b8d4:	3fd55555 	.word	0x3fd55555

0800b8d8 <fabs>:
 800b8d8:	004b      	lsls	r3, r1, #1
 800b8da:	0859      	lsrs	r1, r3, #1
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <floor>:
 800b8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e2:	004b      	lsls	r3, r1, #1
 800b8e4:	4a3d      	ldr	r2, [pc, #244]	; (800b9dc <floor+0xfc>)
 800b8e6:	0d5b      	lsrs	r3, r3, #21
 800b8e8:	189f      	adds	r7, r3, r2
 800b8ea:	4684      	mov	ip, r0
 800b8ec:	000e      	movs	r6, r1
 800b8ee:	000d      	movs	r5, r1
 800b8f0:	0004      	movs	r4, r0
 800b8f2:	9001      	str	r0, [sp, #4]
 800b8f4:	2f13      	cmp	r7, #19
 800b8f6:	dc34      	bgt.n	800b962 <floor+0x82>
 800b8f8:	2f00      	cmp	r7, #0
 800b8fa:	da16      	bge.n	800b92a <floor+0x4a>
 800b8fc:	4a38      	ldr	r2, [pc, #224]	; (800b9e0 <floor+0x100>)
 800b8fe:	4b39      	ldr	r3, [pc, #228]	; (800b9e4 <floor+0x104>)
 800b900:	4660      	mov	r0, ip
 800b902:	0031      	movs	r1, r6
 800b904:	f7f5 fc18 	bl	8001138 <__aeabi_dadd>
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	f7f4 fd9a 	bl	8000444 <__aeabi_dcmpgt>
 800b910:	2800      	cmp	r0, #0
 800b912:	d007      	beq.n	800b924 <floor+0x44>
 800b914:	2e00      	cmp	r6, #0
 800b916:	da5d      	bge.n	800b9d4 <floor+0xf4>
 800b918:	0073      	lsls	r3, r6, #1
 800b91a:	085b      	lsrs	r3, r3, #1
 800b91c:	431c      	orrs	r4, r3
 800b91e:	d001      	beq.n	800b924 <floor+0x44>
 800b920:	2400      	movs	r4, #0
 800b922:	4d31      	ldr	r5, [pc, #196]	; (800b9e8 <floor+0x108>)
 800b924:	46a4      	mov	ip, r4
 800b926:	002e      	movs	r6, r5
 800b928:	e029      	b.n	800b97e <floor+0x9e>
 800b92a:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <floor+0x10c>)
 800b92c:	413b      	asrs	r3, r7
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	400b      	ands	r3, r1
 800b932:	4303      	orrs	r3, r0
 800b934:	d023      	beq.n	800b97e <floor+0x9e>
 800b936:	4a2a      	ldr	r2, [pc, #168]	; (800b9e0 <floor+0x100>)
 800b938:	4b2a      	ldr	r3, [pc, #168]	; (800b9e4 <floor+0x104>)
 800b93a:	4660      	mov	r0, ip
 800b93c:	0031      	movs	r1, r6
 800b93e:	f7f5 fbfb 	bl	8001138 <__aeabi_dadd>
 800b942:	2200      	movs	r2, #0
 800b944:	2300      	movs	r3, #0
 800b946:	f7f4 fd7d 	bl	8000444 <__aeabi_dcmpgt>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0ea      	beq.n	800b924 <floor+0x44>
 800b94e:	2e00      	cmp	r6, #0
 800b950:	da03      	bge.n	800b95a <floor+0x7a>
 800b952:	2380      	movs	r3, #128	; 0x80
 800b954:	035b      	lsls	r3, r3, #13
 800b956:	413b      	asrs	r3, r7
 800b958:	18f5      	adds	r5, r6, r3
 800b95a:	9b00      	ldr	r3, [sp, #0]
 800b95c:	2400      	movs	r4, #0
 800b95e:	439d      	bics	r5, r3
 800b960:	e7e0      	b.n	800b924 <floor+0x44>
 800b962:	2f33      	cmp	r7, #51	; 0x33
 800b964:	dd0f      	ble.n	800b986 <floor+0xa6>
 800b966:	2380      	movs	r3, #128	; 0x80
 800b968:	00db      	lsls	r3, r3, #3
 800b96a:	429f      	cmp	r7, r3
 800b96c:	d107      	bne.n	800b97e <floor+0x9e>
 800b96e:	0002      	movs	r2, r0
 800b970:	000b      	movs	r3, r1
 800b972:	4660      	mov	r0, ip
 800b974:	0031      	movs	r1, r6
 800b976:	f7f5 fbdf 	bl	8001138 <__aeabi_dadd>
 800b97a:	4684      	mov	ip, r0
 800b97c:	000e      	movs	r6, r1
 800b97e:	4660      	mov	r0, ip
 800b980:	0031      	movs	r1, r6
 800b982:	b003      	add	sp, #12
 800b984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b986:	4a1a      	ldr	r2, [pc, #104]	; (800b9f0 <floor+0x110>)
 800b988:	189b      	adds	r3, r3, r2
 800b98a:	2201      	movs	r2, #1
 800b98c:	4252      	negs	r2, r2
 800b98e:	40da      	lsrs	r2, r3
 800b990:	9200      	str	r2, [sp, #0]
 800b992:	4210      	tst	r0, r2
 800b994:	d0f3      	beq.n	800b97e <floor+0x9e>
 800b996:	4a12      	ldr	r2, [pc, #72]	; (800b9e0 <floor+0x100>)
 800b998:	4b12      	ldr	r3, [pc, #72]	; (800b9e4 <floor+0x104>)
 800b99a:	4660      	mov	r0, ip
 800b99c:	0031      	movs	r1, r6
 800b99e:	f7f5 fbcb 	bl	8001138 <__aeabi_dadd>
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f7f4 fd4d 	bl	8000444 <__aeabi_dcmpgt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d0ba      	beq.n	800b924 <floor+0x44>
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	da02      	bge.n	800b9b8 <floor+0xd8>
 800b9b2:	2f14      	cmp	r7, #20
 800b9b4:	d103      	bne.n	800b9be <floor+0xde>
 800b9b6:	3501      	adds	r5, #1
 800b9b8:	9b00      	ldr	r3, [sp, #0]
 800b9ba:	439c      	bics	r4, r3
 800b9bc:	e7b2      	b.n	800b924 <floor+0x44>
 800b9be:	2334      	movs	r3, #52	; 0x34
 800b9c0:	1bdf      	subs	r7, r3, r7
 800b9c2:	3b33      	subs	r3, #51	; 0x33
 800b9c4:	40bb      	lsls	r3, r7
 800b9c6:	18e4      	adds	r4, r4, r3
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	419b      	sbcs	r3, r3
 800b9ce:	425b      	negs	r3, r3
 800b9d0:	18f5      	adds	r5, r6, r3
 800b9d2:	e7f1      	b.n	800b9b8 <floor+0xd8>
 800b9d4:	2400      	movs	r4, #0
 800b9d6:	0025      	movs	r5, r4
 800b9d8:	e7a4      	b.n	800b924 <floor+0x44>
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	fffffc01 	.word	0xfffffc01
 800b9e0:	8800759c 	.word	0x8800759c
 800b9e4:	7e37e43c 	.word	0x7e37e43c
 800b9e8:	bff00000 	.word	0xbff00000
 800b9ec:	000fffff 	.word	0x000fffff
 800b9f0:	fffffbed 	.word	0xfffffbed

0800b9f4 <scalbn>:
 800b9f4:	004b      	lsls	r3, r1, #1
 800b9f6:	b570      	push	{r4, r5, r6, lr}
 800b9f8:	0d5b      	lsrs	r3, r3, #21
 800b9fa:	0014      	movs	r4, r2
 800b9fc:	000a      	movs	r2, r1
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10d      	bne.n	800ba1e <scalbn+0x2a>
 800ba02:	004b      	lsls	r3, r1, #1
 800ba04:	085b      	lsrs	r3, r3, #1
 800ba06:	4303      	orrs	r3, r0
 800ba08:	d010      	beq.n	800ba2c <scalbn+0x38>
 800ba0a:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <scalbn+0xb4>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f7f6 fad1 	bl	8001fb4 <__aeabi_dmul>
 800ba12:	4b26      	ldr	r3, [pc, #152]	; (800baac <scalbn+0xb8>)
 800ba14:	429c      	cmp	r4, r3
 800ba16:	da0a      	bge.n	800ba2e <scalbn+0x3a>
 800ba18:	4a25      	ldr	r2, [pc, #148]	; (800bab0 <scalbn+0xbc>)
 800ba1a:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <scalbn+0xc0>)
 800ba1c:	e019      	b.n	800ba52 <scalbn+0x5e>
 800ba1e:	4d26      	ldr	r5, [pc, #152]	; (800bab8 <scalbn+0xc4>)
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d108      	bne.n	800ba36 <scalbn+0x42>
 800ba24:	0002      	movs	r2, r0
 800ba26:	000b      	movs	r3, r1
 800ba28:	f7f5 fb86 	bl	8001138 <__aeabi_dadd>
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	000a      	movs	r2, r1
 800ba30:	004b      	lsls	r3, r1, #1
 800ba32:	0d5b      	lsrs	r3, r3, #21
 800ba34:	3b36      	subs	r3, #54	; 0x36
 800ba36:	4d21      	ldr	r5, [pc, #132]	; (800babc <scalbn+0xc8>)
 800ba38:	18e3      	adds	r3, r4, r3
 800ba3a:	42ab      	cmp	r3, r5
 800ba3c:	dd0c      	ble.n	800ba58 <scalbn+0x64>
 800ba3e:	4c20      	ldr	r4, [pc, #128]	; (800bac0 <scalbn+0xcc>)
 800ba40:	4d20      	ldr	r5, [pc, #128]	; (800bac4 <scalbn+0xd0>)
 800ba42:	2900      	cmp	r1, #0
 800ba44:	da01      	bge.n	800ba4a <scalbn+0x56>
 800ba46:	4c1e      	ldr	r4, [pc, #120]	; (800bac0 <scalbn+0xcc>)
 800ba48:	4d1f      	ldr	r5, [pc, #124]	; (800bac8 <scalbn+0xd4>)
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	0029      	movs	r1, r5
 800ba4e:	4a1c      	ldr	r2, [pc, #112]	; (800bac0 <scalbn+0xcc>)
 800ba50:	4b1c      	ldr	r3, [pc, #112]	; (800bac4 <scalbn+0xd0>)
 800ba52:	f7f6 faaf 	bl	8001fb4 <__aeabi_dmul>
 800ba56:	e7e9      	b.n	800ba2c <scalbn+0x38>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dd05      	ble.n	800ba68 <scalbn+0x74>
 800ba5c:	4c1b      	ldr	r4, [pc, #108]	; (800bacc <scalbn+0xd8>)
 800ba5e:	051b      	lsls	r3, r3, #20
 800ba60:	4022      	ands	r2, r4
 800ba62:	431a      	orrs	r2, r3
 800ba64:	0011      	movs	r1, r2
 800ba66:	e7e1      	b.n	800ba2c <scalbn+0x38>
 800ba68:	001d      	movs	r5, r3
 800ba6a:	3535      	adds	r5, #53	; 0x35
 800ba6c:	da13      	bge.n	800ba96 <scalbn+0xa2>
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <scalbn+0xdc>)
 800ba70:	0fcb      	lsrs	r3, r1, #31
 800ba72:	4294      	cmp	r4, r2
 800ba74:	dd08      	ble.n	800ba88 <scalbn+0x94>
 800ba76:	4812      	ldr	r0, [pc, #72]	; (800bac0 <scalbn+0xcc>)
 800ba78:	4912      	ldr	r1, [pc, #72]	; (800bac4 <scalbn+0xd0>)
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <scalbn+0x8e>
 800ba7e:	4810      	ldr	r0, [pc, #64]	; (800bac0 <scalbn+0xcc>)
 800ba80:	4911      	ldr	r1, [pc, #68]	; (800bac8 <scalbn+0xd4>)
 800ba82:	4a0f      	ldr	r2, [pc, #60]	; (800bac0 <scalbn+0xcc>)
 800ba84:	4b0f      	ldr	r3, [pc, #60]	; (800bac4 <scalbn+0xd0>)
 800ba86:	e7e4      	b.n	800ba52 <scalbn+0x5e>
 800ba88:	4809      	ldr	r0, [pc, #36]	; (800bab0 <scalbn+0xbc>)
 800ba8a:	490a      	ldr	r1, [pc, #40]	; (800bab4 <scalbn+0xc0>)
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0c3      	beq.n	800ba18 <scalbn+0x24>
 800ba90:	4807      	ldr	r0, [pc, #28]	; (800bab0 <scalbn+0xbc>)
 800ba92:	4910      	ldr	r1, [pc, #64]	; (800bad4 <scalbn+0xe0>)
 800ba94:	e7c0      	b.n	800ba18 <scalbn+0x24>
 800ba96:	4c0d      	ldr	r4, [pc, #52]	; (800bacc <scalbn+0xd8>)
 800ba98:	3336      	adds	r3, #54	; 0x36
 800ba9a:	4022      	ands	r2, r4
 800ba9c:	051b      	lsls	r3, r3, #20
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	0019      	movs	r1, r3
 800baa2:	2200      	movs	r2, #0
 800baa4:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <scalbn+0xe4>)
 800baa6:	e7d4      	b.n	800ba52 <scalbn+0x5e>
 800baa8:	43500000 	.word	0x43500000
 800baac:	ffff3cb0 	.word	0xffff3cb0
 800bab0:	c2f8f359 	.word	0xc2f8f359
 800bab4:	01a56e1f 	.word	0x01a56e1f
 800bab8:	000007ff 	.word	0x000007ff
 800babc:	000007fe 	.word	0x000007fe
 800bac0:	8800759c 	.word	0x8800759c
 800bac4:	7e37e43c 	.word	0x7e37e43c
 800bac8:	fe37e43c 	.word	0xfe37e43c
 800bacc:	800fffff 	.word	0x800fffff
 800bad0:	0000c350 	.word	0x0000c350
 800bad4:	81a56e1f 	.word	0x81a56e1f
 800bad8:	3c900000 	.word	0x3c900000

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	46c0      	nop			; (mov r8, r8)
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	46c0      	nop			; (mov r8, r8)
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
