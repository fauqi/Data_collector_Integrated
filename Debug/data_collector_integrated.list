
data_collector_integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009348  08009348  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009350  08009350  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000084  080093dc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  080093dc  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197a9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032dc  00000000  00000000  00039855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecb8  00000000  00000000  0003f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018584  00000000  00000000  0005dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2a24  00000000  00000000  00076314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  00138d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000084 	.word	0x20000084
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080091e8 	.word	0x080091e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000088 	.word	0x20000088
 8000100:	080091e8 	.word	0x080091e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 f9a3 	bl	8000744 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 f92f 	bl	800066c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f995 	bl	8000744 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f98b 	bl	8000744 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f93b 	bl	80006b8 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f931 	bl	80006b8 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 fb37 	bl	8000b28 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 f983 	bl	80007cc <__aeabi_fsub>
 80004c6:	f000 fb2f 	bl	8000b28 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f000 fec8 	bl	8001288 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 fec3 	bl	8001288 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	469b      	mov	fp, r3
 800050a:	d433      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050c:	465a      	mov	r2, fp
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83a      	bhi.n	8000596 <__udivmoddi4+0xc2>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e078      	b.n	8000618 <__udivmoddi4+0x144>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e075      	b.n	800061e <__udivmoddi4+0x14a>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e028      	b.n	800059e <__udivmoddi4+0xca>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	2320      	movs	r3, #32
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	4652      	mov	r2, sl
 800057c:	40da      	lsrs	r2, r3
 800057e:	4641      	mov	r1, r8
 8000580:	0013      	movs	r3, r2
 8000582:	464a      	mov	r2, r9
 8000584:	408a      	lsls	r2, r1
 8000586:	0017      	movs	r7, r2
 8000588:	4642      	mov	r2, r8
 800058a:	431f      	orrs	r7, r3
 800058c:	4653      	mov	r3, sl
 800058e:	4093      	lsls	r3, r2
 8000590:	001e      	movs	r6, r3
 8000592:	42af      	cmp	r7, r5
 8000594:	d9c4      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0d9      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	0872      	lsrs	r2, r6, #1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4646      	mov	r6, r8
 80005ac:	087b      	lsrs	r3, r7, #1
 80005ae:	e00e      	b.n	80005ce <__udivmoddi4+0xfa>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d101      	bne.n	80005b8 <__udivmoddi4+0xe4>
 80005b4:	42a2      	cmp	r2, r4
 80005b6:	d80c      	bhi.n	80005d2 <__udivmoddi4+0xfe>
 80005b8:	1aa4      	subs	r4, r4, r2
 80005ba:	419d      	sbcs	r5, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	3e01      	subs	r6, #1
 80005c6:	1824      	adds	r4, r4, r0
 80005c8:	414d      	adcs	r5, r1
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d006      	beq.n	80005dc <__udivmoddi4+0x108>
 80005ce:	42ab      	cmp	r3, r5
 80005d0:	d9ee      	bls.n	80005b0 <__udivmoddi4+0xdc>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d1f8      	bne.n	80005ce <__udivmoddi4+0xfa>
 80005dc:	9800      	ldr	r0, [sp, #0]
 80005de:	9901      	ldr	r1, [sp, #4]
 80005e0:	465b      	mov	r3, fp
 80005e2:	1900      	adds	r0, r0, r4
 80005e4:	4169      	adcs	r1, r5
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db24      	blt.n	8000634 <__udivmoddi4+0x160>
 80005ea:	002b      	movs	r3, r5
 80005ec:	465a      	mov	r2, fp
 80005ee:	4644      	mov	r4, r8
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	002a      	movs	r2, r5
 80005f4:	40e2      	lsrs	r2, r4
 80005f6:	001c      	movs	r4, r3
 80005f8:	465b      	mov	r3, fp
 80005fa:	0015      	movs	r5, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db2a      	blt.n	8000656 <__udivmoddi4+0x182>
 8000600:	0026      	movs	r6, r4
 8000602:	409e      	lsls	r6, r3
 8000604:	0033      	movs	r3, r6
 8000606:	0026      	movs	r6, r4
 8000608:	4647      	mov	r7, r8
 800060a:	40be      	lsls	r6, r7
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	e79f      	b.n	8000558 <__udivmoddi4+0x84>
 8000618:	42a3      	cmp	r3, r4
 800061a:	d8bc      	bhi.n	8000596 <__udivmoddi4+0xc2>
 800061c:	e783      	b.n	8000526 <__udivmoddi4+0x52>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	2100      	movs	r1, #0
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	9100      	str	r1, [sp, #0]
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	40da      	lsrs	r2, r3
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	e786      	b.n	8000542 <__udivmoddi4+0x6e>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	4646      	mov	r6, r8
 800063e:	409a      	lsls	r2, r3
 8000640:	0023      	movs	r3, r4
 8000642:	40f3      	lsrs	r3, r6
 8000644:	4644      	mov	r4, r8
 8000646:	4313      	orrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	dad4      	bge.n	8000600 <__udivmoddi4+0x12c>
 8000656:	4642      	mov	r2, r8
 8000658:	002f      	movs	r7, r5
 800065a:	2320      	movs	r3, #32
 800065c:	0026      	movs	r6, r4
 800065e:	4097      	lsls	r7, r2
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	40de      	lsrs	r6, r3
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7cd      	b.n	8000606 <__udivmoddi4+0x132>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__eqsf2>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	0042      	lsls	r2, r0, #1
 8000670:	0245      	lsls	r5, r0, #9
 8000672:	024e      	lsls	r6, r1, #9
 8000674:	004c      	lsls	r4, r1, #1
 8000676:	0fc3      	lsrs	r3, r0, #31
 8000678:	0a6d      	lsrs	r5, r5, #9
 800067a:	2001      	movs	r0, #1
 800067c:	0e12      	lsrs	r2, r2, #24
 800067e:	0a76      	lsrs	r6, r6, #9
 8000680:	0e24      	lsrs	r4, r4, #24
 8000682:	0fc9      	lsrs	r1, r1, #31
 8000684:	2aff      	cmp	r2, #255	; 0xff
 8000686:	d006      	beq.n	8000696 <__eqsf2+0x2a>
 8000688:	2cff      	cmp	r4, #255	; 0xff
 800068a:	d003      	beq.n	8000694 <__eqsf2+0x28>
 800068c:	42a2      	cmp	r2, r4
 800068e:	d101      	bne.n	8000694 <__eqsf2+0x28>
 8000690:	42b5      	cmp	r5, r6
 8000692:	d006      	beq.n	80006a2 <__eqsf2+0x36>
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	2d00      	cmp	r5, #0
 8000698:	d1fc      	bne.n	8000694 <__eqsf2+0x28>
 800069a:	2cff      	cmp	r4, #255	; 0xff
 800069c:	d1fa      	bne.n	8000694 <__eqsf2+0x28>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d1f8      	bne.n	8000694 <__eqsf2+0x28>
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d006      	beq.n	80006b4 <__eqsf2+0x48>
 80006a6:	2001      	movs	r0, #1
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d1f3      	bne.n	8000694 <__eqsf2+0x28>
 80006ac:	0028      	movs	r0, r5
 80006ae:	1e43      	subs	r3, r0, #1
 80006b0:	4198      	sbcs	r0, r3
 80006b2:	e7ef      	b.n	8000694 <__eqsf2+0x28>
 80006b4:	2000      	movs	r0, #0
 80006b6:	e7ed      	b.n	8000694 <__eqsf2+0x28>

080006b8 <__gesf2>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	0042      	lsls	r2, r0, #1
 80006bc:	0245      	lsls	r5, r0, #9
 80006be:	024e      	lsls	r6, r1, #9
 80006c0:	004c      	lsls	r4, r1, #1
 80006c2:	0fc3      	lsrs	r3, r0, #31
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	0e12      	lsrs	r2, r2, #24
 80006c8:	0a76      	lsrs	r6, r6, #9
 80006ca:	0e24      	lsrs	r4, r4, #24
 80006cc:	0fc8      	lsrs	r0, r1, #31
 80006ce:	2aff      	cmp	r2, #255	; 0xff
 80006d0:	d01b      	beq.n	800070a <__gesf2+0x52>
 80006d2:	2cff      	cmp	r4, #255	; 0xff
 80006d4:	d00e      	beq.n	80006f4 <__gesf2+0x3c>
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d11b      	bne.n	8000712 <__gesf2+0x5a>
 80006da:	2c00      	cmp	r4, #0
 80006dc:	d101      	bne.n	80006e2 <__gesf2+0x2a>
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d01c      	beq.n	800071c <__gesf2+0x64>
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d00c      	beq.n	8000700 <__gesf2+0x48>
 80006e6:	4283      	cmp	r3, r0
 80006e8:	d01c      	beq.n	8000724 <__gesf2+0x6c>
 80006ea:	2102      	movs	r1, #2
 80006ec:	1e58      	subs	r0, r3, #1
 80006ee:	4008      	ands	r0, r1
 80006f0:	3801      	subs	r0, #1
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	2e00      	cmp	r6, #0
 80006f6:	d122      	bne.n	800073e <__gesf2+0x86>
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d1f4      	bne.n	80006e6 <__gesf2+0x2e>
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d1f2      	bne.n	80006e6 <__gesf2+0x2e>
 8000700:	2800      	cmp	r0, #0
 8000702:	d1f6      	bne.n	80006f2 <__gesf2+0x3a>
 8000704:	2001      	movs	r0, #1
 8000706:	4240      	negs	r0, r0
 8000708:	e7f3      	b.n	80006f2 <__gesf2+0x3a>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d117      	bne.n	800073e <__gesf2+0x86>
 800070e:	2cff      	cmp	r4, #255	; 0xff
 8000710:	d0f0      	beq.n	80006f4 <__gesf2+0x3c>
 8000712:	2c00      	cmp	r4, #0
 8000714:	d1e7      	bne.n	80006e6 <__gesf2+0x2e>
 8000716:	2e00      	cmp	r6, #0
 8000718:	d1e5      	bne.n	80006e6 <__gesf2+0x2e>
 800071a:	e7e6      	b.n	80006ea <__gesf2+0x32>
 800071c:	2000      	movs	r0, #0
 800071e:	2d00      	cmp	r5, #0
 8000720:	d0e7      	beq.n	80006f2 <__gesf2+0x3a>
 8000722:	e7e2      	b.n	80006ea <__gesf2+0x32>
 8000724:	42a2      	cmp	r2, r4
 8000726:	dc05      	bgt.n	8000734 <__gesf2+0x7c>
 8000728:	dbea      	blt.n	8000700 <__gesf2+0x48>
 800072a:	42b5      	cmp	r5, r6
 800072c:	d802      	bhi.n	8000734 <__gesf2+0x7c>
 800072e:	d3e7      	bcc.n	8000700 <__gesf2+0x48>
 8000730:	2000      	movs	r0, #0
 8000732:	e7de      	b.n	80006f2 <__gesf2+0x3a>
 8000734:	4243      	negs	r3, r0
 8000736:	4158      	adcs	r0, r3
 8000738:	0040      	lsls	r0, r0, #1
 800073a:	3801      	subs	r0, #1
 800073c:	e7d9      	b.n	80006f2 <__gesf2+0x3a>
 800073e:	2002      	movs	r0, #2
 8000740:	4240      	negs	r0, r0
 8000742:	e7d6      	b.n	80006f2 <__gesf2+0x3a>

08000744 <__lesf2>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	0042      	lsls	r2, r0, #1
 8000748:	0245      	lsls	r5, r0, #9
 800074a:	024e      	lsls	r6, r1, #9
 800074c:	004c      	lsls	r4, r1, #1
 800074e:	0fc3      	lsrs	r3, r0, #31
 8000750:	0a6d      	lsrs	r5, r5, #9
 8000752:	0e12      	lsrs	r2, r2, #24
 8000754:	0a76      	lsrs	r6, r6, #9
 8000756:	0e24      	lsrs	r4, r4, #24
 8000758:	0fc8      	lsrs	r0, r1, #31
 800075a:	2aff      	cmp	r2, #255	; 0xff
 800075c:	d00b      	beq.n	8000776 <__lesf2+0x32>
 800075e:	2cff      	cmp	r4, #255	; 0xff
 8000760:	d00d      	beq.n	800077e <__lesf2+0x3a>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d11f      	bne.n	80007a6 <__lesf2+0x62>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d116      	bne.n	8000798 <__lesf2+0x54>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d114      	bne.n	8000798 <__lesf2+0x54>
 800076e:	2000      	movs	r0, #0
 8000770:	2d00      	cmp	r5, #0
 8000772:	d010      	beq.n	8000796 <__lesf2+0x52>
 8000774:	e009      	b.n	800078a <__lesf2+0x46>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d10c      	bne.n	8000794 <__lesf2+0x50>
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d113      	bne.n	80007a6 <__lesf2+0x62>
 800077e:	2e00      	cmp	r6, #0
 8000780:	d108      	bne.n	8000794 <__lesf2+0x50>
 8000782:	2a00      	cmp	r2, #0
 8000784:	d008      	beq.n	8000798 <__lesf2+0x54>
 8000786:	4283      	cmp	r3, r0
 8000788:	d012      	beq.n	80007b0 <__lesf2+0x6c>
 800078a:	2102      	movs	r1, #2
 800078c:	1e58      	subs	r0, r3, #1
 800078e:	4008      	ands	r0, r1
 8000790:	3801      	subs	r0, #1
 8000792:	e000      	b.n	8000796 <__lesf2+0x52>
 8000794:	2002      	movs	r0, #2
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	2d00      	cmp	r5, #0
 800079a:	d1f4      	bne.n	8000786 <__lesf2+0x42>
 800079c:	2800      	cmp	r0, #0
 800079e:	d1fa      	bne.n	8000796 <__lesf2+0x52>
 80007a0:	2001      	movs	r0, #1
 80007a2:	4240      	negs	r0, r0
 80007a4:	e7f7      	b.n	8000796 <__lesf2+0x52>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d1ed      	bne.n	8000786 <__lesf2+0x42>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d1eb      	bne.n	8000786 <__lesf2+0x42>
 80007ae:	e7ec      	b.n	800078a <__lesf2+0x46>
 80007b0:	42a2      	cmp	r2, r4
 80007b2:	dc05      	bgt.n	80007c0 <__lesf2+0x7c>
 80007b4:	dbf2      	blt.n	800079c <__lesf2+0x58>
 80007b6:	42b5      	cmp	r5, r6
 80007b8:	d802      	bhi.n	80007c0 <__lesf2+0x7c>
 80007ba:	d3ef      	bcc.n	800079c <__lesf2+0x58>
 80007bc:	2000      	movs	r0, #0
 80007be:	e7ea      	b.n	8000796 <__lesf2+0x52>
 80007c0:	4243      	negs	r3, r0
 80007c2:	4158      	adcs	r0, r3
 80007c4:	0040      	lsls	r0, r0, #1
 80007c6:	3801      	subs	r0, #1
 80007c8:	e7e5      	b.n	8000796 <__lesf2+0x52>
 80007ca:	46c0      	nop			; (mov r8, r8)

080007cc <__aeabi_fsub>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	46ce      	mov	lr, r9
 80007d0:	4647      	mov	r7, r8
 80007d2:	0243      	lsls	r3, r0, #9
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	00da      	lsls	r2, r3, #3
 80007da:	4694      	mov	ip, r2
 80007dc:	0a72      	lsrs	r2, r6, #9
 80007de:	4691      	mov	r9, r2
 80007e0:	0045      	lsls	r5, r0, #1
 80007e2:	004a      	lsls	r2, r1, #1
 80007e4:	b580      	push	{r7, lr}
 80007e6:	0e2d      	lsrs	r5, r5, #24
 80007e8:	001f      	movs	r7, r3
 80007ea:	0fc4      	lsrs	r4, r0, #31
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	2aff      	cmp	r2, #255	; 0xff
 80007f4:	d05b      	beq.n	80008ae <__aeabi_fsub+0xe2>
 80007f6:	2001      	movs	r0, #1
 80007f8:	4041      	eors	r1, r0
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d039      	beq.n	8000872 <__aeabi_fsub+0xa6>
 80007fe:	1aa8      	subs	r0, r5, r2
 8000800:	2800      	cmp	r0, #0
 8000802:	dd5a      	ble.n	80008ba <__aeabi_fsub+0xee>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d06a      	beq.n	80008de <__aeabi_fsub+0x112>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0x42>
 800080c:	e0d9      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4316      	orrs	r6, r2
 8000814:	281b      	cmp	r0, #27
 8000816:	dc00      	bgt.n	800081a <__aeabi_fsub+0x4e>
 8000818:	e0e9      	b.n	80009ee <__aeabi_fsub+0x222>
 800081a:	2001      	movs	r0, #1
 800081c:	4663      	mov	r3, ip
 800081e:	1a18      	subs	r0, r3, r0
 8000820:	0143      	lsls	r3, r0, #5
 8000822:	d400      	bmi.n	8000826 <__aeabi_fsub+0x5a>
 8000824:	e0b4      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000826:	0180      	lsls	r0, r0, #6
 8000828:	0987      	lsrs	r7, r0, #6
 800082a:	0038      	movs	r0, r7
 800082c:	f000 fd0e 	bl	800124c <__clzsi2>
 8000830:	3805      	subs	r0, #5
 8000832:	4087      	lsls	r7, r0
 8000834:	4285      	cmp	r5, r0
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0x6e>
 8000838:	e0cc      	b.n	80009d4 <__aeabi_fsub+0x208>
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	48b5      	ldr	r0, [pc, #724]	; (8000b14 <__aeabi_fsub+0x348>)
 800083e:	4038      	ands	r0, r7
 8000840:	0743      	lsls	r3, r0, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fsub+0x82>
 8000844:	230f      	movs	r3, #15
 8000846:	4003      	ands	r3, r0
 8000848:	2b04      	cmp	r3, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x82>
 800084c:	3004      	adds	r0, #4
 800084e:	0143      	lsls	r3, r0, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fsub+0x88>
 8000852:	e0a0      	b.n	8000996 <__aeabi_fsub+0x1ca>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	; 0xfe
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x90>
 800085a:	e08d      	b.n	8000978 <__aeabi_fsub+0x1ac>
 800085c:	0180      	lsls	r0, r0, #6
 800085e:	0a47      	lsrs	r7, r0, #9
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	05d0      	lsls	r0, r2, #23
 8000864:	4338      	orrs	r0, r7
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	4320      	orrs	r0, r4
 800086a:	bcc0      	pop	{r6, r7}
 800086c:	46b9      	mov	r9, r7
 800086e:	46b0      	mov	r8, r6
 8000870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000872:	1aa8      	subs	r0, r5, r2
 8000874:	4680      	mov	r8, r0
 8000876:	2800      	cmp	r0, #0
 8000878:	dd45      	ble.n	8000906 <__aeabi_fsub+0x13a>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d070      	beq.n	8000960 <__aeabi_fsub+0x194>
 800087e:	2dff      	cmp	r5, #255	; 0xff
 8000880:	d100      	bne.n	8000884 <__aeabi_fsub+0xb8>
 8000882:	e09e      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	04db      	lsls	r3, r3, #19
 8000888:	431e      	orrs	r6, r3
 800088a:	4643      	mov	r3, r8
 800088c:	2b1b      	cmp	r3, #27
 800088e:	dc00      	bgt.n	8000892 <__aeabi_fsub+0xc6>
 8000890:	e0d2      	b.n	8000a38 <__aeabi_fsub+0x26c>
 8000892:	2001      	movs	r0, #1
 8000894:	4460      	add	r0, ip
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d57a      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 800089a:	3501      	adds	r5, #1
 800089c:	2dff      	cmp	r5, #255	; 0xff
 800089e:	d06b      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80008a0:	2301      	movs	r3, #1
 80008a2:	4a9d      	ldr	r2, [pc, #628]	; (8000b18 <__aeabi_fsub+0x34c>)
 80008a4:	4003      	ands	r3, r0
 80008a6:	0840      	lsrs	r0, r0, #1
 80008a8:	4010      	ands	r0, r2
 80008aa:	4318      	orrs	r0, r3
 80008ac:	e7c8      	b.n	8000840 <__aeabi_fsub+0x74>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d020      	beq.n	80008f4 <__aeabi_fsub+0x128>
 80008b2:	428c      	cmp	r4, r1
 80008b4:	d023      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008b6:	0028      	movs	r0, r5
 80008b8:	38ff      	subs	r0, #255	; 0xff
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d039      	beq.n	8000932 <__aeabi_fsub+0x166>
 80008be:	1b57      	subs	r7, r2, r5
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fsub+0xfa>
 80008c4:	e09d      	b.n	8000a02 <__aeabi_fsub+0x236>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x102>
 80008cc:	e0db      	b.n	8000a86 <__aeabi_fsub+0x2ba>
 80008ce:	1e7b      	subs	r3, r7, #1
 80008d0:	2f01      	cmp	r7, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x10a>
 80008d4:	e10d      	b.n	8000af2 <__aeabi_fsub+0x326>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d071      	beq.n	80009be <__aeabi_fsub+0x1f2>
 80008da:	001f      	movs	r7, r3
 80008dc:	e098      	b.n	8000a10 <__aeabi_fsub+0x244>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x118>
 80008e2:	e0a7      	b.n	8000a34 <__aeabi_fsub+0x268>
 80008e4:	1e42      	subs	r2, r0, #1
 80008e6:	2801      	cmp	r0, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fsub+0x120>
 80008ea:	e0e6      	b.n	8000aba <__aeabi_fsub+0x2ee>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80008f0:	0010      	movs	r0, r2
 80008f2:	e78f      	b.n	8000814 <__aeabi_fsub+0x48>
 80008f4:	2001      	movs	r0, #1
 80008f6:	4041      	eors	r1, r0
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008fc:	e77f      	b.n	80007fe <__aeabi_fsub+0x32>
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	4240      	negs	r0, r0
 8000902:	4680      	mov	r8, r0
 8000904:	44a8      	add	r8, r5
 8000906:	4640      	mov	r0, r8
 8000908:	2800      	cmp	r0, #0
 800090a:	d038      	beq.n	800097e <__aeabi_fsub+0x1b2>
 800090c:	1b51      	subs	r1, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x148>
 8000912:	e0ae      	b.n	8000a72 <__aeabi_fsub+0x2a6>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x14e>
 8000918:	e0df      	b.n	8000ada <__aeabi_fsub+0x30e>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	4660      	mov	r0, ip
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	4318      	orrs	r0, r3
 8000922:	4684      	mov	ip, r0
 8000924:	291b      	cmp	r1, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x15e>
 8000928:	e0d9      	b.n	8000ade <__aeabi_fsub+0x312>
 800092a:	2001      	movs	r0, #1
 800092c:	0015      	movs	r5, r2
 800092e:	1980      	adds	r0, r0, r6
 8000930:	e7b1      	b.n	8000896 <__aeabi_fsub+0xca>
 8000932:	20fe      	movs	r0, #254	; 0xfe
 8000934:	1c6a      	adds	r2, r5, #1
 8000936:	4210      	tst	r0, r2
 8000938:	d171      	bne.n	8000a1e <__aeabi_fsub+0x252>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fsub+0x174>
 800093e:	e0a6      	b.n	8000a8e <__aeabi_fsub+0x2c2>
 8000940:	4663      	mov	r3, ip
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fsub+0x17c>
 8000946:	e0d9      	b.n	8000afc <__aeabi_fsub+0x330>
 8000948:	2200      	movs	r2, #0
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x184>
 800094e:	e788      	b.n	8000862 <__aeabi_fsub+0x96>
 8000950:	1b98      	subs	r0, r3, r6
 8000952:	0143      	lsls	r3, r0, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fsub+0x18c>
 8000956:	e0e1      	b.n	8000b1c <__aeabi_fsub+0x350>
 8000958:	4663      	mov	r3, ip
 800095a:	000c      	movs	r4, r1
 800095c:	1af0      	subs	r0, r6, r3
 800095e:	e76f      	b.n	8000840 <__aeabi_fsub+0x74>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x19a>
 8000964:	e0b7      	b.n	8000ad6 <__aeabi_fsub+0x30a>
 8000966:	0002      	movs	r2, r0
 8000968:	3a01      	subs	r2, #1
 800096a:	2801      	cmp	r0, #1
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x1a4>
 800096e:	e09c      	b.n	8000aaa <__aeabi_fsub+0x2de>
 8000970:	28ff      	cmp	r0, #255	; 0xff
 8000972:	d026      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 8000974:	4690      	mov	r8, r2
 8000976:	e788      	b.n	800088a <__aeabi_fsub+0xbe>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	2700      	movs	r7, #0
 800097c:	e771      	b.n	8000862 <__aeabi_fsub+0x96>
 800097e:	20fe      	movs	r0, #254	; 0xfe
 8000980:	1c6a      	adds	r2, r5, #1
 8000982:	4210      	tst	r0, r2
 8000984:	d064      	beq.n	8000a50 <__aeabi_fsub+0x284>
 8000986:	2aff      	cmp	r2, #255	; 0xff
 8000988:	d0f6      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 800098a:	0015      	movs	r5, r2
 800098c:	4466      	add	r6, ip
 800098e:	0870      	lsrs	r0, r6, #1
 8000990:	0743      	lsls	r3, r0, #29
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x1ca>
 8000994:	e756      	b.n	8000844 <__aeabi_fsub+0x78>
 8000996:	08c3      	lsrs	r3, r0, #3
 8000998:	2dff      	cmp	r5, #255	; 0xff
 800099a:	d012      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5f      	lsrs	r7, r3, #9
 80009a0:	b2ea      	uxtb	r2, r5
 80009a2:	e75e      	b.n	8000862 <__aeabi_fsub+0x96>
 80009a4:	4662      	mov	r2, ip
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 80009aa:	e096      	b.n	8000ada <__aeabi_fsub+0x30e>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d008      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	4213      	tst	r3, r2
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b8:	4648      	mov	r0, r9
 80009ba:	4210      	tst	r0, r2
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fsub+0x1f6>
 80009be:	000c      	movs	r4, r1
 80009c0:	464b      	mov	r3, r9
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0d8      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80009c6:	2780      	movs	r7, #128	; 0x80
 80009c8:	03ff      	lsls	r7, r7, #15
 80009ca:	431f      	orrs	r7, r3
 80009cc:	027f      	lsls	r7, r7, #9
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	0a7f      	lsrs	r7, r7, #9
 80009d2:	e746      	b.n	8000862 <__aeabi_fsub+0x96>
 80009d4:	2320      	movs	r3, #32
 80009d6:	003a      	movs	r2, r7
 80009d8:	1b45      	subs	r5, r0, r5
 80009da:	0038      	movs	r0, r7
 80009dc:	3501      	adds	r5, #1
 80009de:	40ea      	lsrs	r2, r5
 80009e0:	1b5d      	subs	r5, r3, r5
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	1e43      	subs	r3, r0, #1
 80009e6:	4198      	sbcs	r0, r3
 80009e8:	2500      	movs	r5, #0
 80009ea:	4310      	orrs	r0, r2
 80009ec:	e728      	b.n	8000840 <__aeabi_fsub+0x74>
 80009ee:	2320      	movs	r3, #32
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	0032      	movs	r2, r6
 80009f4:	409e      	lsls	r6, r3
 80009f6:	40c2      	lsrs	r2, r0
 80009f8:	0030      	movs	r0, r6
 80009fa:	1e43      	subs	r3, r0, #1
 80009fc:	4198      	sbcs	r0, r3
 80009fe:	4310      	orrs	r0, r2
 8000a00:	e70c      	b.n	800081c <__aeabi_fsub+0x50>
 8000a02:	2aff      	cmp	r2, #255	; 0xff
 8000a04:	d0db      	beq.n	80009be <__aeabi_fsub+0x1f2>
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	4660      	mov	r0, ip
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2f1b      	cmp	r7, #27
 8000a12:	dd56      	ble.n	8000ac2 <__aeabi_fsub+0x2f6>
 8000a14:	2001      	movs	r0, #1
 8000a16:	000c      	movs	r4, r1
 8000a18:	0015      	movs	r5, r2
 8000a1a:	1a30      	subs	r0, r6, r0
 8000a1c:	e700      	b.n	8000820 <__aeabi_fsub+0x54>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	1b9f      	subs	r7, r3, r6
 8000a22:	017b      	lsls	r3, r7, #5
 8000a24:	d43d      	bmi.n	8000aa2 <__aeabi_fsub+0x2d6>
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000a2a:	e6fe      	b.n	800082a <__aeabi_fsub+0x5e>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2700      	movs	r7, #0
 8000a32:	e716      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a34:	0005      	movs	r5, r0
 8000a36:	e7af      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a38:	0032      	movs	r2, r6
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4641      	mov	r1, r8
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	2320      	movs	r3, #32
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	409e      	lsls	r6, r3
 8000a46:	0030      	movs	r0, r6
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4310      	orrs	r0, r2
 8000a4e:	e721      	b.n	8000894 <__aeabi_fsub+0xc8>
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1a7      	bne.n	80009a4 <__aeabi_fsub+0x1d8>
 8000a54:	4663      	mov	r3, ip
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d059      	beq.n	8000b0e <__aeabi_fsub+0x342>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x296>
 8000a60:	e6ff      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a62:	0030      	movs	r0, r6
 8000a64:	4460      	add	r0, ip
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d592      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <__aeabi_fsub+0x348>)
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	4018      	ands	r0, r3
 8000a70:	e78e      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000a72:	4663      	mov	r3, ip
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d047      	beq.n	8000b08 <__aeabi_fsub+0x33c>
 8000a78:	1e4b      	subs	r3, r1, #1
 8000a7a:	2901      	cmp	r1, #1
 8000a7c:	d015      	beq.n	8000aaa <__aeabi_fsub+0x2de>
 8000a7e:	29ff      	cmp	r1, #255	; 0xff
 8000a80:	d02b      	beq.n	8000ada <__aeabi_fsub+0x30e>
 8000a82:	0019      	movs	r1, r3
 8000a84:	e74e      	b.n	8000924 <__aeabi_fsub+0x158>
 8000a86:	000c      	movs	r4, r1
 8000a88:	464b      	mov	r3, r9
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	e784      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d18b      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d192      	bne.n	80009be <__aeabi_fsub+0x1f2>
 8000a98:	2780      	movs	r7, #128	; 0x80
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	03ff      	lsls	r7, r7, #15
 8000aa0:	e6df      	b.n	8000862 <__aeabi_fsub+0x96>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1af7      	subs	r7, r6, r3
 8000aa8:	e6bf      	b.n	800082a <__aeabi_fsub+0x5e>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	2501      	movs	r5, #1
 8000ab0:	0143      	lsls	r3, r0, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x2ea>
 8000ab4:	e76c      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000ab6:	2502      	movs	r5, #2
 8000ab8:	e6f2      	b.n	80008a0 <__aeabi_fsub+0xd4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2501      	movs	r5, #1
 8000abe:	1b98      	subs	r0, r3, r6
 8000ac0:	e6ae      	b.n	8000820 <__aeabi_fsub+0x54>
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	4664      	mov	r4, ip
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	40fc      	lsrs	r4, r7
 8000aca:	1bdf      	subs	r7, r3, r7
 8000acc:	40b8      	lsls	r0, r7
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	e79f      	b.n	8000a16 <__aeabi_fsub+0x24a>
 8000ad6:	0005      	movs	r5, r0
 8000ad8:	e75e      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000ada:	464b      	mov	r3, r9
 8000adc:	e771      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000ade:	2320      	movs	r3, #32
 8000ae0:	4665      	mov	r5, ip
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	40cd      	lsrs	r5, r1
 8000ae6:	1a59      	subs	r1, r3, r1
 8000ae8:	4088      	lsls	r0, r1
 8000aea:	1e43      	subs	r3, r0, #1
 8000aec:	4198      	sbcs	r0, r3
 8000aee:	4328      	orrs	r0, r5
 8000af0:	e71c      	b.n	800092c <__aeabi_fsub+0x160>
 8000af2:	4663      	mov	r3, ip
 8000af4:	000c      	movs	r4, r1
 8000af6:	2501      	movs	r5, #1
 8000af8:	1af0      	subs	r0, r6, r3
 8000afa:	e691      	b.n	8000820 <__aeabi_fsub+0x54>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d095      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000b00:	000c      	movs	r4, r1
 8000b02:	464f      	mov	r7, r9
 8000b04:	2200      	movs	r2, #0
 8000b06:	e6ac      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b08:	464b      	mov	r3, r9
 8000b0a:	000d      	movs	r5, r1
 8000b0c:	e744      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000b0e:	464f      	mov	r7, r9
 8000b10:	2200      	movs	r2, #0
 8000b12:	e6a6      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b14:	fbffffff 	.word	0xfbffffff
 8000b18:	7dffffff 	.word	0x7dffffff
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x356>
 8000b20:	e736      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000b22:	2400      	movs	r4, #0
 8000b24:	2700      	movs	r7, #0
 8000b26:	e69c      	b.n	8000862 <__aeabi_fsub+0x96>

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	; 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	; 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	; 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	; 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	; 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	; 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c6      	adds	r6, r0, r3
 8000b72:	405e      	eors	r6, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0030      	movs	r0, r6
 8000b78:	f000 fb68 	bl	800124c <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	; 0x9e
 8000b7e:	0005      	movs	r5, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	; 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	dd01      	ble.n	8000b8e <__aeabi_i2f+0x26>
 8000b8a:	3d08      	subs	r5, #8
 8000b8c:	40ae      	lsls	r6, r5
 8000b8e:	0276      	lsls	r6, r6, #9
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4330      	orrs	r0, r6
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba6:	2b99      	cmp	r3, #153	; 0x99
 8000ba8:	dd0c      	ble.n	8000bc4 <__aeabi_i2f+0x5c>
 8000baa:	2205      	movs	r2, #5
 8000bac:	0031      	movs	r1, r6
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	40d1      	lsrs	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	0001      	movs	r1, r0
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	311b      	adds	r1, #27
 8000bba:	4088      	lsls	r0, r1
 8000bbc:	1e41      	subs	r1, r0, #1
 8000bbe:	4188      	sbcs	r0, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	2d05      	cmp	r5, #5
 8000bc6:	dc12      	bgt.n	8000bee <__aeabi_i2f+0x86>
 8000bc8:	0031      	movs	r1, r6
 8000bca:	4f0d      	ldr	r7, [pc, #52]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bcc:	4039      	ands	r1, r7
 8000bce:	0772      	lsls	r2, r6, #29
 8000bd0:	d009      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	4030      	ands	r0, r6
 8000bd6:	2804      	cmp	r0, #4
 8000bd8:	d005      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bda:	3104      	adds	r1, #4
 8000bdc:	014a      	lsls	r2, r1, #5
 8000bde:	d502      	bpl.n	8000be6 <__aeabi_i2f+0x7e>
 8000be0:	239f      	movs	r3, #159	; 0x9f
 8000be2:	4039      	ands	r1, r7
 8000be4:	1b5b      	subs	r3, r3, r5
 8000be6:	0189      	lsls	r1, r1, #6
 8000be8:	0a4e      	lsrs	r6, r1, #9
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	e7d6      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bee:	1f6a      	subs	r2, r5, #5
 8000bf0:	4096      	lsls	r6, r2
 8000bf2:	0031      	movs	r1, r6
 8000bf4:	4f02      	ldr	r7, [pc, #8]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bf6:	4039      	ands	r1, r7
 8000bf8:	0772      	lsls	r2, r6, #29
 8000bfa:	d0f4      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bfc:	e7e9      	b.n	8000bd2 <__aeabi_i2f+0x6a>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_dmul>:
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	4657      	mov	r7, sl
 8000c08:	464e      	mov	r6, r9
 8000c0a:	4645      	mov	r5, r8
 8000c0c:	46de      	mov	lr, fp
 8000c0e:	b5e0      	push	{r5, r6, r7, lr}
 8000c10:	4698      	mov	r8, r3
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	004b      	lsls	r3, r1, #1
 8000c16:	0006      	movs	r6, r0
 8000c18:	4692      	mov	sl, r2
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	0b24      	lsrs	r4, r4, #12
 8000c1e:	0d5b      	lsrs	r3, r3, #21
 8000c20:	0fcf      	lsrs	r7, r1, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dmul+0x24>
 8000c26:	e15c      	b.n	8000ee2 <__aeabi_dmul+0x2de>
 8000c28:	4ad9      	ldr	r2, [pc, #868]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dmul+0x2c>
 8000c2e:	e175      	b.n	8000f1c <__aeabi_dmul+0x318>
 8000c30:	0f42      	lsrs	r2, r0, #29
 8000c32:	00e4      	lsls	r4, r4, #3
 8000c34:	4314      	orrs	r4, r2
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	0412      	lsls	r2, r2, #16
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	4ad5      	ldr	r2, [pc, #852]	; (8000f94 <__aeabi_dmul+0x390>)
 8000c3e:	00c5      	lsls	r5, r0, #3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	4699      	mov	r9, r3
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	4642      	mov	r2, r8
 8000c50:	031e      	lsls	r6, r3, #12
 8000c52:	0fd2      	lsrs	r2, r2, #31
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4650      	mov	r0, sl
 8000c58:	4690      	mov	r8, r2
 8000c5a:	0b36      	lsrs	r6, r6, #12
 8000c5c:	0d5b      	lsrs	r3, r3, #21
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dmul+0x5e>
 8000c60:	e120      	b.n	8000ea4 <__aeabi_dmul+0x2a0>
 8000c62:	4acb      	ldr	r2, [pc, #812]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dmul+0x66>
 8000c68:	e162      	b.n	8000f30 <__aeabi_dmul+0x32c>
 8000c6a:	49ca      	ldr	r1, [pc, #808]	; (8000f94 <__aeabi_dmul+0x390>)
 8000c6c:	0f42      	lsrs	r2, r0, #29
 8000c6e:	468c      	mov	ip, r1
 8000c70:	9900      	ldr	r1, [sp, #0]
 8000c72:	4463      	add	r3, ip
 8000c74:	00f6      	lsls	r6, r6, #3
 8000c76:	468c      	mov	ip, r1
 8000c78:	4316      	orrs	r6, r2
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	449c      	add	ip, r3
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4663      	mov	r3, ip
 8000c82:	4316      	orrs	r6, r2
 8000c84:	00c2      	lsls	r2, r0, #3
 8000c86:	2000      	movs	r0, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	9900      	ldr	r1, [sp, #0]
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	3101      	adds	r1, #1
 8000c90:	468c      	mov	ip, r1
 8000c92:	4649      	mov	r1, r9
 8000c94:	407b      	eors	r3, r7
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	290f      	cmp	r1, #15
 8000c9a:	d826      	bhi.n	8000cea <__aeabi_dmul+0xe6>
 8000c9c:	4bbe      	ldr	r3, [pc, #760]	; (8000f98 <__aeabi_dmul+0x394>)
 8000c9e:	0089      	lsls	r1, r1, #2
 8000ca0:	5859      	ldr	r1, [r3, r1]
 8000ca2:	468f      	mov	pc, r1
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	0034      	movs	r4, r6
 8000caa:	0015      	movs	r5, r2
 8000cac:	4683      	mov	fp, r0
 8000cae:	465b      	mov	r3, fp
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d016      	beq.n	8000ce2 <__aeabi_dmul+0xde>
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dmul+0xb6>
 8000cb8:	e203      	b.n	80010c2 <__aeabi_dmul+0x4be>
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_dmul+0xbc>
 8000cbe:	e0cd      	b.n	8000e5c <__aeabi_dmul+0x258>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	0512      	lsls	r2, r2, #20
 8000cca:	4322      	orrs	r2, r4
 8000ccc:	07db      	lsls	r3, r3, #31
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	b007      	add	sp, #28
 8000cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd8:	46bb      	mov	fp, r7
 8000cda:	46b2      	mov	sl, r6
 8000cdc:	46a9      	mov	r9, r5
 8000cde:	46a0      	mov	r8, r4
 8000ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	4aaa      	ldr	r2, [pc, #680]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000ce8:	e7ed      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000cea:	0c28      	lsrs	r0, r5, #16
 8000cec:	042d      	lsls	r5, r5, #16
 8000cee:	0c2d      	lsrs	r5, r5, #16
 8000cf0:	002b      	movs	r3, r5
 8000cf2:	0c11      	lsrs	r1, r2, #16
 8000cf4:	0412      	lsls	r2, r2, #16
 8000cf6:	0c12      	lsrs	r2, r2, #16
 8000cf8:	4353      	muls	r3, r2
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	002f      	movs	r7, r5
 8000d00:	4343      	muls	r3, r0
 8000d02:	4699      	mov	r9, r3
 8000d04:	434f      	muls	r7, r1
 8000d06:	444f      	add	r7, r9
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	000b      	movs	r3, r1
 8000d0e:	0c3f      	lsrs	r7, r7, #16
 8000d10:	46ba      	mov	sl, r7
 8000d12:	4343      	muls	r3, r0
 8000d14:	44da      	add	sl, fp
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	45d1      	cmp	r9, sl
 8000d1a:	d904      	bls.n	8000d26 <__aeabi_dmul+0x122>
 8000d1c:	2780      	movs	r7, #128	; 0x80
 8000d1e:	027f      	lsls	r7, r7, #9
 8000d20:	46b9      	mov	r9, r7
 8000d22:	444b      	add	r3, r9
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	4653      	mov	r3, sl
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	469b      	mov	fp, r3
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	041f      	lsls	r7, r3, #16
 8000d30:	4643      	mov	r3, r8
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	4698      	mov	r8, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4443      	add	r3, r8
 8000d3c:	9304      	str	r3, [sp, #16]
 8000d3e:	0c33      	lsrs	r3, r6, #16
 8000d40:	0436      	lsls	r6, r6, #16
 8000d42:	0c36      	lsrs	r6, r6, #16
 8000d44:	4698      	mov	r8, r3
 8000d46:	0033      	movs	r3, r6
 8000d48:	4343      	muls	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	4343      	muls	r3, r0
 8000d50:	002f      	movs	r7, r5
 8000d52:	469a      	mov	sl, r3
 8000d54:	4643      	mov	r3, r8
 8000d56:	4377      	muls	r7, r6
 8000d58:	435d      	muls	r5, r3
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	444d      	add	r5, r9
 8000d5e:	1945      	adds	r5, r0, r5
 8000d60:	45a9      	cmp	r9, r5
 8000d62:	d903      	bls.n	8000d6c <__aeabi_dmul+0x168>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	4699      	mov	r9, r3
 8000d6a:	44ca      	add	sl, r9
 8000d6c:	043f      	lsls	r7, r7, #16
 8000d6e:	0c28      	lsrs	r0, r5, #16
 8000d70:	0c3f      	lsrs	r7, r7, #16
 8000d72:	042d      	lsls	r5, r5, #16
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	0c27      	lsrs	r7, r4, #16
 8000d78:	0424      	lsls	r4, r4, #16
 8000d7a:	0c24      	lsrs	r4, r4, #16
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0020      	movs	r0, r4
 8000d80:	4350      	muls	r0, r2
 8000d82:	437a      	muls	r2, r7
 8000d84:	4691      	mov	r9, r2
 8000d86:	003a      	movs	r2, r7
 8000d88:	4453      	add	r3, sl
 8000d8a:	9305      	str	r3, [sp, #20]
 8000d8c:	0c03      	lsrs	r3, r0, #16
 8000d8e:	469a      	mov	sl, r3
 8000d90:	434a      	muls	r2, r1
 8000d92:	4361      	muls	r1, r4
 8000d94:	4449      	add	r1, r9
 8000d96:	4451      	add	r1, sl
 8000d98:	44ab      	add	fp, r5
 8000d9a:	4589      	cmp	r9, r1
 8000d9c:	d903      	bls.n	8000da6 <__aeabi_dmul+0x1a2>
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	4699      	mov	r9, r3
 8000da4:	444a      	add	r2, r9
 8000da6:	0400      	lsls	r0, r0, #16
 8000da8:	0c0b      	lsrs	r3, r1, #16
 8000daa:	0c00      	lsrs	r0, r0, #16
 8000dac:	0409      	lsls	r1, r1, #16
 8000dae:	1809      	adds	r1, r1, r0
 8000db0:	0020      	movs	r0, r4
 8000db2:	4699      	mov	r9, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	4370      	muls	r0, r6
 8000db8:	435c      	muls	r4, r3
 8000dba:	437e      	muls	r6, r7
 8000dbc:	435f      	muls	r7, r3
 8000dbe:	0c03      	lsrs	r3, r0, #16
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	19a4      	adds	r4, r4, r6
 8000dc4:	4444      	add	r4, r8
 8000dc6:	444a      	add	r2, r9
 8000dc8:	9703      	str	r7, [sp, #12]
 8000dca:	42a6      	cmp	r6, r4
 8000dcc:	d904      	bls.n	8000dd8 <__aeabi_dmul+0x1d4>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	4447      	add	r7, r8
 8000dd6:	9703      	str	r7, [sp, #12]
 8000dd8:	0423      	lsls	r3, r4, #16
 8000dda:	9e02      	ldr	r6, [sp, #8]
 8000ddc:	469a      	mov	sl, r3
 8000dde:	9b05      	ldr	r3, [sp, #20]
 8000de0:	445e      	add	r6, fp
 8000de2:	4698      	mov	r8, r3
 8000de4:	42ae      	cmp	r6, r5
 8000de6:	41ad      	sbcs	r5, r5
 8000de8:	1876      	adds	r6, r6, r1
 8000dea:	428e      	cmp	r6, r1
 8000dec:	4189      	sbcs	r1, r1
 8000dee:	0400      	lsls	r0, r0, #16
 8000df0:	0c00      	lsrs	r0, r0, #16
 8000df2:	4450      	add	r0, sl
 8000df4:	4440      	add	r0, r8
 8000df6:	426d      	negs	r5, r5
 8000df8:	1947      	adds	r7, r0, r5
 8000dfa:	46b8      	mov	r8, r7
 8000dfc:	4693      	mov	fp, r2
 8000dfe:	4249      	negs	r1, r1
 8000e00:	4689      	mov	r9, r1
 8000e02:	44c3      	add	fp, r8
 8000e04:	44d9      	add	r9, fp
 8000e06:	4298      	cmp	r0, r3
 8000e08:	4180      	sbcs	r0, r0
 8000e0a:	45a8      	cmp	r8, r5
 8000e0c:	41ad      	sbcs	r5, r5
 8000e0e:	4593      	cmp	fp, r2
 8000e10:	4192      	sbcs	r2, r2
 8000e12:	4589      	cmp	r9, r1
 8000e14:	4189      	sbcs	r1, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	4240      	negs	r0, r0
 8000e1a:	4328      	orrs	r0, r5
 8000e1c:	0c24      	lsrs	r4, r4, #16
 8000e1e:	4252      	negs	r2, r2
 8000e20:	4249      	negs	r1, r1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	9b03      	ldr	r3, [sp, #12]
 8000e26:	1900      	adds	r0, r0, r4
 8000e28:	1880      	adds	r0, r0, r2
 8000e2a:	18c7      	adds	r7, r0, r3
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	0ddc      	lsrs	r4, r3, #23
 8000e30:	9b04      	ldr	r3, [sp, #16]
 8000e32:	0275      	lsls	r5, r6, #9
 8000e34:	431d      	orrs	r5, r3
 8000e36:	1e6a      	subs	r2, r5, #1
 8000e38:	4195      	sbcs	r5, r2
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	0df6      	lsrs	r6, r6, #23
 8000e3e:	027f      	lsls	r7, r7, #9
 8000e40:	4335      	orrs	r5, r6
 8000e42:	025a      	lsls	r2, r3, #9
 8000e44:	433c      	orrs	r4, r7
 8000e46:	4315      	orrs	r5, r2
 8000e48:	01fb      	lsls	r3, r7, #7
 8000e4a:	d400      	bmi.n	8000e4e <__aeabi_dmul+0x24a>
 8000e4c:	e11c      	b.n	8001088 <__aeabi_dmul+0x484>
 8000e4e:	2101      	movs	r1, #1
 8000e50:	086a      	lsrs	r2, r5, #1
 8000e52:	400d      	ands	r5, r1
 8000e54:	4315      	orrs	r5, r2
 8000e56:	07e2      	lsls	r2, r4, #31
 8000e58:	4315      	orrs	r5, r2
 8000e5a:	0864      	lsrs	r4, r4, #1
 8000e5c:	494f      	ldr	r1, [pc, #316]	; (8000f9c <__aeabi_dmul+0x398>)
 8000e5e:	4461      	add	r1, ip
 8000e60:	2900      	cmp	r1, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_dmul+0x262>
 8000e64:	e0b0      	b.n	8000fc8 <__aeabi_dmul+0x3c4>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d009      	beq.n	8000e7e <__aeabi_dmul+0x27a>
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	402a      	ands	r2, r5
 8000e6e:	2a04      	cmp	r2, #4
 8000e70:	d005      	beq.n	8000e7e <__aeabi_dmul+0x27a>
 8000e72:	1d2a      	adds	r2, r5, #4
 8000e74:	42aa      	cmp	r2, r5
 8000e76:	41ad      	sbcs	r5, r5
 8000e78:	426d      	negs	r5, r5
 8000e7a:	1964      	adds	r4, r4, r5
 8000e7c:	0015      	movs	r5, r2
 8000e7e:	01e3      	lsls	r3, r4, #7
 8000e80:	d504      	bpl.n	8000e8c <__aeabi_dmul+0x288>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <__aeabi_dmul+0x39c>)
 8000e86:	00c9      	lsls	r1, r1, #3
 8000e88:	4014      	ands	r4, r2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <__aeabi_dmul+0x3a0>)
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_dmul+0x290>
 8000e92:	e726      	b.n	8000ce2 <__aeabi_dmul+0xde>
 8000e94:	0762      	lsls	r2, r4, #29
 8000e96:	08ed      	lsrs	r5, r5, #3
 8000e98:	0264      	lsls	r4, r4, #9
 8000e9a:	0549      	lsls	r1, r1, #21
 8000e9c:	4315      	orrs	r5, r2
 8000e9e:	0b24      	lsrs	r4, r4, #12
 8000ea0:	0d4a      	lsrs	r2, r1, #21
 8000ea2:	e710      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	4332      	orrs	r2, r6
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dmul+0x2a8>
 8000eaa:	e07f      	b.n	8000fac <__aeabi_dmul+0x3a8>
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_dmul+0x2ae>
 8000eb0:	e0dc      	b.n	800106c <__aeabi_dmul+0x468>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	f000 f9ca 	bl	800124c <__clzsi2>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	3a0b      	subs	r2, #11
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	4652      	mov	r2, sl
 8000ec4:	3908      	subs	r1, #8
 8000ec6:	40da      	lsrs	r2, r3
 8000ec8:	408e      	lsls	r6, r1
 8000eca:	4316      	orrs	r6, r2
 8000ecc:	4652      	mov	r2, sl
 8000ece:	408a      	lsls	r2, r1
 8000ed0:	9b00      	ldr	r3, [sp, #0]
 8000ed2:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <__aeabi_dmul+0x3a4>)
 8000ed4:	1a18      	subs	r0, r3, r0
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	468c      	mov	ip, r1
 8000eda:	4463      	add	r3, ip
 8000edc:	2000      	movs	r0, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	e6d3      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000ee2:	0025      	movs	r5, r4
 8000ee4:	4305      	orrs	r5, r0
 8000ee6:	d04a      	beq.n	8000f7e <__aeabi_dmul+0x37a>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_dmul+0x2ea>
 8000eec:	e0b0      	b.n	8001050 <__aeabi_dmul+0x44c>
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f000 f9ac 	bl	800124c <__clzsi2>
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	390b      	subs	r1, #11
 8000efa:	231d      	movs	r3, #29
 8000efc:	0010      	movs	r0, r2
 8000efe:	1a5b      	subs	r3, r3, r1
 8000f00:	0031      	movs	r1, r6
 8000f02:	0035      	movs	r5, r6
 8000f04:	3808      	subs	r0, #8
 8000f06:	4084      	lsls	r4, r0
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	4085      	lsls	r5, r0
 8000f0c:	430c      	orrs	r4, r1
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <__aeabi_dmul+0x3a4>)
 8000f10:	1a83      	subs	r3, r0, r2
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	4699      	mov	r9, r3
 8000f18:	469b      	mov	fp, r3
 8000f1a:	e697      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f1c:	0005      	movs	r5, r0
 8000f1e:	4325      	orrs	r5, r4
 8000f20:	d126      	bne.n	8000f70 <__aeabi_dmul+0x36c>
 8000f22:	2208      	movs	r2, #8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2400      	movs	r4, #0
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	e68d      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f30:	4652      	mov	r2, sl
 8000f32:	9b00      	ldr	r3, [sp, #0]
 8000f34:	4332      	orrs	r2, r6
 8000f36:	d110      	bne.n	8000f5a <__aeabi_dmul+0x356>
 8000f38:	4915      	ldr	r1, [pc, #84]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	4463      	add	r3, ip
 8000f40:	4649      	mov	r1, r9
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	4319      	orrs	r1, r3
 8000f48:	4689      	mov	r9, r1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	e69d      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000f4e:	465b      	mov	r3, fp
 8000f50:	9701      	str	r7, [sp, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d000      	beq.n	8000f58 <__aeabi_dmul+0x354>
 8000f56:	e6ad      	b.n	8000cb4 <__aeabi_dmul+0xb0>
 8000f58:	e6c3      	b.n	8000ce2 <__aeabi_dmul+0xde>
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <__aeabi_dmul+0x38c>)
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	4694      	mov	ip, r2
 8000f60:	4463      	add	r3, ip
 8000f62:	464a      	mov	r2, r9
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2303      	movs	r3, #3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	4652      	mov	r2, sl
 8000f6e:	e68c      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000f70:	220c      	movs	r2, #12
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2303      	movs	r3, #3
 8000f76:	0005      	movs	r5, r0
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469b      	mov	fp, r3
 8000f7c:	e666      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	4699      	mov	r9, r3
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	2400      	movs	r4, #0
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	e65e      	b.n	8000c4c <__aeabi_dmul+0x48>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	000007ff 	.word	0x000007ff
 8000f94:	fffffc01 	.word	0xfffffc01
 8000f98:	08009200 	.word	0x08009200
 8000f9c:	000003ff 	.word	0x000003ff
 8000fa0:	feffffff 	.word	0xfeffffff
 8000fa4:	000007fe 	.word	0x000007fe
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	4649      	mov	r1, r9
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4319      	orrs	r1, r3
 8000fb2:	4689      	mov	r9, r1
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e667      	b.n	8000c8a <__aeabi_dmul+0x86>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2480      	movs	r4, #128	; 0x80
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <__aeabi_dmul+0x4cc>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	0324      	lsls	r4, r4, #12
 8000fc6:	e67e      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8000fc8:	2001      	movs	r0, #1
 8000fca:	1a40      	subs	r0, r0, r1
 8000fcc:	2838      	cmp	r0, #56	; 0x38
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dmul+0x3ce>
 8000fd0:	e676      	b.n	8000cc0 <__aeabi_dmul+0xbc>
 8000fd2:	281f      	cmp	r0, #31
 8000fd4:	dd5b      	ble.n	800108e <__aeabi_dmul+0x48a>
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	0023      	movs	r3, r4
 8000fda:	4252      	negs	r2, r2
 8000fdc:	1a51      	subs	r1, r2, r1
 8000fde:	40cb      	lsrs	r3, r1
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	2820      	cmp	r0, #32
 8000fe4:	d003      	beq.n	8000fee <__aeabi_dmul+0x3ea>
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <__aeabi_dmul+0x4d0>)
 8000fe8:	4462      	add	r2, ip
 8000fea:	4094      	lsls	r4, r2
 8000fec:	4325      	orrs	r5, r4
 8000fee:	1e6a      	subs	r2, r5, #1
 8000ff0:	4195      	sbcs	r5, r2
 8000ff2:	002a      	movs	r2, r5
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	2400      	movs	r4, #0
 8000ffc:	4015      	ands	r5, r2
 8000ffe:	4211      	tst	r1, r2
 8001000:	d05b      	beq.n	80010ba <__aeabi_dmul+0x4b6>
 8001002:	210f      	movs	r1, #15
 8001004:	2400      	movs	r4, #0
 8001006:	4011      	ands	r1, r2
 8001008:	2904      	cmp	r1, #4
 800100a:	d053      	beq.n	80010b4 <__aeabi_dmul+0x4b0>
 800100c:	1d11      	adds	r1, r2, #4
 800100e:	4291      	cmp	r1, r2
 8001010:	4192      	sbcs	r2, r2
 8001012:	4252      	negs	r2, r2
 8001014:	18a4      	adds	r4, r4, r2
 8001016:	000a      	movs	r2, r1
 8001018:	0223      	lsls	r3, r4, #8
 800101a:	d54b      	bpl.n	80010b4 <__aeabi_dmul+0x4b0>
 800101c:	2201      	movs	r2, #1
 800101e:	2400      	movs	r4, #0
 8001020:	2500      	movs	r5, #0
 8001022:	e650      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	031b      	lsls	r3, r3, #12
 8001028:	421c      	tst	r4, r3
 800102a:	d009      	beq.n	8001040 <__aeabi_dmul+0x43c>
 800102c:	421e      	tst	r6, r3
 800102e:	d107      	bne.n	8001040 <__aeabi_dmul+0x43c>
 8001030:	4333      	orrs	r3, r6
 8001032:	031c      	lsls	r4, r3, #12
 8001034:	4643      	mov	r3, r8
 8001036:	0015      	movs	r5, r2
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <__aeabi_dmul+0x4cc>)
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	e642      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0312      	lsls	r2, r2, #12
 8001044:	4314      	orrs	r4, r2
 8001046:	0324      	lsls	r4, r4, #12
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <__aeabi_dmul+0x4cc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	9701      	str	r7, [sp, #4]
 800104e:	e63a      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 8001050:	f000 f8fc 	bl	800124c <__clzsi2>
 8001054:	0001      	movs	r1, r0
 8001056:	0002      	movs	r2, r0
 8001058:	3115      	adds	r1, #21
 800105a:	3220      	adds	r2, #32
 800105c:	291c      	cmp	r1, #28
 800105e:	dc00      	bgt.n	8001062 <__aeabi_dmul+0x45e>
 8001060:	e74b      	b.n	8000efa <__aeabi_dmul+0x2f6>
 8001062:	0034      	movs	r4, r6
 8001064:	3808      	subs	r0, #8
 8001066:	2500      	movs	r5, #0
 8001068:	4084      	lsls	r4, r0
 800106a:	e750      	b.n	8000f0e <__aeabi_dmul+0x30a>
 800106c:	f000 f8ee 	bl	800124c <__clzsi2>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	3215      	adds	r2, #21
 8001076:	3020      	adds	r0, #32
 8001078:	2a1c      	cmp	r2, #28
 800107a:	dc00      	bgt.n	800107e <__aeabi_dmul+0x47a>
 800107c:	e71e      	b.n	8000ebc <__aeabi_dmul+0x2b8>
 800107e:	4656      	mov	r6, sl
 8001080:	3b08      	subs	r3, #8
 8001082:	2200      	movs	r2, #0
 8001084:	409e      	lsls	r6, r3
 8001086:	e723      	b.n	8000ed0 <__aeabi_dmul+0x2cc>
 8001088:	9b00      	ldr	r3, [sp, #0]
 800108a:	469c      	mov	ip, r3
 800108c:	e6e6      	b.n	8000e5c <__aeabi_dmul+0x258>
 800108e:	4912      	ldr	r1, [pc, #72]	; (80010d8 <__aeabi_dmul+0x4d4>)
 8001090:	0022      	movs	r2, r4
 8001092:	4461      	add	r1, ip
 8001094:	002e      	movs	r6, r5
 8001096:	408d      	lsls	r5, r1
 8001098:	408a      	lsls	r2, r1
 800109a:	40c6      	lsrs	r6, r0
 800109c:	1e69      	subs	r1, r5, #1
 800109e:	418d      	sbcs	r5, r1
 80010a0:	4332      	orrs	r2, r6
 80010a2:	432a      	orrs	r2, r5
 80010a4:	40c4      	lsrs	r4, r0
 80010a6:	0753      	lsls	r3, r2, #29
 80010a8:	d0b6      	beq.n	8001018 <__aeabi_dmul+0x414>
 80010aa:	210f      	movs	r1, #15
 80010ac:	4011      	ands	r1, r2
 80010ae:	2904      	cmp	r1, #4
 80010b0:	d1ac      	bne.n	800100c <__aeabi_dmul+0x408>
 80010b2:	e7b1      	b.n	8001018 <__aeabi_dmul+0x414>
 80010b4:	0765      	lsls	r5, r4, #29
 80010b6:	0264      	lsls	r4, r4, #9
 80010b8:	0b24      	lsrs	r4, r4, #12
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	4315      	orrs	r5, r2
 80010be:	2200      	movs	r2, #0
 80010c0:	e601      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0312      	lsls	r2, r2, #12
 80010c6:	4314      	orrs	r4, r2
 80010c8:	0324      	lsls	r4, r4, #12
 80010ca:	4a01      	ldr	r2, [pc, #4]	; (80010d0 <__aeabi_dmul+0x4cc>)
 80010cc:	0b24      	lsrs	r4, r4, #12
 80010ce:	e5fa      	b.n	8000cc6 <__aeabi_dmul+0xc2>
 80010d0:	000007ff 	.word	0x000007ff
 80010d4:	0000043e 	.word	0x0000043e
 80010d8:	0000041e 	.word	0x0000041e

080010dc <__aeabi_i2d>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	2800      	cmp	r0, #0
 80010e0:	d016      	beq.n	8001110 <__aeabi_i2d+0x34>
 80010e2:	17c3      	asrs	r3, r0, #31
 80010e4:	18c5      	adds	r5, r0, r3
 80010e6:	405d      	eors	r5, r3
 80010e8:	0fc4      	lsrs	r4, r0, #31
 80010ea:	0028      	movs	r0, r5
 80010ec:	f000 f8ae 	bl	800124c <__clzsi2>
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <__aeabi_i2d+0x5c>)
 80010f2:	1a12      	subs	r2, r2, r0
 80010f4:	280a      	cmp	r0, #10
 80010f6:	dc16      	bgt.n	8001126 <__aeabi_i2d+0x4a>
 80010f8:	0003      	movs	r3, r0
 80010fa:	002e      	movs	r6, r5
 80010fc:	3315      	adds	r3, #21
 80010fe:	409e      	lsls	r6, r3
 8001100:	230b      	movs	r3, #11
 8001102:	1a18      	subs	r0, r3, r0
 8001104:	40c5      	lsrs	r5, r0
 8001106:	0552      	lsls	r2, r2, #21
 8001108:	032d      	lsls	r5, r5, #12
 800110a:	0b2d      	lsrs	r5, r5, #12
 800110c:	0d53      	lsrs	r3, r2, #21
 800110e:	e003      	b.n	8001118 <__aeabi_i2d+0x3c>
 8001110:	2400      	movs	r4, #0
 8001112:	2300      	movs	r3, #0
 8001114:	2500      	movs	r5, #0
 8001116:	2600      	movs	r6, #0
 8001118:	051b      	lsls	r3, r3, #20
 800111a:	432b      	orrs	r3, r5
 800111c:	07e4      	lsls	r4, r4, #31
 800111e:	4323      	orrs	r3, r4
 8001120:	0030      	movs	r0, r6
 8001122:	0019      	movs	r1, r3
 8001124:	bd70      	pop	{r4, r5, r6, pc}
 8001126:	380b      	subs	r0, #11
 8001128:	4085      	lsls	r5, r0
 800112a:	0552      	lsls	r2, r2, #21
 800112c:	032d      	lsls	r5, r5, #12
 800112e:	2600      	movs	r6, #0
 8001130:	0b2d      	lsrs	r5, r5, #12
 8001132:	0d53      	lsrs	r3, r2, #21
 8001134:	e7f0      	b.n	8001118 <__aeabi_i2d+0x3c>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	0000041e 	.word	0x0000041e

0800113c <__aeabi_d2f>:
 800113c:	0002      	movs	r2, r0
 800113e:	004b      	lsls	r3, r1, #1
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	0d5b      	lsrs	r3, r3, #21
 8001144:	030c      	lsls	r4, r1, #12
 8001146:	4e3d      	ldr	r6, [pc, #244]	; (800123c <__aeabi_d2f+0x100>)
 8001148:	0a64      	lsrs	r4, r4, #9
 800114a:	0f40      	lsrs	r0, r0, #29
 800114c:	1c5f      	adds	r7, r3, #1
 800114e:	0fc9      	lsrs	r1, r1, #31
 8001150:	4304      	orrs	r4, r0
 8001152:	00d5      	lsls	r5, r2, #3
 8001154:	4237      	tst	r7, r6
 8001156:	d00a      	beq.n	800116e <__aeabi_d2f+0x32>
 8001158:	4839      	ldr	r0, [pc, #228]	; (8001240 <__aeabi_d2f+0x104>)
 800115a:	181e      	adds	r6, r3, r0
 800115c:	2efe      	cmp	r6, #254	; 0xfe
 800115e:	dd16      	ble.n	800118e <__aeabi_d2f+0x52>
 8001160:	20ff      	movs	r0, #255	; 0xff
 8001162:	2400      	movs	r4, #0
 8001164:	05c0      	lsls	r0, r0, #23
 8001166:	4320      	orrs	r0, r4
 8001168:	07c9      	lsls	r1, r1, #31
 800116a:	4308      	orrs	r0, r1
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <__aeabi_d2f+0x44>
 8001172:	432c      	orrs	r4, r5
 8001174:	d026      	beq.n	80011c4 <__aeabi_d2f+0x88>
 8001176:	2205      	movs	r2, #5
 8001178:	0192      	lsls	r2, r2, #6
 800117a:	0a54      	lsrs	r4, r2, #9
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	e7f1      	b.n	8001164 <__aeabi_d2f+0x28>
 8001180:	4325      	orrs	r5, r4
 8001182:	d0ed      	beq.n	8001160 <__aeabi_d2f+0x24>
 8001184:	2080      	movs	r0, #128	; 0x80
 8001186:	03c0      	lsls	r0, r0, #15
 8001188:	4304      	orrs	r4, r0
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	e7ea      	b.n	8001164 <__aeabi_d2f+0x28>
 800118e:	2e00      	cmp	r6, #0
 8001190:	dd1b      	ble.n	80011ca <__aeabi_d2f+0x8e>
 8001192:	0192      	lsls	r2, r2, #6
 8001194:	1e53      	subs	r3, r2, #1
 8001196:	419a      	sbcs	r2, r3
 8001198:	00e4      	lsls	r4, r4, #3
 800119a:	0f6d      	lsrs	r5, r5, #29
 800119c:	4322      	orrs	r2, r4
 800119e:	432a      	orrs	r2, r5
 80011a0:	0753      	lsls	r3, r2, #29
 80011a2:	d048      	beq.n	8001236 <__aeabi_d2f+0xfa>
 80011a4:	230f      	movs	r3, #15
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d000      	beq.n	80011ae <__aeabi_d2f+0x72>
 80011ac:	3204      	adds	r2, #4
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	04db      	lsls	r3, r3, #19
 80011b2:	4013      	ands	r3, r2
 80011b4:	d03f      	beq.n	8001236 <__aeabi_d2f+0xfa>
 80011b6:	1c70      	adds	r0, r6, #1
 80011b8:	2efe      	cmp	r6, #254	; 0xfe
 80011ba:	d0d1      	beq.n	8001160 <__aeabi_d2f+0x24>
 80011bc:	0192      	lsls	r2, r2, #6
 80011be:	0a54      	lsrs	r4, r2, #9
 80011c0:	b2c0      	uxtb	r0, r0
 80011c2:	e7cf      	b.n	8001164 <__aeabi_d2f+0x28>
 80011c4:	2000      	movs	r0, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	e7cc      	b.n	8001164 <__aeabi_d2f+0x28>
 80011ca:	0032      	movs	r2, r6
 80011cc:	3217      	adds	r2, #23
 80011ce:	db22      	blt.n	8001216 <__aeabi_d2f+0xda>
 80011d0:	2080      	movs	r0, #128	; 0x80
 80011d2:	0400      	lsls	r0, r0, #16
 80011d4:	4320      	orrs	r0, r4
 80011d6:	241e      	movs	r4, #30
 80011d8:	1ba4      	subs	r4, r4, r6
 80011da:	2c1f      	cmp	r4, #31
 80011dc:	dd1d      	ble.n	800121a <__aeabi_d2f+0xde>
 80011de:	2202      	movs	r2, #2
 80011e0:	4252      	negs	r2, r2
 80011e2:	1b96      	subs	r6, r2, r6
 80011e4:	0002      	movs	r2, r0
 80011e6:	40f2      	lsrs	r2, r6
 80011e8:	0016      	movs	r6, r2
 80011ea:	2c20      	cmp	r4, #32
 80011ec:	d004      	beq.n	80011f8 <__aeabi_d2f+0xbc>
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <__aeabi_d2f+0x108>)
 80011f0:	4694      	mov	ip, r2
 80011f2:	4463      	add	r3, ip
 80011f4:	4098      	lsls	r0, r3
 80011f6:	4305      	orrs	r5, r0
 80011f8:	002a      	movs	r2, r5
 80011fa:	1e53      	subs	r3, r2, #1
 80011fc:	419a      	sbcs	r2, r3
 80011fe:	4332      	orrs	r2, r6
 8001200:	2600      	movs	r6, #0
 8001202:	0753      	lsls	r3, r2, #29
 8001204:	d1ce      	bne.n	80011a4 <__aeabi_d2f+0x68>
 8001206:	2480      	movs	r4, #128	; 0x80
 8001208:	0013      	movs	r3, r2
 800120a:	04e4      	lsls	r4, r4, #19
 800120c:	2001      	movs	r0, #1
 800120e:	4023      	ands	r3, r4
 8001210:	4222      	tst	r2, r4
 8001212:	d1d3      	bne.n	80011bc <__aeabi_d2f+0x80>
 8001214:	e7b0      	b.n	8001178 <__aeabi_d2f+0x3c>
 8001216:	2300      	movs	r3, #0
 8001218:	e7ad      	b.n	8001176 <__aeabi_d2f+0x3a>
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <__aeabi_d2f+0x10c>)
 800121c:	4694      	mov	ip, r2
 800121e:	002a      	movs	r2, r5
 8001220:	40e2      	lsrs	r2, r4
 8001222:	0014      	movs	r4, r2
 8001224:	002a      	movs	r2, r5
 8001226:	4463      	add	r3, ip
 8001228:	409a      	lsls	r2, r3
 800122a:	4098      	lsls	r0, r3
 800122c:	1e55      	subs	r5, r2, #1
 800122e:	41aa      	sbcs	r2, r5
 8001230:	4302      	orrs	r2, r0
 8001232:	4322      	orrs	r2, r4
 8001234:	e7e4      	b.n	8001200 <__aeabi_d2f+0xc4>
 8001236:	0033      	movs	r3, r6
 8001238:	e79e      	b.n	8001178 <__aeabi_d2f+0x3c>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	000007fe 	.word	0x000007fe
 8001240:	fffffc80 	.word	0xfffffc80
 8001244:	fffffca2 	.word	0xfffffca2
 8001248:	fffffc82 	.word	0xfffffc82

0800124c <__clzsi2>:
 800124c:	211c      	movs	r1, #28
 800124e:	2301      	movs	r3, #1
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	4298      	cmp	r0, r3
 8001254:	d301      	bcc.n	800125a <__clzsi2+0xe>
 8001256:	0c00      	lsrs	r0, r0, #16
 8001258:	3910      	subs	r1, #16
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	4298      	cmp	r0, r3
 800125e:	d301      	bcc.n	8001264 <__clzsi2+0x18>
 8001260:	0a00      	lsrs	r0, r0, #8
 8001262:	3908      	subs	r1, #8
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	4298      	cmp	r0, r3
 8001268:	d301      	bcc.n	800126e <__clzsi2+0x22>
 800126a:	0900      	lsrs	r0, r0, #4
 800126c:	3904      	subs	r1, #4
 800126e:	a202      	add	r2, pc, #8	; (adr r2, 8001278 <__clzsi2+0x2c>)
 8001270:	5c10      	ldrb	r0, [r2, r0]
 8001272:	1840      	adds	r0, r0, r1
 8001274:	4770      	bx	lr
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	02020304 	.word	0x02020304
 800127c:	01010101 	.word	0x01010101
	...

08001288 <__clzdi2>:
 8001288:	b510      	push	{r4, lr}
 800128a:	2900      	cmp	r1, #0
 800128c:	d103      	bne.n	8001296 <__clzdi2+0xe>
 800128e:	f7ff ffdd 	bl	800124c <__clzsi2>
 8001292:	3020      	adds	r0, #32
 8001294:	e002      	b.n	800129c <__clzdi2+0x14>
 8001296:	0008      	movs	r0, r1
 8001298:	f7ff ffd8 	bl	800124c <__clzsi2>
 800129c:	bd10      	pop	{r4, pc}
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <HAL_FDCAN_RxFifo0Callback>:

//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	d100      	bne.n	80012b4 <HAL_FDCAN_RxFifo0Callback+0x14>
 80012b2:	e3be      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
	{
		if(hfdcan==&hfdcan1)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4bea      	ldr	r3, [pc, #936]	; (8001660 <HAL_FDCAN_RxFifo0Callback+0x3c0>)
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d000      	beq.n	80012be <HAL_FDCAN_RxFifo0Callback+0x1e>
 80012bc:	e1e6      	b.n	800168c <HAL_FDCAN_RxFifo0Callback+0x3ec>
		  {
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, slot1.RxData) == HAL_OK)
 80012be:	4be9      	ldr	r3, [pc, #932]	; (8001664 <HAL_FDCAN_RxFifo0Callback+0x3c4>)
 80012c0:	4ae9      	ldr	r2, [pc, #932]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	f002 fccd 	bl	8003c64 <HAL_FDCAN_GetRxMessage>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d000      	beq.n	80012d0 <HAL_FDCAN_RxFifo0Callback+0x30>
 80012ce:	e1ba      	b.n	8001646 <HAL_FDCAN_RxFifo0Callback+0x3a6>
			{
				if((RxHeader.Identifier>>20)==0X0B0)//batre
 80012d0:	4be5      	ldr	r3, [pc, #916]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0d1b      	lsrs	r3, r3, #20
 80012d6:	2bb0      	cmp	r3, #176	; 0xb0
 80012d8:	d159      	bne.n	800138e <HAL_FDCAN_RxFifo0Callback+0xee>
				{
					slot1.batt_protocol1=1;
 80012da:	4be4      	ldr	r3, [pc, #912]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80012dc:	2201      	movs	r2, #1
 80012de:	73da      	strb	r2, [r3, #15]
					slot1.Vbatt=(((slot1.RxData[1]<<8)|slot1.RxData[0])*0.01);
 80012e0:	4be2      	ldr	r3, [pc, #904]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80012e2:	2265      	movs	r2, #101	; 0x65
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	4ae0      	ldr	r2, [pc, #896]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80012ea:	2164      	movs	r1, #100	; 0x64
 80012ec:	5c52      	ldrb	r2, [r2, r1]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fef3 	bl	80010dc <__aeabi_i2d>
 80012f6:	4ade      	ldr	r2, [pc, #888]	; (8001670 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 80012f8:	4bde      	ldr	r3, [pc, #888]	; (8001674 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 80012fa:	f7ff fc83 	bl	8000c04 <__aeabi_dmul>
 80012fe:	0002      	movs	r2, r0
 8001300:	000b      	movs	r3, r1
 8001302:	0010      	movs	r0, r2
 8001304:	0019      	movs	r1, r3
 8001306:	f7ff ff19 	bl	800113c <__aeabi_d2f>
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	4bd7      	ldr	r3, [pc, #860]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
					slot1.Abatt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.1);
 8001310:	4bd6      	ldr	r3, [pc, #856]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001312:	2267      	movs	r2, #103	; 0x67
 8001314:	5c9b      	ldrb	r3, [r3, r2]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4ad4      	ldr	r2, [pc, #848]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800131a:	2166      	movs	r1, #102	; 0x66
 800131c:	5c52      	ldrb	r2, [r2, r1]
 800131e:	4313      	orrs	r3, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fedb 	bl	80010dc <__aeabi_i2d>
 8001326:	4ad4      	ldr	r2, [pc, #848]	; (8001678 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8001328:	4bd4      	ldr	r3, [pc, #848]	; (800167c <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 800132a:	f7ff fc6b 	bl	8000c04 <__aeabi_dmul>
 800132e:	0002      	movs	r2, r0
 8001330:	000b      	movs	r3, r1
 8001332:	0010      	movs	r0, r2
 8001334:	0019      	movs	r1, r3
 8001336:	f7ff ff01 	bl	800113c <__aeabi_d2f>
 800133a:	1c02      	adds	r2, r0, #0
 800133c:	4bcb      	ldr	r3, [pc, #812]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
					slot1.SOC_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8001340:	4bca      	ldr	r3, [pc, #808]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001342:	2269      	movs	r2, #105	; 0x69
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	4ac8      	ldr	r2, [pc, #800]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800134a:	2168      	movs	r1, #104	; 0x68
 800134c:	5c52      	ldrb	r2, [r2, r1]
 800134e:	4313      	orrs	r3, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_i2f>
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	4bc4      	ldr	r3, [pc, #784]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
					slot1.temp_batt=(slot1.RxData[6]-40);
 800135c:	4bc3      	ldr	r3, [pc, #780]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800135e:	226a      	movs	r2, #106	; 0x6a
 8001360:	5c9b      	ldrb	r3, [r3, r2]
 8001362:	3b28      	subs	r3, #40	; 0x28
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fbff 	bl	8000b68 <__aeabi_i2f>
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	4bbf      	ldr	r3, [pc, #764]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800136e:	649a      	str	r2, [r3, #72]	; 0x48
					slot1.flag_recieve_batt1=1;
 8001370:	4bbe      	ldr	r3, [pc, #760]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001372:	2220      	movs	r2, #32
 8001374:	2101      	movs	r1, #1
 8001376:	5499      	strb	r1, [r3, r2]
					slot1.can_batt_trouble_state=0;
 8001378:	4bbc      	ldr	r3, [pc, #752]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800137a:	2222      	movs	r2, #34	; 0x22
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8001380:	4bb9      	ldr	r3, [pc, #740]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	0b1a      	lsrs	r2, r3, #12
 8001388:	4bb8      	ldr	r3, [pc, #736]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800138a:	65da      	str	r2, [r3, #92]	; 0x5c
 800138c:	e0dd      	b.n	800154a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				}
				else if((RxHeader.Identifier>>20)==0X0B1)//batre
 800138e:	4bb6      	ldr	r3, [pc, #728]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	0d1b      	lsrs	r3, r3, #20
 8001394:	2bb1      	cmp	r3, #177	; 0xb1
 8001396:	d000      	beq.n	800139a <HAL_FDCAN_RxFifo0Callback+0xfa>
 8001398:	e0d7      	b.n	800154a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				{
					slot1.batt_protocol2=1;
 800139a:	4bb4      	ldr	r3, [pc, #720]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800139c:	2201      	movs	r2, #1
 800139e:	741a      	strb	r2, [r3, #16]

					slot1.SOH_batt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.01);
 80013a0:	4bb2      	ldr	r3, [pc, #712]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013a2:	2267      	movs	r2, #103	; 0x67
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	4ab0      	ldr	r2, [pc, #704]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013aa:	2166      	movs	r1, #102	; 0x66
 80013ac:	5c52      	ldrb	r2, [r2, r1]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff fe93 	bl	80010dc <__aeabi_i2d>
 80013b6:	4aae      	ldr	r2, [pc, #696]	; (8001670 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 80013b8:	4bae      	ldr	r3, [pc, #696]	; (8001674 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 80013ba:	f7ff fc23 	bl	8000c04 <__aeabi_dmul>
 80013be:	0002      	movs	r2, r0
 80013c0:	000b      	movs	r3, r1
 80013c2:	0010      	movs	r0, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	f7ff feb9 	bl	800113c <__aeabi_d2f>
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	4ba7      	ldr	r3, [pc, #668]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013ce:	64da      	str	r2, [r3, #76]	; 0x4c
					slot1.cycle_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 80013d0:	4ba6      	ldr	r3, [pc, #664]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013d2:	2269      	movs	r2, #105	; 0x69
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4aa4      	ldr	r2, [pc, #656]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013da:	2168      	movs	r1, #104	; 0x68
 80013dc:	5c52      	ldrb	r2, [r2, r1]
 80013de:	431a      	orrs	r2, r3
 80013e0:	4ba2      	ldr	r3, [pc, #648]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013e2:	651a      	str	r2, [r3, #80]	; 0x50
					slot1.batt_discharge_overcurrent=(slot1.RxData[6])&(0x01<<0);
 80013e4:	4ba1      	ldr	r3, [pc, #644]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013e6:	226a      	movs	r2, #106	; 0x6a
 80013e8:	5c9b      	ldrb	r3, [r3, r2]
 80013ea:	001a      	movs	r2, r3
 80013ec:	2301      	movs	r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	4193      	sbcs	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b9d      	ldr	r3, [pc, #628]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013f8:	745a      	strb	r2, [r3, #17]
					slot1.batt_charge_overCurrent = (slot1.RxData[6])&(0x01<<1);
 80013fa:	4b9c      	ldr	r3, [pc, #624]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80013fc:	226a      	movs	r2, #106	; 0x6a
 80013fe:	5c9b      	ldrb	r3, [r3, r2]
 8001400:	001a      	movs	r2, r3
 8001402:	2302      	movs	r3, #2
 8001404:	4013      	ands	r3, r2
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	4193      	sbcs	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800140e:	749a      	strb	r2, [r3, #18]
					slot1.batt_short_circuit=(slot1.RxData[6])&(0x01<<2);
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001412:	226a      	movs	r2, #106	; 0x6a
 8001414:	5c9b      	ldrb	r3, [r3, r2]
 8001416:	001a      	movs	r2, r3
 8001418:	2304      	movs	r3, #4
 800141a:	4013      	ands	r3, r2
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	4193      	sbcs	r3, r2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001424:	74da      	strb	r2, [r3, #19]
					slot1.batt_discharge_overtempreature=(slot1.RxData[6])&(0x01<<3);
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001428:	226a      	movs	r2, #106	; 0x6a
 800142a:	5c9b      	ldrb	r3, [r3, r2]
 800142c:	001a      	movs	r2, r3
 800142e:	2308      	movs	r3, #8
 8001430:	4013      	ands	r3, r2
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	4193      	sbcs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800143a:	751a      	strb	r2, [r3, #20]
					slot1.batt_discharge_undertempreature=(slot1.RxData[6])&(0x01<<4);
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800143e:	226a      	movs	r2, #106	; 0x6a
 8001440:	5c9b      	ldrb	r3, [r3, r2]
 8001442:	001a      	movs	r2, r3
 8001444:	2310      	movs	r3, #16
 8001446:	4013      	ands	r3, r2
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	4193      	sbcs	r3, r2
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b87      	ldr	r3, [pc, #540]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001450:	755a      	strb	r2, [r3, #21]
					slot1.batt_charge_overtempreature=(slot1.RxData[6])&(0x01<<5);
 8001452:	4b86      	ldr	r3, [pc, #536]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001454:	226a      	movs	r2, #106	; 0x6a
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	001a      	movs	r2, r3
 800145a:	2320      	movs	r3, #32
 800145c:	4013      	ands	r3, r2
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	4193      	sbcs	r3, r2
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001466:	759a      	strb	r2, [r3, #22]
					slot1.batt_charge_undertempreature=(slot1.RxData[6])&(0x01<<6);
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800146a:	226a      	movs	r2, #106	; 0x6a
 800146c:	5c9b      	ldrb	r3, [r3, r2]
 800146e:	001a      	movs	r2, r3
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	4013      	ands	r3, r2
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	4193      	sbcs	r3, r2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b7c      	ldr	r3, [pc, #496]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800147c:	75da      	strb	r2, [r3, #23]
					slot1.batt_under_voltage=(slot1.RxData[6])&(0x01<<7);
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001480:	226a      	movs	r2, #106	; 0x6a
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	001a      	movs	r2, r3
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	4013      	ands	r3, r2
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	4193      	sbcs	r3, r2
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001492:	761a      	strb	r2, [r3, #24]

					slot1.batt_over_voltage=(slot1.RxData[7])&(0x01<<0);
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001496:	226b      	movs	r2, #107	; 0x6b
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	001a      	movs	r2, r3
 800149c:	2301      	movs	r3, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	4193      	sbcs	r3, r2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b71      	ldr	r3, [pc, #452]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014a8:	765a      	strb	r2, [r3, #25]
					slot1.batt_over_discharge_capacity=(slot1.RxData[7])&(0x01<<1);
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014ac:	226b      	movs	r2, #107	; 0x6b
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	001a      	movs	r2, r3
 80014b2:	2302      	movs	r3, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	4193      	sbcs	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014be:	769a      	strb	r2, [r3, #26]
					slot1.batt_unbalance=(slot1.RxData[7])&(0x01<<2);
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014c2:	226b      	movs	r2, #107	; 0x6b
 80014c4:	5c9b      	ldrb	r3, [r3, r2]
 80014c6:	001a      	movs	r2, r3
 80014c8:	2304      	movs	r3, #4
 80014ca:	4013      	ands	r3, r2
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	4193      	sbcs	r3, r2
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014d4:	76da      	strb	r2, [r3, #27]
					slot1.batt_system_failure=(slot1.RxData[7])&(0x01<<3);
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014d8:	226b      	movs	r2, #107	; 0x6b
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	001a      	movs	r2, r3
 80014de:	2308      	movs	r3, #8
 80014e0:	4013      	ands	r3, r2
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	4193      	sbcs	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b60      	ldr	r3, [pc, #384]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014ea:	771a      	strb	r2, [r3, #28]
					slot1.batt_charge_state=(slot1.RxData[7])&(0x01<<4);
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80014ee:	226b      	movs	r2, #107	; 0x6b
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	001a      	movs	r2, r3
 80014f4:	2310      	movs	r3, #16
 80014f6:	4013      	ands	r3, r2
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	4193      	sbcs	r3, r2
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001500:	775a      	strb	r2, [r3, #29]
					slot1.batt_discharge_state=(slot1.RxData[7])&(0x01<<5);
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001504:	226b      	movs	r2, #107	; 0x6b
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	001a      	movs	r2, r3
 800150a:	2320      	movs	r3, #32
 800150c:	4013      	ands	r3, r2
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	4193      	sbcs	r3, r2
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001516:	779a      	strb	r2, [r3, #30]
					slot1.batt_sleep_state=(slot1.RxData[7])&(0x01<<6);
 8001518:	4b54      	ldr	r3, [pc, #336]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800151a:	226b      	movs	r2, #107	; 0x6b
 800151c:	5c9b      	ldrb	r3, [r3, r2]
 800151e:	001a      	movs	r2, r3
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	4013      	ands	r3, r2
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	4193      	sbcs	r3, r2
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800152c:	77da      	strb	r2, [r3, #31]

					slot1.flag_recieve_batt2=1;
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001530:	2221      	movs	r2, #33	; 0x21
 8001532:	2101      	movs	r1, #1
 8001534:	5499      	strb	r1, [r3, r2]
					slot1.can_batt2_trouble_state=0;
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001538:	2223      	movs	r2, #35	; 0x23
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	0b1a      	lsrs	r2, r3, #12
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001548:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				if(RxHeader.Identifier==0x18FF50E5)//charger
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a4c      	ldr	r2, [pc, #304]	; (8001680 <HAL_FDCAN_RxFifo0Callback+0x3e0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d000      	beq.n	8001556 <HAL_FDCAN_RxFifo0Callback+0x2b6>
 8001554:	e26d      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
				{
					slot1.isCharger=1;
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001558:	2201      	movs	r2, #1
 800155a:	70da      	strb	r2, [r3, #3]
					slot1.Vcharger=(((slot1.RxData[0]<<8)|slot1.RxData[1])*0.1);
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800155e:	2264      	movs	r2, #100	; 0x64
 8001560:	5c9b      	ldrb	r3, [r3, r2]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	4a41      	ldr	r2, [pc, #260]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001566:	2165      	movs	r1, #101	; 0x65
 8001568:	5c52      	ldrb	r2, [r2, r1]
 800156a:	4313      	orrs	r3, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fdb5 	bl	80010dc <__aeabi_i2d>
 8001572:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 8001576:	f7ff fb45 	bl	8000c04 <__aeabi_dmul>
 800157a:	0002      	movs	r2, r0
 800157c:	000b      	movs	r3, r1
 800157e:	0010      	movs	r0, r2
 8001580:	0019      	movs	r1, r3
 8001582:	f7ff fddb 	bl	800113c <__aeabi_d2f>
 8001586:	1c02      	adds	r2, r0, #0
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
					slot1.Acharger=(((slot1.RxData[2]<<8)|slot1.RxData[3])*0.1);
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800158e:	2266      	movs	r2, #102	; 0x66
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4a35      	ldr	r2, [pc, #212]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001596:	2167      	movs	r1, #103	; 0x67
 8001598:	5c52      	ldrb	r2, [r2, r1]
 800159a:	4313      	orrs	r3, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fd9d 	bl	80010dc <__aeabi_i2d>
 80015a2:	4a35      	ldr	r2, [pc, #212]	; (8001678 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80015a6:	f7ff fb2d 	bl	8000c04 <__aeabi_dmul>
 80015aa:	0002      	movs	r2, r0
 80015ac:	000b      	movs	r3, r1
 80015ae:	0010      	movs	r0, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	f7ff fdc3 	bl	800113c <__aeabi_d2f>
 80015b6:	1c02      	adds	r2, r0, #0
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015ba:	659a      	str	r2, [r3, #88]	; 0x58
					slot1.charger_hardware_error=(slot1.RxData[4])&(0x01<<0);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015be:	2268      	movs	r2, #104	; 0x68
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	001a      	movs	r2, r3
 80015c4:	2301      	movs	r3, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	4193      	sbcs	r3, r2
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015d0:	222a      	movs	r2, #42	; 0x2a
 80015d2:	5499      	strb	r1, [r3, r2]
					slot1.charger_temp=(slot1.RxData[4])&(0x01<<1);
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015d6:	2268      	movs	r2, #104	; 0x68
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
 80015da:	001a      	movs	r2, r3
 80015dc:	2302      	movs	r3, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	4193      	sbcs	r3, r2
 80015e4:	b2d9      	uxtb	r1, r3
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015e8:	222b      	movs	r2, #43	; 0x2b
 80015ea:	5499      	strb	r1, [r3, r2]
					slot1.charger_input_voltage=(slot1.RxData[4])&(0x01<<2);
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80015ee:	2268      	movs	r2, #104	; 0x68
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	001a      	movs	r2, r3
 80015f4:	2304      	movs	r3, #4
 80015f6:	4013      	ands	r3, r2
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	4193      	sbcs	r3, r2
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001600:	222c      	movs	r2, #44	; 0x2c
 8001602:	5499      	strb	r1, [r3, r2]
					slot1.charger_work_condition=(slot1.RxData[4])&(0x01<<3);
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001606:	2268      	movs	r2, #104	; 0x68
 8001608:	5c9b      	ldrb	r3, [r3, r2]
 800160a:	001a      	movs	r2, r3
 800160c:	2308      	movs	r3, #8
 800160e:	4013      	ands	r3, r2
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	4193      	sbcs	r3, r2
 8001614:	b2d9      	uxtb	r1, r3
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001618:	222d      	movs	r2, #45	; 0x2d
 800161a:	5499      	strb	r1, [r3, r2]
					slot1.charger_communication_error=(slot1.RxData[4])&(0x01<<4);
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800161e:	2268      	movs	r2, #104	; 0x68
 8001620:	5c9b      	ldrb	r3, [r3, r2]
 8001622:	001a      	movs	r2, r3
 8001624:	2310      	movs	r3, #16
 8001626:	4013      	ands	r3, r2
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	4193      	sbcs	r3, r2
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001630:	222e      	movs	r2, #46	; 0x2e
 8001632:	5499      	strb	r1, [r3, r2]
					slot1.can_charger_trouble_state=0;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]
					slot1.flag_recieve_charger=1;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800163e:	222f      	movs	r2, #47	; 0x2f
 8001640:	2101      	movs	r1, #1
 8001642:	5499      	strb	r1, [r3, r2]
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();

		}

	}
}
 8001644:	e1f5      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_FDCAN_RxFifo0Callback+0x3e4>)
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_FDCAN_RxFifo0Callback+0x3e8>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	f002 fb09 	bl	8003c64 <HAL_FDCAN_GetRxMessage>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d100      	bne.n	8001658 <HAL_FDCAN_RxFifo0Callback+0x3b8>
 8001656:	e1ec      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
 8001658:	f001 f878 	bl	800274c <Error_Handler>
}
 800165c:	e1e9      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	200007fc 	.word	0x200007fc
 8001664:	20000180 	.word	0x20000180
 8001668:	200000d0 	.word	0x200000d0
 800166c:	2000011c 	.word	0x2000011c
 8001670:	47ae147b 	.word	0x47ae147b
 8001674:	3f847ae1 	.word	0x3f847ae1
 8001678:	9999999a 	.word	0x9999999a
 800167c:	3fb99999 	.word	0x3fb99999
 8001680:	18ff50e5 	.word	0x18ff50e5
 8001684:	200004c8 	.word	0x200004c8
 8001688:	200007b0 	.word	0x200007b0
		else if (hfdcan==&hfdcan2)
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4beb      	ldr	r3, [pc, #940]	; (8001a3c <HAL_FDCAN_RxFifo0Callback+0x79c>)
 8001690:	429a      	cmp	r2, r3
 8001692:	d000      	beq.n	8001696 <HAL_FDCAN_RxFifo0Callback+0x3f6>
 8001694:	e1cd      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) == HAL_OK)
 8001696:	4bea      	ldr	r3, [pc, #936]	; (8001a40 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 8001698:	4aea      	ldr	r2, [pc, #936]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	f002 fae1 	bl	8003c64 <HAL_FDCAN_GetRxMessage>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d000      	beq.n	80016a8 <HAL_FDCAN_RxFifo0Callback+0x408>
 80016a6:	e1ba      	b.n	8001a1e <HAL_FDCAN_RxFifo0Callback+0x77e>
				if((RxHeader2.Identifier>>20)==0X0B0)//batre
 80016a8:	4be6      	ldr	r3, [pc, #920]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	2bb0      	cmp	r3, #176	; 0xb0
 80016b0:	d159      	bne.n	8001766 <HAL_FDCAN_RxFifo0Callback+0x4c6>
				slot2.batt_protocol1=1;
 80016b2:	4be5      	ldr	r3, [pc, #916]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	73da      	strb	r2, [r3, #15]
				slot2.Vbatt=(((slot2.RxData[1]<<8)|slot2.RxData[0])*0.01);
 80016b8:	4be3      	ldr	r3, [pc, #908]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016ba:	2265      	movs	r2, #101	; 0x65
 80016bc:	5c9b      	ldrb	r3, [r3, r2]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4ae1      	ldr	r2, [pc, #900]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	5c52      	ldrb	r2, [r2, r1]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fd07 	bl	80010dc <__aeabi_i2d>
 80016ce:	4adf      	ldr	r2, [pc, #892]	; (8001a4c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 80016d0:	4bdf      	ldr	r3, [pc, #892]	; (8001a50 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 80016d2:	f7ff fa97 	bl	8000c04 <__aeabi_dmul>
 80016d6:	0002      	movs	r2, r0
 80016d8:	000b      	movs	r3, r1
 80016da:	0010      	movs	r0, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	f7ff fd2d 	bl	800113c <__aeabi_d2f>
 80016e2:	1c02      	adds	r2, r0, #0
 80016e4:	4bd8      	ldr	r3, [pc, #864]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016e6:	63da      	str	r2, [r3, #60]	; 0x3c
				slot2.Abatt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.1);
 80016e8:	4bd7      	ldr	r3, [pc, #860]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016ea:	2267      	movs	r2, #103	; 0x67
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4ad5      	ldr	r2, [pc, #852]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80016f2:	2166      	movs	r1, #102	; 0x66
 80016f4:	5c52      	ldrb	r2, [r2, r1]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fcef 	bl	80010dc <__aeabi_i2d>
 80016fe:	4ad5      	ldr	r2, [pc, #852]	; (8001a54 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 8001700:	4bd5      	ldr	r3, [pc, #852]	; (8001a58 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 8001702:	f7ff fa7f 	bl	8000c04 <__aeabi_dmul>
 8001706:	0002      	movs	r2, r0
 8001708:	000b      	movs	r3, r1
 800170a:	0010      	movs	r0, r2
 800170c:	0019      	movs	r1, r3
 800170e:	f7ff fd15 	bl	800113c <__aeabi_d2f>
 8001712:	1c02      	adds	r2, r0, #0
 8001714:	4bcc      	ldr	r3, [pc, #816]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
				slot2.SOC_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 8001718:	4bcb      	ldr	r3, [pc, #812]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800171a:	2269      	movs	r2, #105	; 0x69
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4ac9      	ldr	r2, [pc, #804]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001722:	2168      	movs	r1, #104	; 0x68
 8001724:	5c52      	ldrb	r2, [r2, r1]
 8001726:	4313      	orrs	r3, r2
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff fa1d 	bl	8000b68 <__aeabi_i2f>
 800172e:	1c02      	adds	r2, r0, #0
 8001730:	4bc5      	ldr	r3, [pc, #788]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
				slot2.temp_batt=(slot2.RxData[6]-40);
 8001734:	4bc4      	ldr	r3, [pc, #784]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001736:	226a      	movs	r2, #106	; 0x6a
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	3b28      	subs	r3, #40	; 0x28
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fa13 	bl	8000b68 <__aeabi_i2f>
 8001742:	1c02      	adds	r2, r0, #0
 8001744:	4bc0      	ldr	r3, [pc, #768]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001746:	649a      	str	r2, [r3, #72]	; 0x48
				slot2.flag_recieve_batt1=1;
 8001748:	4bbf      	ldr	r3, [pc, #764]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800174a:	2220      	movs	r2, #32
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]
				slot2.can_batt_trouble_state=0;
 8001750:	4bbd      	ldr	r3, [pc, #756]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001752:	2222      	movs	r2, #34	; 0x22
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader2.Identifier&0x000FFFFF);
 8001758:	4bba      	ldr	r3, [pc, #744]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	031b      	lsls	r3, r3, #12
 800175e:	0b1a      	lsrs	r2, r3, #12
 8001760:	4bb9      	ldr	r3, [pc, #740]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001762:	65da      	str	r2, [r3, #92]	; 0x5c
 8001764:	e0dd      	b.n	8001922 <HAL_FDCAN_RxFifo0Callback+0x682>
				else if((RxHeader2.Identifier>>20)==0X0B1)//batre
 8001766:	4bb7      	ldr	r3, [pc, #732]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0d1b      	lsrs	r3, r3, #20
 800176c:	2bb1      	cmp	r3, #177	; 0xb1
 800176e:	d000      	beq.n	8001772 <HAL_FDCAN_RxFifo0Callback+0x4d2>
 8001770:	e0d7      	b.n	8001922 <HAL_FDCAN_RxFifo0Callback+0x682>
				slot2.batt_protocol2=1;
 8001772:	4bb5      	ldr	r3, [pc, #724]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001774:	2201      	movs	r2, #1
 8001776:	741a      	strb	r2, [r3, #16]
				slot2.SOH_batt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.01);
 8001778:	4bb3      	ldr	r3, [pc, #716]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800177a:	2267      	movs	r2, #103	; 0x67
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4ab1      	ldr	r2, [pc, #708]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001782:	2166      	movs	r1, #102	; 0x66
 8001784:	5c52      	ldrb	r2, [r2, r1]
 8001786:	4313      	orrs	r3, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff fca7 	bl	80010dc <__aeabi_i2d>
 800178e:	4aaf      	ldr	r2, [pc, #700]	; (8001a4c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 8001790:	4baf      	ldr	r3, [pc, #700]	; (8001a50 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 8001792:	f7ff fa37 	bl	8000c04 <__aeabi_dmul>
 8001796:	0002      	movs	r2, r0
 8001798:	000b      	movs	r3, r1
 800179a:	0010      	movs	r0, r2
 800179c:	0019      	movs	r1, r3
 800179e:	f7ff fccd 	bl	800113c <__aeabi_d2f>
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	4ba8      	ldr	r3, [pc, #672]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017a6:	64da      	str	r2, [r3, #76]	; 0x4c
				slot2.cycle_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 80017a8:	4ba7      	ldr	r3, [pc, #668]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017aa:	2269      	movs	r2, #105	; 0x69
 80017ac:	5c9b      	ldrb	r3, [r3, r2]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4aa5      	ldr	r2, [pc, #660]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017b2:	2168      	movs	r1, #104	; 0x68
 80017b4:	5c52      	ldrb	r2, [r2, r1]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	4ba3      	ldr	r3, [pc, #652]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017ba:	651a      	str	r2, [r3, #80]	; 0x50
				slot2.batt_discharge_overcurrent=(slot2.RxData[6])&(0x01<<0);
 80017bc:	4ba2      	ldr	r3, [pc, #648]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017be:	226a      	movs	r2, #106	; 0x6a
 80017c0:	5c9b      	ldrb	r3, [r3, r2]
 80017c2:	001a      	movs	r2, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	4193      	sbcs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017d0:	745a      	strb	r2, [r3, #17]
				slot2.batt_charge_overCurrent = (slot2.RxData[6])&(0x01<<1);
 80017d2:	4b9d      	ldr	r3, [pc, #628]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017d4:	226a      	movs	r2, #106	; 0x6a
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	001a      	movs	r2, r3
 80017da:	2302      	movs	r3, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	4193      	sbcs	r3, r2
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b98      	ldr	r3, [pc, #608]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017e6:	749a      	strb	r2, [r3, #18]
				slot2.batt_short_circuit=(slot2.RxData[6])&(0x01<<2);
 80017e8:	4b97      	ldr	r3, [pc, #604]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017ea:	226a      	movs	r2, #106	; 0x6a
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	001a      	movs	r2, r3
 80017f0:	2304      	movs	r3, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	4193      	sbcs	r3, r2
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b93      	ldr	r3, [pc, #588]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80017fc:	74da      	strb	r2, [r3, #19]
				slot2.batt_discharge_overtempreature=(slot2.RxData[6])&(0x01<<3);
 80017fe:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001800:	226a      	movs	r2, #106	; 0x6a
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	001a      	movs	r2, r3
 8001806:	2308      	movs	r3, #8
 8001808:	4013      	ands	r3, r2
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	4193      	sbcs	r3, r2
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b8d      	ldr	r3, [pc, #564]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001812:	751a      	strb	r2, [r3, #20]
				slot2.batt_discharge_undertempreature=(slot2.RxData[6])&(0x01<<4);
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001816:	226a      	movs	r2, #106	; 0x6a
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	001a      	movs	r2, r3
 800181c:	2310      	movs	r3, #16
 800181e:	4013      	ands	r3, r2
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	4193      	sbcs	r3, r2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001828:	755a      	strb	r2, [r3, #21]
				slot2.batt_charge_overtempreature=(slot2.RxData[6])&(0x01<<5);
 800182a:	4b87      	ldr	r3, [pc, #540]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800182c:	226a      	movs	r2, #106	; 0x6a
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	001a      	movs	r2, r3
 8001832:	2320      	movs	r3, #32
 8001834:	4013      	ands	r3, r2
 8001836:	1e5a      	subs	r2, r3, #1
 8001838:	4193      	sbcs	r3, r2
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800183e:	759a      	strb	r2, [r3, #22]
				slot2.batt_charge_undertempreature=(slot2.RxData[6])&(0x01<<6);
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001842:	226a      	movs	r2, #106	; 0x6a
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	001a      	movs	r2, r3
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	4013      	ands	r3, r2
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	4193      	sbcs	r3, r2
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001854:	75da      	strb	r2, [r3, #23]
				slot2.batt_under_voltage=(slot2.RxData[6])&(0x01<<7);
 8001856:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001858:	226a      	movs	r2, #106	; 0x6a
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	001a      	movs	r2, r3
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	4013      	ands	r3, r2
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	4193      	sbcs	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800186a:	761a      	strb	r2, [r3, #24]
				slot2.batt_over_voltage=(slot2.RxData[7])&(0x01<<0);
 800186c:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800186e:	226b      	movs	r2, #107	; 0x6b
 8001870:	5c9b      	ldrb	r3, [r3, r2]
 8001872:	001a      	movs	r2, r3
 8001874:	2301      	movs	r3, #1
 8001876:	4013      	ands	r3, r2
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	4193      	sbcs	r3, r2
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001880:	765a      	strb	r2, [r3, #25]
				slot2.batt_over_discharge_capacity=(slot2.RxData[7])&(0x01<<1);
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001884:	226b      	movs	r2, #107	; 0x6b
 8001886:	5c9b      	ldrb	r3, [r3, r2]
 8001888:	001a      	movs	r2, r3
 800188a:	2302      	movs	r3, #2
 800188c:	4013      	ands	r3, r2
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	4193      	sbcs	r3, r2
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001896:	769a      	strb	r2, [r3, #26]
				slot2.batt_unbalance=(slot2.RxData[7])&(0x01<<2);
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800189a:	226b      	movs	r2, #107	; 0x6b
 800189c:	5c9b      	ldrb	r3, [r3, r2]
 800189e:	001a      	movs	r2, r3
 80018a0:	2304      	movs	r3, #4
 80018a2:	4013      	ands	r3, r2
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	4193      	sbcs	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018ac:	76da      	strb	r2, [r3, #27]
				slot2.batt_system_failure=(slot2.RxData[7])&(0x01<<3);
 80018ae:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018b0:	226b      	movs	r2, #107	; 0x6b
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	001a      	movs	r2, r3
 80018b6:	2308      	movs	r3, #8
 80018b8:	4013      	ands	r3, r2
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	4193      	sbcs	r3, r2
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018c2:	771a      	strb	r2, [r3, #28]
				slot2.batt_charge_state=(slot2.RxData[7])&(0x01<<4);
 80018c4:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018c6:	226b      	movs	r2, #107	; 0x6b
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	001a      	movs	r2, r3
 80018cc:	2310      	movs	r3, #16
 80018ce:	4013      	ands	r3, r2
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	4193      	sbcs	r3, r2
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018d8:	775a      	strb	r2, [r3, #29]
				slot2.batt_discharge_state=(slot2.RxData[7])&(0x01<<5);
 80018da:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018dc:	226b      	movs	r2, #107	; 0x6b
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	001a      	movs	r2, r3
 80018e2:	2320      	movs	r3, #32
 80018e4:	4013      	ands	r3, r2
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	4193      	sbcs	r3, r2
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018ee:	779a      	strb	r2, [r3, #30]
				slot2.batt_sleep_state=(slot2.RxData[7])&(0x01<<6);
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80018f2:	226b      	movs	r2, #107	; 0x6b
 80018f4:	5c9b      	ldrb	r3, [r3, r2]
 80018f6:	001a      	movs	r2, r3
 80018f8:	2340      	movs	r3, #64	; 0x40
 80018fa:	4013      	ands	r3, r2
 80018fc:	1e5a      	subs	r2, r3, #1
 80018fe:	4193      	sbcs	r3, r2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001904:	77da      	strb	r2, [r3, #31]
				slot2.flag_recieve_batt2=1;
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001908:	2221      	movs	r2, #33	; 0x21
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
				slot2.can_batt2_trouble_state=0;
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001910:	2223      	movs	r2, #35	; 0x23
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_FDCAN_RxFifo0Callback+0x7bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	0b1a      	lsrs	r2, r3, #12
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
				if(RxHeader2.Identifier==0x18FF50E5)//charger
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <HAL_FDCAN_RxFifo0Callback+0x7c0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d000      	beq.n	800192e <HAL_FDCAN_RxFifo0Callback+0x68e>
 800192c:	e081      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
				slot2.isCharger=1;
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001930:	2201      	movs	r2, #1
 8001932:	70da      	strb	r2, [r3, #3]
				slot2.Vcharger=(((slot2.RxData[0]<<8)|slot2.RxData[1])*0.1);
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001936:	2264      	movs	r2, #100	; 0x64
 8001938:	5c9b      	ldrb	r3, [r3, r2]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800193e:	2165      	movs	r1, #101	; 0x65
 8001940:	5c52      	ldrb	r2, [r2, r1]
 8001942:	4313      	orrs	r3, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fbc9 	bl	80010dc <__aeabi_i2d>
 800194a:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 800194e:	f7ff f959 	bl	8000c04 <__aeabi_dmul>
 8001952:	0002      	movs	r2, r0
 8001954:	000b      	movs	r3, r1
 8001956:	0010      	movs	r0, r2
 8001958:	0019      	movs	r1, r3
 800195a:	f7ff fbef 	bl	800113c <__aeabi_d2f>
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
				slot2.Acharger=(((slot2.RxData[2]<<8)|slot2.RxData[3])*0.1);
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001966:	2266      	movs	r2, #102	; 0x66
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800196e:	2167      	movs	r1, #103	; 0x67
 8001970:	5c52      	ldrb	r2, [r2, r1]
 8001972:	4313      	orrs	r3, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fbb1 	bl	80010dc <__aeabi_i2d>
 800197a:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 800197e:	f7ff f941 	bl	8000c04 <__aeabi_dmul>
 8001982:	0002      	movs	r2, r0
 8001984:	000b      	movs	r3, r1
 8001986:	0010      	movs	r0, r2
 8001988:	0019      	movs	r1, r3
 800198a:	f7ff fbd7 	bl	800113c <__aeabi_d2f>
 800198e:	1c02      	adds	r2, r0, #0
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001992:	659a      	str	r2, [r3, #88]	; 0x58
				slot2.charger_hardware_error=(slot2.RxData[4])&(0x01<<0);
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001996:	2268      	movs	r2, #104	; 0x68
 8001998:	5c9b      	ldrb	r3, [r3, r2]
 800199a:	001a      	movs	r2, r3
 800199c:	2301      	movs	r3, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	4193      	sbcs	r3, r2
 80019a4:	b2d9      	uxtb	r1, r3
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019a8:	222a      	movs	r2, #42	; 0x2a
 80019aa:	5499      	strb	r1, [r3, r2]
				slot2.charger_temp=(slot2.RxData[4])&(0x01<<1);
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019ae:	2268      	movs	r2, #104	; 0x68
 80019b0:	5c9b      	ldrb	r3, [r3, r2]
 80019b2:	001a      	movs	r2, r3
 80019b4:	2302      	movs	r3, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	4193      	sbcs	r3, r2
 80019bc:	b2d9      	uxtb	r1, r3
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019c0:	222b      	movs	r2, #43	; 0x2b
 80019c2:	5499      	strb	r1, [r3, r2]
				slot2.charger_input_voltage=(slot2.RxData[4])&(0x01<<2);
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019c6:	2268      	movs	r2, #104	; 0x68
 80019c8:	5c9b      	ldrb	r3, [r3, r2]
 80019ca:	001a      	movs	r2, r3
 80019cc:	2304      	movs	r3, #4
 80019ce:	4013      	ands	r3, r2
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4193      	sbcs	r3, r2
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019d8:	222c      	movs	r2, #44	; 0x2c
 80019da:	5499      	strb	r1, [r3, r2]
				slot2.charger_work_condition=(slot2.RxData[4])&(0x01<<3);
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019de:	2268      	movs	r2, #104	; 0x68
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	001a      	movs	r2, r3
 80019e4:	2308      	movs	r3, #8
 80019e6:	4013      	ands	r3, r2
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	4193      	sbcs	r3, r2
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019f0:	222d      	movs	r2, #45	; 0x2d
 80019f2:	5499      	strb	r1, [r3, r2]
				slot2.charger_communication_error=(slot2.RxData[4])&(0x01<<4);
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80019f6:	2268      	movs	r2, #104	; 0x68
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	001a      	movs	r2, r3
 80019fc:	2310      	movs	r3, #16
 80019fe:	4013      	ands	r3, r2
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	4193      	sbcs	r3, r2
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001a08:	222e      	movs	r2, #46	; 0x2e
 8001a0a:	5499      	strb	r1, [r3, r2]
				slot2.can_charger_trouble_state=0;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001a0e:	2230      	movs	r2, #48	; 0x30
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]
				slot2.flag_recieve_charger=1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8001a16:	222f      	movs	r2, #47	; 0x2f
 8001a18:	2101      	movs	r1, #1
 8001a1a:	5499      	strb	r1, [r3, r2]
}
 8001a1c:	e009      	b.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	f002 f91d 	bl	8003c64 <HAL_FDCAN_GetRxMessage>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_FDCAN_RxFifo0Callback+0x792>
 8001a2e:	f000 fe8d 	bl	800274c <Error_Handler>
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	20000860 	.word	0x20000860
 8001a40:	200004c8 	.word	0x200004c8
 8001a44:	200007b0 	.word	0x200007b0
 8001a48:	20000464 	.word	0x20000464
 8001a4c:	47ae147b 	.word	0x47ae147b
 8001a50:	3f847ae1 	.word	0x3f847ae1
 8001a54:	9999999a 	.word	0x9999999a
 8001a58:	3fb99999 	.word	0x3fb99999
 8001a5c:	200000d0 	.word	0x200000d0
 8001a60:	18ff50e5 	.word	0x18ff50e5

08001a64 <CAN_config>:


void CAN_config()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001a68:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <CAN_config+0x130>)
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	05d2      	lsls	r2, r2, #23
 8001a6e:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIndex = 0;
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <CAN_config+0x130>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_DISABLE;
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <CAN_config+0x130>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a7c:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <CAN_config+0x130>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterID1 = 0;
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <CAN_config+0x130>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterID2 = 0;
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <CAN_config+0x130>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]


	  sFilterConfig2.IdType = FDCAN_EXTENDED_ID;
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <CAN_config+0x134>)
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	05d2      	lsls	r2, r2, #23
 8001a94:	601a      	str	r2, [r3, #0]
	  sFilterConfig2.FilterIndex = 0;
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <CAN_config+0x134>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
	  sFilterConfig2.FilterType = FDCAN_FILTER_DISABLE;
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <CAN_config+0x134>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <CAN_config+0x134>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]
	  sFilterConfig2.FilterID1 = 0;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <CAN_config+0x134>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
	  sFilterConfig2.FilterID2 = 0;
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <CAN_config+0x134>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]

	  TxHeader.Identifier = 0x01;
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <CAN_config+0x138>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <CAN_config+0x138>)
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	05d2      	lsls	r2, r2, #23
 8001ac0:	605a      	str	r2, [r3, #4]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <CAN_config+0x138>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0312      	lsls	r2, r2, #12
 8001ac8:	60da      	str	r2, [r3, #12]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <CAN_config+0x138>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ad0:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <CAN_config+0x138>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <CAN_config+0x138>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <CAN_config+0x138>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <CAN_config+0x138>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	0412      	lsls	r2, r2, #16
 8001ae8:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <CAN_config+0x138>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]

	  TxHeader2.Identifier = 0x02;
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <CAN_config+0x13c>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	601a      	str	r2, [r3, #0]
	  TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <CAN_config+0x13c>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	05d2      	lsls	r2, r2, #23
 8001afc:	605a      	str	r2, [r3, #4]
	  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <CAN_config+0x13c>)
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0312      	lsls	r2, r2, #12
 8001b04:	60da      	str	r2, [r3, #12]
	  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <CAN_config+0x13c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
	  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <CAN_config+0x13c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <CAN_config+0x13c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
	  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <CAN_config+0x13c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
	  TxHeader2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <CAN_config+0x13c>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0412      	lsls	r2, r2, #16
 8001b24:	61da      	str	r2, [r3, #28]
	  TxHeader2.MessageMarker = 0x00;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <CAN_config+0x13c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]

	  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <CAN_config+0x130>)
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <CAN_config+0x140>)
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f002 f812 	bl	8003b5c <HAL_FDCAN_ConfigFilter>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <CAN_config+0x140>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f002 f86b 	bl	8003c16 <HAL_FDCAN_Start>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <CAN_config+0xe4>
	  {
	    Error_Handler();
 8001b44:	f000 fe02 	bl	800274c <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <CAN_config+0x140>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f002 f96a 	bl	8003e28 <HAL_FDCAN_ActivateNotification>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <CAN_config+0xf8>
	  {
	    Error_Handler();
 8001b58:	f000 fdf8 	bl	800274c <Error_Handler>
	  }


	  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2);
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <CAN_config+0x134>)
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <CAN_config+0x144>)
 8001b60:	0011      	movs	r1, r2
 8001b62:	0018      	movs	r0, r3
 8001b64:	f001 fffa 	bl	8003b5c <HAL_FDCAN_ConfigFilter>
	  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <CAN_config+0x144>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f002 f853 	bl	8003c16 <HAL_FDCAN_Start>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <CAN_config+0x114>
	  {
	   Error_Handler();
 8001b74:	f000 fdea 	bl	800274c <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <CAN_config+0x144>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f002 f952 	bl	8003e28 <HAL_FDCAN_ActivateNotification>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <CAN_config+0x128>
	  {
	    /* Notification Error */
	    Error_Handler();
 8001b88:	f000 fde0 	bl	800274c <Error_Handler>
	  }
    
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	200000a0 	.word	0x200000a0
 8001b98:	200000b8 	.word	0x200000b8
 8001b9c:	200000f8 	.word	0x200000f8
 8001ba0:	200007d8 	.word	0x200007d8
 8001ba4:	200007fc 	.word	0x200007fc
 8001ba8:	20000860 	.word	0x20000860

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb0:	f001 f97e 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb4:	f000 f86a 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb8:	f000 fab6 	bl	8002128 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bbc:	f000 fa7a 	bl	80020b4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001bc0:	f000 f8c2 	bl	8001d48 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001bc4:	f000 f908 	bl	8001dd8 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8001bc8:	f000 f94e 	bl	8001e68 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001bcc:	f000 fa24 	bl	8002018 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_RS485_Slave_Init();
 8001bd0:	f000 fb14 	bl	80021fc <MX_RS485_Slave_Init>
  CAN_config();
 8001bd4:	f7ff ff46 	bl	8001a64 <CAN_config>
  slot1.notif=led_standby;
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <main+0xc8>)
 8001bda:	23c4      	movs	r3, #196	; 0xc4
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	2101      	movs	r1, #1
 8001be0:	54d1      	strb	r1, [r2, r3]
  slot2.notif=led_standby;
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <main+0xcc>)
 8001be4:	23c4      	movs	r3, #196	; 0xc4
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	2101      	movs	r1, #1
 8001bea:	54d1      	strb	r1, [r2, r3]
  slot1.state = standby;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <main+0xc8>)
 8001bee:	2274      	movs	r2, #116	; 0x74
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	5499      	strb	r1, [r3, r2]
  slot2.state=standby;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <main+0xcc>)
 8001bf6:	2274      	movs	r2, #116	; 0x74
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	5499      	strb	r1, [r3, r2]

  slot1.wake_trig=1;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <main+0xc8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	705a      	strb	r2, [r3, #1]
  slot2.wake_trig=1;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <main+0xcc>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	705a      	strb	r2, [r3, #1]
  slot1.last_lock_state=1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <main+0xc8>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	731a      	strb	r2, [r3, #12]
  slot2.last_lock_state=1;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <main+0xcc>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	731a      	strb	r2, [r3, #12]
  slot1.charger_start_DIS=1;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <main+0xc8>)
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2101      	movs	r1, #1
 8001c1a:	5499      	strb	r1, [r3, r2]
  slot2.charger_start_DIS=1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <main+0xcc>)
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]
  slot1.unlock_command=1;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <main+0xc8>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	721a      	strb	r2, [r3, #8]
  slot2.unlock_command=1;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <main+0xcc>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	721a      	strb	r2, [r3, #8]
  slot1.batt_state=0x01;
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <main+0xc8>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	661a      	str	r2, [r3, #96]	; 0x60
  slot2.batt_state=0x01;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <main+0xcc>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	661a      	str	r2, [r3, #96]	; 0x60

  slot1.datasentflag=0;
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <main+0xc8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	679a      	str	r2, [r3, #120]	; 0x78
  slot2.datasentflag=1;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <main+0xcc>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_Init(&huart1);
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <main+0xd0>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f004 fef8 	bl	8006a40 <HAL_UART_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <main+0xd4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	2140      	movs	r1, #64	; 0x40
 8001c56:	0018      	movs	r0, r3
 8001c58:	f002 fd30 	bl	80046bc <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart1, UartBufferRx,BUF_UART_RX_SZ);
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	4908      	ldr	r1, [pc, #32]	; (8001c84 <main+0xd8>)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <main+0xd0>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f004 ffdd 	bl	8006c24 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  RS485_Bus_Slave_Process(&rs485_hslave);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <main+0xdc>)
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f006 fd8b 	bl	8008788 <RS485_Bus_Slave_Process>
 8001c72:	e7fa      	b.n	8001c6a <main+0xbe>
 8001c74:	2000011c 	.word	0x2000011c
 8001c78:	20000464 	.word	0x20000464
 8001c7c:	200009d0 	.word	0x200009d0
 8001c80:	50000800 	.word	0x50000800
 8001c84:	20000c18 	.word	0x20000c18
 8001c88:	20000ac4 	.word	0x20000ac4

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b095      	sub	sp, #84	; 0x54
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	2414      	movs	r4, #20
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	0018      	movs	r0, r3
 8001c98:	233c      	movs	r3, #60	; 0x3c
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f007 f9cc 	bl	800903a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f007 f9c5 	bl	800903a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f002 fd1f 	bl	80046f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cba:	193b      	adds	r3, r7, r4
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001cc8:	0021      	movs	r1, r4
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2202      	movs	r2, #2
 8001cda:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2202      	movs	r2, #2
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2208      	movs	r2, #8
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0292      	lsls	r2, r2, #10
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	0492      	lsls	r2, r2, #18
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	0592      	lsls	r2, r2, #22
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f002 fd41 	bl	8004790 <HAL_RCC_OscConfig>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d12:	f000 fd1b 	bl	800274c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2202      	movs	r2, #2
 8001d20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2102      	movs	r1, #2
 8001d32:	0018      	movs	r0, r3
 8001d34:	f003 f88c 	bl	8004e50 <HAL_RCC_ClockConfig>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d3c:	f000 fd06 	bl	800274c <Error_Handler>
  }
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b015      	add	sp, #84	; 0x54
 8001d46:	bd90      	pop	{r4, r7, pc}

08001d48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <MX_FDCAN1_Init+0x8c>)
 8001d50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d78:	2210      	movs	r2, #16
 8001d7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <MX_FDCAN1_Init+0x88>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f001 fd68 	bl	8003890 <HAL_FDCAN_Init>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001dc4:	f000 fcc2 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	200007fc 	.word	0x200007fc
 8001dd4:	40006400 	.word	0x40006400

08001dd8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001dde:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <MX_FDCAN2_Init+0x8c>)
 8001de0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e08:	2210      	movs	r2, #16
 8001e0a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 7;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 8;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <MX_FDCAN2_Init+0x88>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f001 fd20 	bl	8003890 <HAL_FDCAN_Init>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001e54:	f000 fc7a 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	20000860 	.word	0x20000860
 8001e64:	40006800 	.word	0x40006800

08001e68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09c      	sub	sp, #112	; 0x70
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	2360      	movs	r3, #96	; 0x60
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	0018      	movs	r0, r3
 8001e74:	2310      	movs	r3, #16
 8001e76:	001a      	movs	r2, r3
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f007 f8de 	bl	800903a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	2354      	movs	r3, #84	; 0x54
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	0018      	movs	r0, r3
 8001e84:	230c      	movs	r3, #12
 8001e86:	001a      	movs	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f007 f8d6 	bl	800903a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	2338      	movs	r3, #56	; 0x38
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	0018      	movs	r0, r3
 8001e94:	231c      	movs	r3, #28
 8001e96:	001a      	movs	r2, r3
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f007 f8ce 	bl	800903a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	2334      	movs	r3, #52	; 0x34
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	f007 f8c7 	bl	800903a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001eae:	4a59      	ldr	r2, [pc, #356]	; (8002014 <MX_TIM1_Init+0x1ac>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 79;
 8001ebe:	4b54      	ldr	r3, [pc, #336]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ec0:	224f      	movs	r2, #79	; 0x4f
 8001ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f003 fb9f 	bl	800561c <HAL_TIM_Base_Init>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001ee2:	f000 fc33 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	2160      	movs	r1, #96	; 0x60
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0152      	lsls	r2, r2, #5
 8001eee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef0:	187a      	adds	r2, r7, r1
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f003 ff6a 	bl	8005dd0 <HAL_TIM_ConfigClockSource>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f00:	f000 fc24 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f003 fbe0 	bl	80056cc <HAL_TIM_PWM_Init>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001f10:	f000 fc1c 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f14:	2154      	movs	r1, #84	; 0x54
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2220      	movs	r2, #32
 8001f1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f28:	187a      	adds	r2, r7, r1
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f004 fc52 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001f38:	f000 fc08 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3c:	2138      	movs	r1, #56	; 0x38
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2260      	movs	r2, #96	; 0x60
 8001f42:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f68:	1879      	adds	r1, r7, r1
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f003 fe2e 	bl	8005bd0 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	1e03      	subs	r3, r0, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001f78:	f000 fbe8 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f7c:	2138      	movs	r1, #56	; 0x38
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2204      	movs	r2, #4
 8001f82:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f84:	1879      	adds	r1, r7, r1
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001f88:	2208      	movs	r2, #8
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f003 fe20 	bl	8005bd0 <HAL_TIM_PWM_ConfigChannel>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001f94:	f000 fbda 	bl	800274c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0192      	lsls	r2, r2, #6
 8001fbc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	0492      	lsls	r2, r2, #18
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fea:	1d3a      	adds	r2, r7, #4
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8001fee:	0011      	movs	r1, r2
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f004 fc67 	bl	80068c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 8001ffa:	f000 fba7 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <MX_TIM1_Init+0x1a8>)
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fd6d 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b01c      	add	sp, #112	; 0x70
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	200008c4 	.word	0x200008c4
 8002014:	40012c00 	.word	0x40012c00

08002018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <MX_USART1_UART_Init+0x94>)
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <MX_USART1_UART_Init+0x98>)
 8002020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002024:	22e1      	movs	r2, #225	; 0xe1
 8002026:	0252      	lsls	r2, r2, #9
 8002028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <MX_USART1_UART_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <MX_USART1_UART_Init+0x94>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_USART1_UART_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_USART1_UART_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002062:	0018      	movs	r0, r3
 8002064:	f004 fcec 	bl	8006a40 <HAL_UART_Init>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800206c:	f000 fb6e 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002072:	2100      	movs	r1, #0
 8002074:	0018      	movs	r0, r3
 8002076:	f006 f98b 	bl	8008390 <HAL_UARTEx_SetTxFifoThreshold>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800207e:	f000 fb65 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f006 f9c2 	bl	8008410 <HAL_UARTEx_SetRxFifoThreshold>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d001      	beq.n	8002094 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002090:	f000 fb5c 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <MX_USART1_UART_Init+0x94>)
 8002096:	0018      	movs	r0, r3
 8002098:	f006 f940 	bl	800831c <HAL_UARTEx_DisableFifoMode>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f000 fb54 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	200009d0 	.word	0x200009d0
 80020b0:	40013800 	.word	0x40013800

080020b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_DMA_Init+0x70>)
 80020bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <MX_DMA_Init+0x70>)
 80020c0:	2102      	movs	r1, #2
 80020c2:	430a      	orrs	r2, r1
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_DMA_Init+0x70>)
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_DMA_Init+0x70>)
 80020d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MX_DMA_Init+0x70>)
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_DMA_Init+0x70>)
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2009      	movs	r0, #9
 80020f0:	f001 f834 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020f4:	2009      	movs	r0, #9
 80020f6:	f001 f846 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	200a      	movs	r0, #10
 8002100:	f001 f82c 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002104:	200a      	movs	r0, #10
 8002106:	f001 f83e 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	200b      	movs	r0, #11
 8002110:	f001 f824 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8002114:	200b      	movs	r0, #11
 8002116:	f001 f836 	bl	8003186 <HAL_NVIC_EnableIRQ>

}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	40021000 	.word	0x40021000

08002128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	240c      	movs	r4, #12
 8002130:	193b      	adds	r3, r7, r4
 8002132:	0018      	movs	r0, r3
 8002134:	2314      	movs	r3, #20
 8002136:	001a      	movs	r2, r3
 8002138:	2100      	movs	r1, #0
 800213a:	f006 ff7e 	bl	800903a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002144:	2102      	movs	r1, #2
 8002146:	430a      	orrs	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <MX_GPIO_Init+0xc8>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <MX_GPIO_Init+0xc8>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <MX_GPIO_Init+0xc8>)
 8002174:	2104      	movs	r1, #4
 8002176:	430a      	orrs	r2, r1
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_GPIO_Init+0xc8>)
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	2204      	movs	r2, #4
 8002180:	4013      	ands	r3, r2
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_Tx_EN_GPIO_Port, RS485_Tx_EN_Pin, GPIO_PIN_RESET);
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_GPIO_Init+0xcc>)
 8002188:	2200      	movs	r2, #0
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	0018      	movs	r0, r3
 800218e:	f002 fa95 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_GPIO_Init+0xd0>)
 8002194:	2200      	movs	r2, #0
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	0018      	movs	r0, r3
 800219a:	f002 fa8f 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_Tx_EN_Pin */
  GPIO_InitStruct.Pin = RS485_Tx_EN_Pin;
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	2201      	movs	r2, #1
 80021a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS485_Tx_EN_GPIO_Port, &GPIO_InitStruct);
 80021b6:	193b      	adds	r3, r7, r4
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <MX_GPIO_Init+0xcc>)
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f002 f911 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c2:	0021      	movs	r1, r4
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2201      	movs	r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <MX_GPIO_Init+0xd0>)
 80021e0:	0019      	movs	r1, r3
 80021e2:	0010      	movs	r0, r2
 80021e4:	f002 f8fe 	bl	80043e4 <HAL_GPIO_Init>

}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b009      	add	sp, #36	; 0x24
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	50000800 	.word	0x50000800
 80021f8:	50000400 	.word	0x50000400

080021fc <MX_RS485_Slave_Init>:

/* USER CODE BEGIN 4 */
static void MX_RS485_Slave_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af02      	add	r7, sp, #8
  HAL_UART_Receive_DMA(&huart1, UartBufferRx,BUF_UART_RX_SZ);
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	00da      	lsls	r2, r3, #3
 8002206:	4925      	ldr	r1, [pc, #148]	; (800229c <MX_RS485_Slave_Init+0xa0>)
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <MX_RS485_Slave_Init+0xa4>)
 800220a:	0018      	movs	r0, r3
 800220c:	f004 fd0a 	bl	8006c24 <HAL_UART_Receive_DMA>
  rs485_hslave.read = UartRead;
 8002210:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002212:	2396      	movs	r3, #150	; 0x96
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4924      	ldr	r1, [pc, #144]	; (80022a8 <MX_RS485_Slave_Init+0xac>)
 8002218:	50d1      	str	r1, [r2, r3]
  rs485_hslave.write = UartWrite;
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 800221c:	2398      	movs	r3, #152	; 0x98
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <MX_RS485_Slave_Init+0xb0>)
 8002222:	50d1      	str	r1, [r2, r3]
  RS485_Bus_Slave_Init(&rs485_hslave);
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002226:	0018      	movs	r0, r3
 8002228:	f006 fa84 	bl	8008734 <RS485_Bus_Slave_Init>
  RS485_Bus_Slave_AddId(&rs485_hslave, RS485_SLAVE_ID_1);
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 800222e:	2101      	movs	r1, #1
 8002230:	0018      	movs	r0, r3
 8002232:	f006 fa8a 	bl	800874a <RS485_Bus_Slave_AddId>
  RS485_Bus_Slave_AddId(&rs485_hslave, RS485_SLAVE_ID_2);
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002238:	2102      	movs	r1, #2
 800223a:	0018      	movs	r0, r3
 800223c:	f006 fa85 	bl	800874a <RS485_Bus_Slave_AddId>

  RS485_Bus_Slave_On(&rs485_hslave, EVENT_REQ_REPORT, onEventReqReport);
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <MX_RS485_Slave_Init+0xb4>)
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002244:	2101      	movs	r1, #1
 8002246:	0018      	movs	r0, r3
 8002248:	f006 fca4 	bl	8008b94 <RS485_Bus_Slave_On>
  RS485_Bus_Slave_On(&rs485_hslave, EVENT_START_CHARGING, onEventStartCharging);
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <MX_RS485_Slave_Init+0xb8>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002250:	2102      	movs	r1, #2
 8002252:	0018      	movs	r0, r3
 8002254:	f006 fc9e 	bl	8008b94 <RS485_Bus_Slave_On>
  RS485_Bus_Slave_On(&rs485_hslave, EVENT_STOP_CHARGING, onEventStopCharging);
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <MX_RS485_Slave_Init+0xbc>)
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 800225c:	2103      	movs	r1, #3
 800225e:	0018      	movs	r0, r3
 8002260:	f006 fc98 	bl	8008b94 <RS485_Bus_Slave_On>
  RS485_Bus_Slave_On(&rs485_hslave, EVENT_LOCK, onEventLock);
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <MX_RS485_Slave_Init+0xc0>)
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002268:	2104      	movs	r1, #4
 800226a:	0018      	movs	r0, r3
 800226c:	f006 fc92 	bl	8008b94 <RS485_Bus_Slave_On>
  RS485_Bus_Slave_On(&rs485_hslave, EVENT_UNLOCK, onEventUnlock);
 8002270:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <MX_RS485_Slave_Init+0xc4>)
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_RS485_Slave_Init+0xa8>)
 8002274:	2105      	movs	r1, #5
 8002276:	0018      	movs	r0, r3
 8002278:	f006 fc8c 	bl	8008b94 <RS485_Bus_Slave_On>

  hdma.huart = &huart1;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_RS485_Slave_Init+0xc8>)
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <MX_RS485_Slave_Init+0xa4>)
 8002280:	601a      	str	r2, [r3, #0]
  STRM_Init(&hdma, 0, 0, &UartBufferRx[0],BUF_UART_RX_SZ);
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <MX_RS485_Slave_Init+0xa0>)
 8002284:	480f      	ldr	r0, [pc, #60]	; (80022c4 <MX_RS485_Slave_Init+0xc8>)
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	0013      	movs	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	f006 fd84 	bl	8008d9e <STRM_Init>

}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000c18 	.word	0x20000c18
 80022a0:	200009d0 	.word	0x200009d0
 80022a4:	20000ac4 	.word	0x20000ac4
 80022a8:	080022c9 	.word	0x080022c9
 80022ac:	080022f5 	.word	0x080022f5
 80022b0:	0800233d 	.word	0x0800233d
 80022b4:	080025dd 	.word	0x080025dd
 80022b8:	08002639 	.word	0x08002639
 80022bc:	08002695 	.word	0x08002695
 80022c0:	080026f1 	.word	0x080026f1
 80022c4:	20000bfc 	.word	0x20000bfc

080022c8 <UartRead>:

static int UartRead(uint8_t *buffer, uint16_t bufferLen)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	000a      	movs	r2, r1
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	801a      	strh	r2, [r3, #0]

 return (int) STRM_Read(&hdma, buffer, bufferLen, 10);
 80022d6:	1cbb      	adds	r3, r7, #2
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <UartRead+0x28>)
 80022de:	230a      	movs	r3, #10
 80022e0:	f006 fd92 	bl	8008e08 <STRM_Read>
 80022e4:	0003      	movs	r3, r0
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000bfc 	.word	0x20000bfc

080022f4 <UartWrite>:

static int UartWrite(uint8_t *buffer, uint16_t bufferLen)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	000a      	movs	r2, r1
 80022fe:	1cbb      	adds	r3, r7, #2
 8002300:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <UartWrite+0x40>)
 8002304:	2201      	movs	r2, #1
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	0018      	movs	r0, r3
 800230a:	f002 f9d7 	bl	80046bc <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, buffer, bufferLen, 100);
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <UartWrite+0x44>)
 8002316:	2364      	movs	r3, #100	; 0x64
 8002318:	f004 fbe8 	bl	8006aec <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <UartWrite+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	0018      	movs	r0, r3
 8002324:	f002 f9ca 	bl	80046bc <HAL_GPIO_WritePin>
  return bufferLen;
 8002328:	1cbb      	adds	r3, r7, #2
 800232a:	881b      	ldrh	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}
 8002334:	50000800 	.word	0x50000800
 8002338:	200009d0 	.word	0x200009d0

0800233c <onEventReqReport>:


static void onEventReqReport(RS484_BUS_Id_t id, uint8_t *buffer, uint16_t bufferLen, RS485_Bus_EventResponse_t *resp)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	0011      	movs	r1, r2
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	240e      	movs	r4, #14
 800234a:	193b      	adds	r3, r7, r4
 800234c:	1c02      	adds	r2, r0, #0
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	230c      	movs	r3, #12
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	1c0a      	adds	r2, r1, #0
 8002356:	801a      	strh	r2, [r3, #0]
  static int soc = 0;
  soc++;
 8002358:	4b9b      	ldr	r3, [pc, #620]	; (80025c8 <onEventReqReport+0x28c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	4b9a      	ldr	r3, [pc, #616]	; (80025c8 <onEventReqReport+0x28c>)
 8002360:	601a      	str	r2, [r3, #0]

  Report_ResetFrame(&tmpReportFrame);
 8002362:	4b9a      	ldr	r3, [pc, #616]	; (80025cc <onEventReqReport+0x290>)
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f9f7 	bl	8002758 <Report_ResetFrame>
  if(id==RS485_SLAVE_ID_1)
 800236a:	193b      	adds	r3, r7, r4
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d000      	beq.n	8002374 <onEventReqReport+0x38>
 8002372:	e08b      	b.n	800248c <onEventReqReport+0x150>
  {
  tmpReportFrame.charger.status = slot1.batt_charge_state;
 8002374:	4b96      	ldr	r3, [pc, #600]	; (80025d0 <onEventReqReport+0x294>)
 8002376:	7f5b      	ldrb	r3, [r3, #29]
 8002378:	001a      	movs	r2, r3
 800237a:	4b94      	ldr	r3, [pc, #592]	; (80025cc <onEventReqReport+0x290>)
 800237c:	711a      	strb	r2, [r3, #4]
  tmpReportFrame.bms.SOC = slot1.SOC_batt;
 800237e:	4b94      	ldr	r3, [pc, #592]	; (80025d0 <onEventReqReport+0x294>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	1c18      	adds	r0, r3, #0
 8002384:	f7fe f88e 	bl	80004a4 <__aeabi_f2uiz>
 8002388:	0003      	movs	r3, r0
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <onEventReqReport+0x290>)
 800238e:	745a      	strb	r2, [r3, #17]
  tmpReportFrame.bms.voltage =slot1.Vbatt;
 8002390:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <onEventReqReport+0x294>)
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	1c18      	adds	r0, r3, #0
 8002396:	f7fe fbc7 	bl	8000b28 <__aeabi_f2iz>
 800239a:	0003      	movs	r3, r0
 800239c:	b218      	sxth	r0, r3
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <onEventReqReport+0x290>)
 80023a0:	330d      	adds	r3, #13
 80023a2:	b282      	uxth	r2, r0
 80023a4:	21ff      	movs	r1, #255	; 0xff
 80023a6:	400a      	ands	r2, r1
 80023a8:	0014      	movs	r4, r2
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	400a      	ands	r2, r1
 80023b0:	1c11      	adds	r1, r2, #0
 80023b2:	1c22      	adds	r2, r4, #0
 80023b4:	430a      	orrs	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	b282      	uxth	r2, r0
 80023ba:	0a12      	lsrs	r2, r2, #8
 80023bc:	b290      	uxth	r0, r2
 80023be:	785a      	ldrb	r2, [r3, #1]
 80023c0:	2100      	movs	r1, #0
 80023c2:	400a      	ands	r2, r1
 80023c4:	1c11      	adds	r1, r2, #0
 80023c6:	1c02      	adds	r2, r0, #0
 80023c8:	430a      	orrs	r2, r1
 80023ca:	705a      	strb	r2, [r3, #1]
  tmpReportFrame.bms.current=slot1.Abatt;
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <onEventReqReport+0x294>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	1c18      	adds	r0, r3, #0
 80023d2:	f7fe fba9 	bl	8000b28 <__aeabi_f2iz>
 80023d6:	0003      	movs	r3, r0
 80023d8:	b218      	sxth	r0, r3
 80023da:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <onEventReqReport+0x290>)
 80023dc:	330f      	adds	r3, #15
 80023de:	b282      	uxth	r2, r0
 80023e0:	21ff      	movs	r1, #255	; 0xff
 80023e2:	400a      	ands	r2, r1
 80023e4:	0014      	movs	r4, r2
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	400a      	ands	r2, r1
 80023ec:	1c11      	adds	r1, r2, #0
 80023ee:	1c22      	adds	r2, r4, #0
 80023f0:	430a      	orrs	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	b282      	uxth	r2, r0
 80023f6:	0a12      	lsrs	r2, r2, #8
 80023f8:	b290      	uxth	r0, r2
 80023fa:	785a      	ldrb	r2, [r3, #1]
 80023fc:	2100      	movs	r1, #0
 80023fe:	400a      	ands	r2, r1
 8002400:	1c11      	adds	r1, r2, #0
 8002402:	1c02      	adds	r2, r0, #0
 8002404:	430a      	orrs	r2, r1
 8002406:	705a      	strb	r2, [r3, #1]
  tmpReportFrame.bms.SOH=slot1.SOH_batt;
 8002408:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <onEventReqReport+0x294>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	1c18      	adds	r0, r3, #0
 800240e:	f7fe f849 	bl	80004a4 <__aeabi_f2uiz>
 8002412:	0003      	movs	r3, r0
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <onEventReqReport+0x290>)
 8002418:	749a      	strb	r2, [r3, #18]
  tmpReportFrame.bms.temperature=slot1.temp_batt;
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <onEventReqReport+0x294>)
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	1c18      	adds	r0, r3, #0
 8002420:	f7fe f840 	bl	80004a4 <__aeabi_f2uiz>
 8002424:	0003      	movs	r3, r0
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <onEventReqReport+0x290>)
 800242a:	74da      	strb	r2, [r3, #19]
  tmpReportFrame.bms.id=slot1.batt_id;
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <onEventReqReport+0x294>)
 800242e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <onEventReqReport+0x290>)
 8002432:	3306      	adds	r3, #6
 8002434:	21ff      	movs	r1, #255	; 0xff
 8002436:	4011      	ands	r1, r2
 8002438:	000c      	movs	r4, r1
 800243a:	7819      	ldrb	r1, [r3, #0]
 800243c:	2000      	movs	r0, #0
 800243e:	4001      	ands	r1, r0
 8002440:	1c08      	adds	r0, r1, #0
 8002442:	1c21      	adds	r1, r4, #0
 8002444:	4301      	orrs	r1, r0
 8002446:	7019      	strb	r1, [r3, #0]
 8002448:	0a11      	lsrs	r1, r2, #8
 800244a:	20ff      	movs	r0, #255	; 0xff
 800244c:	4001      	ands	r1, r0
 800244e:	000c      	movs	r4, r1
 8002450:	7859      	ldrb	r1, [r3, #1]
 8002452:	2000      	movs	r0, #0
 8002454:	4001      	ands	r1, r0
 8002456:	1c08      	adds	r0, r1, #0
 8002458:	1c21      	adds	r1, r4, #0
 800245a:	4301      	orrs	r1, r0
 800245c:	7059      	strb	r1, [r3, #1]
 800245e:	0c11      	lsrs	r1, r2, #16
 8002460:	20ff      	movs	r0, #255	; 0xff
 8002462:	4001      	ands	r1, r0
 8002464:	000c      	movs	r4, r1
 8002466:	7899      	ldrb	r1, [r3, #2]
 8002468:	2000      	movs	r0, #0
 800246a:	4001      	ands	r1, r0
 800246c:	1c08      	adds	r0, r1, #0
 800246e:	1c21      	adds	r1, r4, #0
 8002470:	4301      	orrs	r1, r0
 8002472:	7099      	strb	r1, [r3, #2]
 8002474:	0e10      	lsrs	r0, r2, #24
 8002476:	78da      	ldrb	r2, [r3, #3]
 8002478:	2100      	movs	r1, #0
 800247a:	400a      	ands	r2, r1
 800247c:	1c11      	adds	r1, r2, #0
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	430a      	orrs	r2, r1
 8002482:	70da      	strb	r2, [r3, #3]

  slot1.CAN_error_state=0;
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <onEventReqReport+0x294>)
 8002486:	2200      	movs	r2, #0
 8002488:	729a      	strb	r2, [r3, #10]
 800248a:	e090      	b.n	80025ae <onEventReqReport+0x272>
  }
  else if(id==RS485_SLAVE_ID_2)
 800248c:	230e      	movs	r3, #14
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d000      	beq.n	8002498 <onEventReqReport+0x15c>
 8002496:	e08a      	b.n	80025ae <onEventReqReport+0x272>
  {
  tmpReportFrame.charger.status = slot2.batt_charge_state;
 8002498:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <onEventReqReport+0x298>)
 800249a:	7f5b      	ldrb	r3, [r3, #29]
 800249c:	001a      	movs	r2, r3
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <onEventReqReport+0x290>)
 80024a0:	711a      	strb	r2, [r3, #4]
  tmpReportFrame.bms.SOC = slot2.SOC_batt;
 80024a2:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <onEventReqReport+0x298>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	1c18      	adds	r0, r3, #0
 80024a8:	f7fd fffc 	bl	80004a4 <__aeabi_f2uiz>
 80024ac:	0003      	movs	r3, r0
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <onEventReqReport+0x290>)
 80024b2:	745a      	strb	r2, [r3, #17]
  tmpReportFrame.bms.voltage =slot2.Vbatt;
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <onEventReqReport+0x298>)
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	1c18      	adds	r0, r3, #0
 80024ba:	f7fe fb35 	bl	8000b28 <__aeabi_f2iz>
 80024be:	0003      	movs	r3, r0
 80024c0:	b218      	sxth	r0, r3
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <onEventReqReport+0x290>)
 80024c4:	330d      	adds	r3, #13
 80024c6:	b282      	uxth	r2, r0
 80024c8:	21ff      	movs	r1, #255	; 0xff
 80024ca:	400a      	ands	r2, r1
 80024cc:	0014      	movs	r4, r2
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	400a      	ands	r2, r1
 80024d4:	1c11      	adds	r1, r2, #0
 80024d6:	1c22      	adds	r2, r4, #0
 80024d8:	430a      	orrs	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	b282      	uxth	r2, r0
 80024de:	0a12      	lsrs	r2, r2, #8
 80024e0:	b290      	uxth	r0, r2
 80024e2:	785a      	ldrb	r2, [r3, #1]
 80024e4:	2100      	movs	r1, #0
 80024e6:	400a      	ands	r2, r1
 80024e8:	1c11      	adds	r1, r2, #0
 80024ea:	1c02      	adds	r2, r0, #0
 80024ec:	430a      	orrs	r2, r1
 80024ee:	705a      	strb	r2, [r3, #1]
  tmpReportFrame.bms.current=slot2.Abatt;
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <onEventReqReport+0x298>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	1c18      	adds	r0, r3, #0
 80024f6:	f7fe fb17 	bl	8000b28 <__aeabi_f2iz>
 80024fa:	0003      	movs	r3, r0
 80024fc:	b218      	sxth	r0, r3
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <onEventReqReport+0x290>)
 8002500:	330f      	adds	r3, #15
 8002502:	b282      	uxth	r2, r0
 8002504:	21ff      	movs	r1, #255	; 0xff
 8002506:	400a      	ands	r2, r1
 8002508:	0014      	movs	r4, r2
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	2100      	movs	r1, #0
 800250e:	400a      	ands	r2, r1
 8002510:	1c11      	adds	r1, r2, #0
 8002512:	1c22      	adds	r2, r4, #0
 8002514:	430a      	orrs	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	b282      	uxth	r2, r0
 800251a:	0a12      	lsrs	r2, r2, #8
 800251c:	b290      	uxth	r0, r2
 800251e:	785a      	ldrb	r2, [r3, #1]
 8002520:	2100      	movs	r1, #0
 8002522:	400a      	ands	r2, r1
 8002524:	1c11      	adds	r1, r2, #0
 8002526:	1c02      	adds	r2, r0, #0
 8002528:	430a      	orrs	r2, r1
 800252a:	705a      	strb	r2, [r3, #1]
  tmpReportFrame.bms.SOH=slot2.SOH_batt;
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <onEventReqReport+0x298>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	1c18      	adds	r0, r3, #0
 8002532:	f7fd ffb7 	bl	80004a4 <__aeabi_f2uiz>
 8002536:	0003      	movs	r3, r0
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <onEventReqReport+0x290>)
 800253c:	749a      	strb	r2, [r3, #18]
  tmpReportFrame.bms.temperature=slot2.temp_batt;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <onEventReqReport+0x298>)
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	1c18      	adds	r0, r3, #0
 8002544:	f7fd ffae 	bl	80004a4 <__aeabi_f2uiz>
 8002548:	0003      	movs	r3, r0
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <onEventReqReport+0x290>)
 800254e:	74da      	strb	r2, [r3, #19]
  tmpReportFrame.bms.id=slot2.batt_id;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <onEventReqReport+0x298>)
 8002552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <onEventReqReport+0x290>)
 8002556:	3306      	adds	r3, #6
 8002558:	21ff      	movs	r1, #255	; 0xff
 800255a:	4011      	ands	r1, r2
 800255c:	000c      	movs	r4, r1
 800255e:	7819      	ldrb	r1, [r3, #0]
 8002560:	2000      	movs	r0, #0
 8002562:	4001      	ands	r1, r0
 8002564:	1c08      	adds	r0, r1, #0
 8002566:	1c21      	adds	r1, r4, #0
 8002568:	4301      	orrs	r1, r0
 800256a:	7019      	strb	r1, [r3, #0]
 800256c:	0a11      	lsrs	r1, r2, #8
 800256e:	20ff      	movs	r0, #255	; 0xff
 8002570:	4001      	ands	r1, r0
 8002572:	000c      	movs	r4, r1
 8002574:	7859      	ldrb	r1, [r3, #1]
 8002576:	2000      	movs	r0, #0
 8002578:	4001      	ands	r1, r0
 800257a:	1c08      	adds	r0, r1, #0
 800257c:	1c21      	adds	r1, r4, #0
 800257e:	4301      	orrs	r1, r0
 8002580:	7059      	strb	r1, [r3, #1]
 8002582:	0c11      	lsrs	r1, r2, #16
 8002584:	20ff      	movs	r0, #255	; 0xff
 8002586:	4001      	ands	r1, r0
 8002588:	000c      	movs	r4, r1
 800258a:	7899      	ldrb	r1, [r3, #2]
 800258c:	2000      	movs	r0, #0
 800258e:	4001      	ands	r1, r0
 8002590:	1c08      	adds	r0, r1, #0
 8002592:	1c21      	adds	r1, r4, #0
 8002594:	4301      	orrs	r1, r0
 8002596:	7099      	strb	r1, [r3, #2]
 8002598:	0e10      	lsrs	r0, r2, #24
 800259a:	78da      	ldrb	r2, [r3, #3]
 800259c:	2100      	movs	r1, #0
 800259e:	400a      	ands	r2, r1
 80025a0:	1c11      	adds	r1, r2, #0
 80025a2:	1c02      	adds	r2, r0, #0
 80025a4:	430a      	orrs	r2, r1
 80025a6:	70da      	strb	r2, [r3, #3]
  slot2.CAN_error_state=0;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <onEventReqReport+0x298>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	729a      	strb	r2, [r3, #10]
  }

  resp->data = (uint8_t*) &tmpReportFrame;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <onEventReqReport+0x290>)
 80025b2:	601a      	str	r2, [r3, #0]
  resp->dataLen = sizeof(ReportFrame_t);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2214      	movs	r2, #20
 80025b8:	809a      	strh	r2, [r3, #4]
  report_finish=1;
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <onEventReqReport+0x29c>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]

  return;
 80025c0:	46c0      	nop			; (mov r8, r8)
}
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b005      	add	sp, #20
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	2000101c 	.word	0x2000101c
 80025cc:	20000000 	.word	0x20000000
 80025d0:	2000011c 	.word	0x2000011c
 80025d4:	20000464 	.word	0x20000464
 80025d8:	200007ac 	.word	0x200007ac

080025dc <onEventStartCharging>:

static void onEventStartCharging(RS484_BUS_Id_t id, uint8_t *buffer, uint16_t bufferLen, RS485_Bus_EventResponse_t *resp)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	0011      	movs	r1, r2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	240e      	movs	r4, #14
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	1c02      	adds	r2, r0, #0
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	230c      	movs	r3, #12
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	1c0a      	adds	r2, r1, #0
 80025f6:	801a      	strh	r2, [r3, #0]
  // TODO start charing

	if(id==RS485_SLAVE_ID_1) 	  slot1.charge_command=1;
 80025f8:	193b      	adds	r3, r7, r4
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d103      	bne.n	8002608 <onEventStartCharging+0x2c>
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <onEventStartCharging+0x50>)
 8002602:	2201      	movs	r2, #1
 8002604:	711a      	strb	r2, [r3, #4]
 8002606:	e007      	b.n	8002618 <onEventStartCharging+0x3c>
	else if(id==RS485_SLAVE_ID_2) slot2.charge_command=1;
 8002608:	230e      	movs	r3, #14
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d102      	bne.n	8002618 <onEventStartCharging+0x3c>
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <onEventStartCharging+0x54>)
 8002614:	2201      	movs	r2, #1
 8002616:	711a      	strb	r2, [r3, #4]
	resp->data = (uint8_t*) &eventRespSuccess;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a06      	ldr	r2, [pc, #24]	; (8002634 <onEventStartCharging+0x58>)
 800261c:	601a      	str	r2, [r3, #0]
	resp->dataLen = sizeof(eventRespSuccess);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	809a      	strh	r2, [r3, #4]
	return;
 8002624:	46c0      	nop			; (mov r8, r8)
}
 8002626:	46bd      	mov	sp, r7
 8002628:	b005      	add	sp, #20
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	2000011c 	.word	0x2000011c
 8002630:	20000464 	.word	0x20000464
 8002634:	20001018 	.word	0x20001018

08002638 <onEventStopCharging>:

static void onEventStopCharging(RS484_BUS_Id_t id, uint8_t *buffer, uint16_t bufferLen, RS485_Bus_EventResponse_t *resp)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	0011      	movs	r1, r2
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	240e      	movs	r4, #14
 8002646:	193b      	adds	r3, r7, r4
 8002648:	1c02      	adds	r2, r0, #0
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	230c      	movs	r3, #12
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	1c0a      	adds	r2, r1, #0
 8002652:	801a      	strh	r2, [r3, #0]
  // TODO stop charing
	if(id==RS485_SLAVE_ID_1)slot1.stop_charge_command=1;
 8002654:	193b      	adds	r3, r7, r4
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d103      	bne.n	8002664 <onEventStopCharging+0x2c>
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <onEventStopCharging+0x50>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e007      	b.n	8002674 <onEventStopCharging+0x3c>
	else if(id==RS485_SLAVE_ID_2)slot2.stop_charge_command=1;
 8002664:	230e      	movs	r3, #14
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d102      	bne.n	8002674 <onEventStopCharging+0x3c>
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <onEventStopCharging+0x54>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
	resp->data = (uint8_t*) &eventRespSuccess;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <onEventStopCharging+0x58>)
 8002678:	601a      	str	r2, [r3, #0]
	resp->dataLen = sizeof(eventRespSuccess);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	809a      	strh	r2, [r3, #4]
	return;
 8002680:	46c0      	nop			; (mov r8, r8)
}
 8002682:	46bd      	mov	sp, r7
 8002684:	b005      	add	sp, #20
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	2000011c 	.word	0x2000011c
 800268c:	20000464 	.word	0x20000464
 8002690:	20001018 	.word	0x20001018

08002694 <onEventLock>:

static void onEventLock(RS484_BUS_Id_t id, uint8_t *buffer, uint16_t bufferLen, RS485_Bus_EventResponse_t *resp)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	0011      	movs	r1, r2
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	240e      	movs	r4, #14
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	1c02      	adds	r2, r0, #0
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	230c      	movs	r3, #12
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	1c0a      	adds	r2, r1, #0
 80026ae:	801a      	strh	r2, [r3, #0]
  // TODO lock aktuator
	if(id==RS485_SLAVE_ID_1) slot1.lock_command=1;
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <onEventLock+0x2a>
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <onEventLock+0x50>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	71da      	strb	r2, [r3, #7]
	if(id==RS485_SLAVE_ID_2) slot2.lock_command=1;
 80026be:	230e      	movs	r3, #14
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d102      	bne.n	80026ce <onEventLock+0x3a>
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <onEventLock+0x54>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	71da      	strb	r2, [r3, #7]
	resp->data = (uint8_t*) &eventRespSuccess;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <onEventLock+0x58>)
 80026d2:	601a      	str	r2, [r3, #0]
	resp->dataLen = sizeof(eventRespSuccess);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	809a      	strh	r2, [r3, #4]
	return;
 80026da:	46c0      	nop			; (mov r8, r8)

}
 80026dc:	46bd      	mov	sp, r7
 80026de:	b005      	add	sp, #20
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000011c 	.word	0x2000011c
 80026e8:	20000464 	.word	0x20000464
 80026ec:	20001018 	.word	0x20001018

080026f0 <onEventUnlock>:

static void onEventUnlock(RS484_BUS_Id_t id, uint8_t *buffer, uint16_t bufferLen, RS485_Bus_EventResponse_t *resp)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	0011      	movs	r1, r2
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	240e      	movs	r4, #14
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	1c02      	adds	r2, r0, #0
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	230c      	movs	r3, #12
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	1c0a      	adds	r2, r1, #0
 800270a:	801a      	strh	r2, [r3, #0]
  // TODO unlock aktuator
	if(id==RS485_SLAVE_ID_1)slot1.unlock_command=1;
 800270c:	193b      	adds	r3, r7, r4
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d103      	bne.n	800271c <onEventUnlock+0x2c>
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <onEventUnlock+0x50>)
 8002716:	2201      	movs	r2, #1
 8002718:	721a      	strb	r2, [r3, #8]
 800271a:	e007      	b.n	800272c <onEventUnlock+0x3c>
	else if(id==RS485_SLAVE_ID_2)slot2.unlock_command=1;
 800271c:	230e      	movs	r3, #14
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d102      	bne.n	800272c <onEventUnlock+0x3c>
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <onEventUnlock+0x54>)
 8002728:	2201      	movs	r2, #1
 800272a:	721a      	strb	r2, [r3, #8]
	resp->data = (uint8_t*) &eventRespSuccess;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <onEventUnlock+0x58>)
 8002730:	601a      	str	r2, [r3, #0]
	resp->dataLen = sizeof(eventRespSuccess);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	809a      	strh	r2, [r3, #4]
	return;
 8002738:	46c0      	nop			; (mov r8, r8)
}
 800273a:	46bd      	mov	sp, r7
 800273c:	b005      	add	sp, #20
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	2000011c 	.word	0x2000011c
 8002744:	20000464 	.word	0x20000464
 8002748:	20001018 	.word	0x20001018

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>
	...

08002758 <Report_ResetFrame>:
        .prefix = REPORT_PREFIX,
        .version = 1,
    }
};

void Report_ResetFrame(ReportFrame_t *reportFrame) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  memset(&tmpReportFrame.charger, 0, sizeof(tmpReportFrame.charger));
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <Report_ResetFrame+0x28>)
 8002762:	2202      	movs	r2, #2
 8002764:	2100      	movs	r1, #0
 8002766:	0018      	movs	r0, r3
 8002768:	f006 fc67 	bl	800903a <memset>
  memset(&tmpReportFrame.bms, 0, sizeof(tmpReportFrame.bms));
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <Report_ResetFrame+0x2c>)
 800276e:	220e      	movs	r2, #14
 8002770:	2100      	movs	r1, #0
 8002772:	0018      	movs	r0, r3
 8002774:	f006 fc61 	bl	800903a <memset>
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000004 	.word	0x20000004
 8002784:	20000006 	.word	0x20000006

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x44>)
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_MspInit+0x44>)
 8002794:	2101      	movs	r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x44>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_MspInit+0x44>)
 80027a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_MspInit+0x44>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0549      	lsls	r1, r1, #21
 80027b0:	430a      	orrs	r2, r1
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_MspInit+0x44>)
 80027b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	055b      	lsls	r3, r3, #21
 80027bc:	4013      	ands	r3, r2
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b09f      	sub	sp, #124	; 0x7c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	0018      	movs	r0, r3
 80027de:	2314      	movs	r3, #20
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f006 fc29 	bl	800903a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e8:	2418      	movs	r4, #24
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	0018      	movs	r0, r3
 80027ee:	234c      	movs	r3, #76	; 0x4c
 80027f0:	001a      	movs	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f006 fc21 	bl	800903a <memset>
  if(hfdcan->Instance==FDCAN1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_FDCAN_MspInit+0x1ac>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d15a      	bne.n	80028b8 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002802:	193b      	adds	r3, r7, r4
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	0492      	lsls	r2, r2, #18
 8002808:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2200      	movs	r2, #0
 800280e:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002810:	193b      	adds	r3, r7, r4
 8002812:	0018      	movs	r0, r3
 8002814:	f002 fcc6 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800281c:	f7ff ff96 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 8002828:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800282a:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0149      	lsls	r1, r1, #5
 800283c:	430a      	orrs	r2, r1
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	015b      	lsls	r3, r3, #5
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	187b      	adds	r3, r7, r1
 800286a:	22c0      	movs	r2, #192	; 0xc0
 800286c:	0152      	lsls	r2, r2, #5
 800286e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2202      	movs	r2, #2
 8002874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2203      	movs	r2, #3
 8002886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	187a      	adds	r2, r7, r1
 800288a:	23a0      	movs	r3, #160	; 0xa0
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f001 fda7 	bl	80043e4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2015      	movs	r0, #21
 800289c:	f000 fc5e 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80028a0:	2015      	movs	r0, #21
 80028a2:	f000 fc70 	bl	8003186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	2016      	movs	r0, #22
 80028ac:	f000 fc56 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80028b0:	2016      	movs	r0, #22
 80028b2:	f000 fc68 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80028b6:	e05d      	b.n	8002974 <HAL_FDCAN_MspInit+0x1a4>
  else if(hfdcan->Instance==FDCAN2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a32      	ldr	r2, [pc, #200]	; (8002988 <HAL_FDCAN_MspInit+0x1b8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d158      	bne.n	8002974 <HAL_FDCAN_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80028c2:	2118      	movs	r1, #24
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0492      	lsls	r2, r2, #18
 80028ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2200      	movs	r2, #0
 80028d0:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	0018      	movs	r0, r3
 80028d6:	f002 fc65 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80028de:	f7ff ff35 	bl	800274c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 80028ea:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_FDCAN_MspInit+0x1b0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10d      	bne.n	8002910 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 80028f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0149      	lsls	r1, r1, #5
 80028fe:	430a      	orrs	r2, r1
 8002900:	63da      	str	r2, [r3, #60]	; 0x3c
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 8002916:	2102      	movs	r1, #2
 8002918:	430a      	orrs	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_FDCAN_MspInit+0x1b4>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002928:	2164      	movs	r1, #100	; 0x64
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2203      	movs	r2, #3
 800292e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2202      	movs	r2, #2
 8002934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2203      	movs	r2, #3
 8002946:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	187b      	adds	r3, r7, r1
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_FDCAN_MspInit+0x1bc>)
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f001 fd48 	bl	80043e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	2015      	movs	r0, #21
 800295a:	f000 fbff 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800295e:	2015      	movs	r0, #21
 8002960:	f000 fc11 	bl	8003186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2016      	movs	r0, #22
 800296a:	f000 fbf7 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 800296e:	2016      	movs	r0, #22
 8002970:	f000 fc09 	bl	8003186 <HAL_NVIC_EnableIRQ>
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b01f      	add	sp, #124	; 0x7c
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	40006400 	.word	0x40006400
 8002980:	20001020 	.word	0x20001020
 8002984:	40021000 	.word	0x40021000
 8002988:	40006800 	.word	0x40006800
 800298c:	50000400 	.word	0x50000400

08002990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b097      	sub	sp, #92	; 0x5c
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	240c      	movs	r4, #12
 800299a:	193b      	adds	r3, r7, r4
 800299c:	0018      	movs	r0, r3
 800299e:	234c      	movs	r3, #76	; 0x4c
 80029a0:	001a      	movs	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	f006 fb49 	bl	800903a <memset>
  if(htim_base->Instance==TIM1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a46      	ldr	r2, [pc, #280]	; (8002ac8 <HAL_TIM_Base_MspInit+0x138>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d000      	beq.n	80029b4 <HAL_TIM_Base_MspInit+0x24>
 80029b2:	e084      	b.n	8002abe <HAL_TIM_Base_MspInit+0x12e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0392      	lsls	r2, r2, #14
 80029ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 fbed 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 80029ce:	f7ff febd 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_TIM_Base_MspInit+0x13c>)
 80029d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_TIM_Base_MspInit+0x13c>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0109      	lsls	r1, r1, #4
 80029dc:	430a      	orrs	r2, r1
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_TIM_Base_MspInit+0x13c>)
 80029e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Channel1;
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 80029f0:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <HAL_TIM_Base_MspInit+0x144>)
 80029f2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 80029f6:	2215      	movs	r2, #21
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029fa:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 80029fc:	2210      	movs	r2, #16
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	0052      	lsls	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	00d2      	lsls	r2, r2, #3
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0192      	lsls	r2, r2, #6
 8002a28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fbc7 	bl	80031c0 <HAL_DMA_Init>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_Base_MspInit+0xaa>
    {
      Error_Handler();
 8002a36:	f7ff fe89 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_TIM_Base_MspInit+0x140>)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel2;
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_TIM_Base_MspInit+0x14c>)
 8002a4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a4e:	2216      	movs	r2, #22
 8002a50:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a54:	2210      	movs	r2, #16
 8002a56:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	0052      	lsls	r2, r2, #1
 8002a6a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	00d2      	lsls	r2, r2, #3
 8002a72:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	0192      	lsls	r2, r2, #6
 8002a80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fb9b 	bl	80031c0 <HAL_DMA_Init>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_Base_MspInit+0x102>
    {
      Error_Handler();
 8002a8e:	f7ff fe5d 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_TIM_Base_MspInit+0x148>)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	200d      	movs	r0, #13
 8002aa4:	f000 fb5a 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002aa8:	200d      	movs	r0, #13
 8002aaa:	f000 fb6c 	bl	8003186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	200e      	movs	r0, #14
 8002ab4:	f000 fb52 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ab8:	200e      	movs	r0, #14
 8002aba:	f000 fb64 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b017      	add	sp, #92	; 0x5c
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	20000910 	.word	0x20000910
 8002ad4:	40020408 	.word	0x40020408
 8002ad8:	20000970 	.word	0x20000970
 8002adc:	4002001c 	.word	0x4002001c

08002ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	240c      	movs	r4, #12
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	0018      	movs	r0, r3
 8002aee:	2314      	movs	r3, #20
 8002af0:	001a      	movs	r2, r3
 8002af2:	2100      	movs	r1, #0
 8002af4:	f006 faa1 	bl	800903a <memset>
  if(htim->Instance==TIM1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_TIM_MspPostInit+0x70>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d121      	bne.n	8002b46 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_TIM_MspPostInit+0x74>)
 8002b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_TIM_MspPostInit+0x74>)
 8002b08:	2102      	movs	r1, #2
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_TIM_MspPostInit+0x74>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002b1a:	0021      	movs	r1, r4
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2248      	movs	r2, #72	; 0x48
 8002b20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2202      	movs	r2, #2
 8002b26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2201      	movs	r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_TIM_MspPostInit+0x78>)
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f001 fc4f 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b009      	add	sp, #36	; 0x24
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	50000400 	.word	0x50000400

08002b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b09d      	sub	sp, #116	; 0x74
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	235c      	movs	r3, #92	; 0x5c
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	0018      	movs	r0, r3
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f006 fa63 	bl	800903a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b74:	2410      	movs	r4, #16
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	0018      	movs	r0, r3
 8002b7a:	234c      	movs	r3, #76	; 0x4c
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f006 fa5b 	bl	800903a <memset>
  if(huart->Instance==USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <HAL_UART_MspInit+0x120>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d172      	bne.n	8002c74 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f002 fb01 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ba6:	f7ff fdd1 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	01c9      	lsls	r1, r1, #7
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	01db      	lsls	r3, r3, #7
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_UART_MspInit+0x124>)
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bde:	215c      	movs	r1, #92	; 0x5c
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	22c0      	movs	r2, #192	; 0xc0
 8002be4:	00d2      	lsls	r2, r2, #3
 8002be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2202      	movs	r2, #2
 8002bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	187a      	adds	r2, r7, r1
 8002c02:	23a0      	movs	r3, #160	; 0xa0
 8002c04:	05db      	lsls	r3, r3, #23
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f001 fbeb 	bl	80043e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_UART_MspInit+0x12c>)
 8002c12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0192      	lsls	r2, r2, #6
 8002c44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fab9 	bl	80031c0 <HAL_DMA_Init>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002c52:	f7ff fd7b 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c5c:	505a      	str	r2, [r3, r1]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_UART_MspInit+0x128>)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	201b      	movs	r0, #27
 8002c6a:	f000 fa77 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c6e:	201b      	movs	r0, #27
 8002c70:	f000 fa89 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b01d      	add	sp, #116	; 0x74
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	20000a64 	.word	0x20000a64
 8002c88:	40020008 	.word	0x40020008

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb0:	f000 f968 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <DMA1_Channel1_IRQHandler+0x14>)
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 fc76 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	20000a64 	.word	0x20000a64

08002cd4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fc6a 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000970 	.word	0x20000970

08002cec <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fc5e 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000910 	.word	0x20000910

08002d04 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f002 fe2e 	bl	800596c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	200008c4 	.word	0x200008c4

08002d1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <TIM1_CC_IRQHandler+0x14>)
 8002d22:	0018      	movs	r0, r3
 8002d24:	f002 fe22 	bl	800596c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	200008c4 	.word	0x200008c4

08002d34 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f001 f94a 	bl	8003fd4 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f001 f946 	bl	8003fd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	200007fc 	.word	0x200007fc
 8002d54:	20000860 	.word	0x20000860

08002d58 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f001 f938 	bl	8003fd4 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f001 f934 	bl	8003fd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	200007fc 	.word	0x200007fc
 8002d78:	20000860 	.word	0x20000860

08002d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <USART1_IRQHandler+0x14>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f003 ffb4 	bl	8006cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	200009d0 	.word	0x200009d0

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	18d3      	adds	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f006 f8fc 	bl	8008fc0 <__errno>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	18d2      	adds	r2, r2, r3
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b006      	add	sp, #24
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20024000 	.word	0x20024000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20001024 	.word	0x20001024
 8002dfc:	20001040 	.word	0x20001040

08002e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
	  }

		Set_Brightness(Slot,46);
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7f1b      	ldrb	r3, [r3, #28]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d108      	bne.n	8002e2e <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002e1e:	2108      	movs	r1, #8
 8002e20:	0018      	movs	r0, r3
 8002e22:	f002 fcb3 	bl	800578c <HAL_TIM_PWM_Stop_DMA>
		slot1.datasentflag=1;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	679a      	str	r2, [r3, #120]	; 0x78
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
		slot2.datasentflag=1;
	}


}
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002e38:	2104      	movs	r1, #4
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f002 fca6 	bl	800578c <HAL_TIM_PWM_Stop_DMA>
		slot2.datasentflag=1;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200008c4 	.word	0x200008c4
 8002e54:	2000011c 	.word	0x2000011c
 8002e58:	20000464 	.word	0x20000464

08002e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e60:	f7ff ffce 	bl	8002e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <LoopForever+0xe>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <LoopForever+0x16>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e8a:	f006 f89f 	bl	8008fcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e8e:	f7fe fe8d 	bl	8001bac <main>

08002e92 <LoopForever>:

LoopForever:
  b LoopForever
 8002e92:	e7fe      	b.n	8002e92 <LoopForever>
  ldr   r0, =_estack
 8002e94:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002ea0:	08009358 	.word	0x08009358
  ldr r2, =_sbss
 8002ea4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002ea8:	2000103c 	.word	0x2000103c

08002eac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC1_COMP_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_Init+0x3c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_Init+0x3c>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0049      	lsls	r1, r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eca:	2003      	movs	r0, #3
 8002ecc:	f000 f810 	bl	8002ef0 <HAL_InitTick>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e001      	b.n	8002ee0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7ff fc54 	bl	8002788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef8:	230f      	movs	r3, #15
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_InitTick+0x88>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02b      	beq.n	8002f60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_InitTick+0x8c>)
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_InitTick+0x88>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	0019      	movs	r1, r3
 8002f12:	23fa      	movs	r3, #250	; 0xfa
 8002f14:	0098      	lsls	r0, r3, #2
 8002f16:	f7fd f8f5 	bl	8000104 <__udivsi3>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	0020      	movs	r0, r4
 8002f20:	f7fd f8f0 	bl	8000104 <__udivsi3>
 8002f24:	0003      	movs	r3, r0
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f93d 	bl	80031a6 <HAL_SYSTICK_Config>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d112      	bne.n	8002f56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d80a      	bhi.n	8002f4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	2301      	movs	r3, #1
 8002f3a:	425b      	negs	r3, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f90c 	bl	800315c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_InitTick+0x90>)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e00d      	b.n	8002f68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e008      	b.n	8002f68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f56:	230f      	movs	r3, #15
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e003      	b.n	8002f68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b005      	add	sp, #20
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	2000001c 	.word	0x2000001c
 8002f7c:	20000014 	.word	0x20000014
 8002f80:	20000018 	.word	0x20000018

08002f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_IncTick+0x1c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_IncTick+0x20>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	18d2      	adds	r2, r2, r3
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_IncTick+0x20>)
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	2000001c 	.word	0x2000001c
 8002fa4:	20001028 	.word	0x20001028

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b02      	ldr	r3, [pc, #8]	; (8002fb8 <HAL_GetTick+0x10>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	20001028 	.word	0x20001028

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff fff0 	bl	8002fa8 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	d005      	beq.n	8002fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_Delay+0x44>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	001a      	movs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	f7ff ffe0 	bl	8002fa8 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d8f7      	bhi.n	8002fe4 <HAL_Delay+0x28>
  {
  }
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	2000001c 	.word	0x2000001c

08003004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b7f      	cmp	r3, #127	; 0x7f
 8003016:	d809      	bhi.n	800302c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	001a      	movs	r2, r3
 800301e:	231f      	movs	r3, #31
 8003020:	401a      	ands	r2, r3
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_EnableIRQ+0x30>)
 8003024:	2101      	movs	r1, #1
 8003026:	4091      	lsls	r1, r2
 8003028:	000a      	movs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	0002      	movs	r2, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003046:	1dfb      	adds	r3, r7, #7
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b7f      	cmp	r3, #127	; 0x7f
 800304c:	d828      	bhi.n	80030a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800304e:	4a2f      	ldr	r2, [pc, #188]	; (800310c <__NVIC_SetPriority+0xd4>)
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	33c0      	adds	r3, #192	; 0xc0
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	589b      	ldr	r3, [r3, r2]
 800305e:	1dfa      	adds	r2, r7, #7
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	0011      	movs	r1, r2
 8003064:	2203      	movs	r2, #3
 8003066:	400a      	ands	r2, r1
 8003068:	00d2      	lsls	r2, r2, #3
 800306a:	21ff      	movs	r1, #255	; 0xff
 800306c:	4091      	lsls	r1, r2
 800306e:	000a      	movs	r2, r1
 8003070:	43d2      	mvns	r2, r2
 8003072:	401a      	ands	r2, r3
 8003074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	401a      	ands	r2, r3
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	0018      	movs	r0, r3
 8003084:	2303      	movs	r3, #3
 8003086:	4003      	ands	r3, r0
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800308c:	481f      	ldr	r0, [pc, #124]	; (800310c <__NVIC_SetPriority+0xd4>)
 800308e:	1dfb      	adds	r3, r7, #7
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	430a      	orrs	r2, r1
 8003098:	33c0      	adds	r3, #192	; 0xc0
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800309e:	e031      	b.n	8003104 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <__NVIC_SetPriority+0xd8>)
 80030a2:	1dfb      	adds	r3, r7, #7
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	0019      	movs	r1, r3
 80030a8:	230f      	movs	r3, #15
 80030aa:	400b      	ands	r3, r1
 80030ac:	3b08      	subs	r3, #8
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3306      	adds	r3, #6
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	3304      	adds	r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1dfa      	adds	r2, r7, #7
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	0011      	movs	r1, r2
 80030c0:	2203      	movs	r2, #3
 80030c2:	400a      	ands	r2, r1
 80030c4:	00d2      	lsls	r2, r2, #3
 80030c6:	21ff      	movs	r1, #255	; 0xff
 80030c8:	4091      	lsls	r1, r2
 80030ca:	000a      	movs	r2, r1
 80030cc:	43d2      	mvns	r2, r2
 80030ce:	401a      	ands	r2, r3
 80030d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	401a      	ands	r2, r3
 80030da:	1dfb      	adds	r3, r7, #7
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	0018      	movs	r0, r3
 80030e0:	2303      	movs	r3, #3
 80030e2:	4003      	ands	r3, r0
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030e8:	4809      	ldr	r0, [pc, #36]	; (8003110 <__NVIC_SetPriority+0xd8>)
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	001c      	movs	r4, r3
 80030f0:	230f      	movs	r3, #15
 80030f2:	4023      	ands	r3, r4
 80030f4:	3b08      	subs	r3, #8
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	430a      	orrs	r2, r1
 80030fa:	3306      	adds	r3, #6
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	18c3      	adds	r3, r0, r3
 8003100:	3304      	adds	r3, #4
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b003      	add	sp, #12
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	045b      	lsls	r3, r3, #17
 8003124:	429a      	cmp	r2, r3
 8003126:	d301      	bcc.n	800312c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003128:	2301      	movs	r3, #1
 800312a:	e010      	b.n	800314e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <SysTick_Config+0x44>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	3a01      	subs	r2, #1
 8003132:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003134:	2301      	movs	r3, #1
 8003136:	425b      	negs	r3, r3
 8003138:	2103      	movs	r1, #3
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff ff7c 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x44>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x44>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	210f      	movs	r1, #15
 8003168:	187b      	adds	r3, r7, r1
 800316a:	1c02      	adds	r2, r0, #0
 800316c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	187b      	adds	r3, r7, r1
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b25b      	sxtb	r3, r3
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff ff5d 	bl	8003038 <__NVIC_SetPriority>
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	0002      	movs	r2, r0
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b25b      	sxtb	r3, r3
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff ff33 	bl	8003004 <__NVIC_EnableIRQ>
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff ffaf 	bl	8003114 <SysTick_Config>
 80031b6:	0003      	movs	r3, r0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e091      	b.n	80032f6 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	001a      	movs	r2, r3
 80031d8:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_DMA_Init+0x140>)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d810      	bhi.n	8003200 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_DMA_Init+0x144>)
 80031e4:	4694      	mov	ip, r2
 80031e6:	4463      	add	r3, ip
 80031e8:	2114      	movs	r1, #20
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fc ff8a 	bl	8000104 <__udivsi3>
 80031f0:	0003      	movs	r3, r0
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a43      	ldr	r2, [pc, #268]	; (8003308 <HAL_DMA_Init+0x148>)
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
 80031fe:	e00f      	b.n	8003220 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_DMA_Init+0x14c>)
 8003206:	4694      	mov	ip, r2
 8003208:	4463      	add	r3, ip
 800320a:	2114      	movs	r1, #20
 800320c:	0018      	movs	r0, r3
 800320e:	f7fc ff79 	bl	8000104 <__udivsi3>
 8003212:	0003      	movs	r3, r0
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <HAL_DMA_Init+0x150>)
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2225      	movs	r2, #37	; 0x25
 8003224:	2102      	movs	r1, #2
 8003226:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4938      	ldr	r1, [pc, #224]	; (8003314 <HAL_DMA_Init+0x154>)
 8003234:	400a      	ands	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fa9f 	bl	80037b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	429a      	cmp	r2, r3
 8003280:	d102      	bne.n	8003288 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	217f      	movs	r1, #127	; 0x7f
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800329e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d011      	beq.n	80032cc <HAL_DMA_Init+0x10c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d80d      	bhi.n	80032cc <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fac8 	bl	8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e008      	b.n	80032de <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2225      	movs	r2, #37	; 0x25
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	2100      	movs	r1, #0
 80032f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40020407 	.word	0x40020407
 8003304:	bffdfff8 	.word	0xbffdfff8
 8003308:	40020000 	.word	0x40020000
 800330c:	bffdfbf8 	.word	0xbffdfbf8
 8003310:	40020400 	.word	0x40020400
 8003314:	ffff800f 	.word	0xffff800f

08003318 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2317      	movs	r3, #23
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_DMA_Start_IT+0x24>
 8003338:	2302      	movs	r3, #2
 800333a:	e06f      	b.n	800341c <HAL_DMA_Start_IT+0x104>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	2101      	movs	r1, #1
 8003342:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2225      	movs	r2, #37	; 0x25
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d157      	bne.n	8003400 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2225      	movs	r2, #37	; 0x25
 8003354:	2102      	movs	r1, #2
 8003356:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	438a      	bics	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f9e1 	bl	800373c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	210e      	movs	r1, #14
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00f      	b.n	80033b4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2104      	movs	r1, #4
 80033a0:	438a      	bics	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	210a      	movs	r1, #10
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	025b      	lsls	r3, r3, #9
 80033be:	4013      	ands	r3, r2
 80033c0:	d008      	beq.n	80033d4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0049      	lsls	r1, r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	0049      	lsls	r1, r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00a      	b.n	8003416 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2224      	movs	r2, #36	; 0x24
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800340e:	2317      	movs	r3, #23
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003416:	2317      	movs	r3, #23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	781b      	ldrb	r3, [r3, #0]
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b006      	add	sp, #24
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04f      	b.n	80034d6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2225      	movs	r2, #37	; 0x25
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d008      	beq.n	8003454 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	2100      	movs	r1, #0
 800344e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e040      	b.n	80034d6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	210e      	movs	r1, #14
 8003460:	438a      	bics	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346e:	491c      	ldr	r1, [pc, #112]	; (80034e0 <HAL_DMA_Abort+0xbc>)
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	221c      	movs	r2, #28
 800348a:	401a      	ands	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2101      	movs	r1, #1
 8003492:	4091      	lsls	r1, r2
 8003494:	000a      	movs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	490a      	ldr	r1, [pc, #40]	; (80034e0 <HAL_DMA_Abort+0xbc>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2225      	movs	r2, #37	; 0x25
 80034c8:	2101      	movs	r1, #1
 80034ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	fffffeff 	.word	0xfffffeff

080034e4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	210f      	movs	r1, #15
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2225      	movs	r2, #37	; 0x25
 80034f8:	5c9b      	ldrb	r3, [r3, r2]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d006      	beq.n	800350e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2204      	movs	r2, #4
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e048      	b.n	80035a0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	210e      	movs	r1, #14
 800351a:	438a      	bics	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	438a      	bics	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	491d      	ldr	r1, [pc, #116]	; (80035b0 <HAL_DMA_Abort_IT+0xcc>)
 800353a:	400a      	ands	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	221c      	movs	r2, #28
 8003544:	401a      	ands	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2101      	movs	r1, #1
 800354c:	4091      	lsls	r1, r2
 800354e:	000a      	movs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800355a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	4910      	ldr	r1, [pc, #64]	; (80035b0 <HAL_DMA_Abort_IT+0xcc>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800357c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2225      	movs	r2, #37	; 0x25
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	; 0x24
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	0010      	movs	r0, r2
 800359e:	4798      	blx	r3
    }
  }
  return status;
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	fffffeff 	.word	0xfffffeff

080035b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	221c      	movs	r2, #28
 80035d2:	4013      	ands	r3, r2
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	d026      	beq.n	800362e <HAL_DMA_IRQHandler+0x7a>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2204      	movs	r2, #4
 80035e4:	4013      	ands	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2220      	movs	r2, #32
 80035f0:	4013      	ands	r3, r2
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2104      	movs	r1, #4
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	221c      	movs	r2, #28
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2104      	movs	r1, #4
 8003612:	4091      	lsls	r1, r2
 8003614:	000a      	movs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d100      	bne.n	8003622 <HAL_DMA_IRQHandler+0x6e>
 8003620:	e080      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	0010      	movs	r0, r2
 800362a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800362c:	e07a      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	221c      	movs	r2, #28
 8003634:	4013      	ands	r3, r2
 8003636:	2202      	movs	r2, #2
 8003638:	409a      	lsls	r2, r3
 800363a:	0013      	movs	r3, r2
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	d03c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x108>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	d038      	beq.n	80036bc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2220      	movs	r2, #32
 8003652:	4013      	ands	r3, r2
 8003654:	d10b      	bne.n	800366e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	210a      	movs	r1, #10
 8003662:	438a      	bics	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2225      	movs	r2, #37	; 0x25
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	001a      	movs	r2, r3
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_DMA_IRQHandler+0x17c>)
 8003676:	429a      	cmp	r2, r3
 8003678:	d909      	bls.n	800368e <HAL_DMA_IRQHandler+0xda>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	221c      	movs	r2, #28
 8003680:	401a      	ands	r2, r3
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_DMA_IRQHandler+0x180>)
 8003684:	2102      	movs	r1, #2
 8003686:	4091      	lsls	r1, r2
 8003688:	000a      	movs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	e008      	b.n	80036a0 <HAL_DMA_IRQHandler+0xec>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	221c      	movs	r2, #28
 8003694:	401a      	ands	r2, r3
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_DMA_IRQHandler+0x184>)
 8003698:	2102      	movs	r1, #2
 800369a:	4091      	lsls	r1, r2
 800369c:	000a      	movs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d039      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	0010      	movs	r0, r2
 80036b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80036ba:	e033      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	221c      	movs	r2, #28
 80036c2:	4013      	ands	r3, r2
 80036c4:	2208      	movs	r2, #8
 80036c6:	409a      	lsls	r2, r3
 80036c8:	0013      	movs	r3, r2
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4013      	ands	r3, r2
 80036ce:	d02a      	beq.n	8003726 <HAL_DMA_IRQHandler+0x172>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2208      	movs	r2, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	d026      	beq.n	8003726 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	210e      	movs	r1, #14
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	221c      	movs	r2, #28
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2101      	movs	r1, #1
 80036f6:	4091      	lsls	r1, r2
 80036f8:	000a      	movs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2225      	movs	r2, #37	; 0x25
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2224      	movs	r2, #36	; 0x24
 800370e:	2100      	movs	r1, #0
 8003710:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	0010      	movs	r0, r2
 8003722:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46c0      	nop			; (mov r8, r8)
}
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	40020080 	.word	0x40020080
 8003734:	40020400 	.word	0x40020400
 8003738:	40020000 	.word	0x40020000

0800373c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003752:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	221c      	movs	r2, #28
 800376c:	401a      	ands	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2101      	movs	r1, #1
 8003774:	4091      	lsls	r1, r2
 8003776:	000a      	movs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d108      	bne.n	800379c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800379a:	e007      	b.n	80037ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d814      	bhi.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80037d2:	189a      	adds	r2, r3, r2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	001a      	movs	r2, r3
 80037de:	23ff      	movs	r3, #255	; 0xff
 80037e0:	4013      	ands	r3, r2
 80037e2:	3b08      	subs	r3, #8
 80037e4:	2114      	movs	r1, #20
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fc fc8c 	bl	8000104 <__udivsi3>
 80037ec:	0003      	movs	r3, r0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e014      	b.n	800381c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80037fc:	189a      	adds	r2, r3, r2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	001a      	movs	r2, r3
 8003808:	23ff      	movs	r3, #255	; 0xff
 800380a:	4013      	ands	r3, r2
 800380c:	3b08      	subs	r3, #8
 800380e:	2114      	movs	r1, #20
 8003810:	0018      	movs	r0, r3
 8003812:	f7fc fc77 	bl	8000104 <__udivsi3>
 8003816:	0003      	movs	r3, r0
 8003818:	3307      	adds	r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003820:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	221f      	movs	r2, #31
 8003826:	4013      	ands	r3, r2
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40020407 	.word	0x40020407
 800383c:	40020800 	.word	0x40020800
 8003840:	4002081c 	.word	0x4002081c
 8003844:	40020880 	.word	0x40020880

08003848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	227f      	movs	r2, #127	; 0x7f
 8003856:	4013      	ands	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800385e:	4694      	mov	ip, r2
 8003860:	4463      	add	r3, ip
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	001a      	movs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a07      	ldr	r2, [pc, #28]	; (800388c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800386e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3b01      	subs	r3, #1
 8003874:	2203      	movs	r2, #3
 8003876:	4013      	ands	r3, r2
 8003878:	2201      	movs	r2, #1
 800387a:	409a      	lsls	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b004      	add	sp, #16
 8003886:	bd80      	pop	{r7, pc}
 8003888:	1000823f 	.word	0x1000823f
 800388c:	40020940 	.word	0x40020940

08003890 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e14e      	b.n	8003b40 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	225c      	movs	r2, #92	; 0x5c
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	225d      	movs	r2, #93	; 0x5d
 80038b2:	2100      	movs	r1, #0
 80038b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fe ff89 	bl	80027d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2110      	movs	r1, #16
 80038ca:	438a      	bics	r2, r1
 80038cc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ce:	f7ff fb6b 	bl	8002fa8 <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038d6:	e012      	b.n	80038fe <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038d8:	f7ff fb66 	bl	8002fa8 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b0a      	cmp	r3, #10
 80038e4:	d90b      	bls.n	80038fe <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	2201      	movs	r2, #1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	225c      	movs	r2, #92	; 0x5c
 80038f6:	2103      	movs	r1, #3
 80038f8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e120      	b.n	8003b40 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	2b08      	cmp	r3, #8
 800390a:	d0e5      	beq.n	80038d8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7ff fb44 	bl	8002fa8 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003924:	e012      	b.n	800394c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003926:	f7ff fb3f 	bl	8002fa8 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b0a      	cmp	r3, #10
 8003932:	d90b      	bls.n	800394c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003938:	2201      	movs	r2, #1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	225c      	movs	r2, #92	; 0x5c
 8003944:	2103      	movs	r1, #3
 8003946:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0f9      	b.n	8003b40 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2201      	movs	r2, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d0e6      	beq.n	8003926 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2102      	movs	r1, #2
 8003964:	430a      	orrs	r2, r1
 8003966:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a76      	ldr	r2, [pc, #472]	; (8003b48 <HAL_FDCAN_Init+0x2b8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d103      	bne.n	800397a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003972:	4a76      	ldr	r2, [pc, #472]	; (8003b4c <HAL_FDCAN_Init+0x2bc>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7c1b      	ldrb	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d108      	bne.n	8003994 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	438a      	bics	r2, r1
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e007      	b.n	80039a4 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2140      	movs	r1, #64	; 0x40
 80039a0:	430a      	orrs	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7c5b      	ldrb	r3, [r3, #17]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d109      	bne.n	80039c0 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	01c9      	lsls	r1, r1, #7
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
 80039be:	e007      	b.n	80039d0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4961      	ldr	r1, [pc, #388]	; (8003b50 <HAL_FDCAN_Init+0x2c0>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7c9b      	ldrb	r3, [r3, #18]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d108      	bne.n	80039ea <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	495c      	ldr	r1, [pc, #368]	; (8003b54 <HAL_FDCAN_Init+0x2c4>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]
 80039e8:	e008      	b.n	80039fc <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	0149      	lsls	r1, r1, #5
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	4a55      	ldr	r2, [pc, #340]	; (8003b58 <HAL_FDCAN_Init+0x2c8>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	21a4      	movs	r1, #164	; 0xa4
 8003a20:	438a      	bics	r2, r1
 8003a22:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2110      	movs	r1, #16
 8003a30:	438a      	bics	r2, r1
 8003a32:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d108      	bne.n	8003a4e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2104      	movs	r1, #4
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
 8003a4c:	e02c      	b.n	8003aa8 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d028      	beq.n	8003aa8 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d01c      	beq.n	8003a98 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2110      	movs	r1, #16
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d110      	bne.n	8003aa8 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2120      	movs	r1, #32
 8003a92:	430a      	orrs	r2, r1
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ab8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ad0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ad2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	23c0      	movs	r3, #192	; 0xc0
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d115      	bne.n	8003b0c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	3b01      	subs	r3, #1
 8003aec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003aee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	3b01      	subs	r3, #1
 8003af6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003af8:	431a      	orrs	r2, r3
 8003afa:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	3b01      	subs	r3, #1
 8003b02:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b08:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b0a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	22c0      	movs	r2, #192	; 0xc0
 8003b12:	5899      	ldr	r1, [r3, r2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	21c0      	movs	r1, #192	; 0xc0
 8003b20:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fbf1 	bl	800430c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	225c      	movs	r2, #92	; 0x5c
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40006400 	.word	0x40006400
 8003b4c:	40006500 	.word	0x40006500
 8003b50:	ffffbfff 	.word	0xffffbfff
 8003b54:	ffffefff 	.word	0xffffefff
 8003b58:	fffffcff 	.word	0xfffffcff

08003b5c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003b66:	2017      	movs	r0, #23
 8003b68:	183b      	adds	r3, r7, r0
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	215c      	movs	r1, #92	; 0x5c
 8003b6e:	5c52      	ldrb	r2, [r2, r1]
 8003b70:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003b72:	0002      	movs	r2, r0
 8003b74:	18bb      	adds	r3, r7, r2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d003      	beq.n	8003b84 <HAL_FDCAN_ConfigFilter+0x28>
 8003b7c:	18bb      	adds	r3, r7, r2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d13d      	bne.n	8003c00 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d119      	bne.n	8003bc0 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003b98:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003ba0:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	18d3      	adds	r3, r2, r3
 8003bb6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e01d      	b.n	8003bfc <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	075a      	lsls	r2, r3, #29
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	079a      	lsls	r2, r3, #30
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e006      	b.n	8003c0e <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	2202      	movs	r2, #2
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
  }
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b006      	add	sp, #24
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	225c      	movs	r2, #92	; 0x5c
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d110      	bne.n	8003c4c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	225c      	movs	r2, #92	; 0x5c
 8003c2e:	2102      	movs	r1, #2
 8003c30:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	438a      	bics	r2, r1
 8003c40:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e006      	b.n	8003c5a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	2204      	movs	r2, #4
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
  }
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b002      	add	sp, #8
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c72:	201b      	movs	r0, #27
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	215c      	movs	r1, #92	; 0x5c
 8003c7a:	5c52      	ldrb	r2, [r2, r1]
 8003c7c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c7e:	183b      	adds	r3, r7, r0
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d000      	beq.n	8003c88 <HAL_FDCAN_GetRxMessage+0x24>
 8003c86:	e0c1      	b.n	8003e0c <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d121      	bne.n	8003cd2 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2290      	movs	r2, #144	; 0x90
 8003c94:	589b      	ldr	r3, [r3, r2]
 8003c96:	220f      	movs	r2, #15
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d108      	bne.n	8003cae <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0b5      	b.n	8003e1a <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2290      	movs	r2, #144	; 0x90
 8003cb4:	589b      	ldr	r3, [r3, r2]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	2203      	movs	r2, #3
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	18cb      	adds	r3, r1, r3
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	e020      	b.n	8003d14 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2298      	movs	r2, #152	; 0x98
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	220f      	movs	r2, #15
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d108      	bne.n	8003cf2 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	0052      	lsls	r2, r2, #1
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e093      	b.n	8003e1a <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2298      	movs	r2, #152	; 0x98
 8003cf8:	589b      	ldr	r3, [r3, r2]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	0013      	movs	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	18cb      	adds	r3, r1, r3
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	05db      	lsls	r3, r3, #23
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	055b      	lsls	r3, r3, #21
 8003d32:	0d5a      	lsrs	r2, r3, #21
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e005      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	059b      	lsls	r3, r3, #22
 8003d4e:	401a      	ands	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0fdb      	lsrs	r3, r3, #31
 8003d5a:	07da      	lsls	r2, r3, #31
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	3304      	adds	r3, #4
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	0c1a      	lsrs	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	23f0      	movs	r3, #240	; 0xf0
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	035b      	lsls	r3, r3, #13
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	2380      	movs	r3, #128	; 0x80
 8003d94:	039b      	lsls	r3, r3, #14
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0e1b      	lsrs	r3, r3, #24
 8003da2:	227f      	movs	r2, #127	; 0x7f
 8003da4:	401a      	ands	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0fda      	lsrs	r2, r3, #31
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	3304      	adds	r3, #4
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	e00a      	b.n	8003dda <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	18d2      	adds	r2, r2, r3
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	18cb      	adds	r3, r1, r3
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	623b      	str	r3, [r7, #32]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	001a      	movs	r2, r3
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d3eb      	bcc.n	8003dc4 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d105      	bne.n	8003dfe <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2194      	movs	r1, #148	; 0x94
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	505a      	str	r2, [r3, r1]
 8003dfc:	e004      	b.n	8003e08 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	219c      	movs	r1, #156	; 0x9c
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e006      	b.n	8003e1a <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	2208      	movs	r2, #8
 8003e12:	431a      	orrs	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
  }
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b00a      	add	sp, #40	; 0x28
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	080092a0 	.word	0x080092a0

08003e28 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e34:	2017      	movs	r0, #23
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	215c      	movs	r1, #92	; 0x5c
 8003e3c:	5c52      	ldrb	r2, [r2, r1]
 8003e3e:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e40:	0002      	movs	r2, r0
 8003e42:	18bb      	adds	r3, r7, r2
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d004      	beq.n	8003e54 <HAL_FDCAN_ActivateNotification+0x2c>
 8003e4a:	18bb      	adds	r3, r7, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d000      	beq.n	8003e54 <HAL_FDCAN_ActivateNotification+0x2c>
 8003e52:	e0b4      	b.n	8003fbe <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	d003      	beq.n	8003e6c <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2201      	movs	r2, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d034      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2238      	movs	r2, #56	; 0x38
 8003e70:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e72:	d003      	beq.n	8003e7c <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2202      	movs	r2, #2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d02c      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	23e0      	movs	r3, #224	; 0xe0
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003e84:	d003      	beq.n	8003e8e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d023      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	23f0      	movs	r3, #240	; 0xf0
 8003e92:	015b      	lsls	r3, r3, #5
 8003e94:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003e96:	d003      	beq.n	8003ea0 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d01a      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	23e0      	movs	r3, #224	; 0xe0
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ea8:	d003      	beq.n	8003eb2 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2210      	movs	r2, #16
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d011      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	23c0      	movs	r3, #192	; 0xc0
 8003eb6:	029b      	lsls	r3, r3, #10
 8003eb8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003eba:	d003      	beq.n	8003ec4 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d008      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	23fc      	movs	r3, #252	; 0xfc
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2207      	movs	r2, #7
 8003eea:	4013      	ands	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d134      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2238      	movs	r2, #56	; 0x38
 8003efa:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003efc:	d003      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d12c      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	23e0      	movs	r3, #224	; 0xe0
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f0e:	d003      	beq.n	8003f18 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2204      	movs	r2, #4
 8003f14:	4013      	ands	r3, r2
 8003f16:	d123      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	23f0      	movs	r3, #240	; 0xf0
 8003f1c:	015b      	lsls	r3, r3, #5
 8003f1e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f20:	d003      	beq.n	8003f2a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2208      	movs	r2, #8
 8003f26:	4013      	ands	r3, r2
 8003f28:	d11a      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	23e0      	movs	r3, #224	; 0xe0
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f32:	d003      	beq.n	8003f3c <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2210      	movs	r2, #16
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d111      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	23c0      	movs	r3, #192	; 0xc0
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f44:	d003      	beq.n	8003f4e <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	23fc      	movs	r3, #252	; 0xfc
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f56:	d00b      	beq.n	8003f70 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d007      	beq.n	8003f70 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	4013      	ands	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	22dc      	movs	r2, #220	; 0xdc
 8003f7e:	5899      	ldr	r1, [r3, r2]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	21dc      	movs	r1, #220	; 0xdc
 8003f8a:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	22e0      	movs	r2, #224	; 0xe0
 8003f9c:	5899      	ldr	r1, [r3, r2]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	21e0      	movs	r1, #224	; 0xe0
 8003fa8:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e006      	b.n	8003fcc <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
  }
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b006      	add	sp, #24
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fe2:	23e0      	movs	r3, #224	; 0xe0
 8003fe4:	015b      	lsls	r3, r3, #5
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	4013      	ands	r3, r2
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	4013      	ands	r3, r2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	2238      	movs	r2, #56	; 0x38
 8004016:	4013      	ands	r3, r2
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	4013      	ands	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800402c:	23f1      	movs	r3, #241	; 0xf1
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	4013      	ands	r3, r2
 8004032:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	4013      	ands	r3, r2
 800403e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004046:	23e0      	movs	r3, #224	; 0xe0
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	4013      	ands	r3, r2
 800404c:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4013      	ands	r3, r2
 8004058:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	001a      	movs	r2, r3
 8004070:	2301      	movs	r3, #1
 8004072:	4013      	ands	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	001a      	movs	r2, r3
 800407c:	2301      	movs	r3, #1
 800407e:	4013      	ands	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f000 f924 	bl	80042da <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	001a      	movs	r2, r3
 8004098:	2301      	movs	r3, #1
 800409a:	4013      	ands	r3, r2
 800409c:	d01c      	beq.n	80040d8 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	001a      	movs	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	d016      	beq.n	80040d8 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	22d8      	movs	r2, #216	; 0xd8
 80040b0:	589b      	ldr	r3, [r3, r2]
 80040b2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	22e0      	movs	r2, #224	; 0xe0
 80040ba:	589a      	ldr	r2, [r3, r2]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	0052      	lsls	r2, r2, #1
 80040ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f8e8 	bl	80042a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80040e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0011      	movs	r1, r2
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f8b8 	bl	8004262 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0011      	movs	r1, r2
 8004106:	0018      	movs	r0, r3
 8004108:	f7fd f8ca 	bl	80012a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004118:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	0011      	movs	r1, r2
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f8a7 	bl	8004274 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0a5b      	lsrs	r3, r3, #9
 800412a:	001a      	movs	r2, r3
 800412c:	2301      	movs	r3, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	0a5b      	lsrs	r3, r3, #9
 8004136:	001a      	movs	r2, r3
 8004138:	2301      	movs	r3, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d008      	beq.n	8004150 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	0092      	lsls	r2, r2, #2
 8004146:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0018      	movs	r0, r3
 800414c:	f000 f89b 	bl	8004286 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	09db      	lsrs	r3, r3, #7
 8004154:	001a      	movs	r2, r3
 8004156:	2301      	movs	r3, #1
 8004158:	4013      	ands	r3, r2
 800415a:	d01b      	beq.n	8004194 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	09db      	lsrs	r3, r3, #7
 8004160:	001a      	movs	r2, r3
 8004162:	2301      	movs	r3, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d015      	beq.n	8004194 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	22d4      	movs	r2, #212	; 0xd4
 800416e:	589b      	ldr	r3, [r3, r2]
 8004170:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	22dc      	movs	r2, #220	; 0xdc
 8004178:	589a      	ldr	r2, [r3, r2]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f881 	bl	8004296 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	0b5b      	lsrs	r3, r3, #13
 8004198:	001a      	movs	r2, r3
 800419a:	2301      	movs	r3, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	0b5b      	lsrs	r3, r3, #13
 80041a4:	001a      	movs	r2, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d008      	beq.n	80041be <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	0192      	lsls	r2, r2, #6
 80041b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f87e 	bl	80042ba <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	0bdb      	lsrs	r3, r3, #15
 80041c2:	001a      	movs	r2, r3
 80041c4:	2301      	movs	r3, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	0bdb      	lsrs	r3, r3, #15
 80041ce:	001a      	movs	r2, r3
 80041d0:	2301      	movs	r3, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	d008      	beq.n	80041e8 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	0212      	lsls	r2, r2, #8
 80041de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 f871 	bl	80042ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	0b9b      	lsrs	r3, r3, #14
 80041ec:	001a      	movs	r2, r3
 80041ee:	2301      	movs	r3, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d010      	beq.n	8004216 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	0b9b      	lsrs	r3, r3, #14
 80041f8:	001a      	movs	r2, r3
 80041fa:	2301      	movs	r3, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00a      	beq.n	8004216 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	01d2      	lsls	r2, r2, #7
 8004208:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f865 	bl	80042fa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 f848 	bl	80042ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b00c      	add	sp, #48	; 0x30
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b002      	add	sp, #8
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b002      	add	sp, #8
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004314:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8004316:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d105      	bne.n	800432e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	22d4      	movs	r2, #212	; 0xd4
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	4694      	mov	ip, r2
 800432a:	4463      	add	r3, ip
 800432c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	589b      	ldr	r3, [r3, r2]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	041a      	lsls	r2, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3370      	adds	r3, #112	; 0x70
 8004356:	001a      	movs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	589b      	ldr	r3, [r3, r2]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004366:	4013      	ands	r3, r2
 8004368:	0019      	movs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	061a      	lsls	r2, r3, #24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	33b0      	adds	r3, #176	; 0xb0
 800437e:	001a      	movs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3389      	adds	r3, #137	; 0x89
 8004388:	33ff      	adds	r3, #255	; 0xff
 800438a:	001a      	movs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2298      	movs	r2, #152	; 0x98
 8004394:	0092      	lsls	r2, r2, #2
 8004396:	189a      	adds	r2, r3, r2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	229e      	movs	r2, #158	; 0x9e
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	189a      	adds	r2, r3, r2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e005      	b.n	80043ba <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	22d4      	movs	r2, #212	; 0xd4
 80043be:	0092      	lsls	r2, r2, #2
 80043c0:	4694      	mov	ip, r2
 80043c2:	4463      	add	r3, ip
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3f1      	bcc.n	80043ae <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b004      	add	sp, #16
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	4000b400 	.word	0x4000b400
 80043d8:	40006800 	.word	0x40006800
 80043dc:	ffe0ffff 	.word	0xffe0ffff
 80043e0:	f0ffffff 	.word	0xf0ffffff

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f2:	e14d      	b.n	8004690 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4091      	lsls	r1, r2
 80043fe:	000a      	movs	r2, r1
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d100      	bne.n	800440c <HAL_GPIO_Init+0x28>
 800440a:	e13e      	b.n	800468a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	4013      	ands	r3, r2
 8004414:	2b01      	cmp	r3, #1
 8004416:	d005      	beq.n	8004424 <HAL_GPIO_Init+0x40>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	4013      	ands	r3, r2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d130      	bne.n	8004486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	409a      	lsls	r2, r3
 8004432:	0013      	movs	r3, r2
 8004434:	43da      	mvns	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445a:	2201      	movs	r2, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
 8004460:	0013      	movs	r3, r2
 8004462:	43da      	mvns	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	2201      	movs	r2, #1
 8004472:	401a      	ands	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	409a      	lsls	r2, r3
 8004478:	0013      	movs	r3, r2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2203      	movs	r2, #3
 800448c:	4013      	ands	r3, r2
 800448e:	2b03      	cmp	r3, #3
 8004490:	d017      	beq.n	80044c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	409a      	lsls	r2, r3
 80044a0:	0013      	movs	r3, r2
 80044a2:	43da      	mvns	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	0013      	movs	r3, r2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2203      	movs	r2, #3
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d123      	bne.n	8004516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	08da      	lsrs	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3208      	adds	r2, #8
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	58d3      	ldr	r3, [r2, r3]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2207      	movs	r2, #7
 80044e0:	4013      	ands	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	43da      	mvns	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2107      	movs	r1, #7
 80044fa:	400b      	ands	r3, r1
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	0092      	lsls	r2, r2, #2
 8004512:	6939      	ldr	r1, [r7, #16]
 8004514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	43da      	mvns	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2203      	movs	r2, #3
 8004534:	401a      	ands	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	0013      	movs	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	23c0      	movs	r3, #192	; 0xc0
 8004550:	029b      	lsls	r3, r3, #10
 8004552:	4013      	ands	r3, r2
 8004554:	d100      	bne.n	8004558 <HAL_GPIO_Init+0x174>
 8004556:	e098      	b.n	800468a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004558:	4a53      	ldr	r2, [pc, #332]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	3318      	adds	r3, #24
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	589b      	ldr	r3, [r3, r2]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2203      	movs	r2, #3
 800456a:	4013      	ands	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	220f      	movs	r2, #15
 8004570:	409a      	lsls	r2, r3
 8004572:	0013      	movs	r3, r2
 8004574:	43da      	mvns	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	23a0      	movs	r3, #160	; 0xa0
 8004580:	05db      	lsls	r3, r3, #23
 8004582:	429a      	cmp	r2, r3
 8004584:	d019      	beq.n	80045ba <HAL_GPIO_Init+0x1d6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a48      	ldr	r2, [pc, #288]	; (80046ac <HAL_GPIO_Init+0x2c8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_GPIO_Init+0x1d2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a47      	ldr	r2, [pc, #284]	; (80046b0 <HAL_GPIO_Init+0x2cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00d      	beq.n	80045b2 <HAL_GPIO_Init+0x1ce>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <HAL_GPIO_Init+0x1ca>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a45      	ldr	r2, [pc, #276]	; (80046b8 <HAL_GPIO_Init+0x2d4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_GPIO_Init+0x1c6>
 80045a6:	2304      	movs	r3, #4
 80045a8:	e008      	b.n	80045bc <HAL_GPIO_Init+0x1d8>
 80045aa:	2305      	movs	r3, #5
 80045ac:	e006      	b.n	80045bc <HAL_GPIO_Init+0x1d8>
 80045ae:	2303      	movs	r3, #3
 80045b0:	e004      	b.n	80045bc <HAL_GPIO_Init+0x1d8>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_Init+0x1d8>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_GPIO_Init+0x1d8>
 80045ba:	2300      	movs	r3, #0
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	2103      	movs	r1, #3
 80045c0:	400a      	ands	r2, r1
 80045c2:	00d2      	lsls	r2, r2, #3
 80045c4:	4093      	lsls	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80045cc:	4936      	ldr	r1, [pc, #216]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3318      	adds	r3, #24
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045da:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	035b      	lsls	r3, r3, #13
 80045f2:	4013      	ands	r3, r2
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045fe:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43da      	mvns	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	039b      	lsls	r3, r3, #14
 800461c:	4013      	ands	r3, r2
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 8004630:	2384      	movs	r3, #132	; 0x84
 8004632:	58d3      	ldr	r3, [r2, r3]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43da      	mvns	r2, r3
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	029b      	lsls	r3, r3, #10
 8004648:	4013      	ands	r3, r2
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004654:	4914      	ldr	r1, [pc, #80]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 8004656:	2284      	movs	r2, #132	; 0x84
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800465c:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	58d3      	ldr	r3, [r2, r3]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	43da      	mvns	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	025b      	lsls	r3, r3, #9
 8004676:	4013      	ands	r3, r2
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004682:	4909      	ldr	r1, [pc, #36]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	40da      	lsrs	r2, r3
 8004698:	1e13      	subs	r3, r2, #0
 800469a:	d000      	beq.n	800469e <HAL_GPIO_Init+0x2ba>
 800469c:	e6aa      	b.n	80043f4 <HAL_GPIO_Init+0x10>
  }
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b006      	add	sp, #24
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021800 	.word	0x40021800
 80046ac:	50000400 	.word	0x50000400
 80046b0:	50000800 	.word	0x50000800
 80046b4:	50000c00 	.word	0x50000c00
 80046b8:	50001000 	.word	0x50001000

080046bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	0008      	movs	r0, r1
 80046c6:	0011      	movs	r1, r2
 80046c8:	1cbb      	adds	r3, r7, #2
 80046ca:	1c02      	adds	r2, r0, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	1c0a      	adds	r2, r1, #0
 80046d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046d4:	1c7b      	adds	r3, r7, #1
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046dc:	1cbb      	adds	r3, r7, #2
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046e4:	e003      	b.n	80046ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046e6:	1cbb      	adds	r3, r7, #2
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d11f      	bne.n	800475c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	0013      	movs	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	189b      	adds	r3, r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4912      	ldr	r1, [pc, #72]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800472a:	0018      	movs	r0, r3
 800472c:	f7fb fcea 	bl	8000104 <__udivsi3>
 8004730:	0003      	movs	r3, r0
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004736:	e008      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b01      	subs	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e001      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e009      	b.n	800475e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	401a      	ands	r2, r3
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	429a      	cmp	r2, r3
 800475a:	d0ed      	beq.n	8004738 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40007000 	.word	0x40007000
 800476c:	fffff9ff 	.word	0xfffff9ff
 8004770:	20000014 	.word	0x20000014
 8004774:	000f4240 	.word	0x000f4240

08004778 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <LL_RCC_GetAPB1Prescaler+0x14>)
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	23e0      	movs	r3, #224	; 0xe0
 8004782:	01db      	lsls	r3, r3, #7
 8004784:	4013      	ands	r3, r2
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f000 fb50 	bl	8004e44 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	d100      	bne.n	80047b0 <HAL_RCC_OscConfig+0x20>
 80047ae:	e07c      	b.n	80048aa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b0:	4bc3      	ldr	r3, [pc, #780]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2238      	movs	r2, #56	; 0x38
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ba:	4bc1      	ldr	r3, [pc, #772]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2203      	movs	r2, #3
 80047c0:	4013      	ands	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_OscConfig+0x40>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d002      	beq.n	80047d6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d10b      	bne.n	80047ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d6:	4bba      	ldr	r3, [pc, #744]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	029b      	lsls	r3, r3, #10
 80047de:	4013      	ands	r3, r2
 80047e0:	d062      	beq.n	80048a8 <HAL_RCC_OscConfig+0x118>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d15e      	bne.n	80048a8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e32a      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_OscConfig+0x7a>
 80047fa:	4bb1      	ldr	r3, [pc, #708]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4bb0      	ldr	r3, [pc, #704]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	0249      	lsls	r1, r1, #9
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e020      	b.n	800484c <HAL_RCC_OscConfig+0xbc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	23a0      	movs	r3, #160	; 0xa0
 8004810:	02db      	lsls	r3, r3, #11
 8004812:	429a      	cmp	r2, r3
 8004814:	d10e      	bne.n	8004834 <HAL_RCC_OscConfig+0xa4>
 8004816:	4baa      	ldr	r3, [pc, #680]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4ba9      	ldr	r3, [pc, #676]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	02c9      	lsls	r1, r1, #11
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	4ba6      	ldr	r3, [pc, #664]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4ba5      	ldr	r3, [pc, #660]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800482a:	2180      	movs	r1, #128	; 0x80
 800482c:	0249      	lsls	r1, r1, #9
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xbc>
 8004834:	4ba2      	ldr	r3, [pc, #648]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4ba1      	ldr	r3, [pc, #644]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800483a:	49a2      	ldr	r1, [pc, #648]	; (8004ac4 <HAL_RCC_OscConfig+0x334>)
 800483c:	400a      	ands	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	4b9f      	ldr	r3, [pc, #636]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b9e      	ldr	r3, [pc, #632]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004846:	49a0      	ldr	r1, [pc, #640]	; (8004ac8 <HAL_RCC_OscConfig+0x338>)
 8004848:	400a      	ands	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe fba8 	bl	8002fa8 <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485e:	f7fe fba3 	bl	8002fa8 <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e2e9      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004870:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	4013      	ands	r3, r2
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0xce>
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fe fb93 	bl	8002fa8 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fe fb8e 	bl	8002fa8 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e2d4      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800489a:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0xf8>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	d100      	bne.n	80048b6 <HAL_RCC_OscConfig+0x126>
 80048b4:	e099      	b.n	80049ea <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b6:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2238      	movs	r2, #56	; 0x38
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c0:	4b7f      	ldr	r3, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2203      	movs	r2, #3
 80048c6:	4013      	ands	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d102      	bne.n	80048d6 <HAL_RCC_OscConfig+0x146>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d002      	beq.n	80048dc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d135      	bne.n	8004948 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	4b78      	ldr	r3, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4013      	ands	r3, r2
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_OscConfig+0x164>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e2a7      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b72      	ldr	r3, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a74      	ldr	r2, [pc, #464]	; (8004acc <HAL_RCC_OscConfig+0x33c>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d112      	bne.n	8004936 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6e      	ldr	r2, [pc, #440]	; (8004ad0 <HAL_RCC_OscConfig+0x340>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004924:	4b66      	ldr	r3, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0adb      	lsrs	r3, r3, #11
 800492a:	2207      	movs	r2, #7
 800492c:	4013      	ands	r3, r2
 800492e:	4a69      	ldr	r2, [pc, #420]	; (8004ad4 <HAL_RCC_OscConfig+0x344>)
 8004930:	40da      	lsrs	r2, r3
 8004932:	4b69      	ldr	r3, [pc, #420]	; (8004ad8 <HAL_RCC_OscConfig+0x348>)
 8004934:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004936:	4b69      	ldr	r3, [pc, #420]	; (8004adc <HAL_RCC_OscConfig+0x34c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0018      	movs	r0, r3
 800493c:	f7fe fad8 	bl	8002ef0 <HAL_InitTick>
 8004940:	1e03      	subs	r3, r0, #0
 8004942:	d051      	beq.n	80049e8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e27d      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d030      	beq.n	80049b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004950:	4b5b      	ldr	r3, [pc, #364]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5e      	ldr	r2, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x340>)
 8004956:	4013      	ands	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	4b58      	ldr	r3, [pc, #352]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b56      	ldr	r3, [pc, #344]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	0049      	lsls	r1, r1, #1
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fe fb19 	bl	8002fa8 <HAL_GetTick>
 8004976:	0003      	movs	r3, r0
 8004978:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fe fb14 	bl	8002fa8 <HAL_GetTick>
 8004980:	0002      	movs	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e25a      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800498e:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4013      	ands	r3, r2
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4a4b      	ldr	r2, [pc, #300]	; (8004acc <HAL_RCC_OscConfig+0x33c>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	e01b      	b.n	80049ea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049b8:	4949      	ldr	r1, [pc, #292]	; (8004ae0 <HAL_RCC_OscConfig+0x350>)
 80049ba:	400a      	ands	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fe faf3 	bl	8002fa8 <HAL_GetTick>
 80049c2:	0003      	movs	r3, r0
 80049c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fe faee 	bl	8002fa8 <HAL_GetTick>
 80049cc:	0002      	movs	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e234      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4013      	ands	r3, r2
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x238>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2208      	movs	r2, #8
 80049f0:	4013      	ands	r3, r2
 80049f2:	d047      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049f4:	4b32      	ldr	r3, [pc, #200]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2238      	movs	r2, #56	; 0x38
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b18      	cmp	r3, #24
 80049fe:	d10a      	bne.n	8004a16 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d03c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2f4>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d138      	bne.n	8004a84 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e216      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a24:	2101      	movs	r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fe fabd 	bl	8002fa8 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a34:	f7fe fab8 	bl	8002fa8 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1fe      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d0f1      	beq.n	8004a34 <HAL_RCC_OscConfig+0x2a4>
 8004a50:	e018      	b.n	8004a84 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	438a      	bics	r2, r1
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fe faa3 	bl	8002fa8 <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a68:	f7fe fa9e 	bl	8002fa8 <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1e4      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	2202      	movs	r2, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	d1f1      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d100      	bne.n	8004a90 <HAL_RCC_OscConfig+0x300>
 8004a8e:	e0c7      	b.n	8004c20 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a90:	231f      	movs	r3, #31
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2238      	movs	r2, #56	; 0x38
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d11f      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d100      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x320>
 8004aae:	e0b7      	b.n	8004c20 <HAL_RCC_OscConfig+0x490>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d000      	beq.n	8004aba <HAL_RCC_OscConfig+0x32a>
 8004ab8:	e0b2      	b.n	8004c20 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e1c2      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	fffeffff 	.word	0xfffeffff
 8004ac8:	fffbffff 	.word	0xfffbffff
 8004acc:	ffff80ff 	.word	0xffff80ff
 8004ad0:	ffffc7ff 	.word	0xffffc7ff
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	20000014 	.word	0x20000014
 8004adc:	20000018 	.word	0x20000018
 8004ae0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ae4:	4bb5      	ldr	r3, [pc, #724]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	055b      	lsls	r3, r3, #21
 8004aec:	4013      	ands	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_OscConfig+0x364>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x366>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d011      	beq.n	8004b1e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	4bb0      	ldr	r3, [pc, #704]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afe:	4baf      	ldr	r3, [pc, #700]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	0549      	lsls	r1, r1, #21
 8004b04:	430a      	orrs	r2, r1
 8004b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b08:	4bac      	ldr	r3, [pc, #688]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	055b      	lsls	r3, r3, #21
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b16:	231f      	movs	r3, #31
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1e:	4ba8      	ldr	r3, [pc, #672]	; (8004dc0 <HAL_RCC_OscConfig+0x630>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4013      	ands	r3, r2
 8004b28:	d11a      	bne.n	8004b60 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b2a:	4ba5      	ldr	r3, [pc, #660]	; (8004dc0 <HAL_RCC_OscConfig+0x630>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4ba4      	ldr	r3, [pc, #656]	; (8004dc0 <HAL_RCC_OscConfig+0x630>)
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	0049      	lsls	r1, r1, #1
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b38:	f7fe fa36 	bl	8002fa8 <HAL_GetTick>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fe fa31 	bl	8002fa8 <HAL_GetTick>
 8004b46:	0002      	movs	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e177      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b54:	4b9a      	ldr	r3, [pc, #616]	; (8004dc0 <HAL_RCC_OscConfig+0x630>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3e6>
 8004b68:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6c:	4b93      	ldr	r3, [pc, #588]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x420>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x408>
 8004b7e:	4b8f      	ldr	r3, [pc, #572]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b82:	4b8e      	ldr	r3, [pc, #568]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b84:	2104      	movs	r1, #4
 8004b86:	430a      	orrs	r2, r1
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b8a:	4b8c      	ldr	r3, [pc, #560]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b8e:	4b8b      	ldr	r3, [pc, #556]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b90:	2101      	movs	r1, #1
 8004b92:	430a      	orrs	r2, r1
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x420>
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b9c:	4b87      	ldr	r3, [pc, #540]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ba4:	4b85      	ldr	r3, [pc, #532]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba8:	4b84      	ldr	r3, [pc, #528]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004baa:	2104      	movs	r1, #4
 8004bac:	438a      	bics	r2, r1
 8004bae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d014      	beq.n	8004be2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f9f6 	bl	8002fa8 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc0:	e009      	b.n	8004bd6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fe f9f1 	bl	8002fa8 <HAL_GetTick>
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	4a7d      	ldr	r2, [pc, #500]	; (8004dc4 <HAL_RCC_OscConfig+0x634>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e136      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd6:	4b79      	ldr	r3, [pc, #484]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x432>
 8004be0:	e013      	b.n	8004c0a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fe f9e1 	bl	8002fa8 <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bea:	e009      	b.n	8004c00 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fe f9dc 	bl	8002fa8 <HAL_GetTick>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4a73      	ldr	r2, [pc, #460]	; (8004dc4 <HAL_RCC_OscConfig+0x634>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e121      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c00:	4b6e      	ldr	r3, [pc, #440]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c0a:	231f      	movs	r3, #31
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b69      	ldr	r3, [pc, #420]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c18:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c1a:	496b      	ldr	r1, [pc, #428]	; (8004dc8 <HAL_RCC_OscConfig+0x638>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2220      	movs	r2, #32
 8004c26:	4013      	ands	r3, r2
 8004c28:	d039      	beq.n	8004c9e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c32:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b61      	ldr	r3, [pc, #388]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	03c9      	lsls	r1, r1, #15
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fe f9b2 	bl	8002fa8 <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4a:	f7fe f9ad 	bl	8002fa8 <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0f3      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c5c:	4b57      	ldr	r3, [pc, #348]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	4013      	ands	r3, r2
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x4ba>
 8004c68:	e019      	b.n	8004c9e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c6a:	4b54      	ldr	r3, [pc, #336]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c70:	4956      	ldr	r1, [pc, #344]	; (8004dcc <HAL_RCC_OscConfig+0x63c>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fe f997 	bl	8002fa8 <HAL_GetTick>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c80:	f7fe f992 	bl	8002fa8 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0d8      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d100      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x518>
 8004ca6:	e0cc      	b.n	8004e42 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca8:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2238      	movs	r2, #56	; 0x38
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d100      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x526>
 8004cb4:	e07b      	b.n	8004dae <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d156      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004cc4:	4942      	ldr	r1, [pc, #264]	; (8004dd0 <HAL_RCC_OscConfig+0x640>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe f96d 	bl	8002fa8 <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fe f968 	bl	8002fa8 <HAL_GetTick>
 8004cd8:	0002      	movs	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0ae      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce6:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	049b      	lsls	r3, r3, #18
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf2:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4a37      	ldr	r2, [pc, #220]	; (8004dd4 <HAL_RCC_OscConfig+0x644>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d22:	430a      	orrs	r2, r1
 8004d24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d26:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d2c:	2180      	movs	r1, #128	; 0x80
 8004d2e:	0449      	lsls	r1, r1, #17
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d3a:	2180      	movs	r1, #128	; 0x80
 8004d3c:	0549      	lsls	r1, r1, #21
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fe f931 	bl	8002fa8 <HAL_GetTick>
 8004d46:	0003      	movs	r3, r0
 8004d48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fe f92c 	bl	8002fa8 <HAL_GetTick>
 8004d50:	0002      	movs	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e072      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	049b      	lsls	r3, r3, #18
 8004d66:	4013      	ands	r3, r2
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x5bc>
 8004d6a:	e06a      	b.n	8004e42 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d72:	4917      	ldr	r1, [pc, #92]	; (8004dd0 <HAL_RCC_OscConfig+0x640>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe f916 	bl	8002fa8 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fe f911 	bl	8002fa8 <HAL_GetTick>
 8004d86:	0002      	movs	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e057      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	049b      	lsls	r3, r3, #18
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_OscConfig+0x62c>)
 8004da6:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <HAL_RCC_OscConfig+0x648>)
 8004da8:	400a      	ands	r2, r1
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	e049      	b.n	8004e42 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d112      	bne.n	8004ddc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e044      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40007000 	.word	0x40007000
 8004dc4:	00001388 	.word	0x00001388
 8004dc8:	efffffff 	.word	0xefffffff
 8004dcc:	ffbfffff 	.word	0xffbfffff
 8004dd0:	feffffff 	.word	0xfeffffff
 8004dd4:	11c1808c 	.word	0x11c1808c
 8004dd8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x6bc>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2203      	movs	r2, #3
 8004de6:	401a      	ands	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d126      	bne.n	8004e3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2270      	movs	r2, #112	; 0x70
 8004df4:	401a      	ands	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d11f      	bne.n	8004e3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	23fe      	movs	r3, #254	; 0xfe
 8004e02:	01db      	lsls	r3, r3, #7
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d116      	bne.n	8004e3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	23f8      	movs	r3, #248	; 0xf8
 8004e14:	039b      	lsls	r3, r3, #14
 8004e16:	401a      	ands	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d10e      	bne.n	8004e3e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	23e0      	movs	r3, #224	; 0xe0
 8004e24:	051b      	lsls	r3, r3, #20
 8004e26:	401a      	ands	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	0f5b      	lsrs	r3, r3, #29
 8004e34:	075a      	lsls	r2, r3, #29
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b008      	add	sp, #32
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0e9      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b76      	ldr	r3, [pc, #472]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2207      	movs	r2, #7
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d91e      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2207      	movs	r2, #7
 8004e78:	4393      	bics	r3, r2
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	4b70      	ldr	r3, [pc, #448]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e84:	f7fe f890 	bl	8002fa8 <HAL_GetTick>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e8c:	e009      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8e:	f7fe f88b 	bl	8002fa8 <HAL_GetTick>
 8004e92:	0002      	movs	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	4a6a      	ldr	r2, [pc, #424]	; (8005044 <HAL_RCC_ClockConfig+0x1f4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0ca      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ea2:	4b67      	ldr	r3, [pc, #412]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2207      	movs	r2, #7
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1ee      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d006      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ec4:	4b60      	ldr	r3, [pc, #384]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b5f      	ldr	r3, [pc, #380]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004eca:	21e0      	movs	r1, #224	; 0xe0
 8004ecc:	01c9      	lsls	r1, r1, #7
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4a5d      	ldr	r2, [pc, #372]	; (800504c <HAL_RCC_ClockConfig+0x1fc>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	d057      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef8:	4b53      	ldr	r3, [pc, #332]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	4013      	ands	r3, r2
 8004f02:	d12b      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e097      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f10:	4b4d      	ldr	r3, [pc, #308]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	049b      	lsls	r3, r3, #18
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d11f      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e08b      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f28:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4013      	ands	r3, r2
 8004f32:	d113      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e07f      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f40:	4b41      	ldr	r3, [pc, #260]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	2202      	movs	r2, #2
 8004f46:	4013      	ands	r3, r2
 8004f48:	d108      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e074      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4e:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	2202      	movs	r2, #2
 8004f54:	4013      	ands	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e06d      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f5c:	4b3a      	ldr	r3, [pc, #232]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2207      	movs	r2, #7
 8004f62:	4393      	bics	r3, r2
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	4b37      	ldr	r3, [pc, #220]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f70:	f7fe f81a 	bl	8002fa8 <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	e009      	b.n	8004f8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7a:	f7fe f815 	bl	8002fa8 <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <HAL_RCC_ClockConfig+0x1f4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e054      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2238      	movs	r2, #56	; 0x38
 8004f94:	401a      	ands	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1ec      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d21e      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fff2 	bl	8002fa8 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc8:	e009      	b.n	8004fde <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fca:	f7fd ffed 	bl	8002fa8 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_RCC_ClockConfig+0x1f4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e02c      	b.n	8005038 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fde:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ee      	bne.n	8004fca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_RCC_ClockConfig+0x200>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800500a:	f000 f829 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 800500e:	0001      	movs	r1, r0
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <HAL_RCC_ClockConfig+0x1f8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	220f      	movs	r2, #15
 8005018:	401a      	ands	r2, r3
 800501a:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_RCC_ClockConfig+0x204>)
 800501c:	0092      	lsls	r2, r2, #2
 800501e:	58d3      	ldr	r3, [r2, r3]
 8005020:	221f      	movs	r2, #31
 8005022:	4013      	ands	r3, r2
 8005024:	000a      	movs	r2, r1
 8005026:	40da      	lsrs	r2, r3
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 800502a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0018      	movs	r0, r3
 8005032:	f7fd ff5d 	bl	8002ef0 <HAL_InitTick>
 8005036:	0003      	movs	r3, r0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40022000 	.word	0x40022000
 8005044:	00001388 	.word	0x00001388
 8005048:	40021000 	.word	0x40021000
 800504c:	fffff0ff 	.word	0xfffff0ff
 8005050:	ffff8fff 	.word	0xffff8fff
 8005054:	08009240 	.word	0x08009240
 8005058:	20000014 	.word	0x20000014
 800505c:	20000018 	.word	0x20000018

08005060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005066:	4b3c      	ldr	r3, [pc, #240]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2238      	movs	r2, #56	; 0x38
 800506c:	4013      	ands	r3, r2
 800506e:	d10f      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005070:	4b39      	ldr	r3, [pc, #228]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	0adb      	lsrs	r3, r3, #11
 8005076:	2207      	movs	r2, #7
 8005078:	4013      	ands	r3, r2
 800507a:	2201      	movs	r2, #1
 800507c:	409a      	lsls	r2, r3
 800507e:	0013      	movs	r3, r2
 8005080:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	4835      	ldr	r0, [pc, #212]	; (800515c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005086:	f7fb f83d 	bl	8000104 <__udivsi3>
 800508a:	0003      	movs	r3, r0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e05d      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2238      	movs	r2, #56	; 0x38
 8005096:	4013      	ands	r3, r2
 8005098:	2b08      	cmp	r3, #8
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <HAL_RCC_GetSysClockFreq+0x100>)
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e054      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a2:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2238      	movs	r2, #56	; 0x38
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d138      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050ae:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2203      	movs	r2, #3
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b27      	ldr	r3, [pc, #156]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	2207      	movs	r2, #7
 80050c0:	4013      	ands	r3, r2
 80050c2:	3301      	adds	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d10d      	bne.n	80050e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4824      	ldr	r0, [pc, #144]	; (8005160 <HAL_RCC_GetSysClockFreq+0x100>)
 80050d0:	f7fb f818 	bl	8000104 <__udivsi3>
 80050d4:	0003      	movs	r3, r0
 80050d6:	0019      	movs	r1, r3
 80050d8:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	227f      	movs	r2, #127	; 0x7f
 80050e0:	4013      	ands	r3, r2
 80050e2:	434b      	muls	r3, r1
 80050e4:	617b      	str	r3, [r7, #20]
        break;
 80050e6:	e00d      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	481c      	ldr	r0, [pc, #112]	; (800515c <HAL_RCC_GetSysClockFreq+0xfc>)
 80050ec:	f7fb f80a 	bl	8000104 <__udivsi3>
 80050f0:	0003      	movs	r3, r0
 80050f2:	0019      	movs	r1, r3
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	227f      	movs	r2, #127	; 0x7f
 80050fc:	4013      	ands	r3, r2
 80050fe:	434b      	muls	r3, r1
 8005100:	617b      	str	r3, [r7, #20]
        break;
 8005102:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005104:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	0f5b      	lsrs	r3, r3, #29
 800510a:	2207      	movs	r2, #7
 800510c:	4013      	ands	r3, r2
 800510e:	3301      	adds	r3, #1
 8005110:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f7fa fff5 	bl	8000104 <__udivsi3>
 800511a:	0003      	movs	r3, r0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	e015      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2238      	movs	r2, #56	; 0x38
 8005126:	4013      	ands	r3, r2
 8005128:	2b20      	cmp	r3, #32
 800512a:	d103      	bne.n	8005134 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e00b      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2238      	movs	r2, #56	; 0x38
 800513a:	4013      	ands	r3, r2
 800513c:	2b18      	cmp	r3, #24
 800513e:	d103      	bne.n	8005148 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005140:	23fa      	movs	r3, #250	; 0xfa
 8005142:	01db      	lsls	r3, r3, #7
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e001      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800514c:	693b      	ldr	r3, [r7, #16]
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b006      	add	sp, #24
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	40021000 	.word	0x40021000
 800515c:	00f42400 	.word	0x00f42400
 8005160:	007a1200 	.word	0x007a1200

08005164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <HAL_RCC_GetHCLKFreq+0x10>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20000014 	.word	0x20000014

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800517c:	f7ff fff2 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005180:	0004      	movs	r4, r0
 8005182:	f7ff faf9 	bl	8004778 <LL_RCC_GetAPB1Prescaler>
 8005186:	0003      	movs	r3, r0
 8005188:	0b1a      	lsrs	r2, r3, #12
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	58d3      	ldr	r3, [r2, r3]
 8005190:	221f      	movs	r2, #31
 8005192:	4013      	ands	r3, r2
 8005194:	40dc      	lsrs	r4, r3
 8005196:	0023      	movs	r3, r4
}
 8005198:	0018      	movs	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	bdb0      	pop	{r4, r5, r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	08009280 	.word	0x08009280

080051a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80051ac:	2313      	movs	r3, #19
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051b4:	2312      	movs	r3, #18
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	4013      	ands	r3, r2
 80051c6:	d100      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051c8:	e0ad      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ca:	2011      	movs	r0, #17
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	055b      	lsls	r3, r3, #21
 80051da:	4013      	ands	r3, r2
 80051dc:	d110      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e2:	4b43      	ldr	r3, [pc, #268]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051e4:	2180      	movs	r1, #128	; 0x80
 80051e6:	0549      	lsls	r1, r1, #21
 80051e8:	430a      	orrs	r2, r1
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80051ec:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	055b      	lsls	r3, r3, #21
 80051f4:	4013      	ands	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fa:	183b      	adds	r3, r7, r0
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005200:	4b3c      	ldr	r3, [pc, #240]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	0049      	lsls	r1, r1, #1
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800520e:	f7fd fecb 	bl	8002fa8 <HAL_GetTick>
 8005212:	0003      	movs	r3, r0
 8005214:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005216:	e00b      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fd fec6 	bl	8002fa8 <HAL_GetTick>
 800521c:	0002      	movs	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d904      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005226:	2313      	movs	r3, #19
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	2203      	movs	r2, #3
 800522c:	701a      	strb	r2, [r3, #0]
        break;
 800522e:	e005      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005230:	4b30      	ldr	r3, [pc, #192]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4013      	ands	r3, r2
 800523a:	d0ed      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800523c:	2313      	movs	r3, #19
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d15e      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800524a:	23c0      	movs	r3, #192	; 0xc0
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4013      	ands	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d019      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	429a      	cmp	r2, r3
 8005260:	d014      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005262:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005268:	4013      	ands	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800526e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005270:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0249      	lsls	r1, r1, #9
 8005276:	430a      	orrs	r2, r1
 8005278:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800527c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800527e:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005280:	491e      	ldr	r1, [pc, #120]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005282:	400a      	ands	r2, r1
 8005284:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2201      	movs	r2, #1
 8005290:	4013      	ands	r3, r2
 8005292:	d016      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fd fe88 	bl	8002fa8 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fd fe83 	bl	8002fa8 <HAL_GetTick>
 80052a2:	0002      	movs	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d904      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80052ae:	2313      	movs	r3, #19
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	2203      	movs	r2, #3
 80052b4:	701a      	strb	r2, [r3, #0]
            break;
 80052b6:	e004      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	2202      	movs	r2, #2
 80052be:	4013      	ands	r3, r2
 80052c0:	d0ed      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80052c2:	2313      	movs	r3, #19
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052cc:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	0019      	movs	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e0:	e016      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e2:	2312      	movs	r3, #18
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2213      	movs	r2, #19
 80052e8:	18ba      	adds	r2, r7, r2
 80052ea:	7812      	ldrb	r2, [r2, #0]
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e00f      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40007000 	.word	0x40007000
 80052f8:	fffffcff 	.word	0xfffffcff
 80052fc:	fffeffff 	.word	0xfffeffff
 8005300:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	2312      	movs	r3, #18
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	2213      	movs	r2, #19
 800530a:	18ba      	adds	r2, r7, r2
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005310:	2311      	movs	r3, #17
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531a:	4bb6      	ldr	r3, [pc, #728]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800531c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531e:	4bb5      	ldr	r3, [pc, #724]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005320:	49b5      	ldr	r1, [pc, #724]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005322:	400a      	ands	r2, r1
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005330:	4bb0      	ldr	r3, [pc, #704]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	2203      	movs	r2, #3
 8005336:	4393      	bics	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4bad      	ldr	r3, [pc, #692]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005340:	430a      	orrs	r2, r1
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2202      	movs	r2, #2
 800534a:	4013      	ands	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800534e:	4ba9      	ldr	r3, [pc, #676]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	220c      	movs	r2, #12
 8005354:	4393      	bics	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	4ba5      	ldr	r3, [pc, #660]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800535e:	430a      	orrs	r2, r1
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2204      	movs	r2, #4
 8005368:	4013      	ands	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800536c:	4ba1      	ldr	r3, [pc, #644]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	2230      	movs	r2, #48	; 0x30
 8005372:	4393      	bics	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	4b9e      	ldr	r3, [pc, #632]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800537c:	430a      	orrs	r2, r1
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2210      	movs	r2, #16
 8005386:	4013      	ands	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538a:	4b9a      	ldr	r3, [pc, #616]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	4a9b      	ldr	r2, [pc, #620]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005390:	4013      	ands	r3, r2
 8005392:	0019      	movs	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b96      	ldr	r3, [pc, #600]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800539a:	430a      	orrs	r2, r1
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	4013      	ands	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80053aa:	4b92      	ldr	r3, [pc, #584]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	4a94      	ldr	r2, [pc, #592]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	4b8e      	ldr	r3, [pc, #568]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4013      	ands	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ca:	4b8a      	ldr	r3, [pc, #552]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	4a8d      	ldr	r2, [pc, #564]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d8:	4b86      	ldr	r3, [pc, #536]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4013      	ands	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ea:	4b82      	ldr	r3, [pc, #520]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	4a86      	ldr	r2, [pc, #536]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4b7e      	ldr	r3, [pc, #504]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fa:	430a      	orrs	r2, r1
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005408:	4b7a      	ldr	r3, [pc, #488]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	4a7f      	ldr	r2, [pc, #508]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800540e:	4013      	ands	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	4b77      	ldr	r3, [pc, #476]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005418:	430a      	orrs	r2, r1
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2240      	movs	r2, #64	; 0x40
 8005422:	4013      	ands	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005426:	4b73      	ldr	r3, [pc, #460]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	4a79      	ldr	r2, [pc, #484]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800542c:	4013      	ands	r3, r2
 800542e:	0019      	movs	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	4b6f      	ldr	r3, [pc, #444]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005436:	430a      	orrs	r2, r1
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	01db      	lsls	r3, r3, #7
 8005442:	4013      	ands	r3, r2
 8005444:	d015      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005446:	4b6b      	ldr	r3, [pc, #428]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	0899      	lsrs	r1, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005452:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005454:	430a      	orrs	r2, r1
 8005456:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	05db      	lsls	r3, r3, #23
 8005460:	429a      	cmp	r2, r3
 8005462:	d106      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005464:	4b63      	ldr	r3, [pc, #396]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	4b62      	ldr	r3, [pc, #392]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	0249      	lsls	r1, r1, #9
 800546e:	430a      	orrs	r2, r1
 8005470:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	4013      	ands	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800547e:	4b5d      	ldr	r3, [pc, #372]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	4393      	bics	r3, r2
 8005486:	0019      	movs	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548c:	4b59      	ldr	r3, [pc, #356]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800548e:	430a      	orrs	r2, r1
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	039b      	lsls	r3, r3, #14
 800549a:	4013      	ands	r3, r2
 800549c:	d016      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	4a5c      	ldr	r2, [pc, #368]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ac:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ae:	430a      	orrs	r2, r1
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	03db      	lsls	r3, r3, #15
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d106      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054be:	4b4d      	ldr	r3, [pc, #308]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	4b4c      	ldr	r3, [pc, #304]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c4:	2180      	movs	r1, #128	; 0x80
 80054c6:	0449      	lsls	r1, r1, #17
 80054c8:	430a      	orrs	r2, r1
 80054ca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	03db      	lsls	r3, r3, #15
 80054d4:	4013      	ands	r3, r2
 80054d6:	d016      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80054d8:	4b46      	ldr	r3, [pc, #280]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	4a4e      	ldr	r2, [pc, #312]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e6:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	045b      	lsls	r3, r3, #17
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d106      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054f8:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4b3d      	ldr	r3, [pc, #244]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	0449      	lsls	r1, r1, #17
 8005502:	430a      	orrs	r2, r1
 8005504:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4013      	ands	r3, r2
 8005510:	d014      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005512:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	2203      	movs	r2, #3
 8005518:	4393      	bics	r3, r2
 800551a:	0019      	movs	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005522:	430a      	orrs	r2, r1
 8005524:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800552e:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b30      	ldr	r3, [pc, #192]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	0249      	lsls	r1, r1, #9
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	019b      	lsls	r3, r3, #6
 8005544:	4013      	ands	r3, r2
 8005546:	d014      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	220c      	movs	r2, #12
 800554e:	4393      	bics	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005558:	430a      	orrs	r2, r1
 800555a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b04      	cmp	r3, #4
 8005562:	d106      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800556a:	2180      	movs	r1, #128	; 0x80
 800556c:	0249      	lsls	r1, r1, #9
 800556e:	430a      	orrs	r2, r1
 8005570:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	045b      	lsls	r3, r3, #17
 800557a:	4013      	ands	r3, r2
 800557c:	d016      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	4a22      	ldr	r2, [pc, #136]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005584:	4013      	ands	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800558e:	430a      	orrs	r2, r1
 8005590:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	429a      	cmp	r2, r3
 800559c:	d106      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	0449      	lsls	r1, r1, #17
 80055a8:	430a      	orrs	r2, r1
 80055aa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	049b      	lsls	r3, r3, #18
 80055b4:	4013      	ands	r3, r2
 80055b6:	d016      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055b8:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4a10      	ldr	r2, [pc, #64]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d106      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	0449      	lsls	r1, r1, #17
 80055e2:	430a      	orrs	r2, r1
 80055e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055e6:	2312      	movs	r3, #18
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b006      	add	sp, #24
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	efffffff 	.word	0xefffffff
 80055fc:	fffff3ff 	.word	0xfffff3ff
 8005600:	fffffcff 	.word	0xfffffcff
 8005604:	fff3ffff 	.word	0xfff3ffff
 8005608:	ffcfffff 	.word	0xffcfffff
 800560c:	ffffcfff 	.word	0xffffcfff
 8005610:	ffff3fff 	.word	0xffff3fff
 8005614:	ffbfffff 	.word	0xffbfffff
 8005618:	feffffff 	.word	0xfeffffff

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e04a      	b.n	80056c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	; 0x3d
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223c      	movs	r2, #60	; 0x3c
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f7fd f9a3 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223d      	movs	r2, #61	; 0x3d
 800564e:	2102      	movs	r1, #2
 8005650:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f000 fcad 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2248      	movs	r2, #72	; 0x48
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223e      	movs	r2, #62	; 0x3e
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	223f      	movs	r2, #63	; 0x3f
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2241      	movs	r2, #65	; 0x41
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2242      	movs	r2, #66	; 0x42
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2243      	movs	r2, #67	; 0x43
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2244      	movs	r2, #68	; 0x44
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2245      	movs	r2, #69	; 0x45
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2246      	movs	r2, #70	; 0x46
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2247      	movs	r2, #71	; 0x47
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223d      	movs	r2, #61	; 0x3d
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e04a      	b.n	8005774 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	223d      	movs	r2, #61	; 0x3d
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	223c      	movs	r2, #60	; 0x3c
 80056ee:	2100      	movs	r1, #0
 80056f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 f841 	bl	800577c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	223d      	movs	r2, #61	; 0x3d
 80056fe:	2102      	movs	r1, #2
 8005700:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	0019      	movs	r1, r3
 800570c:	0010      	movs	r0, r2
 800570e:	f000 fc55 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2248      	movs	r2, #72	; 0x48
 8005716:	2101      	movs	r1, #1
 8005718:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	223e      	movs	r2, #62	; 0x3e
 800571e:	2101      	movs	r1, #1
 8005720:	5499      	strb	r1, [r3, r2]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	223f      	movs	r2, #63	; 0x3f
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2240      	movs	r2, #64	; 0x40
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2241      	movs	r2, #65	; 0x41
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2242      	movs	r2, #66	; 0x42
 800573e:	2101      	movs	r1, #1
 8005740:	5499      	strb	r1, [r3, r2]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2243      	movs	r2, #67	; 0x43
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2244      	movs	r2, #68	; 0x44
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2245      	movs	r2, #69	; 0x45
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2246      	movs	r2, #70	; 0x46
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2247      	movs	r2, #71	; 0x47
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	223d      	movs	r2, #61	; 0x3d
 800576e:	2101      	movs	r1, #1
 8005770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	230f      	movs	r3, #15
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d039      	beq.n	8005818 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b0c      	cmp	r3, #12
 80057a8:	d844      	bhi.n	8005834 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d025      	beq.n	80057fc <HAL_TIM_PWM_Stop_DMA+0x70>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d83e      	bhi.n	8005834 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_TIM_PWM_Stop_DMA+0x38>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00e      	beq.n	80057e0 <HAL_TIM_PWM_Stop_DMA+0x54>
 80057c2:	e037      	b.n	8005834 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	495c      	ldr	r1, [pc, #368]	; (8005940 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fd fe83 	bl	80034e4 <HAL_DMA_Abort_IT>
      break;
 80057de:	e02e      	b.n	800583e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4956      	ldr	r1, [pc, #344]	; (8005944 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7fd fe75 	bl	80034e4 <HAL_DMA_Abort_IT>
      break;
 80057fa:	e020      	b.n	800583e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4950      	ldr	r1, [pc, #320]	; (8005948 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8005808:	400a      	ands	r2, r1
 800580a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	0018      	movs	r0, r3
 8005812:	f7fd fe67 	bl	80034e4 <HAL_DMA_Abort_IT>
      break;
 8005816:	e012      	b.n	800583e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	494a      	ldr	r1, [pc, #296]	; (800594c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8005824:	400a      	ands	r2, r1
 8005826:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	0018      	movs	r0, r3
 800582e:	f7fd fe59 	bl	80034e4 <HAL_DMA_Abort_IT>
      break;
 8005832:	e004      	b.n	800583e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8005834:	230f      	movs	r3, #15
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
      break;
 800583c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800583e:	230f      	movs	r3, #15
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d000      	beq.n	800584a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8005848:	e073      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	0018      	movs	r0, r3
 8005854:	f000 ff9c 	bl	8006790 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a39      	ldr	r2, [pc, #228]	; (8005958 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a38      	ldr	r2, [pc, #224]	; (800595c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8005892:	4013      	ands	r3, r2
 8005894:	d10d      	bne.n	80058b2 <HAL_TIM_PWM_Stop_DMA+0x126>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800589e:	4013      	ands	r3, r2
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_PWM_Stop_DMA+0x126>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	492e      	ldr	r1, [pc, #184]	; (8005968 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80058ae:	400a      	ands	r2, r1
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4a29      	ldr	r2, [pc, #164]	; (8005960 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	d10d      	bne.n	80058da <HAL_TIM_PWM_Stop_DMA+0x14e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	d107      	bne.n	80058da <HAL_TIM_PWM_Stop_DMA+0x14e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2101      	movs	r1, #1
 80058d6:	438a      	bics	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Stop_DMA+0x15e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223e      	movs	r2, #62	; 0x3e
 80058e4:	2101      	movs	r1, #1
 80058e6:	5499      	strb	r1, [r3, r2]
 80058e8:	e023      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Stop_DMA+0x16e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	223f      	movs	r2, #63	; 0x3f
 80058f4:	2101      	movs	r1, #1
 80058f6:	5499      	strb	r1, [r3, r2]
 80058f8:	e01b      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Stop_DMA+0x17e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2240      	movs	r2, #64	; 0x40
 8005904:	2101      	movs	r1, #1
 8005906:	5499      	strb	r1, [r3, r2]
 8005908:	e013      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Stop_DMA+0x18e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2241      	movs	r2, #65	; 0x41
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]
 8005918:	e00b      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Stop_DMA+0x19e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2242      	movs	r2, #66	; 0x42
 8005924:	2101      	movs	r1, #1
 8005926:	5499      	strb	r1, [r3, r2]
 8005928:	e003      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2243      	movs	r2, #67	; 0x43
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005932:	230f      	movs	r3, #15
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	781b      	ldrb	r3, [r3, #0]
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b004      	add	sp, #16
 800593e:	bd80      	pop	{r7, pc}
 8005940:	fffffdff 	.word	0xfffffdff
 8005944:	fffffbff 	.word	0xfffffbff
 8005948:	fffff7ff 	.word	0xfffff7ff
 800594c:	ffffefff 	.word	0xffffefff
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800
 8005960:	00001111 	.word	0x00001111
 8005964:	00000444 	.word	0x00000444
 8005968:	ffff7fff 	.word	0xffff7fff

0800596c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2202      	movs	r2, #2
 800597c:	4013      	ands	r3, r2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d124      	bne.n	80059cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2202      	movs	r2, #2
 800598a:	4013      	ands	r3, r2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d11d      	bne.n	80059cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2203      	movs	r2, #3
 8005996:	4252      	negs	r2, r2
 8005998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2203      	movs	r2, #3
 80059a8:	4013      	ands	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 faf4 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 80059b4:	e007      	b.n	80059c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 fae7 	bl	8005f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7fd fa23 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2204      	movs	r2, #4
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d125      	bne.n	8005a26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2204      	movs	r2, #4
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d11e      	bne.n	8005a26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2205      	movs	r2, #5
 80059ee:	4252      	negs	r2, r2
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	23c0      	movs	r3, #192	; 0xc0
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4013      	ands	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 fac7 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 faba 	bl	8005f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f7fd f9f6 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d124      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d11d      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2209      	movs	r2, #9
 8005a48:	4252      	negs	r2, r2
 8005a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 fa9b 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005a66:	e007      	b.n	8005a78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fa8e 	bl	8005f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fd f9ca 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2210      	movs	r2, #16
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d125      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2210      	movs	r2, #16
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d11e      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2211      	movs	r2, #17
 8005aa0:	4252      	negs	r2, r2
 8005aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	23c0      	movs	r3, #192	; 0xc0
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fa6e 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e007      	b.n	8005ad2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 fa61 	bl	8005f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7fd f99d 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d10f      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d108      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2202      	movs	r2, #2
 8005afa:	4252      	negs	r2, r2
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 fa3b 	bl	8005f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d10f      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d108      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2281      	movs	r2, #129	; 0x81
 8005b28:	4252      	negs	r2, r2
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f000 ff76 	bl	8006a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	401a      	ands	r2, r3
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <HAL_TIM_IRQHandler+0x260>)
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 ff65 	bl	8006a30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2240      	movs	r2, #64	; 0x40
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d10f      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d108      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2241      	movs	r2, #65	; 0x41
 8005b88:	4252      	negs	r2, r2
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f000 fa0c 	bl	8005fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d10f      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d108      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	4252      	negs	r2, r2
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 ff27 	bl	8006a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	fffffeff 	.word	0xfffffeff

08005bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bdc:	2317      	movs	r3, #23
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	223c      	movs	r2, #60	; 0x3c
 8005be8:	5c9b      	ldrb	r3, [r3, r2]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0e5      	b.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	223c      	movs	r2, #60	; 0x3c
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b14      	cmp	r3, #20
 8005bfe:	d900      	bls.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005c00:	e0d1      	b.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	009a      	lsls	r2, r3, #2
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005c08:	18d3      	adds	r3, r2, r3
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 fa5a 	bl	80060d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2108      	movs	r1, #8
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2104      	movs	r1, #4
 8005c38:	438a      	bics	r2, r1
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	619a      	str	r2, [r3, #24]
      break;
 8005c4e:	e0af      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	0011      	movs	r1, r2
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f000 fac3 	bl	80061e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2180      	movs	r1, #128	; 0x80
 8005c6a:	0109      	lsls	r1, r1, #4
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4954      	ldr	r1, [pc, #336]	; (8005dcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]
      break;
 8005c94:	e08c      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 fb24 	bl	80062ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2108      	movs	r1, #8
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2104      	movs	r1, #4
 8005cc0:	438a      	bics	r2, r1
 8005cc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69d9      	ldr	r1, [r3, #28]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	61da      	str	r2, [r3, #28]
      break;
 8005cd6:	e06b      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	0011      	movs	r1, r2
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 fb8b 	bl	80063fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0109      	lsls	r1, r1, #4
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4932      	ldr	r1, [pc, #200]	; (8005dcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d04:	400a      	ands	r2, r1
 8005d06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69d9      	ldr	r1, [r3, #28]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	61da      	str	r2, [r3, #28]
      break;
 8005d1c:	e048      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0011      	movs	r1, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 fbd2 	bl	80064d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2108      	movs	r1, #8
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2104      	movs	r1, #4
 8005d48:	438a      	bics	r2, r1
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d5e:	e027      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	0011      	movs	r1, r2
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 fc11 	bl	8006590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2180      	movs	r1, #128	; 0x80
 8005d7a:	0109      	lsls	r1, r1, #4
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4910      	ldr	r1, [pc, #64]	; (8005dcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005da4:	e004      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005da6:	2317      	movs	r3, #23
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	223c      	movs	r2, #60	; 0x3c
 8005db4:	2100      	movs	r1, #0
 8005db6:	5499      	strb	r1, [r3, r2]

  return status;
 8005db8:	2317      	movs	r3, #23
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	781b      	ldrb	r3, [r3, #0]
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b006      	add	sp, #24
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	080092b0 	.word	0x080092b0
 8005dcc:	fffffbff 	.word	0xfffffbff

08005dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	230f      	movs	r3, #15
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	223c      	movs	r2, #60	; 0x3c
 8005de6:	5c9b      	ldrb	r3, [r3, r2]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIM_ConfigClockSource+0x20>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e0bc      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x19a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	223c      	movs	r2, #60	; 0x3c
 8005df4:	2101      	movs	r1, #1
 8005df6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	223d      	movs	r2, #61	; 0x3d
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a5a      	ldr	r2, [pc, #360]	; (8005f74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a59      	ldr	r2, [pc, #356]	; (8005f78 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2280      	movs	r2, #128	; 0x80
 8005e26:	0192      	lsls	r2, r2, #6
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d040      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0xde>
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	0192      	lsls	r2, r2, #6
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d900      	bls.n	8005e36 <HAL_TIM_ConfigClockSource+0x66>
 8005e34:	e088      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	0152      	lsls	r2, r2, #5
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d100      	bne.n	8005e40 <HAL_TIM_ConfigClockSource+0x70>
 8005e3e:	e088      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x182>
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	0152      	lsls	r2, r2, #5
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d900      	bls.n	8005e4a <HAL_TIM_ConfigClockSource+0x7a>
 8005e48:	e07e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e4a:	2b70      	cmp	r3, #112	; 0x70
 8005e4c:	d018      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0xb0>
 8005e4e:	d900      	bls.n	8005e52 <HAL_TIM_ConfigClockSource+0x82>
 8005e50:	e07a      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e52:	2b60      	cmp	r3, #96	; 0x60
 8005e54:	d04f      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x126>
 8005e56:	d900      	bls.n	8005e5a <HAL_TIM_ConfigClockSource+0x8a>
 8005e58:	e076      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e5a:	2b50      	cmp	r3, #80	; 0x50
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x106>
 8005e5e:	d900      	bls.n	8005e62 <HAL_TIM_ConfigClockSource+0x92>
 8005e60:	e072      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d057      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x146>
 8005e66:	d900      	bls.n	8005e6a <HAL_TIM_ConfigClockSource+0x9a>
 8005e68:	e06e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	d063      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x166>
 8005e6e:	d86b      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d060      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x166>
 8005e74:	d868      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d05d      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x166>
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d05b      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x166>
 8005e7e:	e063      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	6899      	ldr	r1, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f000 fc5e 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2277      	movs	r2, #119	; 0x77
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
      break;
 8005eac:	e052      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6899      	ldr	r1, [r3, #8]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f000 fc47 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	01c9      	lsls	r1, r1, #7
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
      break;
 8005ed4:	e03e      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	f000 fbb8 	bl	8006658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2150      	movs	r1, #80	; 0x50
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fc12 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e02e      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	001a      	movs	r2, r3
 8005f04:	f000 fbd6 	bl	80066b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2160      	movs	r1, #96	; 0x60
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f000 fc02 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 8005f14:	e01e      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	001a      	movs	r2, r3
 8005f24:	f000 fb98 	bl	8006658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2140      	movs	r1, #64	; 0x40
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 fbf2 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 8005f34:	e00e      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	0019      	movs	r1, r3
 8005f40:	0010      	movs	r0, r2
 8005f42:	f000 fbe9 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 8005f46:	e005      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005f48:	230f      	movs	r3, #15
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
      break;
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005f52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	223d      	movs	r2, #61	; 0x3d
 8005f58:	2101      	movs	r1, #1
 8005f5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	223c      	movs	r2, #60	; 0x3c
 8005f60:	2100      	movs	r1, #0
 8005f62:	5499      	strb	r1, [r3, r2]

  return status;
 8005f64:	230f      	movs	r3, #15
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	781b      	ldrb	r3, [r3, #0]
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b004      	add	sp, #16
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	ffceff88 	.word	0xffceff88
 8005f78:	ffff00ff 	.word	0xffff00ff

08005f7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f84:	46c0      	nop			; (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <TIM_Base_SetConfig+0xf4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00c      	beq.n	8005fee <TIM_Base_SetConfig+0x32>
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	05db      	lsls	r3, r3, #23
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0x32>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <TIM_Base_SetConfig+0xf8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x32>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	; (80060b8 <TIM_Base_SetConfig+0xfc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2270      	movs	r2, #112	; 0x70
 8005ff2:	4393      	bics	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2b      	ldr	r2, [pc, #172]	; (80060b0 <TIM_Base_SetConfig+0xf4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d01c      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	05db      	lsls	r3, r3, #23
 800600e:	429a      	cmp	r2, r3
 8006010:	d017      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <TIM_Base_SetConfig+0xf8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a26      	ldr	r2, [pc, #152]	; (80060b8 <TIM_Base_SetConfig+0xfc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00f      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a25      	ldr	r2, [pc, #148]	; (80060bc <TIM_Base_SetConfig+0x100>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00b      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <TIM_Base_SetConfig+0x104>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d007      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a23      	ldr	r2, [pc, #140]	; (80060c4 <TIM_Base_SetConfig+0x108>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <TIM_Base_SetConfig+0x86>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <TIM_Base_SetConfig+0x10c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a21      	ldr	r2, [pc, #132]	; (80060cc <TIM_Base_SetConfig+0x110>)
 8006046:	4013      	ands	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	4393      	bics	r3, r2
 800605a:	001a      	movs	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <TIM_Base_SetConfig+0xf4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_Base_SetConfig+0xde>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a0e      	ldr	r2, [pc, #56]	; (80060c0 <TIM_Base_SetConfig+0x104>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_Base_SetConfig+0xde>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <TIM_Base_SetConfig+0x108>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_Base_SetConfig+0xde>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <TIM_Base_SetConfig+0x10c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d103      	bne.n	80060a2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	615a      	str	r2, [r3, #20]
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b004      	add	sp, #16
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40002000 	.word	0x40002000
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800
 80060cc:	fffffcff 	.word	0xfffffcff

080060d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	2201      	movs	r2, #1
 80060e0:	4393      	bics	r3, r2
 80060e2:	001a      	movs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a32      	ldr	r2, [pc, #200]	; (80061c8 <TIM_OC1_SetConfig+0xf8>)
 80060fe:	4013      	ands	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2203      	movs	r2, #3
 8006106:	4393      	bics	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2202      	movs	r2, #2
 8006118:	4393      	bics	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a28      	ldr	r2, [pc, #160]	; (80061cc <TIM_OC1_SetConfig+0xfc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00b      	beq.n	8006146 <TIM_OC1_SetConfig+0x76>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a27      	ldr	r2, [pc, #156]	; (80061d0 <TIM_OC1_SetConfig+0x100>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d007      	beq.n	8006146 <TIM_OC1_SetConfig+0x76>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <TIM_OC1_SetConfig+0x104>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_OC1_SetConfig+0x76>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a25      	ldr	r2, [pc, #148]	; (80061d8 <TIM_OC1_SetConfig+0x108>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d10c      	bne.n	8006160 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2208      	movs	r2, #8
 800614a:	4393      	bics	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2204      	movs	r2, #4
 800615c:	4393      	bics	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <TIM_OC1_SetConfig+0xfc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_OC1_SetConfig+0xb0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <TIM_OC1_SetConfig+0x100>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_OC1_SetConfig+0xb0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <TIM_OC1_SetConfig+0x104>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC1_SetConfig+0xb0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <TIM_OC1_SetConfig+0x108>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d111      	bne.n	80061a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <TIM_OC1_SetConfig+0x10c>)
 8006184:	4013      	ands	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <TIM_OC1_SetConfig+0x110>)
 800618c:	4013      	ands	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b006      	add	sp, #24
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	fffeff8f 	.word	0xfffeff8f
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800
 80061dc:	fffffeff 	.word	0xfffffeff
 80061e0:	fffffdff 	.word	0xfffffdff

080061e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	2210      	movs	r2, #16
 80061f4:	4393      	bics	r3, r2
 80061f6:	001a      	movs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a2e      	ldr	r2, [pc, #184]	; (80062cc <TIM_OC2_SetConfig+0xe8>)
 8006212:	4013      	ands	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a2d      	ldr	r2, [pc, #180]	; (80062d0 <TIM_OC2_SetConfig+0xec>)
 800621a:	4013      	ands	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2220      	movs	r2, #32
 800622e:	4393      	bics	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a24      	ldr	r2, [pc, #144]	; (80062d4 <TIM_OC2_SetConfig+0xf0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10d      	bne.n	8006262 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2280      	movs	r2, #128	; 0x80
 800624a:	4393      	bics	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	4393      	bics	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <TIM_OC2_SetConfig+0xf0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_OC2_SetConfig+0x9e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <TIM_OC2_SetConfig+0xf4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC2_SetConfig+0x9e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <TIM_OC2_SetConfig+0xf8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC2_SetConfig+0x9e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <TIM_OC2_SetConfig+0xfc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d113      	bne.n	80062aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC2_SetConfig+0x100>)
 8006286:	4013      	ands	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC2_SetConfig+0x104>)
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b006      	add	sp, #24
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	feff8fff 	.word	0xfeff8fff
 80062d0:	fffffcff 	.word	0xfffffcff
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	fffffbff 	.word	0xfffffbff
 80062e8:	fffff7ff 	.word	0xfffff7ff

080062ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	4a35      	ldr	r2, [pc, #212]	; (80063d0 <TIM_OC3_SetConfig+0xe4>)
 80062fc:	401a      	ands	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a2f      	ldr	r2, [pc, #188]	; (80063d4 <TIM_OC3_SetConfig+0xe8>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2203      	movs	r2, #3
 8006320:	4393      	bics	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4a29      	ldr	r2, [pc, #164]	; (80063d8 <TIM_OC3_SetConfig+0xec>)
 8006332:	4013      	ands	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a25      	ldr	r2, [pc, #148]	; (80063dc <TIM_OC3_SetConfig+0xf0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10d      	bne.n	8006366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4a24      	ldr	r2, [pc, #144]	; (80063e0 <TIM_OC3_SetConfig+0xf4>)
 800634e:	4013      	ands	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <TIM_OC3_SetConfig+0xf8>)
 8006362:	4013      	ands	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <TIM_OC3_SetConfig+0xf0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_OC3_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <TIM_OC3_SetConfig+0xfc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_OC3_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <TIM_OC3_SetConfig+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC3_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <TIM_OC3_SetConfig+0x104>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d113      	bne.n	80063ae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <TIM_OC3_SetConfig+0x108>)
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <TIM_OC3_SetConfig+0x10c>)
 8006392:	4013      	ands	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b006      	add	sp, #24
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	fffffeff 	.word	0xfffffeff
 80063d4:	fffeff8f 	.word	0xfffeff8f
 80063d8:	fffffdff 	.word	0xfffffdff
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	fffff7ff 	.word	0xfffff7ff
 80063e4:	fffffbff 	.word	0xfffffbff
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800
 80063f4:	ffffefff 	.word	0xffffefff
 80063f8:	ffffdfff 	.word	0xffffdfff

080063fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_OC4_SetConfig+0xb0>)
 800640c:	401a      	ands	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <TIM_OC4_SetConfig+0xb4>)
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <TIM_OC4_SetConfig+0xb8>)
 8006430:	4013      	ands	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <TIM_OC4_SetConfig+0xbc>)
 8006444:	4013      	ands	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a19      	ldr	r2, [pc, #100]	; (80064bc <TIM_OC4_SetConfig+0xc0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_OC4_SetConfig+0x78>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <TIM_OC4_SetConfig+0xc4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_OC4_SetConfig+0x78>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <TIM_OC4_SetConfig+0xc8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC4_SetConfig+0x78>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <TIM_OC4_SetConfig+0xcc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d109      	bne.n	8006488 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4a15      	ldr	r2, [pc, #84]	; (80064cc <TIM_OC4_SetConfig+0xd0>)
 8006478:	4013      	ands	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	019b      	lsls	r3, r3, #6
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b006      	add	sp, #24
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	ffffefff 	.word	0xffffefff
 80064b0:	feff8fff 	.word	0xfeff8fff
 80064b4:	fffffcff 	.word	0xfffffcff
 80064b8:	ffffdfff 	.word	0xffffdfff
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800
 80064cc:	ffffbfff 	.word	0xffffbfff

080064d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4a25      	ldr	r2, [pc, #148]	; (8006574 <TIM_OC5_SetConfig+0xa4>)
 80064e0:	401a      	ands	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <TIM_OC5_SetConfig+0xa8>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <TIM_OC5_SetConfig+0xac>)
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a17      	ldr	r2, [pc, #92]	; (8006580 <TIM_OC5_SetConfig+0xb0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00b      	beq.n	800653e <TIM_OC5_SetConfig+0x6e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <TIM_OC5_SetConfig+0xb4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <TIM_OC5_SetConfig+0x6e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <TIM_OC5_SetConfig+0xb8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC5_SetConfig+0x6e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <TIM_OC5_SetConfig+0xbc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d109      	bne.n	8006552 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4a0c      	ldr	r2, [pc, #48]	; (8006574 <TIM_OC5_SetConfig+0xa4>)
 8006542:	4013      	ands	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	46bd      	mov	sp, r7
 8006570:	b006      	add	sp, #24
 8006572:	bd80      	pop	{r7, pc}
 8006574:	fffeffff 	.word	0xfffeffff
 8006578:	fffeff8f 	.word	0xfffeff8f
 800657c:	fffdffff 	.word	0xfffdffff
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	4a26      	ldr	r2, [pc, #152]	; (8006638 <TIM_OC6_SetConfig+0xa8>)
 80065a0:	401a      	ands	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a20      	ldr	r2, [pc, #128]	; (800663c <TIM_OC6_SetConfig+0xac>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <TIM_OC6_SetConfig+0xb0>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <TIM_OC6_SetConfig+0xb4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_OC6_SetConfig+0x70>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <TIM_OC6_SetConfig+0xb8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_OC6_SetConfig+0x70>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a16      	ldr	r2, [pc, #88]	; (800664c <TIM_OC6_SetConfig+0xbc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC6_SetConfig+0x70>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a15      	ldr	r2, [pc, #84]	; (8006650 <TIM_OC6_SetConfig+0xc0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d109      	bne.n	8006614 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4a14      	ldr	r2, [pc, #80]	; (8006654 <TIM_OC6_SetConfig+0xc4>)
 8006604:	4013      	ands	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b006      	add	sp, #24
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	ffefffff 	.word	0xffefffff
 800663c:	feff8fff 	.word	0xfeff8fff
 8006640:	ffdfffff 	.word	0xffdfffff
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800
 8006654:	fffbffff 	.word	0xfffbffff

08006658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	2201      	movs	r2, #1
 8006670:	4393      	bics	r3, r2
 8006672:	001a      	movs	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	22f0      	movs	r2, #240	; 0xf0
 8006682:	4393      	bics	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	220a      	movs	r2, #10
 8006694:	4393      	bics	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	621a      	str	r2, [r3, #32]
}
 80066ac:	46c0      	nop			; (mov r8, r8)
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b006      	add	sp, #24
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	2210      	movs	r2, #16
 80066c6:	4393      	bics	r3, r2
 80066c8:	001a      	movs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	4a0d      	ldr	r2, [pc, #52]	; (8006714 <TIM_TI2_ConfigInputStage+0x60>)
 80066de:	4013      	ands	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	22a0      	movs	r2, #160	; 0xa0
 80066f0:	4393      	bics	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	46bd      	mov	sp, r7
 800670e:	b006      	add	sp, #24
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	ffff0fff 	.word	0xffff0fff

08006718 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a08      	ldr	r2, [pc, #32]	; (800674c <TIM_ITRx_SetConfig+0x34>)
 800672c:	4013      	ands	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	2207      	movs	r2, #7
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	609a      	str	r2, [r3, #8]
}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b004      	add	sp, #16
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	ffcfff8f 	.word	0xffcfff8f

08006750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <TIM_ETR_SetConfig+0x3c>)
 8006768:	4013      	ands	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	021a      	lsls	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	431a      	orrs	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b006      	add	sp, #24
 800678a:	bd80      	pop	{r7, pc}
 800678c:	ffff00ff 	.word	0xffff00ff

08006790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	221f      	movs	r2, #31
 80067a0:	4013      	ands	r3, r2
 80067a2:	2201      	movs	r2, #1
 80067a4:	409a      	lsls	r2, r3
 80067a6:	0013      	movs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	43d2      	mvns	r2, r2
 80067b2:	401a      	ands	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	211f      	movs	r1, #31
 80067c0:	400b      	ands	r3, r1
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4099      	lsls	r1, r3
 80067c6:	000b      	movs	r3, r1
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	46bd      	mov	sp, r7
 80067d2:	b006      	add	sp, #24
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	223c      	movs	r2, #60	; 0x3c
 80067e6:	5c9b      	ldrb	r3, [r3, r2]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e05a      	b.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	223c      	movs	r2, #60	; 0x3c
 80067f4:	2101      	movs	r1, #1
 80067f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	223d      	movs	r2, #61	; 0x3d
 80067fc:	2102      	movs	r1, #2
 80067fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d108      	bne.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800681e:	4013      	ands	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2270      	movs	r2, #112	; 0x70
 8006830:	4393      	bics	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d014      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	05db      	lsls	r3, r3, #23
 8006858:	429a      	cmp	r2, r3
 800685a:	d00e      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a14      	ldr	r2, [pc, #80]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a12      	ldr	r2, [pc, #72]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10c      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2280      	movs	r2, #128	; 0x80
 800687e:	4393      	bics	r3, r2
 8006880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	223d      	movs	r2, #61	; 0x3d
 8006898:	2101      	movs	r1, #1
 800689a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	223c      	movs	r2, #60	; 0x3c
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	0018      	movs	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b004      	add	sp, #16
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	ff0fffff 	.word	0xff0fffff
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40014000 	.word	0x40014000

080068c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	223c      	movs	r2, #60	; 0x3c
 80068d6:	5c9b      	ldrb	r3, [r3, r2]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e079      	b.n	80069d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	223c      	movs	r2, #60	; 0x3c
 80068e4:	2101      	movs	r1, #1
 80068e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	4393      	bics	r3, r2
 80068ee:	001a      	movs	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a38      	ldr	r2, [pc, #224]	; (80069dc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80068fc:	401a      	ands	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a35      	ldr	r2, [pc, #212]	; (80069e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800690a:	401a      	ands	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a33      	ldr	r2, [pc, #204]	; (80069e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006918:	401a      	ands	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a30      	ldr	r2, [pc, #192]	; (80069e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006926:	401a      	ands	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006934:	401a      	ands	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006942:	401a      	ands	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006950:	401a      	ands	r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a25      	ldr	r2, [pc, #148]	; (80069f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d106      	bne.n	8006974 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a24      	ldr	r2, [pc, #144]	; (80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800696a:	401a      	ands	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d121      	bne.n	80069c2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006982:	401a      	ands	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	051b      	lsls	r3, r3, #20
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a1c      	ldr	r2, [pc, #112]	; (8006a04 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006992:	401a      	ands	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80069a0:	401a      	ands	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d106      	bne.n	80069c2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80069b8:	401a      	ands	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	223c      	movs	r2, #60	; 0x3c
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	0018      	movs	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b004      	add	sp, #16
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	fffffcff 	.word	0xfffffcff
 80069e0:	fffffbff 	.word	0xfffffbff
 80069e4:	fffff7ff 	.word	0xfffff7ff
 80069e8:	ffffefff 	.word	0xffffefff
 80069ec:	ffffdfff 	.word	0xffffdfff
 80069f0:	ffffbfff 	.word	0xffffbfff
 80069f4:	fff0ffff 	.word	0xfff0ffff
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	efffffff 	.word	0xefffffff
 8006a00:	ff0fffff 	.word	0xff0fffff
 8006a04:	feffffff 	.word	0xfeffffff
 8006a08:	fdffffff 	.word	0xfdffffff
 8006a0c:	dfffffff 	.word	0xdfffffff

08006a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b002      	add	sp, #8
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b002      	add	sp, #8
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e046      	b.n	8006ae0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2288      	movs	r2, #136	; 0x88
 8006a56:	589b      	ldr	r3, [r3, r2]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d107      	bne.n	8006a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2284      	movs	r2, #132	; 0x84
 8006a60:	2100      	movs	r1, #0
 8006a62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7fc f878 	bl	8002b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2288      	movs	r2, #136	; 0x88
 8006a70:	2124      	movs	r1, #36	; 0x24
 8006a72:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	438a      	bics	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	0018      	movs	r0, r3
 8006a88:	f000 fc84 	bl	8007394 <UART_SetConfig>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e024      	b.n	8006ae0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 ffcd 	bl	8007a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	490d      	ldr	r1, [pc, #52]	; (8006ae8 <HAL_UART_Init+0xa8>)
 8006ab2:	400a      	ands	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	212a      	movs	r1, #42	; 0x2a
 8006ac2:	438a      	bics	r2, r1
 8006ac4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f001 f865 	bl	8007ba8 <UART_CheckIdleState>
 8006ade:	0003      	movs	r3, r0
}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	ffffb7ff 	.word	0xffffb7ff

08006aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	1dbb      	adds	r3, r7, #6
 8006afa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2288      	movs	r2, #136	; 0x88
 8006b00:	589b      	ldr	r3, [r3, r2]
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d000      	beq.n	8006b08 <HAL_UART_Transmit+0x1c>
 8006b06:	e088      	b.n	8006c1a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_UART_Transmit+0x2a>
 8006b0e:	1dbb      	adds	r3, r7, #6
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e080      	b.n	8006c1c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	015b      	lsls	r3, r3, #5
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d109      	bne.n	8006b3a <HAL_UART_Transmit+0x4e>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2201      	movs	r2, #1
 8006b32:	4013      	ands	r3, r2
 8006b34:	d001      	beq.n	8006b3a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e070      	b.n	8006c1c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2290      	movs	r2, #144	; 0x90
 8006b3e:	2100      	movs	r1, #0
 8006b40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2288      	movs	r2, #136	; 0x88
 8006b46:	2121      	movs	r1, #33	; 0x21
 8006b48:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b4a:	f7fc fa2d 	bl	8002fa8 <HAL_GetTick>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1dba      	adds	r2, r7, #6
 8006b56:	2154      	movs	r1, #84	; 0x54
 8006b58:	8812      	ldrh	r2, [r2, #0]
 8006b5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1dba      	adds	r2, r7, #6
 8006b60:	2156      	movs	r1, #86	; 0x56
 8006b62:	8812      	ldrh	r2, [r2, #0]
 8006b64:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	015b      	lsls	r3, r3, #5
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d108      	bne.n	8006b84 <HAL_UART_Transmit+0x98>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e003      	b.n	8006b8c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b8c:	e02c      	b.n	8006be8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	0013      	movs	r3, r2
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	f001 f852 	bl	8007c44 <UART_WaitOnFlagUntilTimeout>
 8006ba0:	1e03      	subs	r3, r0, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e039      	b.n	8006c1c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	05d2      	lsls	r2, r2, #23
 8006bba:	0dd2      	lsrs	r2, r2, #23
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e007      	b.n	8006bd6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2256      	movs	r2, #86	; 0x56
 8006bda:	5a9b      	ldrh	r3, [r3, r2]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b299      	uxth	r1, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2256      	movs	r2, #86	; 0x56
 8006be6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2256      	movs	r2, #86	; 0x56
 8006bec:	5a9b      	ldrh	r3, [r3, r2]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1cc      	bne.n	8006b8e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	0013      	movs	r3, r2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2140      	movs	r1, #64	; 0x40
 8006c02:	f001 f81f 	bl	8007c44 <UART_WaitOnFlagUntilTimeout>
 8006c06:	1e03      	subs	r3, r0, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e006      	b.n	8006c1c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2288      	movs	r2, #136	; 0x88
 8006c12:	2120      	movs	r1, #32
 8006c14:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006c1a:	2302      	movs	r3, #2
  }
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b008      	add	sp, #32
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	1dbb      	adds	r3, r7, #6
 8006c30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	228c      	movs	r2, #140	; 0x8c
 8006c36:	589b      	ldr	r3, [r3, r2]
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d14f      	bne.n	8006cdc <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_UART_Receive_DMA+0x26>
 8006c42:	1dbb      	adds	r3, r7, #6
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e047      	b.n	8006cde <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	015b      	lsls	r3, r3, #5
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d109      	bne.n	8006c6e <HAL_UART_Receive_DMA+0x4a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2201      	movs	r2, #1
 8006c66:	4013      	ands	r3, r2
 8006c68:	d001      	beq.n	8006c6e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e037      	b.n	8006cde <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <HAL_UART_Receive_DMA+0xc4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d025      	beq.n	8006cca <HAL_UART_Receive_DMA+0xa6>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1a      	ldr	r2, [pc, #104]	; (8006cec <HAL_UART_Receive_DMA+0xc8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d020      	beq.n	8006cca <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	4013      	ands	r3, r2
 8006c94:	d019      	beq.n	8006cca <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c96:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c9c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	04c9      	lsls	r1, r1, #19
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cca:	1dbb      	adds	r3, r7, #6
 8006ccc:	881a      	ldrh	r2, [r3, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f001 f87e 	bl	8007dd4 <UART_Start_Receive_DMA>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	e000      	b.n	8006cde <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b008      	add	sp, #32
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	40008000 	.word	0x40008000
 8006cec:	40008400 	.word	0x40008400

08006cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf0:	b5b0      	push	{r4, r5, r7, lr}
 8006cf2:	b0aa      	sub	sp, #168	; 0xa8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	22a4      	movs	r2, #164	; 0xa4
 8006d00:	18b9      	adds	r1, r7, r2
 8006d02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	20a0      	movs	r0, #160	; 0xa0
 8006d0c:	1839      	adds	r1, r7, r0
 8006d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	249c      	movs	r4, #156	; 0x9c
 8006d18:	1939      	adds	r1, r7, r4
 8006d1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d1c:	0011      	movs	r1, r2
 8006d1e:	18bb      	adds	r3, r7, r2
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4aa2      	ldr	r2, [pc, #648]	; (8006fac <HAL_UART_IRQHandler+0x2bc>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	2298      	movs	r2, #152	; 0x98
 8006d28:	18bd      	adds	r5, r7, r2
 8006d2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006d2c:	18bb      	adds	r3, r7, r2
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11a      	bne.n	8006d6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d34:	187b      	adds	r3, r7, r1
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d015      	beq.n	8006d6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d3e:	183b      	adds	r3, r7, r0
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2220      	movs	r2, #32
 8006d44:	4013      	ands	r3, r2
 8006d46:	d105      	bne.n	8006d54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d48:	193b      	adds	r3, r7, r4
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	055b      	lsls	r3, r3, #21
 8006d50:	4013      	ands	r3, r2
 8006d52:	d00a      	beq.n	8006d6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d100      	bne.n	8006d5e <HAL_UART_IRQHandler+0x6e>
 8006d5c:	e2dc      	b.n	8007318 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	0010      	movs	r0, r2
 8006d66:	4798      	blx	r3
      }
      return;
 8006d68:	e2d6      	b.n	8007318 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d6a:	2398      	movs	r3, #152	; 0x98
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d100      	bne.n	8006d76 <HAL_UART_IRQHandler+0x86>
 8006d74:	e122      	b.n	8006fbc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d76:	239c      	movs	r3, #156	; 0x9c
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a8c      	ldr	r2, [pc, #560]	; (8006fb0 <HAL_UART_IRQHandler+0x2c0>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d106      	bne.n	8006d90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d82:	23a0      	movs	r3, #160	; 0xa0
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a8a      	ldr	r2, [pc, #552]	; (8006fb4 <HAL_UART_IRQHandler+0x2c4>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d100      	bne.n	8006d90 <HAL_UART_IRQHandler+0xa0>
 8006d8e:	e115      	b.n	8006fbc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d90:	23a4      	movs	r3, #164	; 0xa4
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2201      	movs	r2, #1
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d012      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
 8006d9c:	23a0      	movs	r3, #160	; 0xa0
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	2380      	movs	r3, #128	; 0x80
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4013      	ands	r3, r2
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2201      	movs	r2, #1
 8006db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2290      	movs	r2, #144	; 0x90
 8006db6:	589b      	ldr	r3, [r3, r2]
 8006db8:	2201      	movs	r2, #1
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2190      	movs	r1, #144	; 0x90
 8006dc0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc2:	23a4      	movs	r3, #164	; 0xa4
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	4013      	ands	r3, r2
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x102>
 8006dce:	239c      	movs	r3, #156	; 0x9c
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d00b      	beq.n	8006df2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2202      	movs	r2, #2
 8006de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2290      	movs	r2, #144	; 0x90
 8006de6:	589b      	ldr	r3, [r3, r2]
 8006de8:	2204      	movs	r2, #4
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2190      	movs	r1, #144	; 0x90
 8006df0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df2:	23a4      	movs	r3, #164	; 0xa4
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_UART_IRQHandler+0x132>
 8006dfe:	239c      	movs	r3, #156	; 0x9c
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4013      	ands	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2290      	movs	r2, #144	; 0x90
 8006e16:	589b      	ldr	r3, [r3, r2]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2190      	movs	r1, #144	; 0x90
 8006e20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e22:	23a4      	movs	r3, #164	; 0xa4
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d017      	beq.n	8006e5e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e2e:	23a0      	movs	r3, #160	; 0xa0
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2220      	movs	r2, #32
 8006e36:	4013      	ands	r3, r2
 8006e38:	d105      	bne.n	8006e46 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e3a:	239c      	movs	r3, #156	; 0x9c
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a5b      	ldr	r2, [pc, #364]	; (8006fb0 <HAL_UART_IRQHandler+0x2c0>)
 8006e42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e44:	d00b      	beq.n	8006e5e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2290      	movs	r2, #144	; 0x90
 8006e52:	589b      	ldr	r3, [r3, r2]
 8006e54:	2208      	movs	r2, #8
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2190      	movs	r1, #144	; 0x90
 8006e5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e5e:	23a4      	movs	r3, #164	; 0xa4
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d013      	beq.n	8006e94 <HAL_UART_IRQHandler+0x1a4>
 8006e6c:	23a0      	movs	r3, #160	; 0xa0
 8006e6e:	18fb      	adds	r3, r7, r3
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	04db      	lsls	r3, r3, #19
 8006e76:	4013      	ands	r3, r2
 8006e78:	d00c      	beq.n	8006e94 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2280      	movs	r2, #128	; 0x80
 8006e80:	0112      	lsls	r2, r2, #4
 8006e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2290      	movs	r2, #144	; 0x90
 8006e88:	589b      	ldr	r3, [r3, r2]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2190      	movs	r1, #144	; 0x90
 8006e92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2290      	movs	r2, #144	; 0x90
 8006e98:	589b      	ldr	r3, [r3, r2]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d100      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x1b0>
 8006e9e:	e23d      	b.n	800731c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ea0:	23a4      	movs	r3, #164	; 0xa4
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d015      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eac:	23a0      	movs	r3, #160	; 0xa0
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006eb8:	239c      	movs	r3, #156	; 0x9c
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	; 0x80
 8006ec0:	055b      	lsls	r3, r3, #21
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d008      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	0010      	movs	r0, r2
 8006ed6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2290      	movs	r2, #144	; 0x90
 8006edc:	589b      	ldr	r3, [r3, r2]
 8006ede:	2194      	movs	r1, #148	; 0x94
 8006ee0:	187a      	adds	r2, r7, r1
 8006ee2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2240      	movs	r2, #64	; 0x40
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d004      	beq.n	8006efc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ef2:	187b      	adds	r3, r7, r1
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2228      	movs	r2, #40	; 0x28
 8006ef8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006efa:	d04c      	beq.n	8006f96 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f001 f84e 	bl	8007fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2240      	movs	r2, #64	; 0x40
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d13c      	bne.n	8006f8c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	2090      	movs	r0, #144	; 0x90
 8006f1c:	183a      	adds	r2, r7, r0
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	2301      	movs	r3, #1
 8006f22:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2140      	movs	r1, #64	; 0x40
 8006f38:	438a      	bics	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	183b      	adds	r3, r7, r0
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f44:	f383 8810 	msr	PRIMASK, r3
}
 8006f48:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	589b      	ldr	r3, [r3, r2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d016      	beq.n	8006f82 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2280      	movs	r2, #128	; 0x80
 8006f58:	589b      	ldr	r3, [r3, r2]
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <HAL_UART_IRQHandler+0x2c8>)
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2280      	movs	r2, #128	; 0x80
 8006f62:	589b      	ldr	r3, [r3, r2]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f7fc fabd 	bl	80034e4 <HAL_DMA_Abort_IT>
 8006f6a:	1e03      	subs	r3, r0, #0
 8006f6c:	d01c      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2280      	movs	r2, #128	; 0x80
 8006f72:	589b      	ldr	r3, [r3, r2]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	5852      	ldr	r2, [r2, r1]
 8006f7c:	0010      	movs	r0, r2
 8006f7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	e012      	b.n	8006fa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f000 f9f1 	bl	800736c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8a:	e00d      	b.n	8006fa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f000 f9ec 	bl	800736c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f94:	e008      	b.n	8006fa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f000 f9e7 	bl	800736c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2290      	movs	r2, #144	; 0x90
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006fa6:	e1b9      	b.n	800731c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	46c0      	nop			; (mov r8, r8)
    return;
 8006faa:	e1b7      	b.n	800731c <HAL_UART_IRQHandler+0x62c>
 8006fac:	0000080f 	.word	0x0000080f
 8006fb0:	10000001 	.word	0x10000001
 8006fb4:	04000120 	.word	0x04000120
 8006fb8:	08008265 	.word	0x08008265

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d000      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x2d6>
 8006fc4:	e13e      	b.n	8007244 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fc6:	23a4      	movs	r3, #164	; 0xa4
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d100      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x2e4>
 8006fd2:	e137      	b.n	8007244 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fd4:	23a0      	movs	r3, #160	; 0xa0
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x2f2>
 8006fe0:	e130      	b.n	8007244 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2240      	movs	r2, #64	; 0x40
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d000      	beq.n	8006ffa <HAL_UART_IRQHandler+0x30a>
 8006ff8:	e0a4      	b.n	8007144 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	589b      	ldr	r3, [r3, r2]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	217e      	movs	r1, #126	; 0x7e
 8007006:	187b      	adds	r3, r7, r1
 8007008:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800700a:	187b      	adds	r3, r7, r1
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d100      	bne.n	8007014 <HAL_UART_IRQHandler+0x324>
 8007012:	e185      	b.n	8007320 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	225c      	movs	r2, #92	; 0x5c
 8007018:	5a9b      	ldrh	r3, [r3, r2]
 800701a:	187a      	adds	r2, r7, r1
 800701c:	8812      	ldrh	r2, [r2, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d300      	bcc.n	8007024 <HAL_UART_IRQHandler+0x334>
 8007022:	e17d      	b.n	8007320 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	187a      	adds	r2, r7, r1
 8007028:	215e      	movs	r1, #94	; 0x5e
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2280      	movs	r2, #128	; 0x80
 8007032:	589b      	ldr	r3, [r3, r2]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2220      	movs	r2, #32
 800703a:	4013      	ands	r3, r2
 800703c:	d170      	bne.n	8007120 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703e:	f3ef 8310 	mrs	r3, PRIMASK
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007046:	67bb      	str	r3, [r7, #120]	; 0x78
 8007048:	2301      	movs	r3, #1
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f383 8810 	msr	PRIMASK, r3
}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	49b4      	ldr	r1, [pc, #720]	; (8007330 <HAL_UART_IRQHandler+0x640>)
 8007060:	400a      	ands	r2, r1
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007070:	f3ef 8310 	mrs	r3, PRIMASK
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007078:	677b      	str	r3, [r7, #116]	; 0x74
 800707a:	2301      	movs	r3, #1
 800707c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	f383 8810 	msr	PRIMASK, r3
}
 8007084:	46c0      	nop			; (mov r8, r8)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2101      	movs	r1, #1
 8007092:	438a      	bics	r2, r1
 8007094:	609a      	str	r2, [r3, #8]
 8007096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709c:	f383 8810 	msr	PRIMASK, r3
}
 80070a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a2:	f3ef 8310 	mrs	r3, PRIMASK
 80070a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80070a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070aa:	673b      	str	r3, [r7, #112]	; 0x70
 80070ac:	2301      	movs	r3, #1
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2140      	movs	r1, #64	; 0x40
 80070c4:	438a      	bics	r2, r1
 80070c6:	609a      	str	r2, [r3, #8]
 80070c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ce:	f383 8810 	msr	PRIMASK, r3
}
 80070d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	228c      	movs	r2, #140	; 0x8c
 80070d8:	2120      	movs	r1, #32
 80070da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e2:	f3ef 8310 	mrs	r3, PRIMASK
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80070e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ec:	2301      	movs	r3, #1
 80070ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070f2:	f383 8810 	msr	PRIMASK, r3
}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2110      	movs	r1, #16
 8007104:	438a      	bics	r2, r1
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800710e:	f383 8810 	msr	PRIMASK, r3
}
 8007112:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2280      	movs	r2, #128	; 0x80
 8007118:	589b      	ldr	r3, [r3, r2]
 800711a:	0018      	movs	r0, r3
 800711c:	f7fc f982 	bl	8003424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	225c      	movs	r2, #92	; 0x5c
 800712a:	5a9a      	ldrh	r2, [r3, r2]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	215e      	movs	r1, #94	; 0x5e
 8007130:	5a5b      	ldrh	r3, [r3, r1]
 8007132:	b29b      	uxth	r3, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f000 f91d 	bl	800737c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007142:	e0ed      	b.n	8007320 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	225c      	movs	r2, #92	; 0x5c
 8007148:	5a99      	ldrh	r1, [r3, r2]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	225e      	movs	r2, #94	; 0x5e
 800714e:	5a9b      	ldrh	r3, [r3, r2]
 8007150:	b29a      	uxth	r2, r3
 8007152:	208e      	movs	r0, #142	; 0x8e
 8007154:	183b      	adds	r3, r7, r0
 8007156:	1a8a      	subs	r2, r1, r2
 8007158:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	225e      	movs	r2, #94	; 0x5e
 800715e:	5a9b      	ldrh	r3, [r3, r2]
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d100      	bne.n	8007168 <HAL_UART_IRQHandler+0x478>
 8007166:	e0dd      	b.n	8007324 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007168:	183b      	adds	r3, r7, r0
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d100      	bne.n	8007172 <HAL_UART_IRQHandler+0x482>
 8007170:	e0d8      	b.n	8007324 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007172:	f3ef 8310 	mrs	r3, PRIMASK
 8007176:	60fb      	str	r3, [r7, #12]
  return(result);
 8007178:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800717a:	2488      	movs	r4, #136	; 0x88
 800717c:	193a      	adds	r2, r7, r4
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	2301      	movs	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f383 8810 	msr	PRIMASK, r3
}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4967      	ldr	r1, [pc, #412]	; (8007334 <HAL_UART_IRQHandler+0x644>)
 8007198:	400a      	ands	r2, r1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	193b      	adds	r3, r7, r4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f383 8810 	msr	PRIMASK, r3
}
 80071a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071aa:	f3ef 8310 	mrs	r3, PRIMASK
 80071ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80071b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071b2:	2484      	movs	r4, #132	; 0x84
 80071b4:	193a      	adds	r2, r7, r4
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	2301      	movs	r3, #1
 80071ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f383 8810 	msr	PRIMASK, r3
}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	495a      	ldr	r1, [pc, #360]	; (8007338 <HAL_UART_IRQHandler+0x648>)
 80071d0:	400a      	ands	r2, r1
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	193b      	adds	r3, r7, r4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f383 8810 	msr	PRIMASK, r3
}
 80071e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	228c      	movs	r2, #140	; 0x8c
 80071e6:	2120      	movs	r1, #32
 80071e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f6:	f3ef 8310 	mrs	r3, PRIMASK
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fe:	2480      	movs	r4, #128	; 0x80
 8007200:	193a      	adds	r2, r7, r4
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	2301      	movs	r3, #1
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f383 8810 	msr	PRIMASK, r3
}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2110      	movs	r1, #16
 800721c:	438a      	bics	r2, r1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	193b      	adds	r3, r7, r4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	f383 8810 	msr	PRIMASK, r3
}
 800722c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007234:	183b      	adds	r3, r7, r0
 8007236:	881a      	ldrh	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f000 f89d 	bl	800737c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007242:	e06f      	b.n	8007324 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007244:	23a4      	movs	r3, #164	; 0xa4
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	035b      	lsls	r3, r3, #13
 800724e:	4013      	ands	r3, r2
 8007250:	d010      	beq.n	8007274 <HAL_UART_IRQHandler+0x584>
 8007252:	239c      	movs	r3, #156	; 0x9c
 8007254:	18fb      	adds	r3, r7, r3
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	03db      	lsls	r3, r3, #15
 800725c:	4013      	ands	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	0352      	lsls	r2, r2, #13
 8007268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0018      	movs	r0, r3
 800726e:	f001 f83c 	bl	80082ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007272:	e05a      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007274:	23a4      	movs	r3, #164	; 0xa4
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2280      	movs	r2, #128	; 0x80
 800727c:	4013      	ands	r3, r2
 800727e:	d016      	beq.n	80072ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007280:	23a0      	movs	r3, #160	; 0xa0
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	4013      	ands	r3, r2
 800728a:	d106      	bne.n	800729a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800728c:	239c      	movs	r3, #156	; 0x9c
 800728e:	18fb      	adds	r3, r7, r3
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	4013      	ands	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d042      	beq.n	8007328 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	0010      	movs	r0, r2
 80072aa:	4798      	blx	r3
    }
    return;
 80072ac:	e03c      	b.n	8007328 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072ae:	23a4      	movs	r3, #164	; 0xa4
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2240      	movs	r2, #64	; 0x40
 80072b6:	4013      	ands	r3, r2
 80072b8:	d00a      	beq.n	80072d0 <HAL_UART_IRQHandler+0x5e0>
 80072ba:	23a0      	movs	r3, #160	; 0xa0
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2240      	movs	r2, #64	; 0x40
 80072c2:	4013      	ands	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f000 ffe2 	bl	8008292 <UART_EndTransmit_IT>
    return;
 80072ce:	e02c      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072d0:	23a4      	movs	r3, #164	; 0xa4
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	2380      	movs	r3, #128	; 0x80
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	4013      	ands	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <HAL_UART_IRQHandler+0x606>
 80072de:	23a0      	movs	r3, #160	; 0xa0
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	05db      	lsls	r3, r3, #23
 80072e8:	4013      	ands	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	0018      	movs	r0, r3
 80072f0:	f001 f80b 	bl	800830a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072f4:	e019      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80072f6:	23a4      	movs	r3, #164	; 0xa4
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	045b      	lsls	r3, r3, #17
 8007300:	4013      	ands	r3, r2
 8007302:	d012      	beq.n	800732a <HAL_UART_IRQHandler+0x63a>
 8007304:	23a0      	movs	r3, #160	; 0xa0
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	da0d      	bge.n	800732a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	0018      	movs	r0, r3
 8007312:	f000 fff2 	bl	80082fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007316:	e008      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
      return;
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	e006      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
    return;
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	e004      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
      return;
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	e002      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
      return;
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	e000      	b.n	800732a <HAL_UART_IRQHandler+0x63a>
    return;
 8007328:	46c0      	nop			; (mov r8, r8)
  }
}
 800732a:	46bd      	mov	sp, r7
 800732c:	b02a      	add	sp, #168	; 0xa8
 800732e:	bdb0      	pop	{r4, r5, r7, pc}
 8007330:	fffffeff 	.word	0xfffffeff
 8007334:	fffffedf 	.word	0xfffffedf
 8007338:	effffffe 	.word	0xeffffffe

0800733c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007344:	46c0      	nop			; (mov r8, r8)
 8007346:	46bd      	mov	sp, r7
 8007348:	b002      	add	sp, #8
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	46bd      	mov	sp, r7
 8007358:	b002      	add	sp, #8
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007364:	46c0      	nop			; (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	b002      	add	sp, #8
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007374:	46c0      	nop			; (mov r8, r8)
 8007376:	46bd      	mov	sp, r7
 8007378:	b002      	add	sp, #8
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	000a      	movs	r2, r1
 8007386:	1cbb      	adds	r3, r7, #2
 8007388:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b090      	sub	sp, #64	; 0x40
 8007398:	af00      	add	r7, sp, #0
 800739a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800739c:	231a      	movs	r3, #26
 800739e:	2220      	movs	r2, #32
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4313      	orrs	r3, r2
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4ac1      	ldr	r2, [pc, #772]	; (80076cc <UART_SetConfig+0x338>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	0019      	movs	r1, r3
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4abc      	ldr	r2, [pc, #752]	; (80076d0 <UART_SetConfig+0x33c>)
 80073de:	4013      	ands	r3, r2
 80073e0:	0018      	movs	r0, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	0003      	movs	r3, r0
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4ab6      	ldr	r2, [pc, #728]	; (80076d4 <UART_SetConfig+0x340>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <UART_SetConfig+0x80>
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4ab4      	ldr	r2, [pc, #720]	; (80076d8 <UART_SetConfig+0x344>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007410:	4313      	orrs	r3, r2
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	4ab0      	ldr	r2, [pc, #704]	; (80076dc <UART_SetConfig+0x348>)
 800741c:	4013      	ands	r3, r2
 800741e:	0019      	movs	r1, r3
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	430b      	orrs	r3, r1
 8007428:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	220f      	movs	r2, #15
 8007432:	4393      	bics	r3, r2
 8007434:	0018      	movs	r0, r3
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	0003      	movs	r3, r0
 8007440:	430b      	orrs	r3, r1
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4aa5      	ldr	r2, [pc, #660]	; (80076e0 <UART_SetConfig+0x34c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d131      	bne.n	80074b2 <UART_SetConfig+0x11e>
 800744e:	4ba5      	ldr	r3, [pc, #660]	; (80076e4 <UART_SetConfig+0x350>)
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	2203      	movs	r2, #3
 8007454:	4013      	ands	r3, r2
 8007456:	2b03      	cmp	r3, #3
 8007458:	d01d      	beq.n	8007496 <UART_SetConfig+0x102>
 800745a:	d823      	bhi.n	80074a4 <UART_SetConfig+0x110>
 800745c:	2b02      	cmp	r3, #2
 800745e:	d00c      	beq.n	800747a <UART_SetConfig+0xe6>
 8007460:	d820      	bhi.n	80074a4 <UART_SetConfig+0x110>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <UART_SetConfig+0xd8>
 8007466:	2b01      	cmp	r3, #1
 8007468:	d00e      	beq.n	8007488 <UART_SetConfig+0xf4>
 800746a:	e01b      	b.n	80074a4 <UART_SetConfig+0x110>
 800746c:	231b      	movs	r3, #27
 800746e:	2220      	movs	r2, #32
 8007470:	189b      	adds	r3, r3, r2
 8007472:	19db      	adds	r3, r3, r7
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e154      	b.n	8007724 <UART_SetConfig+0x390>
 800747a:	231b      	movs	r3, #27
 800747c:	2220      	movs	r2, #32
 800747e:	189b      	adds	r3, r3, r2
 8007480:	19db      	adds	r3, r3, r7
 8007482:	2202      	movs	r2, #2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e14d      	b.n	8007724 <UART_SetConfig+0x390>
 8007488:	231b      	movs	r3, #27
 800748a:	2220      	movs	r2, #32
 800748c:	189b      	adds	r3, r3, r2
 800748e:	19db      	adds	r3, r3, r7
 8007490:	2204      	movs	r2, #4
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e146      	b.n	8007724 <UART_SetConfig+0x390>
 8007496:	231b      	movs	r3, #27
 8007498:	2220      	movs	r2, #32
 800749a:	189b      	adds	r3, r3, r2
 800749c:	19db      	adds	r3, r3, r7
 800749e:	2208      	movs	r2, #8
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e13f      	b.n	8007724 <UART_SetConfig+0x390>
 80074a4:	231b      	movs	r3, #27
 80074a6:	2220      	movs	r2, #32
 80074a8:	189b      	adds	r3, r3, r2
 80074aa:	19db      	adds	r3, r3, r7
 80074ac:	2210      	movs	r2, #16
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e138      	b.n	8007724 <UART_SetConfig+0x390>
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a8c      	ldr	r2, [pc, #560]	; (80076e8 <UART_SetConfig+0x354>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d131      	bne.n	8007520 <UART_SetConfig+0x18c>
 80074bc:	4b89      	ldr	r3, [pc, #548]	; (80076e4 <UART_SetConfig+0x350>)
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	220c      	movs	r2, #12
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b0c      	cmp	r3, #12
 80074c6:	d01d      	beq.n	8007504 <UART_SetConfig+0x170>
 80074c8:	d823      	bhi.n	8007512 <UART_SetConfig+0x17e>
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d00c      	beq.n	80074e8 <UART_SetConfig+0x154>
 80074ce:	d820      	bhi.n	8007512 <UART_SetConfig+0x17e>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <UART_SetConfig+0x146>
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00e      	beq.n	80074f6 <UART_SetConfig+0x162>
 80074d8:	e01b      	b.n	8007512 <UART_SetConfig+0x17e>
 80074da:	231b      	movs	r3, #27
 80074dc:	2220      	movs	r2, #32
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	19db      	adds	r3, r3, r7
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e11d      	b.n	8007724 <UART_SetConfig+0x390>
 80074e8:	231b      	movs	r3, #27
 80074ea:	2220      	movs	r2, #32
 80074ec:	189b      	adds	r3, r3, r2
 80074ee:	19db      	adds	r3, r3, r7
 80074f0:	2202      	movs	r2, #2
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e116      	b.n	8007724 <UART_SetConfig+0x390>
 80074f6:	231b      	movs	r3, #27
 80074f8:	2220      	movs	r2, #32
 80074fa:	189b      	adds	r3, r3, r2
 80074fc:	19db      	adds	r3, r3, r7
 80074fe:	2204      	movs	r2, #4
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e10f      	b.n	8007724 <UART_SetConfig+0x390>
 8007504:	231b      	movs	r3, #27
 8007506:	2220      	movs	r2, #32
 8007508:	189b      	adds	r3, r3, r2
 800750a:	19db      	adds	r3, r3, r7
 800750c:	2208      	movs	r2, #8
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e108      	b.n	8007724 <UART_SetConfig+0x390>
 8007512:	231b      	movs	r3, #27
 8007514:	2220      	movs	r2, #32
 8007516:	189b      	adds	r3, r3, r2
 8007518:	19db      	adds	r3, r3, r7
 800751a:	2210      	movs	r2, #16
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e101      	b.n	8007724 <UART_SetConfig+0x390>
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a71      	ldr	r2, [pc, #452]	; (80076ec <UART_SetConfig+0x358>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d131      	bne.n	800758e <UART_SetConfig+0x1fa>
 800752a:	4b6e      	ldr	r3, [pc, #440]	; (80076e4 <UART_SetConfig+0x350>)
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	2230      	movs	r2, #48	; 0x30
 8007530:	4013      	ands	r3, r2
 8007532:	2b30      	cmp	r3, #48	; 0x30
 8007534:	d01d      	beq.n	8007572 <UART_SetConfig+0x1de>
 8007536:	d823      	bhi.n	8007580 <UART_SetConfig+0x1ec>
 8007538:	2b20      	cmp	r3, #32
 800753a:	d00c      	beq.n	8007556 <UART_SetConfig+0x1c2>
 800753c:	d820      	bhi.n	8007580 <UART_SetConfig+0x1ec>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <UART_SetConfig+0x1b4>
 8007542:	2b10      	cmp	r3, #16
 8007544:	d00e      	beq.n	8007564 <UART_SetConfig+0x1d0>
 8007546:	e01b      	b.n	8007580 <UART_SetConfig+0x1ec>
 8007548:	231b      	movs	r3, #27
 800754a:	2220      	movs	r2, #32
 800754c:	189b      	adds	r3, r3, r2
 800754e:	19db      	adds	r3, r3, r7
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	e0e6      	b.n	8007724 <UART_SetConfig+0x390>
 8007556:	231b      	movs	r3, #27
 8007558:	2220      	movs	r2, #32
 800755a:	189b      	adds	r3, r3, r2
 800755c:	19db      	adds	r3, r3, r7
 800755e:	2202      	movs	r2, #2
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	e0df      	b.n	8007724 <UART_SetConfig+0x390>
 8007564:	231b      	movs	r3, #27
 8007566:	2220      	movs	r2, #32
 8007568:	189b      	adds	r3, r3, r2
 800756a:	19db      	adds	r3, r3, r7
 800756c:	2204      	movs	r2, #4
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	e0d8      	b.n	8007724 <UART_SetConfig+0x390>
 8007572:	231b      	movs	r3, #27
 8007574:	2220      	movs	r2, #32
 8007576:	189b      	adds	r3, r3, r2
 8007578:	19db      	adds	r3, r3, r7
 800757a:	2208      	movs	r2, #8
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e0d1      	b.n	8007724 <UART_SetConfig+0x390>
 8007580:	231b      	movs	r3, #27
 8007582:	2220      	movs	r2, #32
 8007584:	189b      	adds	r3, r3, r2
 8007586:	19db      	adds	r3, r3, r7
 8007588:	2210      	movs	r2, #16
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	e0ca      	b.n	8007724 <UART_SetConfig+0x390>
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a57      	ldr	r2, [pc, #348]	; (80076f0 <UART_SetConfig+0x35c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d106      	bne.n	80075a6 <UART_SetConfig+0x212>
 8007598:	231b      	movs	r3, #27
 800759a:	2220      	movs	r2, #32
 800759c:	189b      	adds	r3, r3, r2
 800759e:	19db      	adds	r3, r3, r7
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	e0be      	b.n	8007724 <UART_SetConfig+0x390>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a52      	ldr	r2, [pc, #328]	; (80076f4 <UART_SetConfig+0x360>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d106      	bne.n	80075be <UART_SetConfig+0x22a>
 80075b0:	231b      	movs	r3, #27
 80075b2:	2220      	movs	r2, #32
 80075b4:	189b      	adds	r3, r3, r2
 80075b6:	19db      	adds	r3, r3, r7
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e0b2      	b.n	8007724 <UART_SetConfig+0x390>
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a4d      	ldr	r2, [pc, #308]	; (80076f8 <UART_SetConfig+0x364>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d106      	bne.n	80075d6 <UART_SetConfig+0x242>
 80075c8:	231b      	movs	r3, #27
 80075ca:	2220      	movs	r2, #32
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	19db      	adds	r3, r3, r7
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e0a6      	b.n	8007724 <UART_SetConfig+0x390>
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a3e      	ldr	r2, [pc, #248]	; (80076d4 <UART_SetConfig+0x340>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d13e      	bne.n	800765e <UART_SetConfig+0x2ca>
 80075e0:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <UART_SetConfig+0x350>)
 80075e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075e4:	23c0      	movs	r3, #192	; 0xc0
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	4013      	ands	r3, r2
 80075ea:	22c0      	movs	r2, #192	; 0xc0
 80075ec:	0112      	lsls	r2, r2, #4
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d027      	beq.n	8007642 <UART_SetConfig+0x2ae>
 80075f2:	22c0      	movs	r2, #192	; 0xc0
 80075f4:	0112      	lsls	r2, r2, #4
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d82a      	bhi.n	8007650 <UART_SetConfig+0x2bc>
 80075fa:	2280      	movs	r2, #128	; 0x80
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	4293      	cmp	r3, r2
 8007600:	d011      	beq.n	8007626 <UART_SetConfig+0x292>
 8007602:	2280      	movs	r2, #128	; 0x80
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	4293      	cmp	r3, r2
 8007608:	d822      	bhi.n	8007650 <UART_SetConfig+0x2bc>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <UART_SetConfig+0x284>
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	00d2      	lsls	r2, r2, #3
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <UART_SetConfig+0x2a0>
 8007616:	e01b      	b.n	8007650 <UART_SetConfig+0x2bc>
 8007618:	231b      	movs	r3, #27
 800761a:	2220      	movs	r2, #32
 800761c:	189b      	adds	r3, r3, r2
 800761e:	19db      	adds	r3, r3, r7
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e07e      	b.n	8007724 <UART_SetConfig+0x390>
 8007626:	231b      	movs	r3, #27
 8007628:	2220      	movs	r2, #32
 800762a:	189b      	adds	r3, r3, r2
 800762c:	19db      	adds	r3, r3, r7
 800762e:	2202      	movs	r2, #2
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e077      	b.n	8007724 <UART_SetConfig+0x390>
 8007634:	231b      	movs	r3, #27
 8007636:	2220      	movs	r2, #32
 8007638:	189b      	adds	r3, r3, r2
 800763a:	19db      	adds	r3, r3, r7
 800763c:	2204      	movs	r2, #4
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e070      	b.n	8007724 <UART_SetConfig+0x390>
 8007642:	231b      	movs	r3, #27
 8007644:	2220      	movs	r2, #32
 8007646:	189b      	adds	r3, r3, r2
 8007648:	19db      	adds	r3, r3, r7
 800764a:	2208      	movs	r2, #8
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e069      	b.n	8007724 <UART_SetConfig+0x390>
 8007650:	231b      	movs	r3, #27
 8007652:	2220      	movs	r2, #32
 8007654:	189b      	adds	r3, r3, r2
 8007656:	19db      	adds	r3, r3, r7
 8007658:	2210      	movs	r2, #16
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	e062      	b.n	8007724 <UART_SetConfig+0x390>
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <UART_SetConfig+0x344>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d157      	bne.n	8007718 <UART_SetConfig+0x384>
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <UART_SetConfig+0x350>)
 800766a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800766c:	23c0      	movs	r3, #192	; 0xc0
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4013      	ands	r3, r2
 8007672:	22c0      	movs	r2, #192	; 0xc0
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <UART_SetConfig+0x368>
 800767a:	22c0      	movs	r2, #192	; 0xc0
 800767c:	0092      	lsls	r2, r2, #2
 800767e:	4293      	cmp	r3, r2
 8007680:	d843      	bhi.n	800770a <UART_SetConfig+0x376>
 8007682:	2280      	movs	r2, #128	; 0x80
 8007684:	0092      	lsls	r2, r2, #2
 8007686:	4293      	cmp	r3, r2
 8007688:	d011      	beq.n	80076ae <UART_SetConfig+0x31a>
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	0092      	lsls	r2, r2, #2
 800768e:	4293      	cmp	r3, r2
 8007690:	d83b      	bhi.n	800770a <UART_SetConfig+0x376>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <UART_SetConfig+0x30c>
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	0052      	lsls	r2, r2, #1
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <UART_SetConfig+0x328>
 800769e:	e034      	b.n	800770a <UART_SetConfig+0x376>
 80076a0:	231b      	movs	r3, #27
 80076a2:	2220      	movs	r2, #32
 80076a4:	189b      	adds	r3, r3, r2
 80076a6:	19db      	adds	r3, r3, r7
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e03a      	b.n	8007724 <UART_SetConfig+0x390>
 80076ae:	231b      	movs	r3, #27
 80076b0:	2220      	movs	r2, #32
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	19db      	adds	r3, r3, r7
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	e033      	b.n	8007724 <UART_SetConfig+0x390>
 80076bc:	231b      	movs	r3, #27
 80076be:	2220      	movs	r2, #32
 80076c0:	189b      	adds	r3, r3, r2
 80076c2:	19db      	adds	r3, r3, r7
 80076c4:	2204      	movs	r2, #4
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e02c      	b.n	8007724 <UART_SetConfig+0x390>
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	cfff69f3 	.word	0xcfff69f3
 80076d0:	ffffcfff 	.word	0xffffcfff
 80076d4:	40008000 	.word	0x40008000
 80076d8:	40008400 	.word	0x40008400
 80076dc:	11fff4ff 	.word	0x11fff4ff
 80076e0:	40013800 	.word	0x40013800
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40004800 	.word	0x40004800
 80076f0:	40004c00 	.word	0x40004c00
 80076f4:	40005000 	.word	0x40005000
 80076f8:	40013c00 	.word	0x40013c00
 80076fc:	231b      	movs	r3, #27
 80076fe:	2220      	movs	r2, #32
 8007700:	189b      	adds	r3, r3, r2
 8007702:	19db      	adds	r3, r3, r7
 8007704:	2208      	movs	r2, #8
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e00c      	b.n	8007724 <UART_SetConfig+0x390>
 800770a:	231b      	movs	r3, #27
 800770c:	2220      	movs	r2, #32
 800770e:	189b      	adds	r3, r3, r2
 8007710:	19db      	adds	r3, r3, r7
 8007712:	2210      	movs	r2, #16
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e005      	b.n	8007724 <UART_SetConfig+0x390>
 8007718:	231b      	movs	r3, #27
 800771a:	2220      	movs	r2, #32
 800771c:	189b      	adds	r3, r3, r2
 800771e:	19db      	adds	r3, r3, r7
 8007720:	2210      	movs	r2, #16
 8007722:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4ac1      	ldr	r2, [pc, #772]	; (8007a30 <UART_SetConfig+0x69c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d005      	beq.n	800773a <UART_SetConfig+0x3a6>
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4ac0      	ldr	r2, [pc, #768]	; (8007a34 <UART_SetConfig+0x6a0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d000      	beq.n	800773a <UART_SetConfig+0x3a6>
 8007738:	e093      	b.n	8007862 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800773a:	231b      	movs	r3, #27
 800773c:	2220      	movs	r2, #32
 800773e:	189b      	adds	r3, r3, r2
 8007740:	19db      	adds	r3, r3, r7
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b08      	cmp	r3, #8
 8007746:	d015      	beq.n	8007774 <UART_SetConfig+0x3e0>
 8007748:	dc18      	bgt.n	800777c <UART_SetConfig+0x3e8>
 800774a:	2b04      	cmp	r3, #4
 800774c:	d00d      	beq.n	800776a <UART_SetConfig+0x3d6>
 800774e:	dc15      	bgt.n	800777c <UART_SetConfig+0x3e8>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <UART_SetConfig+0x3c6>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d005      	beq.n	8007764 <UART_SetConfig+0x3d0>
 8007758:	e010      	b.n	800777c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775a:	f7fd fd0d 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 800775e:	0003      	movs	r3, r0
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007762:	e014      	b.n	800778e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007764:	4bb4      	ldr	r3, [pc, #720]	; (8007a38 <UART_SetConfig+0x6a4>)
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007768:	e011      	b.n	800778e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776a:	f7fd fc79 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 800776e:	0003      	movs	r3, r0
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007772:	e00c      	b.n	800778e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800777a:	e008      	b.n	800778e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007780:	231a      	movs	r3, #26
 8007782:	2220      	movs	r2, #32
 8007784:	189b      	adds	r3, r3, r2
 8007786:	19db      	adds	r3, r3, r7
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
        break;
 800778c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d100      	bne.n	8007796 <UART_SetConfig+0x402>
 8007794:	e135      	b.n	8007a02 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800779a:	4ba8      	ldr	r3, [pc, #672]	; (8007a3c <UART_SetConfig+0x6a8>)
 800779c:	0052      	lsls	r2, r2, #1
 800779e:	5ad3      	ldrh	r3, [r2, r3]
 80077a0:	0019      	movs	r1, r3
 80077a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077a4:	f7f8 fcae 	bl	8000104 <__udivsi3>
 80077a8:	0003      	movs	r3, r0
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	0013      	movs	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d305      	bcc.n	80077c8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d906      	bls.n	80077d6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80077c8:	231a      	movs	r3, #26
 80077ca:	2220      	movs	r2, #32
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	19db      	adds	r3, r3, r7
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e044      	b.n	8007860 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e2:	4b96      	ldr	r3, [pc, #600]	; (8007a3c <UART_SetConfig+0x6a8>)
 80077e4:	0052      	lsls	r2, r2, #1
 80077e6:	5ad3      	ldrh	r3, [r2, r3]
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	69b8      	ldr	r0, [r7, #24]
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	f7f8 fe35 	bl	8000464 <__aeabi_uldivmod>
 80077fa:	0002      	movs	r2, r0
 80077fc:	000b      	movs	r3, r1
 80077fe:	0e11      	lsrs	r1, r2, #24
 8007800:	021d      	lsls	r5, r3, #8
 8007802:	430d      	orrs	r5, r1
 8007804:	0214      	lsls	r4, r2, #8
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68b8      	ldr	r0, [r7, #8]
 8007814:	68f9      	ldr	r1, [r7, #12]
 8007816:	1900      	adds	r0, r0, r4
 8007818:	4169      	adcs	r1, r5
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	2300      	movs	r3, #0
 8007822:	607b      	str	r3, [r7, #4]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f7f8 fe1c 	bl	8000464 <__aeabi_uldivmod>
 800782c:	0002      	movs	r2, r0
 800782e:	000b      	movs	r3, r1
 8007830:	0013      	movs	r3, r2
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	23c0      	movs	r3, #192	; 0xc0
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	429a      	cmp	r2, r3
 800783c:	d309      	bcc.n	8007852 <UART_SetConfig+0x4be>
 800783e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	035b      	lsls	r3, r3, #13
 8007844:	429a      	cmp	r2, r3
 8007846:	d204      	bcs.n	8007852 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	e006      	b.n	8007860 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007852:	231a      	movs	r3, #26
 8007854:	2220      	movs	r2, #32
 8007856:	189b      	adds	r3, r3, r2
 8007858:	19db      	adds	r3, r3, r7
 800785a:	2201      	movs	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800785e:	e0d0      	b.n	8007a02 <UART_SetConfig+0x66e>
 8007860:	e0cf      	b.n	8007a02 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	2380      	movs	r3, #128	; 0x80
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	429a      	cmp	r2, r3
 800786c:	d000      	beq.n	8007870 <UART_SetConfig+0x4dc>
 800786e:	e070      	b.n	8007952 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007870:	231b      	movs	r3, #27
 8007872:	2220      	movs	r2, #32
 8007874:	189b      	adds	r3, r3, r2
 8007876:	19db      	adds	r3, r3, r7
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b08      	cmp	r3, #8
 800787c:	d015      	beq.n	80078aa <UART_SetConfig+0x516>
 800787e:	dc18      	bgt.n	80078b2 <UART_SetConfig+0x51e>
 8007880:	2b04      	cmp	r3, #4
 8007882:	d00d      	beq.n	80078a0 <UART_SetConfig+0x50c>
 8007884:	dc15      	bgt.n	80078b2 <UART_SetConfig+0x51e>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <UART_SetConfig+0x4fc>
 800788a:	2b02      	cmp	r3, #2
 800788c:	d005      	beq.n	800789a <UART_SetConfig+0x506>
 800788e:	e010      	b.n	80078b2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007890:	f7fd fc72 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8007894:	0003      	movs	r3, r0
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007898:	e014      	b.n	80078c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800789a:	4b67      	ldr	r3, [pc, #412]	; (8007a38 <UART_SetConfig+0x6a4>)
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800789e:	e011      	b.n	80078c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a0:	f7fd fbde 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 80078a4:	0003      	movs	r3, r0
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a8:	e00c      	b.n	80078c4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078aa:	2380      	movs	r3, #128	; 0x80
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b0:	e008      	b.n	80078c4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80078b6:	231a      	movs	r3, #26
 80078b8:	2220      	movs	r2, #32
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	19db      	adds	r3, r3, r7
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
        break;
 80078c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d100      	bne.n	80078cc <UART_SetConfig+0x538>
 80078ca:	e09a      	b.n	8007a02 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d0:	4b5a      	ldr	r3, [pc, #360]	; (8007a3c <UART_SetConfig+0x6a8>)
 80078d2:	0052      	lsls	r2, r2, #1
 80078d4:	5ad3      	ldrh	r3, [r2, r3]
 80078d6:	0019      	movs	r1, r3
 80078d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078da:	f7f8 fc13 	bl	8000104 <__udivsi3>
 80078de:	0003      	movs	r3, r0
 80078e0:	005a      	lsls	r2, r3, #1
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	18d2      	adds	r2, r2, r3
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	0019      	movs	r1, r3
 80078f0:	0010      	movs	r0, r2
 80078f2:	f7f8 fc07 	bl	8000104 <__udivsi3>
 80078f6:	0003      	movs	r3, r0
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b0f      	cmp	r3, #15
 80078fe:	d921      	bls.n	8007944 <UART_SetConfig+0x5b0>
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	2380      	movs	r3, #128	; 0x80
 8007904:	025b      	lsls	r3, r3, #9
 8007906:	429a      	cmp	r2, r3
 8007908:	d21c      	bcs.n	8007944 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	b29a      	uxth	r2, r3
 800790e:	200e      	movs	r0, #14
 8007910:	2420      	movs	r4, #32
 8007912:	1903      	adds	r3, r0, r4
 8007914:	19db      	adds	r3, r3, r7
 8007916:	210f      	movs	r1, #15
 8007918:	438a      	bics	r2, r1
 800791a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	b29b      	uxth	r3, r3
 8007922:	2207      	movs	r2, #7
 8007924:	4013      	ands	r3, r2
 8007926:	b299      	uxth	r1, r3
 8007928:	1903      	adds	r3, r0, r4
 800792a:	19db      	adds	r3, r3, r7
 800792c:	1902      	adds	r2, r0, r4
 800792e:	19d2      	adds	r2, r2, r7
 8007930:	8812      	ldrh	r2, [r2, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	1902      	adds	r2, r0, r4
 800793c:	19d2      	adds	r2, r2, r7
 800793e:	8812      	ldrh	r2, [r2, #0]
 8007940:	60da      	str	r2, [r3, #12]
 8007942:	e05e      	b.n	8007a02 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007944:	231a      	movs	r3, #26
 8007946:	2220      	movs	r2, #32
 8007948:	189b      	adds	r3, r3, r2
 800794a:	19db      	adds	r3, r3, r7
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e057      	b.n	8007a02 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007952:	231b      	movs	r3, #27
 8007954:	2220      	movs	r2, #32
 8007956:	189b      	adds	r3, r3, r2
 8007958:	19db      	adds	r3, r3, r7
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d015      	beq.n	800798c <UART_SetConfig+0x5f8>
 8007960:	dc18      	bgt.n	8007994 <UART_SetConfig+0x600>
 8007962:	2b04      	cmp	r3, #4
 8007964:	d00d      	beq.n	8007982 <UART_SetConfig+0x5ee>
 8007966:	dc15      	bgt.n	8007994 <UART_SetConfig+0x600>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <UART_SetConfig+0x5de>
 800796c:	2b02      	cmp	r3, #2
 800796e:	d005      	beq.n	800797c <UART_SetConfig+0x5e8>
 8007970:	e010      	b.n	8007994 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007972:	f7fd fc01 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8007976:	0003      	movs	r3, r0
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797a:	e014      	b.n	80079a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800797c:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <UART_SetConfig+0x6a4>)
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007980:	e011      	b.n	80079a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007982:	f7fd fb6d 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 8007986:	0003      	movs	r3, r0
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800798a:	e00c      	b.n	80079a6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800798c:	2380      	movs	r3, #128	; 0x80
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007992:	e008      	b.n	80079a6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007998:	231a      	movs	r3, #26
 800799a:	2220      	movs	r2, #32
 800799c:	189b      	adds	r3, r3, r2
 800799e:	19db      	adds	r3, r3, r7
 80079a0:	2201      	movs	r2, #1
 80079a2:	701a      	strb	r2, [r3, #0]
        break;
 80079a4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80079a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02a      	beq.n	8007a02 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b0:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <UART_SetConfig+0x6a8>)
 80079b2:	0052      	lsls	r2, r2, #1
 80079b4:	5ad3      	ldrh	r3, [r2, r3]
 80079b6:	0019      	movs	r1, r3
 80079b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80079ba:	f7f8 fba3 	bl	8000104 <__udivsi3>
 80079be:	0003      	movs	r3, r0
 80079c0:	001a      	movs	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	18d2      	adds	r2, r2, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	0019      	movs	r1, r3
 80079d0:	0010      	movs	r0, r2
 80079d2:	f7f8 fb97 	bl	8000104 <__udivsi3>
 80079d6:	0003      	movs	r3, r0
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d90a      	bls.n	80079f6 <UART_SetConfig+0x662>
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	2380      	movs	r3, #128	; 0x80
 80079e4:	025b      	lsls	r3, r3, #9
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d205      	bcs.n	80079f6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60da      	str	r2, [r3, #12]
 80079f4:	e005      	b.n	8007a02 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80079f6:	231a      	movs	r3, #26
 80079f8:	2220      	movs	r2, #32
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	226a      	movs	r2, #106	; 0x6a
 8007a06:	2101      	movs	r1, #1
 8007a08:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2268      	movs	r2, #104	; 0x68
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2200      	movs	r2, #0
 8007a16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a1e:	231a      	movs	r3, #26
 8007a20:	2220      	movs	r2, #32
 8007a22:	189b      	adds	r3, r3, r2
 8007a24:	19db      	adds	r3, r3, r7
 8007a26:	781b      	ldrb	r3, [r3, #0]
}
 8007a28:	0018      	movs	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b010      	add	sp, #64	; 0x40
 8007a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a30:	40008000 	.word	0x40008000
 8007a34:	40008400 	.word	0x40008400
 8007a38:	00f42400 	.word	0x00f42400
 8007a3c:	08009304 	.word	0x08009304

08007a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d00b      	beq.n	8007a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	4a4a      	ldr	r2, [pc, #296]	; (8007b84 <UART_AdvFeatureConfig+0x144>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	0019      	movs	r1, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	2202      	movs	r2, #2
 8007a70:	4013      	ands	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4a43      	ldr	r2, [pc, #268]	; (8007b88 <UART_AdvFeatureConfig+0x148>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	0019      	movs	r1, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	2204      	movs	r2, #4
 8007a92:	4013      	ands	r3, r2
 8007a94:	d00b      	beq.n	8007aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4a3b      	ldr	r2, [pc, #236]	; (8007b8c <UART_AdvFeatureConfig+0x14c>)
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d00b      	beq.n	8007ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4a34      	ldr	r2, [pc, #208]	; (8007b90 <UART_AdvFeatureConfig+0x150>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d00b      	beq.n	8007af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4a2c      	ldr	r2, [pc, #176]	; (8007b94 <UART_AdvFeatureConfig+0x154>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	2220      	movs	r2, #32
 8007af8:	4013      	ands	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4a25      	ldr	r2, [pc, #148]	; (8007b98 <UART_AdvFeatureConfig+0x158>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	0019      	movs	r1, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	2240      	movs	r2, #64	; 0x40
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d01d      	beq.n	8007b5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <UART_AdvFeatureConfig+0x15c>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	0019      	movs	r1, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3a:	2380      	movs	r3, #128	; 0x80
 8007b3c:	035b      	lsls	r3, r3, #13
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d10b      	bne.n	8007b5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <UART_AdvFeatureConfig+0x160>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	0019      	movs	r1, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	2280      	movs	r2, #128	; 0x80
 8007b60:	4013      	ands	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <UART_AdvFeatureConfig+0x164>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	0019      	movs	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]
  }
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b002      	add	sp, #8
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	fffdffff 	.word	0xfffdffff
 8007b88:	fffeffff 	.word	0xfffeffff
 8007b8c:	fffbffff 	.word	0xfffbffff
 8007b90:	ffff7fff 	.word	0xffff7fff
 8007b94:	ffffefff 	.word	0xffffefff
 8007b98:	ffffdfff 	.word	0xffffdfff
 8007b9c:	ffefffff 	.word	0xffefffff
 8007ba0:	ff9fffff 	.word	0xff9fffff
 8007ba4:	fff7ffff 	.word	0xfff7ffff

08007ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2290      	movs	r2, #144	; 0x90
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bb8:	f7fb f9f6 	bl	8002fa8 <HAL_GetTick>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d10c      	bne.n	8007be8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	0391      	lsls	r1, r2, #14
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4a1a      	ldr	r2, [pc, #104]	; (8007c40 <UART_CheckIdleState+0x98>)
 8007bd8:	9200      	str	r2, [sp, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f000 f832 	bl	8007c44 <UART_WaitOnFlagUntilTimeout>
 8007be0:	1e03      	subs	r3, r0, #0
 8007be2:	d001      	beq.n	8007be8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e026      	b.n	8007c36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d10c      	bne.n	8007c10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2280      	movs	r2, #128	; 0x80
 8007bfa:	03d1      	lsls	r1, r2, #15
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4a10      	ldr	r2, [pc, #64]	; (8007c40 <UART_CheckIdleState+0x98>)
 8007c00:	9200      	str	r2, [sp, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f000 f81e 	bl	8007c44 <UART_WaitOnFlagUntilTimeout>
 8007c08:	1e03      	subs	r3, r0, #0
 8007c0a:	d001      	beq.n	8007c10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e012      	b.n	8007c36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2288      	movs	r2, #136	; 0x88
 8007c14:	2120      	movs	r1, #32
 8007c16:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	228c      	movs	r2, #140	; 0x8c
 8007c1c:	2120      	movs	r1, #32
 8007c1e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2284      	movs	r2, #132	; 0x84
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b004      	add	sp, #16
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	01ffffff 	.word	0x01ffffff

08007c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b094      	sub	sp, #80	; 0x50
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	1dfb      	adds	r3, r7, #7
 8007c52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c54:	e0a7      	b.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c58:	3301      	adds	r3, #1
 8007c5a:	d100      	bne.n	8007c5e <UART_WaitOnFlagUntilTimeout+0x1a>
 8007c5c:	e0a3      	b.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5e:	f7fb f9a3 	bl	8002fa8 <HAL_GetTick>
 8007c62:	0002      	movs	r2, r0
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d302      	bcc.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d13f      	bne.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c74:	f3ef 8310 	mrs	r3, PRIMASK
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7e:	2301      	movs	r3, #1
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	f383 8810 	msr	PRIMASK, r3
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	494e      	ldr	r1, [pc, #312]	; (8007dd0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c96:	400a      	ands	r2, r1
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	f383 8810 	msr	PRIMASK, r3
}
 8007ca4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	f383 8810 	msr	PRIMASK, r3
}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	438a      	bics	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd2:	f383 8810 	msr	PRIMASK, r3
}
 8007cd6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2288      	movs	r2, #136	; 0x88
 8007cdc:	2120      	movs	r1, #32
 8007cde:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	228c      	movs	r2, #140	; 0x8c
 8007ce4:	2120      	movs	r1, #32
 8007ce6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2284      	movs	r2, #132	; 0x84
 8007cec:	2100      	movs	r1, #0
 8007cee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e069      	b.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d052      	beq.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69da      	ldr	r2, [r3, #28]
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	2380      	movs	r3, #128	; 0x80
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d148      	bne.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	0112      	lsls	r2, r2, #4
 8007d1c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d22:	613b      	str	r3, [r7, #16]
  return(result);
 8007d24:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4924      	ldr	r1, [pc, #144]	; (8007dd0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007d40:	400a      	ands	r2, r1
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d50:	f3ef 8310 	mrs	r3, PRIMASK
 8007d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d56:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f383 8810 	msr	PRIMASK, r3
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2101      	movs	r1, #1
 8007d72:	438a      	bics	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]
 8007d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	f383 8810 	msr	PRIMASK, r3
}
 8007d80:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2288      	movs	r2, #136	; 0x88
 8007d86:	2120      	movs	r1, #32
 8007d88:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	228c      	movs	r2, #140	; 0x8c
 8007d8e:	2120      	movs	r1, #32
 8007d90:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2290      	movs	r2, #144	; 0x90
 8007d96:	2120      	movs	r1, #32
 8007d98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2284      	movs	r2, #132	; 0x84
 8007d9e:	2100      	movs	r1, #0
 8007da0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e010      	b.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	4013      	ands	r3, r2
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	425a      	negs	r2, r3
 8007db6:	4153      	adcs	r3, r2
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	001a      	movs	r2, r3
 8007dbc:	1dfb      	adds	r3, r7, #7
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d100      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x182>
 8007dc4:	e747      	b.n	8007c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b014      	add	sp, #80	; 0x50
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	fffffe5f 	.word	0xfffffe5f

08007dd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b090      	sub	sp, #64	; 0x40
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	1dbb      	adds	r3, r7, #6
 8007de0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1dba      	adds	r2, r7, #6
 8007dec:	215c      	movs	r1, #92	; 0x5c
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2290      	movs	r2, #144	; 0x90
 8007df6:	2100      	movs	r1, #0
 8007df8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	228c      	movs	r2, #140	; 0x8c
 8007dfe:	2122      	movs	r1, #34	; 0x22
 8007e00:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	589b      	ldr	r3, [r3, r2]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d02d      	beq.n	8007e68 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2280      	movs	r2, #128	; 0x80
 8007e10:	589b      	ldr	r3, [r3, r2]
 8007e12:	4a40      	ldr	r2, [pc, #256]	; (8007f14 <UART_Start_Receive_DMA+0x140>)
 8007e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2280      	movs	r2, #128	; 0x80
 8007e1a:	589b      	ldr	r3, [r3, r2]
 8007e1c:	4a3e      	ldr	r2, [pc, #248]	; (8007f18 <UART_Start_Receive_DMA+0x144>)
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	589b      	ldr	r3, [r3, r2]
 8007e26:	4a3d      	ldr	r2, [pc, #244]	; (8007f1c <UART_Start_Receive_DMA+0x148>)
 8007e28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	589b      	ldr	r3, [r3, r2]
 8007e30:	2200      	movs	r2, #0
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2280      	movs	r2, #128	; 0x80
 8007e38:	5898      	ldr	r0, [r3, r2]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3324      	adds	r3, #36	; 0x24
 8007e40:	0019      	movs	r1, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	001a      	movs	r2, r3
 8007e48:	1dbb      	adds	r3, r7, #6
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	f7fb fa64 	bl	8003318 <HAL_DMA_Start_IT>
 8007e50:	1e03      	subs	r3, r0, #0
 8007e52:	d009      	beq.n	8007e68 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2290      	movs	r2, #144	; 0x90
 8007e58:	2110      	movs	r1, #16
 8007e5a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	228c      	movs	r2, #140	; 0x8c
 8007e60:	2120      	movs	r1, #32
 8007e62:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e050      	b.n	8007f0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d019      	beq.n	8007ea4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e70:	f3ef 8310 	mrs	r3, PRIMASK
 8007e74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	f383 8810 	msr	PRIMASK, r3
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2180      	movs	r1, #128	; 0x80
 8007e92:	0049      	lsls	r1, r1, #1
 8007e94:	430a      	orrs	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ea2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f383 8810 	msr	PRIMASK, r3
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	609a      	str	r2, [r3, #8]
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f383 8810 	msr	PRIMASK, r3
}
 8007ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eda:	61fb      	str	r3, [r7, #28]
  return(result);
 8007edc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	f383 8810 	msr	PRIMASK, r3
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2140      	movs	r1, #64	; 0x40
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	f383 8810 	msr	PRIMASK, r3
}
 8007f06:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b010      	add	sp, #64	; 0x40
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	0800806d 	.word	0x0800806d
 8007f18:	0800819d 	.word	0x0800819d
 8007f1c:	080081df 	.word	0x080081df

08007f20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	; 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	2301      	movs	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f383 8810 	msr	PRIMASK, r3
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	21c0      	movs	r1, #192	; 0xc0
 8007f4a:	438a      	bics	r2, r1
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f383 8810 	msr	PRIMASK, r3
}
 8007f58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f60:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	2301      	movs	r3, #1
 8007f66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f383 8810 	msr	PRIMASK, r3
}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4908      	ldr	r1, [pc, #32]	; (8007f9c <UART_EndTxTransfer+0x7c>)
 8007f7c:	400a      	ands	r2, r1
 8007f7e:	609a      	str	r2, [r3, #8]
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f383 8810 	msr	PRIMASK, r3
}
 8007f8a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2288      	movs	r2, #136	; 0x88
 8007f90:	2120      	movs	r1, #32
 8007f92:	5099      	str	r1, [r3, r2]
}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b00a      	add	sp, #40	; 0x28
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	ff7fffff 	.word	0xff7fffff

08007fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	; 0x38
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fac:	617b      	str	r3, [r7, #20]
  return(result);
 8007fae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	f383 8810 	msr	PRIMASK, r3
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4926      	ldr	r1, [pc, #152]	; (8008064 <UART_EndRxTransfer+0xc4>)
 8007fca:	400a      	ands	r2, r1
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	f383 8810 	msr	PRIMASK, r3
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fda:	f3ef 8310 	mrs	r3, PRIMASK
 8007fde:	623b      	str	r3, [r7, #32]
  return(result);
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	f383 8810 	msr	PRIMASK, r3
}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	491b      	ldr	r1, [pc, #108]	; (8008068 <UART_EndRxTransfer+0xc8>)
 8007ffc:	400a      	ands	r2, r1
 8007ffe:	609a      	str	r2, [r3, #8]
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	f383 8810 	msr	PRIMASK, r3
}
 800800a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d118      	bne.n	8008046 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008014:	f3ef 8310 	mrs	r3, PRIMASK
 8008018:	60bb      	str	r3, [r7, #8]
  return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801e:	2301      	movs	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f383 8810 	msr	PRIMASK, r3
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2110      	movs	r1, #16
 8008036:	438a      	bics	r2, r1
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f383 8810 	msr	PRIMASK, r3
}
 8008044:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	228c      	movs	r2, #140	; 0x8c
 800804a:	2120      	movs	r1, #32
 800804c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	675a      	str	r2, [r3, #116]	; 0x74
}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	46bd      	mov	sp, r7
 800805e:	b00e      	add	sp, #56	; 0x38
 8008060:	bd80      	pop	{r7, pc}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	fffffedf 	.word	0xfffffedf
 8008068:	effffffe 	.word	0xeffffffe

0800806c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b094      	sub	sp, #80	; 0x50
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2220      	movs	r2, #32
 8008082:	4013      	ands	r3, r2
 8008084:	d16f      	bne.n	8008166 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008088:	225e      	movs	r2, #94	; 0x5e
 800808a:	2100      	movs	r1, #0
 800808c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808e:	f3ef 8310 	mrs	r3, PRIMASK
 8008092:	61bb      	str	r3, [r7, #24]
  return(result);
 8008094:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008096:	64bb      	str	r3, [r7, #72]	; 0x48
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f383 8810 	msr	PRIMASK, r3
}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	493a      	ldr	r1, [pc, #232]	; (8008198 <UART_DMAReceiveCplt+0x12c>)
 80080b0:	400a      	ands	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f383 8810 	msr	PRIMASK, r3
}
 80080be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c0:	f3ef 8310 	mrs	r3, PRIMASK
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c8:	647b      	str	r3, [r7, #68]	; 0x44
 80080ca:	2301      	movs	r3, #1
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	f383 8810 	msr	PRIMASK, r3
}
 80080d4:	46c0      	nop			; (mov r8, r8)
 80080d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2101      	movs	r1, #1
 80080e2:	438a      	bics	r2, r1
 80080e4:	609a      	str	r2, [r3, #8]
 80080e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	f383 8810 	msr	PRIMASK, r3
}
 80080f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f2:	f3ef 8310 	mrs	r3, PRIMASK
 80080f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fa:	643b      	str	r3, [r7, #64]	; 0x40
 80080fc:	2301      	movs	r3, #1
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008102:	f383 8810 	msr	PRIMASK, r3
}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2140      	movs	r1, #64	; 0x40
 8008114:	438a      	bics	r2, r1
 8008116:	609a      	str	r2, [r3, #8]
 8008118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	f383 8810 	msr	PRIMASK, r3
}
 8008122:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008126:	228c      	movs	r2, #140	; 0x8c
 8008128:	2120      	movs	r1, #32
 800812a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d118      	bne.n	8008166 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	60fb      	str	r3, [r7, #12]
  return(result);
 800813a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813e:	2301      	movs	r3, #1
 8008140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2110      	movs	r1, #16
 8008156:	438a      	bics	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008168:	2200      	movs	r2, #0
 800816a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d108      	bne.n	8008186 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008176:	225c      	movs	r2, #92	; 0x5c
 8008178:	5a9a      	ldrh	r2, [r3, r2]
 800817a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f7ff f8fc 	bl	800737c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008184:	e003      	b.n	800818e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff f8df 	bl	800734c <HAL_UART_RxCpltCallback>
}
 800818e:	46c0      	nop			; (mov r8, r8)
 8008190:	46bd      	mov	sp, r7
 8008192:	b014      	add	sp, #80	; 0x50
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	fffffeff 	.word	0xfffffeff

0800819c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d10a      	bne.n	80081ce <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	225c      	movs	r2, #92	; 0x5c
 80081bc:	5a9b      	ldrh	r3, [r3, r2]
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	0011      	movs	r1, r2
 80081c6:	0018      	movs	r0, r3
 80081c8:	f7ff f8d8 	bl	800737c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081cc:	e003      	b.n	80081d6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7ff f8c3 	bl	800735c <HAL_UART_RxHalfCpltCallback>
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b004      	add	sp, #16
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2288      	movs	r2, #136	; 0x88
 80081f0:	589b      	ldr	r3, [r3, r2]
 80081f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	228c      	movs	r2, #140	; 0x8c
 80081f8:	589b      	ldr	r3, [r3, r2]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2280      	movs	r2, #128	; 0x80
 8008204:	4013      	ands	r3, r2
 8008206:	2b80      	cmp	r3, #128	; 0x80
 8008208:	d10a      	bne.n	8008220 <UART_DMAError+0x42>
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b21      	cmp	r3, #33	; 0x21
 800820e:	d107      	bne.n	8008220 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2256      	movs	r2, #86	; 0x56
 8008214:	2100      	movs	r1, #0
 8008216:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	0018      	movs	r0, r3
 800821c:	f7ff fe80 	bl	8007f20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2240      	movs	r2, #64	; 0x40
 8008228:	4013      	ands	r3, r2
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d10a      	bne.n	8008244 <UART_DMAError+0x66>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b22      	cmp	r3, #34	; 0x22
 8008232:	d107      	bne.n	8008244 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	225e      	movs	r2, #94	; 0x5e
 8008238:	2100      	movs	r1, #0
 800823a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	0018      	movs	r0, r3
 8008240:	f7ff feae 	bl	8007fa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2290      	movs	r2, #144	; 0x90
 8008248:	589b      	ldr	r3, [r3, r2]
 800824a:	2210      	movs	r2, #16
 800824c:	431a      	orrs	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2190      	movs	r1, #144	; 0x90
 8008252:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	0018      	movs	r0, r3
 8008258:	f7ff f888 	bl	800736c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	b006      	add	sp, #24
 8008262:	bd80      	pop	{r7, pc}

08008264 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	225e      	movs	r2, #94	; 0x5e
 8008276:	2100      	movs	r1, #0
 8008278:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2256      	movs	r2, #86	; 0x56
 800827e:	2100      	movs	r1, #0
 8008280:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	0018      	movs	r0, r3
 8008286:	f7ff f871 	bl	800736c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	46bd      	mov	sp, r7
 800828e:	b004      	add	sp, #16
 8008290:	bd80      	pop	{r7, pc}

08008292 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b086      	sub	sp, #24
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829a:	f3ef 8310 	mrs	r3, PRIMASK
 800829e:	60bb      	str	r3, [r7, #8]
  return(result);
 80082a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	2301      	movs	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f383 8810 	msr	PRIMASK, r3
}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2140      	movs	r1, #64	; 0x40
 80082bc:	438a      	bics	r2, r1
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f383 8810 	msr	PRIMASK, r3
}
 80082ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2288      	movs	r2, #136	; 0x88
 80082d0:	2120      	movs	r1, #32
 80082d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	0018      	movs	r0, r3
 80082de:	f7ff f82d 	bl	800733c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	46bd      	mov	sp, r7
 80082e6:	b006      	add	sp, #24
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082f2:	46c0      	nop			; (mov r8, r8)
 80082f4:	46bd      	mov	sp, r7
 80082f6:	b002      	add	sp, #8
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	46bd      	mov	sp, r7
 8008306:	b002      	add	sp, #8
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b002      	add	sp, #8
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2284      	movs	r2, #132	; 0x84
 8008328:	5c9b      	ldrb	r3, [r3, r2]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_UARTEx_DisableFifoMode+0x16>
 800832e:	2302      	movs	r3, #2
 8008330:	e027      	b.n	8008382 <HAL_UARTEx_DisableFifoMode+0x66>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2284      	movs	r2, #132	; 0x84
 8008336:	2101      	movs	r1, #1
 8008338:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2288      	movs	r2, #136	; 0x88
 800833e:	2124      	movs	r1, #36	; 0x24
 8008340:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2101      	movs	r1, #1
 8008356:	438a      	bics	r2, r1
 8008358:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a0b      	ldr	r2, [pc, #44]	; (800838c <HAL_UARTEx_DisableFifoMode+0x70>)
 800835e:	4013      	ands	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2288      	movs	r2, #136	; 0x88
 8008374:	2120      	movs	r1, #32
 8008376:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2284      	movs	r2, #132	; 0x84
 800837c:	2100      	movs	r1, #0
 800837e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	0018      	movs	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	dfffffff 	.word	0xdfffffff

08008390 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2284      	movs	r2, #132	; 0x84
 800839e:	5c9b      	ldrb	r3, [r3, r2]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e02e      	b.n	8008406 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2284      	movs	r2, #132	; 0x84
 80083ac:	2101      	movs	r1, #1
 80083ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2288      	movs	r2, #136	; 0x88
 80083b4:	2124      	movs	r1, #36	; 0x24
 80083b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2101      	movs	r1, #1
 80083cc:	438a      	bics	r2, r1
 80083ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	08d9      	lsrs	r1, r3, #3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	0018      	movs	r0, r3
 80083e8:	f000 f854 	bl	8008494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2288      	movs	r2, #136	; 0x88
 80083f8:	2120      	movs	r1, #32
 80083fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2284      	movs	r2, #132	; 0x84
 8008400:	2100      	movs	r1, #0
 8008402:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	0018      	movs	r0, r3
 8008408:	46bd      	mov	sp, r7
 800840a:	b004      	add	sp, #16
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2284      	movs	r2, #132	; 0x84
 800841e:	5c9b      	ldrb	r3, [r3, r2]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008424:	2302      	movs	r3, #2
 8008426:	e02f      	b.n	8008488 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2284      	movs	r2, #132	; 0x84
 800842c:	2101      	movs	r1, #1
 800842e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2288      	movs	r2, #136	; 0x88
 8008434:	2124      	movs	r1, #36	; 0x24
 8008436:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2101      	movs	r1, #1
 800844c:	438a      	bics	r2, r1
 800844e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008458:	4013      	ands	r3, r2
 800845a:	0019      	movs	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	0018      	movs	r0, r3
 800846a:	f000 f813 	bl	8008494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2288      	movs	r2, #136	; 0x88
 800847a:	2120      	movs	r1, #32
 800847c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2284      	movs	r2, #132	; 0x84
 8008482:	2100      	movs	r1, #0
 8008484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b004      	add	sp, #16
 800848e:	bd80      	pop	{r7, pc}
 8008490:	f1ffffff 	.word	0xf1ffffff

08008494 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	226a      	movs	r2, #106	; 0x6a
 80084a8:	2101      	movs	r1, #1
 80084aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2268      	movs	r2, #104	; 0x68
 80084b0:	2101      	movs	r1, #1
 80084b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b4:	e043      	b.n	800853e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084b6:	260f      	movs	r6, #15
 80084b8:	19bb      	adds	r3, r7, r6
 80084ba:	2208      	movs	r2, #8
 80084bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084be:	200e      	movs	r0, #14
 80084c0:	183b      	adds	r3, r7, r0
 80084c2:	2208      	movs	r2, #8
 80084c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	0e5b      	lsrs	r3, r3, #25
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	240d      	movs	r4, #13
 80084d2:	193b      	adds	r3, r7, r4
 80084d4:	2107      	movs	r1, #7
 80084d6:	400a      	ands	r2, r1
 80084d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	0f5b      	lsrs	r3, r3, #29
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	250c      	movs	r5, #12
 80084e6:	197b      	adds	r3, r7, r5
 80084e8:	2107      	movs	r1, #7
 80084ea:	400a      	ands	r2, r1
 80084ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	197a      	adds	r2, r7, r5
 80084f4:	7812      	ldrb	r2, [r2, #0]
 80084f6:	4914      	ldr	r1, [pc, #80]	; (8008548 <UARTEx_SetNbDataToProcess+0xb4>)
 80084f8:	5c8a      	ldrb	r2, [r1, r2]
 80084fa:	435a      	muls	r2, r3
 80084fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80084fe:	197b      	adds	r3, r7, r5
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	4a12      	ldr	r2, [pc, #72]	; (800854c <UARTEx_SetNbDataToProcess+0xb8>)
 8008504:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008506:	0019      	movs	r1, r3
 8008508:	f7f7 fe86 	bl	8000218 <__divsi3>
 800850c:	0003      	movs	r3, r0
 800850e:	b299      	uxth	r1, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	226a      	movs	r2, #106	; 0x6a
 8008514:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008516:	19bb      	adds	r3, r7, r6
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	193a      	adds	r2, r7, r4
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	490a      	ldr	r1, [pc, #40]	; (8008548 <UARTEx_SetNbDataToProcess+0xb4>)
 8008520:	5c8a      	ldrb	r2, [r1, r2]
 8008522:	435a      	muls	r2, r3
 8008524:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008526:	193b      	adds	r3, r7, r4
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4a08      	ldr	r2, [pc, #32]	; (800854c <UARTEx_SetNbDataToProcess+0xb8>)
 800852c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800852e:	0019      	movs	r1, r3
 8008530:	f7f7 fe72 	bl	8000218 <__divsi3>
 8008534:	0003      	movs	r3, r0
 8008536:	b299      	uxth	r1, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2268      	movs	r2, #104	; 0x68
 800853c:	5299      	strh	r1, [r3, r2]
}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	46bd      	mov	sp, r7
 8008542:	b005      	add	sp, #20
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	0800931c 	.word	0x0800931c
 800854c:	08009324 	.word	0x08009324

08008550 <RS485_Bus_Event_AddListener>:


RS485_Bus_EventHandler_t *RS485_Bus_Event_AddListener(RS485_Bus_EventHandler_t *evth, 
                                                      RS485_Bus_Event_t event, 
                                                      RS485_Bus_EventCallback_t callback)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	230b      	movs	r3, #11
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	1c0a      	adds	r2, r1, #0
 8008560:	701a      	strb	r2, [r3, #0]
  if (evth == 0) {
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d105      	bne.n	8008574 <RS485_Bus_Event_AddListener+0x24>
      evth = (RS485_Bus_EventHandler_t*) RS485_BUS_MALLOC(sizeof(RS485_Bus_EventHandler_t));
 8008568:	200c      	movs	r0, #12
 800856a:	f000 fd53 	bl	8009014 <malloc>
 800856e:	0003      	movs	r3, r0
 8008570:	60fb      	str	r3, [r7, #12]
      goto end;
 8008572:	e01e      	b.n	80085b2 <RS485_Bus_Event_AddListener+0x62>
  }

  while (1) {
    if (evth->event == event){
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	220b      	movs	r2, #11
 800857a:	18ba      	adds	r2, r7, r2
 800857c:	7812      	ldrb	r2, [r2, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d104      	bne.n	800858c <RS485_Bus_Event_AddListener+0x3c>
      evth->callback = callback;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	605a      	str	r2, [r3, #4]
      return evth;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	e01e      	b.n	80085ca <RS485_Bus_Event_AddListener+0x7a>
    }
    if (evth->next == 0) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <RS485_Bus_Event_AddListener+0x5a>
      evth->next = (RS485_Bus_EventHandler_t*) RS485_BUS_MALLOC(sizeof(RS485_Bus_EventHandler_t));
 8008594:	200c      	movs	r0, #12
 8008596:	f000 fd3d 	bl	8009014 <malloc>
 800859a:	0003      	movs	r3, r0
 800859c:	001a      	movs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	609a      	str	r2, [r3, #8]
      evth = evth->next;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	60fb      	str	r3, [r7, #12]
      break;
 80085a8:	e003      	b.n	80085b2 <RS485_Bus_Event_AddListener+0x62>
    }
    evth = evth->next;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	60fb      	str	r3, [r7, #12]
    if (evth->event == event){
 80085b0:	e7e0      	b.n	8008574 <RS485_Bus_Event_AddListener+0x24>
  }

  end:
  evth->event = event;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	220b      	movs	r2, #11
 80085b6:	18ba      	adds	r2, r7, r2
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	701a      	strb	r2, [r3, #0]
  evth->callback = callback;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]
  evth->next = 0;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	609a      	str	r2, [r3, #8]

  return evth;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	0018      	movs	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b004      	add	sp, #16
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <RS484_BUS_Package_Encode>:
#include "inc/rs485-bus/package.h"
#include <string.h>


uint16_t RS484_BUS_Package_Encode(RS484_BUS_Package_t *pack, uint8_t *buffer, uint16_t sz)
{
 80085d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	1dbb      	adds	r3, r7, #6
 80085e0:	801a      	strh	r2, [r3, #0]
  uint16_t codedLen         = 0;
 80085e2:	2416      	movs	r4, #22
 80085e4:	193b      	adds	r3, r7, r4
 80085e6:	2200      	movs	r2, #0
 80085e8:	801a      	strh	r2, [r3, #0]
  uint16_t prefixLen        = sizeof(RS485_Prefix);
 80085ea:	2114      	movs	r1, #20
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	2202      	movs	r2, #2
 80085f0:	801a      	strh	r2, [r3, #0]
  uint16_t headerAndDataLen = sizeof(pack->header)+pack->header.datalength;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	78da      	ldrb	r2, [r3, #3]
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	2612      	movs	r6, #18
 8008600:	19bb      	adds	r3, r7, r6
 8008602:	3205      	adds	r2, #5
 8008604:	801a      	strh	r2, [r3, #0]


  // add prefix
  if (sz < prefixLen) goto errorHandle;
 8008606:	1dba      	adds	r2, r7, #6
 8008608:	187b      	adds	r3, r7, r1
 800860a:	8812      	ldrh	r2, [r2, #0]
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d357      	bcc.n	80086c2 <RS484_BUS_Package_Encode+0xee>
  memcpy(buffer, RS485_Prefix, prefixLen);
 8008612:	000d      	movs	r5, r1
 8008614:	187b      	adds	r3, r7, r1
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	492f      	ldr	r1, [pc, #188]	; (80086d8 <RS484_BUS_Package_Encode+0x104>)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	0018      	movs	r0, r3
 800861e:	f000 fd03 	bl	8009028 <memcpy>
  buffer    += prefixLen;
 8008622:	0028      	movs	r0, r5
 8008624:	183b      	adds	r3, r7, r0
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	18d3      	adds	r3, r2, r3
 800862c:	60bb      	str	r3, [r7, #8]
  sz        -= prefixLen;
 800862e:	1dbb      	adds	r3, r7, #6
 8008630:	1db9      	adds	r1, r7, #6
 8008632:	183a      	adds	r2, r7, r0
 8008634:	8809      	ldrh	r1, [r1, #0]
 8008636:	8812      	ldrh	r2, [r2, #0]
 8008638:	1a8a      	subs	r2, r1, r2
 800863a:	801a      	strh	r2, [r3, #0]
  codedLen  += prefixLen;
 800863c:	193b      	adds	r3, r7, r4
 800863e:	1939      	adds	r1, r7, r4
 8008640:	183a      	adds	r2, r7, r0
 8008642:	8809      	ldrh	r1, [r1, #0]
 8008644:	8812      	ldrh	r2, [r2, #0]
 8008646:	188a      	adds	r2, r1, r2
 8008648:	801a      	strh	r2, [r3, #0]

  // add pack
  if (sz < headerAndDataLen) goto errorHandle;
 800864a:	1dba      	adds	r2, r7, #6
 800864c:	19bb      	adds	r3, r7, r6
 800864e:	8812      	ldrh	r2, [r2, #0]
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d337      	bcc.n	80086c6 <RS484_BUS_Package_Encode+0xf2>
  memcpy(buffer, (uint8_t*)pack, headerAndDataLen);
 8008656:	19bb      	adds	r3, r7, r6
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	0018      	movs	r0, r3
 8008660:	f000 fce2 	bl	8009028 <memcpy>
  buffer    += headerAndDataLen;
 8008664:	0030      	movs	r0, r6
 8008666:	19bb      	adds	r3, r7, r6
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	18d3      	adds	r3, r2, r3
 800866e:	60bb      	str	r3, [r7, #8]
  sz        -= headerAndDataLen;
 8008670:	1dbb      	adds	r3, r7, #6
 8008672:	1db9      	adds	r1, r7, #6
 8008674:	183a      	adds	r2, r7, r0
 8008676:	8809      	ldrh	r1, [r1, #0]
 8008678:	8812      	ldrh	r2, [r2, #0]
 800867a:	1a8a      	subs	r2, r1, r2
 800867c:	801a      	strh	r2, [r3, #0]
  codedLen  += headerAndDataLen;
 800867e:	193b      	adds	r3, r7, r4
 8008680:	1939      	adds	r1, r7, r4
 8008682:	183a      	adds	r2, r7, r0
 8008684:	8809      	ldrh	r1, [r1, #0]
 8008686:	8812      	ldrh	r2, [r2, #0]
 8008688:	188a      	adds	r2, r1, r2
 800868a:	801a      	strh	r2, [r3, #0]

  // add pack
  if (sz < 1) goto errorHandle;
 800868c:	1dbb      	adds	r3, r7, #6
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01a      	beq.n	80086ca <RS484_BUS_Package_Encode+0xf6>
  *buffer = RS485_Bus_ComputeCRC(0x00, (uint8_t*)(buffer-codedLen), codedLen);
 8008694:	193b      	adds	r3, r7, r4
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	425b      	negs	r3, r3
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	18d1      	adds	r1, r2, r3
 800869e:	193b      	adds	r3, r7, r4
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	001a      	movs	r2, r3
 80086a4:	2000      	movs	r0, #0
 80086a6:	f000 f819 	bl	80086dc <RS485_Bus_ComputeCRC>
 80086aa:	0003      	movs	r3, r0
 80086ac:	001a      	movs	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	701a      	strb	r2, [r3, #0]
  codedLen  += 1;
 80086b2:	193b      	adds	r3, r7, r4
 80086b4:	193a      	adds	r2, r7, r4
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	3201      	adds	r2, #1
 80086ba:	801a      	strh	r2, [r3, #0]

  return codedLen;
 80086bc:	193b      	adds	r3, r7, r4
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	e005      	b.n	80086ce <RS484_BUS_Package_Encode+0xfa>
  if (sz < prefixLen) goto errorHandle;
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	e002      	b.n	80086cc <RS484_BUS_Package_Encode+0xf8>
  if (sz < headerAndDataLen) goto errorHandle;
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	e000      	b.n	80086cc <RS484_BUS_Package_Encode+0xf8>
  if (sz < 1) goto errorHandle;
 80086ca:	46c0      	nop			; (mov r8, r8)
  
  errorHandle:
  return 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	0018      	movs	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b007      	add	sp, #28
 80086d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	0800932c 	.word	0x0800932c

080086dc <RS485_Bus_ComputeCRC>:
 **-------------------------------------------------------*/
const uint8_t RS485_Prefix[2] = RS485_BUS_PREFIX;


 __attribute__((weak)) uint8_t RS485_Bus_ComputeCRC(uint8_t initByte, uint8_t *buffer, uint16_t len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6039      	str	r1, [r7, #0]
 80086e4:	0011      	movs	r1, r2
 80086e6:	1dfb      	adds	r3, r7, #7
 80086e8:	1c02      	adds	r2, r0, #0
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	1c0a      	adds	r2, r1, #0
 80086f0:	801a      	strh	r2, [r3, #0]
  uint8_t result = initByte;
 80086f2:	230f      	movs	r3, #15
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	1dfa      	adds	r2, r7, #7
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	701a      	strb	r2, [r3, #0]
  while (len > 0)
 80086fc:	e00f      	b.n	800871e <RS485_Bus_ComputeCRC+0x42>
  {
    result = result ^ *buffer;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	7819      	ldrb	r1, [r3, #0]
 8008702:	220f      	movs	r2, #15
 8008704:	18bb      	adds	r3, r7, r2
 8008706:	18ba      	adds	r2, r7, r2
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	404a      	eors	r2, r1
 800870c:	701a      	strb	r2, [r3, #0]
    buffer++;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	603b      	str	r3, [r7, #0]
    len--;
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	881a      	ldrh	r2, [r3, #0]
 8008718:	1d3b      	adds	r3, r7, #4
 800871a:	3a01      	subs	r2, #1
 800871c:	801a      	strh	r2, [r3, #0]
  while (len > 0)
 800871e:	1d3b      	adds	r3, r7, #4
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1eb      	bne.n	80086fe <RS485_Bus_ComputeCRC+0x22>
  }
  return result;
 8008726:	230f      	movs	r3, #15
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	0018      	movs	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	b004      	add	sp, #16
 8008732:	bd80      	pop	{r7, pc}

08008734 <RS485_Bus_Slave_Init>:
 **-------------------------------------------------------*/
static void onCompletePackage(RS485_Bus_SlaveHandler*);


void RS485_Bus_Slave_Init(RS485_Bus_SlaveHandler* hslave)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  hslave->numOfId = 0;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	711a      	strb	r2, [r3, #4]
  return;
 8008742:	46c0      	nop			; (mov r8, r8)
}
 8008744:	46bd      	mov	sp, r7
 8008746:	b002      	add	sp, #8
 8008748:	bd80      	pop	{r7, pc}

0800874a <RS485_Bus_Slave_AddId>:

void RS485_Bus_Slave_AddId(RS485_Bus_SlaveHandler* hslave, RS484_BUS_Id_t id)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	000a      	movs	r2, r1
 8008754:	1cbb      	adds	r3, r7, #2
 8008756:	801a      	strh	r2, [r3, #0]
  if (hslave->numOfId >= RS485_BUS_MAX_ID_NUM) return;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d80e      	bhi.n	800877e <RS485_Bus_Slave_AddId+0x34>

  hslave->id[hslave->numOfId] = id;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	001a      	movs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0052      	lsls	r2, r2, #1
 800876a:	1cb9      	adds	r1, r7, #2
 800876c:	8809      	ldrh	r1, [r1, #0]
 800876e:	52d1      	strh	r1, [r2, r3]
  hslave->numOfId++;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	791b      	ldrb	r3, [r3, #4]
 8008774:	3301      	adds	r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	711a      	strb	r2, [r3, #4]
 800877c:	e000      	b.n	8008780 <RS485_Bus_Slave_AddId+0x36>
  if (hslave->numOfId >= RS485_BUS_MAX_ID_NUM) return;
 800877e:	46c0      	nop			; (mov r8, r8)
}
 8008780:	46bd      	mov	sp, r7
 8008782:	b002      	add	sp, #8
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <RS485_Bus_Slave_Process>:

void RS485_Bus_Slave_Process(RS485_Bus_SlaveHandler* hslave)
{
 8008788:	b590      	push	{r4, r7, lr}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  if (hslave->read == 0) return;
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	2396      	movs	r3, #150	; 0x96
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	58d3      	ldr	r3, [r2, r3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d100      	bne.n	800879e <RS485_Bus_Slave_Process+0x16>
 800879c:	e1e8      	b.n	8008b70 <RS485_Bus_Slave_Process+0x3e8>

  switch (hslave->state) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	799b      	ldrb	r3, [r3, #6]
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d900      	bls.n	80087a8 <RS485_Bus_Slave_Process+0x20>
 80087a6:	e1e5      	b.n	8008b74 <RS485_Bus_Slave_Process+0x3ec>
 80087a8:	009a      	lsls	r2, r3, #2
 80087aa:	4bd6      	ldr	r3, [pc, #856]	; (8008b04 <RS485_Bus_Slave_Process+0x37c>)
 80087ac:	18d3      	adds	r3, r2, r3
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	469f      	mov	pc, r3
  case RS485_BUS_SLV_STATE_IDLE:
    // get prefix
    hslave->bufferRxLen += hslave->read(&hslave->bufferRx[hslave->bufferRxLen], 2-hslave->bufferRxLen);
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	2396      	movs	r3, #150	; 0x96
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	58d3      	ldr	r3, [r2, r3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	228c      	movs	r2, #140	; 0x8c
 80087be:	0052      	lsls	r2, r2, #1
 80087c0:	5a8a      	ldrh	r2, [r1, r2]
 80087c2:	3219      	adds	r2, #25
 80087c4:	32ff      	adds	r2, #255	; 0xff
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	188a      	adds	r2, r1, r2
 80087ca:	1c90      	adds	r0, r2, #2
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	228c      	movs	r2, #140	; 0x8c
 80087d0:	0052      	lsls	r2, r2, #1
 80087d2:	5a8a      	ldrh	r2, [r1, r2]
 80087d4:	2102      	movs	r1, #2
 80087d6:	1a8a      	subs	r2, r1, r2
 80087d8:	b292      	uxth	r2, r2
 80087da:	0011      	movs	r1, r2
 80087dc:	4798      	blx	r3
 80087de:	0001      	movs	r1, r0
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	238c      	movs	r3, #140	; 0x8c
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	5ad2      	ldrh	r2, [r2, r3]
 80087e8:	b28b      	uxth	r3, r1
 80087ea:	18d3      	adds	r3, r2, r3
 80087ec:	b299      	uxth	r1, r3
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	238c      	movs	r3, #140	; 0x8c
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	52d1      	strh	r1, [r2, r3]
    if (hslave->bufferRxLen < 2) break;
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	238c      	movs	r3, #140	; 0x8c
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	5ad3      	ldrh	r3, [r2, r3]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d800      	bhi.n	8008804 <RS485_Bus_Slave_Process+0x7c>
 8008802:	e1b9      	b.n	8008b78 <RS485_Bus_Slave_Process+0x3f0>

    // check prefix
    if (strncmp((const char*)hslave->bufferRx, (const char*) RS485_Prefix, 2) == 0) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	331b      	adds	r3, #27
 8008808:	33ff      	adds	r3, #255	; 0xff
 800880a:	49bf      	ldr	r1, [pc, #764]	; (8008b08 <RS485_Bus_Slave_Process+0x380>)
 800880c:	2202      	movs	r2, #2
 800880e:	0018      	movs	r0, r3
 8008810:	f000 fcc6 	bl	80091a0 <strncmp>
 8008814:	1e03      	subs	r3, r0, #0
 8008816:	d122      	bne.n	800885e <RS485_Bus_Slave_Process+0xd6>
      memset(&hslave->tmpPackageRx, 0, sizeof(RS484_BUS_Package_t));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	334d      	adds	r3, #77	; 0x4d
 800881c:	2246      	movs	r2, #70	; 0x46
 800881e:	2100      	movs	r1, #0
 8008820:	0018      	movs	r0, r3
 8008822:	f000 fc0a 	bl	800903a <memset>
      // calculate CRC
      hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2292      	movs	r2, #146	; 0x92
 800882a:	5c98      	ldrb	r0, [r3, r2]
                                                      hslave->bufferRx, 
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	331b      	adds	r3, #27
 8008830:	33ff      	adds	r3, #255	; 0xff
 8008832:	0019      	movs	r1, r3
      hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	238c      	movs	r3, #140	; 0x8c
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	5ad3      	ldrh	r3, [r2, r3]
 800883c:	001a      	movs	r2, r3
 800883e:	f7ff ff4d 	bl	80086dc <RS485_Bus_ComputeCRC>
 8008842:	0003      	movs	r3, r0
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2292      	movs	r2, #146	; 0x92
 800884a:	5499      	strb	r1, [r3, r2]
                                                      hslave->bufferRxLen);
      hslave->bufferRxLen = 0;
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	238c      	movs	r3, #140	; 0x8c
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	2100      	movs	r1, #0
 8008854:	52d1      	strh	r1, [r2, r3]

      // next state
      hslave->state = RS485_BUS_SLV_STATE_R_ID;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	719a      	strb	r2, [r3, #6]
      break;
 800885c:	e197      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    }

    if (hslave->bufferRx[1] == RS485_Prefix[0]) {
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	231c      	movs	r3, #28
 8008862:	33ff      	adds	r3, #255	; 0xff
 8008864:	5cd2      	ldrb	r2, [r2, r3]
 8008866:	4ba8      	ldr	r3, [pc, #672]	; (8008b08 <RS485_Bus_Slave_Process+0x380>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d10d      	bne.n	800888a <RS485_Bus_Slave_Process+0x102>
      // shift buffer if bufferRx 1 is equal with RS485_Prefix
      hslave->bufferRx[0] = hslave->bufferRx[1];
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	231c      	movs	r3, #28
 8008872:	33ff      	adds	r3, #255	; 0xff
 8008874:	5cd1      	ldrb	r1, [r2, r3]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	238d      	movs	r3, #141	; 0x8d
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	54d1      	strb	r1, [r2, r3]
      hslave->bufferRxLen = 1;
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	238c      	movs	r3, #140	; 0x8c
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	2101      	movs	r1, #1
 8008886:	52d1      	strh	r1, [r2, r3]
      break;
 8008888:	e181      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    }
    hslave->bufferRxLen = 0;
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	238c      	movs	r3, #140	; 0x8c
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	2100      	movs	r1, #0
 8008892:	52d1      	strh	r1, [r2, r3]
    break;
 8008894:	e17b      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>

  case RS485_BUS_SLV_STATE_R_ID:
    // get Id
    hslave->bufferRxLen += hslave->read(&hslave->bufferRx[hslave->bufferRxLen], 2-hslave->bufferRxLen);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	2396      	movs	r3, #150	; 0x96
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	58d3      	ldr	r3, [r2, r3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	228c      	movs	r2, #140	; 0x8c
 80088a2:	0052      	lsls	r2, r2, #1
 80088a4:	5a8a      	ldrh	r2, [r1, r2]
 80088a6:	3219      	adds	r2, #25
 80088a8:	32ff      	adds	r2, #255	; 0xff
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	188a      	adds	r2, r1, r2
 80088ae:	1c90      	adds	r0, r2, #2
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	228c      	movs	r2, #140	; 0x8c
 80088b4:	0052      	lsls	r2, r2, #1
 80088b6:	5a8a      	ldrh	r2, [r1, r2]
 80088b8:	2102      	movs	r1, #2
 80088ba:	1a8a      	subs	r2, r1, r2
 80088bc:	b292      	uxth	r2, r2
 80088be:	0011      	movs	r1, r2
 80088c0:	4798      	blx	r3
 80088c2:	0001      	movs	r1, r0
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	238c      	movs	r3, #140	; 0x8c
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	5ad2      	ldrh	r2, [r2, r3]
 80088cc:	b28b      	uxth	r3, r1
 80088ce:	18d3      	adds	r3, r2, r3
 80088d0:	b299      	uxth	r1, r3
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	238c      	movs	r3, #140	; 0x8c
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	52d1      	strh	r1, [r2, r3]
    if (hslave->bufferRxLen < 2) break;
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	238c      	movs	r3, #140	; 0x8c
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	5ad3      	ldrh	r3, [r2, r3]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d800      	bhi.n	80088e8 <RS485_Bus_Slave_Process+0x160>
 80088e6:	e149      	b.n	8008b7c <RS485_Bus_Slave_Process+0x3f4>
    memcpy(&hslave->tmpPackageRx.header.id, hslave->bufferRx, sizeof(RS484_BUS_Id_t));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	334d      	adds	r3, #77	; 0x4d
 80088ec:	0018      	movs	r0, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	331b      	adds	r3, #27
 80088f2:	33ff      	adds	r3, #255	; 0xff
 80088f4:	2202      	movs	r2, #2
 80088f6:	0019      	movs	r1, r3
 80088f8:	f000 fb96 	bl	8009028 <memcpy>
    // calculate CRC
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2292      	movs	r2, #146	; 0x92
 8008900:	5c98      	ldrb	r0, [r3, r2]
                                                    hslave->bufferRx, 
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	331b      	adds	r3, #27
 8008906:	33ff      	adds	r3, #255	; 0xff
 8008908:	0019      	movs	r1, r3
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	238c      	movs	r3, #140	; 0x8c
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	5ad3      	ldrh	r3, [r2, r3]
 8008912:	001a      	movs	r2, r3
 8008914:	f7ff fee2 	bl	80086dc <RS485_Bus_ComputeCRC>
 8008918:	0003      	movs	r3, r0
 800891a:	0019      	movs	r1, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2292      	movs	r2, #146	; 0x92
 8008920:	5499      	strb	r1, [r3, r2]
                                                    hslave->bufferRxLen);
    hslave->bufferRxLen = 0;
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	238c      	movs	r3, #140	; 0x8c
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	2100      	movs	r1, #0
 800892a:	52d1      	strh	r1, [r2, r3]

    // next state
    hslave->state = RS485_BUS_SLV_STATE_R_ACK;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	719a      	strb	r2, [r3, #6]
    break;
 8008932:	e12c      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>

  case RS485_BUS_SLV_STATE_R_ACK:
    // get Id
    hslave->bufferRxLen += hslave->read(&hslave->bufferRx[0], 1);
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	2396      	movs	r3, #150	; 0x96
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	58d3      	ldr	r3, [r2, r3]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	321b      	adds	r2, #27
 8008940:	32ff      	adds	r2, #255	; 0xff
 8008942:	2101      	movs	r1, #1
 8008944:	0010      	movs	r0, r2
 8008946:	4798      	blx	r3
 8008948:	0001      	movs	r1, r0
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	238c      	movs	r3, #140	; 0x8c
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	5ad2      	ldrh	r2, [r2, r3]
 8008952:	b28b      	uxth	r3, r1
 8008954:	18d3      	adds	r3, r2, r3
 8008956:	b299      	uxth	r1, r3
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	238c      	movs	r3, #140	; 0x8c
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	52d1      	strh	r1, [r2, r3]
    if (hslave->bufferRxLen < 1) break;
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	238c      	movs	r3, #140	; 0x8c
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	5ad3      	ldrh	r3, [r2, r3]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d100      	bne.n	800896e <RS485_Bus_Slave_Process+0x1e6>
 800896c:	e108      	b.n	8008b80 <RS485_Bus_Slave_Process+0x3f8>
    hslave->tmpPackageRx.header.ackid = hslave->bufferRx[0];
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	238d      	movs	r3, #141	; 0x8d
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	5cd1      	ldrb	r1, [r2, r3]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	224f      	movs	r2, #79	; 0x4f
 800897a:	5499      	strb	r1, [r3, r2]
    // calculate CRC
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2292      	movs	r2, #146	; 0x92
 8008980:	5c98      	ldrb	r0, [r3, r2]
                                                    hslave->bufferRx, 
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	331b      	adds	r3, #27
 8008986:	33ff      	adds	r3, #255	; 0xff
 8008988:	0019      	movs	r1, r3
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	238c      	movs	r3, #140	; 0x8c
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	5ad3      	ldrh	r3, [r2, r3]
 8008992:	001a      	movs	r2, r3
 8008994:	f7ff fea2 	bl	80086dc <RS485_Bus_ComputeCRC>
 8008998:	0003      	movs	r3, r0
 800899a:	0019      	movs	r1, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2292      	movs	r2, #146	; 0x92
 80089a0:	5499      	strb	r1, [r3, r2]
                                                    hslave->bufferRxLen);
    hslave->bufferRxLen = 0;
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	238c      	movs	r3, #140	; 0x8c
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	2100      	movs	r1, #0
 80089aa:	52d1      	strh	r1, [r2, r3]

    // next state
    hslave->state = RS485_BUS_SLV_STATE_R_LENGTH;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2203      	movs	r2, #3
 80089b0:	719a      	strb	r2, [r3, #6]
    break;
 80089b2:	e0ec      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>

  case RS485_BUS_SLV_STATE_R_LENGTH:
    hslave->bufferRxLen += hslave->read(&hslave->bufferRx[hslave->bufferRxLen], 2-hslave->bufferRxLen);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	2396      	movs	r3, #150	; 0x96
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	58d3      	ldr	r3, [r2, r3]
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	228c      	movs	r2, #140	; 0x8c
 80089c0:	0052      	lsls	r2, r2, #1
 80089c2:	5a8a      	ldrh	r2, [r1, r2]
 80089c4:	3219      	adds	r2, #25
 80089c6:	32ff      	adds	r2, #255	; 0xff
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	188a      	adds	r2, r1, r2
 80089cc:	1c90      	adds	r0, r2, #2
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	228c      	movs	r2, #140	; 0x8c
 80089d2:	0052      	lsls	r2, r2, #1
 80089d4:	5a8a      	ldrh	r2, [r1, r2]
 80089d6:	2102      	movs	r1, #2
 80089d8:	1a8a      	subs	r2, r1, r2
 80089da:	b292      	uxth	r2, r2
 80089dc:	0011      	movs	r1, r2
 80089de:	4798      	blx	r3
 80089e0:	0001      	movs	r1, r0
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	238c      	movs	r3, #140	; 0x8c
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	5ad2      	ldrh	r2, [r2, r3]
 80089ea:	b28b      	uxth	r3, r1
 80089ec:	18d3      	adds	r3, r2, r3
 80089ee:	b299      	uxth	r1, r3
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	238c      	movs	r3, #140	; 0x8c
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	52d1      	strh	r1, [r2, r3]
    if (hslave->bufferRxLen < 2) break;
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	238c      	movs	r3, #140	; 0x8c
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	5ad3      	ldrh	r3, [r2, r3]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d800      	bhi.n	8008a06 <RS485_Bus_Slave_Process+0x27e>
 8008a04:	e0be      	b.n	8008b84 <RS485_Bus_Slave_Process+0x3fc>
    memcpy(&hslave->tmpPackageRx.header.datalength, hslave->bufferRx, sizeof(uint16_t));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3350      	adds	r3, #80	; 0x50
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	331b      	adds	r3, #27
 8008a10:	33ff      	adds	r3, #255	; 0xff
 8008a12:	2202      	movs	r2, #2
 8008a14:	0019      	movs	r1, r3
 8008a16:	f000 fb07 	bl	8009028 <memcpy>
    // calculate CRC
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2292      	movs	r2, #146	; 0x92
 8008a1e:	5c98      	ldrb	r0, [r3, r2]
                                                    hslave->bufferRx, 
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	331b      	adds	r3, #27
 8008a24:	33ff      	adds	r3, #255	; 0xff
 8008a26:	0019      	movs	r1, r3
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	238c      	movs	r3, #140	; 0x8c
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	5ad3      	ldrh	r3, [r2, r3]
 8008a30:	001a      	movs	r2, r3
 8008a32:	f7ff fe53 	bl	80086dc <RS485_Bus_ComputeCRC>
 8008a36:	0003      	movs	r3, r0
 8008a38:	0019      	movs	r1, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2292      	movs	r2, #146	; 0x92
 8008a3e:	5499      	strb	r1, [r3, r2]
                                                    hslave->bufferRxLen);
    hslave->bufferRxLen = 0;
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	238c      	movs	r3, #140	; 0x8c
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	2100      	movs	r1, #0
 8008a48:	52d1      	strh	r1, [r2, r3]

    // next state
    if (hslave->tmpPackageRx.header.datalength != 0) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2250      	movs	r2, #80	; 0x50
 8008a4e:	5a9b      	ldrh	r3, [r3, r2]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <RS485_Bus_Slave_Process+0x2dc>
      hslave->tmpPackageDataLen = 0;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2294      	movs	r2, #148	; 0x94
 8008a58:	2100      	movs	r1, #0
 8008a5a:	5299      	strh	r1, [r3, r2]
      hslave->state = RS485_BUS_SLV_STATE_R_DATA;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	719a      	strb	r2, [r3, #6]
    }
    else
      hslave->state = RS485_BUS_SLV_STATE_R_CRC;
    break;
 8008a62:	e094      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
      hslave->state = RS485_BUS_SLV_STATE_R_CRC;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2205      	movs	r2, #5
 8008a68:	719a      	strb	r2, [r3, #6]
    break;
 8008a6a:	e090      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>

  case RS485_BUS_SLV_STATE_R_DATA:
    hslave->tmpPackageDataLen += hslave->read(&hslave->tmpPackageRx.data[hslave->tmpPackageDataLen], 
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	2396      	movs	r3, #150	; 0x96
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	58d3      	ldr	r3, [r2, r3]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	2194      	movs	r1, #148	; 0x94
 8008a78:	5a52      	ldrh	r2, [r2, r1]
 8008a7a:	3248      	adds	r2, #72	; 0x48
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	188a      	adds	r2, r1, r2
 8008a80:	320a      	adds	r2, #10
 8008a82:	0010      	movs	r0, r2
                                              hslave->tmpPackageRx.header.datalength-hslave->tmpPackageDataLen);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	2150      	movs	r1, #80	; 0x50
 8008a88:	5a51      	ldrh	r1, [r2, r1]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	2494      	movs	r4, #148	; 0x94
 8008a8e:	5b12      	ldrh	r2, [r2, r4]
    hslave->tmpPackageDataLen += hslave->read(&hslave->tmpPackageRx.data[hslave->tmpPackageDataLen], 
 8008a90:	1a8a      	subs	r2, r1, r2
 8008a92:	b292      	uxth	r2, r2
 8008a94:	0011      	movs	r1, r2
 8008a96:	4798      	blx	r3
 8008a98:	0001      	movs	r1, r0
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2294      	movs	r2, #148	; 0x94
 8008a9e:	5a9a      	ldrh	r2, [r3, r2]
 8008aa0:	b28b      	uxth	r3, r1
 8008aa2:	18d3      	adds	r3, r2, r3
 8008aa4:	b299      	uxth	r1, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2294      	movs	r2, #148	; 0x94
 8008aaa:	5299      	strh	r1, [r3, r2]
    // break for re-reading untransmit data
    if (hslave->tmpPackageDataLen < hslave->tmpPackageRx.header.datalength) break;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2294      	movs	r2, #148	; 0x94
 8008ab0:	5a9a      	ldrh	r2, [r3, r2]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2150      	movs	r1, #80	; 0x50
 8008ab6:	5a5b      	ldrh	r3, [r3, r1]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d365      	bcc.n	8008b88 <RS485_Bus_Slave_Process+0x400>
    // calculate CRC
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2292      	movs	r2, #146	; 0x92
 8008ac0:	5c98      	ldrb	r0, [r3, r2]
                                                    hslave->tmpPackageRx.data, 
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3352      	adds	r3, #82	; 0x52
 8008ac6:	0019      	movs	r1, r3
    hslave->tmpPackageRx.crc = RS485_Bus_ComputeCRC(hslave->tmpPackageRx.crc,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2250      	movs	r2, #80	; 0x50
 8008acc:	5a9b      	ldrh	r3, [r3, r2]
 8008ace:	001a      	movs	r2, r3
 8008ad0:	f7ff fe04 	bl	80086dc <RS485_Bus_ComputeCRC>
 8008ad4:	0003      	movs	r3, r0
 8008ad6:	0019      	movs	r1, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2292      	movs	r2, #146	; 0x92
 8008adc:	5499      	strb	r1, [r3, r2]
                                                    hslave->tmpPackageRx.header.datalength);

    memcpy(&hslave->tmpPackageRx.header.datalength, hslave->bufferRx, sizeof(uint16_t));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3350      	adds	r3, #80	; 0x50
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	331b      	adds	r3, #27
 8008ae8:	33ff      	adds	r3, #255	; 0xff
 8008aea:	2202      	movs	r2, #2
 8008aec:	0019      	movs	r1, r3
 8008aee:	f000 fa9b 	bl	8009028 <memcpy>
    hslave->tmpPackageDataLen = 0;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2294      	movs	r2, #148	; 0x94
 8008af6:	2100      	movs	r1, #0
 8008af8:	5299      	strh	r1, [r3, r2]

    // next state
    hslave->state = RS485_BUS_SLV_STATE_R_CRC;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2205      	movs	r2, #5
 8008afe:	719a      	strb	r2, [r3, #6]
    break;
 8008b00:	e045      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	08009330 	.word	0x08009330
 8008b08:	0800932c 	.word	0x0800932c

  case RS485_BUS_SLV_STATE_R_CRC:
    hslave->bufferRxLen += hslave->read(&hslave->bufferRx[0], 1);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	2396      	movs	r3, #150	; 0x96
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	58d3      	ldr	r3, [r2, r3]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	321b      	adds	r2, #27
 8008b18:	32ff      	adds	r2, #255	; 0xff
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	0010      	movs	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	0001      	movs	r1, r0
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	238c      	movs	r3, #140	; 0x8c
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	5ad2      	ldrh	r2, [r2, r3]
 8008b2a:	b28b      	uxth	r3, r1
 8008b2c:	18d3      	adds	r3, r2, r3
 8008b2e:	b299      	uxth	r1, r3
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	238c      	movs	r3, #140	; 0x8c
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	52d1      	strh	r1, [r2, r3]

    if (hslave->bufferRxLen < 1) break;
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	238c      	movs	r3, #140	; 0x8c
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	5ad3      	ldrh	r3, [r2, r3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d023      	beq.n	8008b8c <RS485_Bus_Slave_Process+0x404>

    // check crc
    if (hslave->tmpPackageRx.crc == hslave->bufferRx[0]) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2292      	movs	r2, #146	; 0x92
 8008b48:	5c9a      	ldrb	r2, [r3, r2]
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	238d      	movs	r3, #141	; 0x8d
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	5ccb      	ldrb	r3, [r1, r3]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d103      	bne.n	8008b5e <RS485_Bus_Slave_Process+0x3d6>
      onCompletePackage(hslave);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f000 f846 	bl	8008bea <onCompletePackage>
    }
    hslave->bufferRxLen = 0;
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	238c      	movs	r3, #140	; 0x8c
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2100      	movs	r1, #0
 8008b66:	52d1      	strh	r1, [r2, r3]
    hslave->state = RS485_BUS_SLV_STATE_IDLE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	719a      	strb	r2, [r3, #6]
    break;
 8008b6e:	e00e      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
  if (hslave->read == 0) return;
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	e00c      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
  default: break;
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	e00a      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->bufferRxLen < 2) break;
 8008b78:	46c0      	nop			; (mov r8, r8)
 8008b7a:	e008      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->bufferRxLen < 2) break;
 8008b7c:	46c0      	nop			; (mov r8, r8)
 8008b7e:	e006      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->bufferRxLen < 1) break;
 8008b80:	46c0      	nop			; (mov r8, r8)
 8008b82:	e004      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->bufferRxLen < 2) break;
 8008b84:	46c0      	nop			; (mov r8, r8)
 8008b86:	e002      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->tmpPackageDataLen < hslave->tmpPackageRx.header.datalength) break;
 8008b88:	46c0      	nop			; (mov r8, r8)
 8008b8a:	e000      	b.n	8008b8e <RS485_Bus_Slave_Process+0x406>
    if (hslave->bufferRxLen < 1) break;
 8008b8c:	46c0      	nop			; (mov r8, r8)
  }
}
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b003      	add	sp, #12
 8008b92:	bd90      	pop	{r4, r7, pc}

08008b94 <RS485_Bus_Slave_On>:


void RS485_Bus_Slave_On(RS485_Bus_SlaveHandler* hslave, 
                        RS485_Bus_Event_t event, 
                        RS485_Bus_EventCallback_t callback)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	200b      	movs	r0, #11
 8008ba0:	183b      	adds	r3, r7, r0
 8008ba2:	1c0a      	adds	r2, r1, #0
 8008ba4:	701a      	strb	r2, [r3, #0]
  if (hslave->evt_handler == 0) 
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	239a      	movs	r3, #154	; 0x9a
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	58d3      	ldr	r3, [r2, r3]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10c      	bne.n	8008bcc <RS485_Bus_Slave_On+0x38>
    hslave->evt_handler = RS485_Bus_Event_AddListener(0, event, callback); // first init
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	183b      	adds	r3, r7, r0
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	0019      	movs	r1, r3
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7ff fcc8 	bl	8008550 <RS485_Bus_Event_AddListener>
 8008bc0:	0001      	movs	r1, r0
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	239a      	movs	r3, #154	; 0x9a
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	50d1      	str	r1, [r2, r3]
  else
    RS485_Bus_Event_AddListener(hslave->evt_handler, event, callback);
}
 8008bca:	e00a      	b.n	8008be2 <RS485_Bus_Slave_On+0x4e>
    RS485_Bus_Event_AddListener(hslave->evt_handler, event, callback);
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	239a      	movs	r3, #154	; 0x9a
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	58d0      	ldr	r0, [r2, r3]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	230b      	movs	r3, #11
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	0019      	movs	r1, r3
 8008bde:	f7ff fcb7 	bl	8008550 <RS485_Bus_Event_AddListener>
}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	46bd      	mov	sp, r7
 8008be6:	b004      	add	sp, #16
 8008be8:	bd80      	pop	{r7, pc}

08008bea <onCompletePackage>:


static void onCompletePackage(RS485_Bus_SlaveHandler *hslave)
{
 8008bea:	b5b0      	push	{r4, r5, r7, lr}
 8008bec:	b08a      	sub	sp, #40	; 0x28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  RS484_BUS_Package_t *packRx = &hslave->tmpPackageRx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	334d      	adds	r3, #77	; 0x4d
 8008bf6:	61fb      	str	r3, [r7, #28]
  RS484_BUS_Package_t *packTx = &hslave->tmpPackageTx;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3307      	adds	r3, #7
 8008bfc:	61bb      	str	r3, [r7, #24]
  RS485_Bus_EventHandler_t *ptrHandler = hslave->evt_handler;
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	239a      	movs	r3, #154	; 0x9a
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	58d3      	ldr	r3, [r2, r3]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
  RS485_Bus_EventResponse_t response;
  RS485_Bus_Event_t event;

  if (packRx->header.datalength != 0) {
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	78da      	ldrb	r2, [r3, #3]
 8008c0c:	791b      	ldrb	r3, [r3, #4]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	4313      	orrs	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d100      	bne.n	8008c1a <onCompletePackage+0x30>
 8008c18:	e0be      	b.n	8008d98 <onCompletePackage+0x1ae>
    event = *((RS485_Bus_Event_t*)packRx->data);
 8008c1a:	2317      	movs	r3, #23
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	7952      	ldrb	r2, [r2, #5]
 8008c22:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < hslave->numOfId; i++) {
 8008c24:	2323      	movs	r3, #35	; 0x23
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e012      	b.n	8008c54 <onCompletePackage+0x6a>
      if (hslave->id[i] == packRx->header.id) goto handle;
 8008c2e:	2023      	movs	r0, #35	; 0x23
 8008c30:	183b      	adds	r3, r7, r0
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0052      	lsls	r2, r2, #1
 8008c38:	5ad2      	ldrh	r2, [r2, r3]
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	785b      	ldrb	r3, [r3, #1]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	430b      	orrs	r3, r1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d00c      	beq.n	8008c64 <onCompletePackage+0x7a>
    for (uint8_t i = 0; i < hslave->numOfId; i++) {
 8008c4a:	183b      	adds	r3, r7, r0
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	183b      	adds	r3, r7, r0
 8008c50:	3201      	adds	r2, #1
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	2223      	movs	r2, #35	; 0x23
 8008c5a:	18ba      	adds	r2, r7, r2
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3e5      	bcc.n	8008c2e <onCompletePackage+0x44>
    }
    return;
 8008c62:	e099      	b.n	8008d98 <onCompletePackage+0x1ae>
      if (hslave->id[i] == packRx->header.id) goto handle;
 8008c64:	46c0      	nop			; (mov r8, r8)

    handle:
    while (ptrHandler != 0)
 8008c66:	e091      	b.n	8008d8c <onCompletePackage+0x1a2>
    {
      if (event == ptrHandler->event){
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2217      	movs	r2, #23
 8008c6e:	18ba      	adds	r2, r7, r2
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d000      	beq.n	8008c78 <onCompletePackage+0x8e>
 8008c76:	e086      	b.n	8008d86 <onCompletePackage+0x19c>
        if (ptrHandler->callback != 0) {
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d100      	bne.n	8008c82 <onCompletePackage+0x98>
 8008c80:	e089      	b.n	8008d96 <onCompletePackage+0x1ac>
          response.data = 0;
 8008c82:	250c      	movs	r5, #12
 8008c84:	197b      	adds	r3, r7, r5
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
          response.dataLen = 0;
 8008c8a:	197b      	adds	r3, r7, r5
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	809a      	strh	r2, [r3, #4]
          ptrHandler->callback(packRx->header.id, &packRx->data[sizeof(RS485_Bus_Event_t)],
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	685c      	ldr	r4, [r3, #4]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	b298      	uxth	r0, r3
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	1d99      	adds	r1, r3, #6
                               packRx->header.datalength-sizeof(RS485_Bus_Event_t), &response);
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	78da      	ldrb	r2, [r3, #3]
 8008ca8:	791b      	ldrb	r3, [r3, #4]
 8008caa:	021b      	lsls	r3, r3, #8
 8008cac:	4313      	orrs	r3, r2
 8008cae:	b29b      	uxth	r3, r3
          ptrHandler->callback(packRx->header.id, &packRx->data[sizeof(RS485_Bus_Event_t)],
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	197b      	adds	r3, r7, r5
 8008cb6:	47a0      	blx	r4
          if (response.data != 0 && hslave->write != 0) {
 8008cb8:	197b      	adds	r3, r7, r5
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d06a      	beq.n	8008d96 <onCompletePackage+0x1ac>
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	2398      	movs	r3, #152	; 0x98
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	58d3      	ldr	r3, [r2, r3]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d064      	beq.n	8008d96 <onCompletePackage+0x1ac>
            packTx->header.id = packRx->header.id;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	785b      	ldrb	r3, [r3, #1]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	21ff      	movs	r1, #255	; 0xff
 8008cdc:	4011      	ands	r1, r2
 8008cde:	000c      	movs	r4, r1
 8008ce0:	7819      	ldrb	r1, [r3, #0]
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	4001      	ands	r1, r0
 8008ce6:	1c08      	adds	r0, r1, #0
 8008ce8:	1c21      	adds	r1, r4, #0
 8008cea:	4301      	orrs	r1, r0
 8008cec:	7019      	strb	r1, [r3, #0]
 8008cee:	0a12      	lsrs	r2, r2, #8
 8008cf0:	b290      	uxth	r0, r2
 8008cf2:	785a      	ldrb	r2, [r3, #1]
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	400a      	ands	r2, r1
 8008cf8:	1c11      	adds	r1, r2, #0
 8008cfa:	1c02      	adds	r2, r0, #0
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	705a      	strb	r2, [r3, #1]
            packTx->header.ackid = packRx->header.ackid;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	789a      	ldrb	r2, [r3, #2]
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	709a      	strb	r2, [r3, #2]
            packTx->header.datalength = response.dataLen;
 8008d08:	197b      	adds	r3, r7, r5
 8008d0a:	889a      	ldrh	r2, [r3, #4]
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	3303      	adds	r3, #3
 8008d10:	21ff      	movs	r1, #255	; 0xff
 8008d12:	4011      	ands	r1, r2
 8008d14:	000c      	movs	r4, r1
 8008d16:	7819      	ldrb	r1, [r3, #0]
 8008d18:	2000      	movs	r0, #0
 8008d1a:	4001      	ands	r1, r0
 8008d1c:	1c08      	adds	r0, r1, #0
 8008d1e:	1c21      	adds	r1, r4, #0
 8008d20:	4301      	orrs	r1, r0
 8008d22:	7019      	strb	r1, [r3, #0]
 8008d24:	0a12      	lsrs	r2, r2, #8
 8008d26:	b290      	uxth	r0, r2
 8008d28:	785a      	ldrb	r2, [r3, #1]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	400a      	ands	r2, r1
 8008d2e:	1c11      	adds	r1, r2, #0
 8008d30:	1c02      	adds	r2, r0, #0
 8008d32:	430a      	orrs	r2, r1
 8008d34:	705a      	strb	r2, [r3, #1]
            memcpy(packTx->data, response.data, response.dataLen);
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	1d58      	adds	r0, r3, #5
 8008d3a:	197b      	adds	r3, r7, r5
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	197b      	adds	r3, r7, r5
 8008d40:	889b      	ldrh	r3, [r3, #4]
 8008d42:	001a      	movs	r2, r3
 8008d44:	f000 f970 	bl	8009028 <memcpy>

            // encode response
            hslave->bufferTxLen = RS484_BUS_Package_Encode(packTx, hslave->bufferTx, RS485_BUS_TX_BUFFER_SZ);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3398      	adds	r3, #152	; 0x98
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2280      	movs	r2, #128	; 0x80
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7ff fc3e 	bl	80085d4 <RS484_BUS_Package_Encode>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	0019      	movs	r1, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2296      	movs	r2, #150	; 0x96
 8008d60:	5299      	strh	r1, [r3, r2]
            if (hslave->bufferTxLen > 0)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2296      	movs	r2, #150	; 0x96
 8008d66:	5a9b      	ldrh	r3, [r3, r2]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d014      	beq.n	8008d96 <onCompletePackage+0x1ac>
              // send response
              hslave->write(hslave->bufferTx, hslave->bufferTxLen);
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	2398      	movs	r3, #152	; 0x98
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	58d3      	ldr	r3, [r2, r3]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	3298      	adds	r2, #152	; 0x98
 8008d78:	0010      	movs	r0, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	2196      	movs	r1, #150	; 0x96
 8008d7e:	5a52      	ldrh	r2, [r2, r1]
 8008d80:	0011      	movs	r1, r2
 8008d82:	4798      	blx	r3
          }
        }
        break;
 8008d84:	e007      	b.n	8008d96 <onCompletePackage+0x1ac>
      }
      ptrHandler = ptrHandler->next;
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (ptrHandler != 0)
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d000      	beq.n	8008d94 <onCompletePackage+0x1aa>
 8008d92:	e769      	b.n	8008c68 <onCompletePackage+0x7e>
 8008d94:	e000      	b.n	8008d98 <onCompletePackage+0x1ae>
        break;
 8008d96:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b00a      	add	sp, #40	; 0x28
 8008d9c:	bdb0      	pop	{r4, r5, r7, pc}

08008d9e <STRM_Init>:


HAL_StatusTypeDef STRM_Init(STRM_handlerTypeDef *hdmas,
                            uint8_t *txBuffer, uint16_t txBufferSize,
                            uint8_t *rxBuffer, uint16_t rxBufferSize)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	1dbb      	adds	r3, r7, #6
 8008dac:	801a      	strh	r2, [r3, #0]
  hdmas->txBuffer = txBuffer;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	605a      	str	r2, [r3, #4]
  hdmas->txBufferSize = txBufferSize;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1dba      	adds	r2, r7, #6
 8008db8:	8812      	ldrh	r2, [r2, #0]
 8008dba:	811a      	strh	r2, [r3, #8]
  hdmas->rxBuffer = rxBuffer;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	60da      	str	r2, [r3, #12]
  hdmas->rxBufferSize = rxBufferSize;
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	2318      	movs	r3, #24
 8008dc6:	18fb      	adds	r3, r7, r3
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	8213      	strh	r3, [r2, #16]
  hdmas->status = 0;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	751a      	strb	r2, [r3, #20]
  hdmas->timeout = 2000;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	22fa      	movs	r2, #250	; 0xfa
 8008dd6:	00d2      	lsls	r2, r2, #3
 8008dd8:	831a      	strh	r2, [r3, #24]
  hdmas->pos = 0;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	82da      	strh	r2, [r3, #22]

  if (hdmas->huart == NULL)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <STRM_Init+0x4e>
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e009      	b.n	8008e00 <STRM_Init+0x62>

  return HAL_UART_Receive_DMA(hdmas->huart, hdmas->rxBuffer, hdmas->rxBufferSize);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68d9      	ldr	r1, [r3, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8a1b      	ldrh	r3, [r3, #16]
 8008df8:	001a      	movs	r2, r3
 8008dfa:	f7fd ff13 	bl	8006c24 <HAL_UART_Receive_DMA>
 8008dfe:	0003      	movs	r3, r0
}
 8008e00:	0018      	movs	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	b004      	add	sp, #16
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <STRM_Read>:
  return (hdmas->pos != (hdmas->rxBufferSize - __HAL_DMA_GET_COUNTER(hdmas->huart->hdmarx)));
}


uint16_t STRM_Read(STRM_handlerTypeDef *hdmas, uint8_t *rBuf, uint16_t size, uint32_t timeout)
{
 8008e08:	b590      	push	{r4, r7, lr}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	1dbb      	adds	r3, r7, #6
 8008e16:	801a      	strh	r2, [r3, #0]
  uint16_t len = 0;
 8008e18:	2316      	movs	r3, #22
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = STRM_GetTick();
 8008e20:	f7fa f8c2 	bl	8002fa8 <HAL_GetTick>
 8008e24:	0003      	movs	r3, r0
 8008e26:	613b      	str	r3, [r7, #16]

  if (rBuf == NULL) return 0;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <STRM_Read+0x2a>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e037      	b.n	8008ea2 <STRM_Read+0x9a>
  if (timeout == 0) timeout = hdmas->timeout;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d128      	bne.n	8008e8a <STRM_Read+0x82>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8b1b      	ldrh	r3, [r3, #24]
 8008e3c:	603b      	str	r3, [r7, #0]

  while (len < size) {
 8008e3e:	e024      	b.n	8008e8a <STRM_Read+0x82>
    if((STRM_GetTick() - tickstart) >= timeout) break;
 8008e40:	f7fa f8b2 	bl	8002fa8 <HAL_GetTick>
 8008e44:	0002      	movs	r2, r0
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d924      	bls.n	8008e9a <STRM_Read+0x92>
    len += readBuffer(hdmas, rBuf+len, size-len, STRM_READALL);
 8008e50:	2416      	movs	r4, #22
 8008e52:	193b      	adds	r3, r7, r4
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	18d1      	adds	r1, r2, r3
 8008e5a:	1dba      	adds	r2, r7, #6
 8008e5c:	193b      	adds	r3, r7, r4
 8008e5e:	8812      	ldrh	r2, [r2, #0]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f000 f81e 	bl	8008eaa <readBuffer>
 8008e6e:	0003      	movs	r3, r0
 8008e70:	0019      	movs	r1, r3
 8008e72:	193b      	adds	r3, r7, r4
 8008e74:	193a      	adds	r2, r7, r4
 8008e76:	8812      	ldrh	r2, [r2, #0]
 8008e78:	188a      	adds	r2, r1, r2
 8008e7a:	801a      	strh	r2, [r3, #0]
    if(len == 0) STRM_Delay(1);
 8008e7c:	193b      	adds	r3, r7, r4
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <STRM_Read+0x82>
 8008e84:	2001      	movs	r0, #1
 8008e86:	f7fa f899 	bl	8002fbc <HAL_Delay>
  while (len < size) {
 8008e8a:	2316      	movs	r3, #22
 8008e8c:	18fa      	adds	r2, r7, r3
 8008e8e:	1dbb      	adds	r3, r7, #6
 8008e90:	8812      	ldrh	r2, [r2, #0]
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d3d3      	bcc.n	8008e40 <STRM_Read+0x38>
 8008e98:	e000      	b.n	8008e9c <STRM_Read+0x94>
    if((STRM_GetTick() - tickstart) >= timeout) break;
 8008e9a:	46c0      	nop			; (mov r8, r8)
  }
  return len;
 8008e9c:	2316      	movs	r3, #22
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	881b      	ldrh	r3, [r3, #0]
}
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b007      	add	sp, #28
 8008ea8:	bd90      	pop	{r4, r7, pc}

08008eaa <readBuffer>:
  hdmas->pos = hdmas->rxBufferSize - __HAL_DMA_GET_COUNTER(hdmas->huart->hdmarx);
}


static uint16_t readBuffer(STRM_handlerTypeDef *hdmas, uint8_t *rBuf, uint16_t size, uint8_t readtype)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b086      	sub	sp, #24
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	1dbb      	adds	r3, r7, #6
 8008eb8:	801a      	strh	r2, [r3, #0]
 8008eba:	1d7b      	adds	r3, r7, #5
 8008ebc:	1c0a      	adds	r2, r1, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
  uint8_t prevByte, curByte;
  uint16_t len = 0;
 8008ec0:	2314      	movs	r3, #20
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	801a      	strh	r2, [r3, #0]
  uint16_t pos = hdmas->rxBufferSize - __HAL_DMA_GET_COUNTER(hdmas->huart->hdmarx);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8a19      	ldrh	r1, [r3, #16]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2280      	movs	r2, #128	; 0x80
 8008ed2:	589b      	ldr	r3, [r3, r2]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	2312      	movs	r3, #18
 8008edc:	18fb      	adds	r3, r7, r3
 8008ede:	1a8a      	subs	r2, r1, r2
 8008ee0:	801a      	strh	r2, [r3, #0]

  // read buffer until find "\r\n"
  while (pos != hdmas->pos) {
 8008ee2:	e05d      	b.n	8008fa0 <readBuffer+0xf6>
    if (len >= size) break;
 8008ee4:	2114      	movs	r1, #20
 8008ee6:	187a      	adds	r2, r7, r1
 8008ee8:	1dbb      	adds	r3, r7, #6
 8008eea:	8812      	ldrh	r2, [r2, #0]
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d25e      	bcs.n	8008fb0 <readBuffer+0x106>
    curByte = *(hdmas->rxBuffer+hdmas->pos);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	8ad2      	ldrh	r2, [r2, #22]
 8008efa:	189a      	adds	r2, r3, r2
 8008efc:	2011      	movs	r0, #17
 8008efe:	183b      	adds	r3, r7, r0
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	701a      	strb	r2, [r3, #0]

    *rBuf = curByte;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	183a      	adds	r2, r7, r0
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
    rBuf++;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60bb      	str	r3, [r7, #8]
    len++;
 8008f12:	187b      	adds	r3, r7, r1
 8008f14:	881a      	ldrh	r2, [r3, #0]
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	3201      	adds	r2, #1
 8008f1a:	801a      	strh	r2, [r3, #0]

    // pos add as circular
    hdmas->pos++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8adb      	ldrh	r3, [r3, #22]
 8008f20:	3301      	adds	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	82da      	strh	r2, [r3, #22]
    if(hdmas->pos >= hdmas->rxBufferSize) hdmas->pos = 0;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8ada      	ldrh	r2, [r3, #22]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8a1b      	ldrh	r3, [r3, #16]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d302      	bcc.n	8008f3a <readBuffer+0x90>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	82da      	strh	r2, [r3, #22]
 8008f3a:	2117      	movs	r1, #23
 8008f3c:	187b      	adds	r3, r7, r1
 8008f3e:	187a      	adds	r2, r7, r1
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	701a      	strb	r2, [r3, #0]

    if(readtype != STRM_READALL){
 8008f44:	1d7b      	adds	r3, r7, #5
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d029      	beq.n	8008fa0 <readBuffer+0xf6>
      if((readtype == STRM_BREAK_CRLF && len > 1 && prevByte == '\r' && curByte == '\n')
 8008f4c:	1d7b      	adds	r3, r7, #5
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d10d      	bne.n	8008f70 <readBuffer+0xc6>
 8008f54:	2314      	movs	r3, #20
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d908      	bls.n	8008f70 <readBuffer+0xc6>
 8008f5e:	187b      	adds	r3, r7, r1
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b0d      	cmp	r3, #13
 8008f64:	d104      	bne.n	8008f70 <readBuffer+0xc6>
 8008f66:	2311      	movs	r3, #17
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b0a      	cmp	r3, #10
 8008f6e:	d020      	beq.n	8008fb2 <readBuffer+0x108>
         || (readtype == STRM_BREAK_CR && curByte == '\r')
 8008f70:	1d7b      	adds	r3, r7, #5
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d104      	bne.n	8008f82 <readBuffer+0xd8>
 8008f78:	2311      	movs	r3, #17
 8008f7a:	18fb      	adds	r3, r7, r3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b0d      	cmp	r3, #13
 8008f80:	d017      	beq.n	8008fb2 <readBuffer+0x108>
         || (readtype == STRM_BREAK_LF && curByte == '\n'))
 8008f82:	1d7b      	adds	r3, r7, #5
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d104      	bne.n	8008f94 <readBuffer+0xea>
 8008f8a:	2311      	movs	r3, #17
 8008f8c:	18fb      	adds	r3, r7, r3
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b0a      	cmp	r3, #10
 8008f92:	d00e      	beq.n	8008fb2 <readBuffer+0x108>
      {
        break;
      }
      // save current byte in prevByte
      prevByte = curByte;
 8008f94:	2317      	movs	r3, #23
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	2211      	movs	r2, #17
 8008f9a:	18ba      	adds	r2, r7, r2
 8008f9c:	7812      	ldrb	r2, [r2, #0]
 8008f9e:	701a      	strb	r2, [r3, #0]
  while (pos != hdmas->pos) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8adb      	ldrh	r3, [r3, #22]
 8008fa4:	2212      	movs	r2, #18
 8008fa6:	18ba      	adds	r2, r7, r2
 8008fa8:	8812      	ldrh	r2, [r2, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d19a      	bne.n	8008ee4 <readBuffer+0x3a>
 8008fae:	e000      	b.n	8008fb2 <readBuffer+0x108>
    if (len >= size) break;
 8008fb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return len;
 8008fb2:	2314      	movs	r3, #20
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	881b      	ldrh	r3, [r3, #0]
}
 8008fb8:	0018      	movs	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b006      	add	sp, #24
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <__errno>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <__errno+0x8>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	4770      	bx	lr
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	20000020 	.word	0x20000020

08008fcc <__libc_init_array>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	2600      	movs	r6, #0
 8008fd0:	4d0c      	ldr	r5, [pc, #48]	; (8009004 <__libc_init_array+0x38>)
 8008fd2:	4c0d      	ldr	r4, [pc, #52]	; (8009008 <__libc_init_array+0x3c>)
 8008fd4:	1b64      	subs	r4, r4, r5
 8008fd6:	10a4      	asrs	r4, r4, #2
 8008fd8:	42a6      	cmp	r6, r4
 8008fda:	d109      	bne.n	8008ff0 <__libc_init_array+0x24>
 8008fdc:	2600      	movs	r6, #0
 8008fde:	f000 f903 	bl	80091e8 <_init>
 8008fe2:	4d0a      	ldr	r5, [pc, #40]	; (800900c <__libc_init_array+0x40>)
 8008fe4:	4c0a      	ldr	r4, [pc, #40]	; (8009010 <__libc_init_array+0x44>)
 8008fe6:	1b64      	subs	r4, r4, r5
 8008fe8:	10a4      	asrs	r4, r4, #2
 8008fea:	42a6      	cmp	r6, r4
 8008fec:	d105      	bne.n	8008ffa <__libc_init_array+0x2e>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	00b3      	lsls	r3, r6, #2
 8008ff2:	58eb      	ldr	r3, [r5, r3]
 8008ff4:	4798      	blx	r3
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7ee      	b.n	8008fd8 <__libc_init_array+0xc>
 8008ffa:	00b3      	lsls	r3, r6, #2
 8008ffc:	58eb      	ldr	r3, [r5, r3]
 8008ffe:	4798      	blx	r3
 8009000:	3601      	adds	r6, #1
 8009002:	e7f2      	b.n	8008fea <__libc_init_array+0x1e>
 8009004:	08009350 	.word	0x08009350
 8009008:	08009350 	.word	0x08009350
 800900c:	08009350 	.word	0x08009350
 8009010:	08009354 	.word	0x08009354

08009014 <malloc>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <malloc+0x10>)
 8009018:	0001      	movs	r1, r0
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	f000 f838 	bl	8009090 <_malloc_r>
 8009020:	bd10      	pop	{r4, pc}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	20000020 	.word	0x20000020

08009028 <memcpy>:
 8009028:	2300      	movs	r3, #0
 800902a:	b510      	push	{r4, lr}
 800902c:	429a      	cmp	r2, r3
 800902e:	d100      	bne.n	8009032 <memcpy+0xa>
 8009030:	bd10      	pop	{r4, pc}
 8009032:	5ccc      	ldrb	r4, [r1, r3]
 8009034:	54c4      	strb	r4, [r0, r3]
 8009036:	3301      	adds	r3, #1
 8009038:	e7f8      	b.n	800902c <memcpy+0x4>

0800903a <memset>:
 800903a:	0003      	movs	r3, r0
 800903c:	1882      	adds	r2, r0, r2
 800903e:	4293      	cmp	r3, r2
 8009040:	d100      	bne.n	8009044 <memset+0xa>
 8009042:	4770      	bx	lr
 8009044:	7019      	strb	r1, [r3, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	e7f9      	b.n	800903e <memset+0x4>
	...

0800904c <sbrk_aligned>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4e0f      	ldr	r6, [pc, #60]	; (800908c <sbrk_aligned+0x40>)
 8009050:	000d      	movs	r5, r1
 8009052:	6831      	ldr	r1, [r6, #0]
 8009054:	0004      	movs	r4, r0
 8009056:	2900      	cmp	r1, #0
 8009058:	d102      	bne.n	8009060 <sbrk_aligned+0x14>
 800905a:	f000 f88f 	bl	800917c <_sbrk_r>
 800905e:	6030      	str	r0, [r6, #0]
 8009060:	0029      	movs	r1, r5
 8009062:	0020      	movs	r0, r4
 8009064:	f000 f88a 	bl	800917c <_sbrk_r>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d00a      	beq.n	8009082 <sbrk_aligned+0x36>
 800906c:	2303      	movs	r3, #3
 800906e:	1cc5      	adds	r5, r0, #3
 8009070:	439d      	bics	r5, r3
 8009072:	42a8      	cmp	r0, r5
 8009074:	d007      	beq.n	8009086 <sbrk_aligned+0x3a>
 8009076:	1a29      	subs	r1, r5, r0
 8009078:	0020      	movs	r0, r4
 800907a:	f000 f87f 	bl	800917c <_sbrk_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d101      	bne.n	8009086 <sbrk_aligned+0x3a>
 8009082:	2501      	movs	r5, #1
 8009084:	426d      	negs	r5, r5
 8009086:	0028      	movs	r0, r5
 8009088:	bd70      	pop	{r4, r5, r6, pc}
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	20001030 	.word	0x20001030

08009090 <_malloc_r>:
 8009090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009092:	2203      	movs	r2, #3
 8009094:	1ccb      	adds	r3, r1, #3
 8009096:	4393      	bics	r3, r2
 8009098:	3308      	adds	r3, #8
 800909a:	0006      	movs	r6, r0
 800909c:	001f      	movs	r7, r3
 800909e:	2b0c      	cmp	r3, #12
 80090a0:	d232      	bcs.n	8009108 <_malloc_r+0x78>
 80090a2:	270c      	movs	r7, #12
 80090a4:	42b9      	cmp	r1, r7
 80090a6:	d831      	bhi.n	800910c <_malloc_r+0x7c>
 80090a8:	0030      	movs	r0, r6
 80090aa:	f000 f88b 	bl	80091c4 <__malloc_lock>
 80090ae:	4d32      	ldr	r5, [pc, #200]	; (8009178 <_malloc_r+0xe8>)
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	001c      	movs	r4, r3
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d12e      	bne.n	8009116 <_malloc_r+0x86>
 80090b8:	0039      	movs	r1, r7
 80090ba:	0030      	movs	r0, r6
 80090bc:	f7ff ffc6 	bl	800904c <sbrk_aligned>
 80090c0:	0004      	movs	r4, r0
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d11e      	bne.n	8009104 <_malloc_r+0x74>
 80090c6:	682c      	ldr	r4, [r5, #0]
 80090c8:	0025      	movs	r5, r4
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	d14a      	bne.n	8009164 <_malloc_r+0xd4>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	0029      	movs	r1, r5
 80090d2:	18e3      	adds	r3, r4, r3
 80090d4:	0030      	movs	r0, r6
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	f000 f850 	bl	800917c <_sbrk_r>
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	4283      	cmp	r3, r0
 80090e0:	d143      	bne.n	800916a <_malloc_r+0xda>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	3703      	adds	r7, #3
 80090e6:	1aff      	subs	r7, r7, r3
 80090e8:	2303      	movs	r3, #3
 80090ea:	439f      	bics	r7, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	2f0c      	cmp	r7, #12
 80090f0:	d200      	bcs.n	80090f4 <_malloc_r+0x64>
 80090f2:	270c      	movs	r7, #12
 80090f4:	0039      	movs	r1, r7
 80090f6:	0030      	movs	r0, r6
 80090f8:	f7ff ffa8 	bl	800904c <sbrk_aligned>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d034      	beq.n	800916a <_malloc_r+0xda>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	19df      	adds	r7, r3, r7
 8009104:	6027      	str	r7, [r4, #0]
 8009106:	e013      	b.n	8009130 <_malloc_r+0xa0>
 8009108:	2b00      	cmp	r3, #0
 800910a:	dacb      	bge.n	80090a4 <_malloc_r+0x14>
 800910c:	230c      	movs	r3, #12
 800910e:	2500      	movs	r5, #0
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	0028      	movs	r0, r5
 8009114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	1bd1      	subs	r1, r2, r7
 800911a:	d420      	bmi.n	800915e <_malloc_r+0xce>
 800911c:	290b      	cmp	r1, #11
 800911e:	d917      	bls.n	8009150 <_malloc_r+0xc0>
 8009120:	19e2      	adds	r2, r4, r7
 8009122:	6027      	str	r7, [r4, #0]
 8009124:	42a3      	cmp	r3, r4
 8009126:	d111      	bne.n	800914c <_malloc_r+0xbc>
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	6011      	str	r1, [r2, #0]
 800912e:	6053      	str	r3, [r2, #4]
 8009130:	0030      	movs	r0, r6
 8009132:	0025      	movs	r5, r4
 8009134:	f000 f84e 	bl	80091d4 <__malloc_unlock>
 8009138:	2207      	movs	r2, #7
 800913a:	350b      	adds	r5, #11
 800913c:	1d23      	adds	r3, r4, #4
 800913e:	4395      	bics	r5, r2
 8009140:	1aea      	subs	r2, r5, r3
 8009142:	429d      	cmp	r5, r3
 8009144:	d0e5      	beq.n	8009112 <_malloc_r+0x82>
 8009146:	1b5b      	subs	r3, r3, r5
 8009148:	50a3      	str	r3, [r4, r2]
 800914a:	e7e2      	b.n	8009112 <_malloc_r+0x82>
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	e7ec      	b.n	800912a <_malloc_r+0x9a>
 8009150:	6862      	ldr	r2, [r4, #4]
 8009152:	42a3      	cmp	r3, r4
 8009154:	d101      	bne.n	800915a <_malloc_r+0xca>
 8009156:	602a      	str	r2, [r5, #0]
 8009158:	e7ea      	b.n	8009130 <_malloc_r+0xa0>
 800915a:	605a      	str	r2, [r3, #4]
 800915c:	e7e8      	b.n	8009130 <_malloc_r+0xa0>
 800915e:	0023      	movs	r3, r4
 8009160:	6864      	ldr	r4, [r4, #4]
 8009162:	e7a7      	b.n	80090b4 <_malloc_r+0x24>
 8009164:	002c      	movs	r4, r5
 8009166:	686d      	ldr	r5, [r5, #4]
 8009168:	e7af      	b.n	80090ca <_malloc_r+0x3a>
 800916a:	230c      	movs	r3, #12
 800916c:	0030      	movs	r0, r6
 800916e:	6033      	str	r3, [r6, #0]
 8009170:	f000 f830 	bl	80091d4 <__malloc_unlock>
 8009174:	e7cd      	b.n	8009112 <_malloc_r+0x82>
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	2000102c 	.word	0x2000102c

0800917c <_sbrk_r>:
 800917c:	2300      	movs	r3, #0
 800917e:	b570      	push	{r4, r5, r6, lr}
 8009180:	4d06      	ldr	r5, [pc, #24]	; (800919c <_sbrk_r+0x20>)
 8009182:	0004      	movs	r4, r0
 8009184:	0008      	movs	r0, r1
 8009186:	602b      	str	r3, [r5, #0]
 8009188:	f7f9 fe04 	bl	8002d94 <_sbrk>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d103      	bne.n	8009198 <_sbrk_r+0x1c>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d000      	beq.n	8009198 <_sbrk_r+0x1c>
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	20001034 	.word	0x20001034

080091a0 <strncmp>:
 80091a0:	b530      	push	{r4, r5, lr}
 80091a2:	0005      	movs	r5, r0
 80091a4:	1e10      	subs	r0, r2, #0
 80091a6:	d008      	beq.n	80091ba <strncmp+0x1a>
 80091a8:	2400      	movs	r4, #0
 80091aa:	3a01      	subs	r2, #1
 80091ac:	5d2b      	ldrb	r3, [r5, r4]
 80091ae:	5d08      	ldrb	r0, [r1, r4]
 80091b0:	4283      	cmp	r3, r0
 80091b2:	d101      	bne.n	80091b8 <strncmp+0x18>
 80091b4:	4294      	cmp	r4, r2
 80091b6:	d101      	bne.n	80091bc <strncmp+0x1c>
 80091b8:	1a18      	subs	r0, r3, r0
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	3401      	adds	r4, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1f4      	bne.n	80091ac <strncmp+0xc>
 80091c2:	e7f9      	b.n	80091b8 <strncmp+0x18>

080091c4 <__malloc_lock>:
 80091c4:	b510      	push	{r4, lr}
 80091c6:	4802      	ldr	r0, [pc, #8]	; (80091d0 <__malloc_lock+0xc>)
 80091c8:	f000 f80c 	bl	80091e4 <__retarget_lock_acquire_recursive>
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	20001038 	.word	0x20001038

080091d4 <__malloc_unlock>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4802      	ldr	r0, [pc, #8]	; (80091e0 <__malloc_unlock+0xc>)
 80091d8:	f000 f805 	bl	80091e6 <__retarget_lock_release_recursive>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	20001038 	.word	0x20001038

080091e4 <__retarget_lock_acquire_recursive>:
 80091e4:	4770      	bx	lr

080091e6 <__retarget_lock_release_recursive>:
 80091e6:	4770      	bx	lr

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
