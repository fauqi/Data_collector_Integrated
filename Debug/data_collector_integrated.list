
data_collector_integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800a5d8  0800a5d8  0001a5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a920  0800a920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a928  0800a928  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  2000000c  0800a93c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800a93c  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172a0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a8  00000000  00000000  000372d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2e  00000000  00000000  0003bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153c1  00000000  00000000  00059a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1d78  00000000  00000000  0006ee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  00130c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a5bc 	.word	0x0800a5bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800a5bc 	.word	0x0800a5bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 f865 	bl	80014d0 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 ffb5 	bl	8001380 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 f857 	bl	80014d0 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f84d 	bl	80014d0 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffdd 	bl	8001404 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffd3 	bl	8001404 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_uldivmod>:
 800046c:	2b00      	cmp	r3, #0
 800046e:	d111      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000470:	2a00      	cmp	r2, #0
 8000472:	d10f      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000474:	2900      	cmp	r1, #0
 8000476:	d100      	bne.n	800047a <__aeabi_uldivmod+0xe>
 8000478:	2800      	cmp	r0, #0
 800047a:	d002      	beq.n	8000482 <__aeabi_uldivmod+0x16>
 800047c:	2100      	movs	r1, #0
 800047e:	43c9      	mvns	r1, r1
 8000480:	0008      	movs	r0, r1
 8000482:	b407      	push	{r0, r1, r2}
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <__aeabi_uldivmod+0x24>)
 8000486:	a102      	add	r1, pc, #8	; (adr r1, 8000490 <__aeabi_uldivmod+0x24>)
 8000488:	1840      	adds	r0, r0, r1
 800048a:	9002      	str	r0, [sp, #8]
 800048c:	bd03      	pop	{r0, r1, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	ffffff5d 	.word	0xffffff5d
 8000494:	b403      	push	{r0, r1}
 8000496:	4668      	mov	r0, sp
 8000498:	b501      	push	{r0, lr}
 800049a:	9802      	ldr	r0, [sp, #8]
 800049c:	f000 f824 	bl	80004e8 <__udivmoddi4>
 80004a0:	9b01      	ldr	r3, [sp, #4]
 80004a2:	469e      	mov	lr, r3
 80004a4:	b002      	add	sp, #8
 80004a6:	bc0c      	pop	{r2, r3}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_d2uiz>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2200      	movs	r2, #0
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004b2:	0004      	movs	r4, r0
 80004b4:	000d      	movs	r5, r1
 80004b6:	f7ff ffcf 	bl	8000458 <__aeabi_dcmpge>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d104      	bne.n	80004c8 <__aeabi_d2uiz+0x1c>
 80004be:	0020      	movs	r0, r4
 80004c0:	0029      	movs	r1, r5
 80004c2:	f001 fe67 	bl	8002194 <__aeabi_d2iz>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0020      	movs	r0, r4
 80004ce:	0029      	movs	r1, r5
 80004d0:	f001 face 	bl	8001a70 <__aeabi_dsub>
 80004d4:	f001 fe5e 	bl	8002194 <__aeabi_d2iz>
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	061b      	lsls	r3, r3, #24
 80004dc:	469c      	mov	ip, r3
 80004de:	4460      	add	r0, ip
 80004e0:	e7f1      	b.n	80004c6 <__aeabi_d2uiz+0x1a>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	41e00000 	.word	0x41e00000

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f001 ff98 	bl	800243c <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 ff93 	bl	800243c <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_i2f>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	2800      	cmp	r0, #0
 8000684:	d013      	beq.n	80006ae <__aeabi_i2f+0x2e>
 8000686:	17c3      	asrs	r3, r0, #31
 8000688:	18c6      	adds	r6, r0, r3
 800068a:	405e      	eors	r6, r3
 800068c:	0fc4      	lsrs	r4, r0, #31
 800068e:	0030      	movs	r0, r6
 8000690:	f001 feb6 	bl	8002400 <__clzsi2>
 8000694:	239e      	movs	r3, #158	; 0x9e
 8000696:	0005      	movs	r5, r0
 8000698:	1a1b      	subs	r3, r3, r0
 800069a:	2b96      	cmp	r3, #150	; 0x96
 800069c:	dc0f      	bgt.n	80006be <__aeabi_i2f+0x3e>
 800069e:	2808      	cmp	r0, #8
 80006a0:	dd01      	ble.n	80006a6 <__aeabi_i2f+0x26>
 80006a2:	3d08      	subs	r5, #8
 80006a4:	40ae      	lsls	r6, r5
 80006a6:	0276      	lsls	r6, r6, #9
 80006a8:	0a76      	lsrs	r6, r6, #9
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	e002      	b.n	80006b4 <__aeabi_i2f+0x34>
 80006ae:	2400      	movs	r4, #0
 80006b0:	2000      	movs	r0, #0
 80006b2:	2600      	movs	r6, #0
 80006b4:	05c0      	lsls	r0, r0, #23
 80006b6:	4330      	orrs	r0, r6
 80006b8:	07e4      	lsls	r4, r4, #31
 80006ba:	4320      	orrs	r0, r4
 80006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006be:	2b99      	cmp	r3, #153	; 0x99
 80006c0:	dd0c      	ble.n	80006dc <__aeabi_i2f+0x5c>
 80006c2:	2205      	movs	r2, #5
 80006c4:	0031      	movs	r1, r6
 80006c6:	1a12      	subs	r2, r2, r0
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	000a      	movs	r2, r1
 80006cc:	0001      	movs	r1, r0
 80006ce:	0030      	movs	r0, r6
 80006d0:	311b      	adds	r1, #27
 80006d2:	4088      	lsls	r0, r1
 80006d4:	1e41      	subs	r1, r0, #1
 80006d6:	4188      	sbcs	r0, r1
 80006d8:	4302      	orrs	r2, r0
 80006da:	0016      	movs	r6, r2
 80006dc:	2d05      	cmp	r5, #5
 80006de:	dc12      	bgt.n	8000706 <__aeabi_i2f+0x86>
 80006e0:	0031      	movs	r1, r6
 80006e2:	4f0d      	ldr	r7, [pc, #52]	; (8000718 <__aeabi_i2f+0x98>)
 80006e4:	4039      	ands	r1, r7
 80006e6:	0772      	lsls	r2, r6, #29
 80006e8:	d009      	beq.n	80006fe <__aeabi_i2f+0x7e>
 80006ea:	200f      	movs	r0, #15
 80006ec:	4030      	ands	r0, r6
 80006ee:	2804      	cmp	r0, #4
 80006f0:	d005      	beq.n	80006fe <__aeabi_i2f+0x7e>
 80006f2:	3104      	adds	r1, #4
 80006f4:	014a      	lsls	r2, r1, #5
 80006f6:	d502      	bpl.n	80006fe <__aeabi_i2f+0x7e>
 80006f8:	239f      	movs	r3, #159	; 0x9f
 80006fa:	4039      	ands	r1, r7
 80006fc:	1b5b      	subs	r3, r3, r5
 80006fe:	0189      	lsls	r1, r1, #6
 8000700:	0a4e      	lsrs	r6, r1, #9
 8000702:	b2d8      	uxtb	r0, r3
 8000704:	e7d6      	b.n	80006b4 <__aeabi_i2f+0x34>
 8000706:	1f6a      	subs	r2, r5, #5
 8000708:	4096      	lsls	r6, r2
 800070a:	0031      	movs	r1, r6
 800070c:	4f02      	ldr	r7, [pc, #8]	; (8000718 <__aeabi_i2f+0x98>)
 800070e:	4039      	ands	r1, r7
 8000710:	0772      	lsls	r2, r6, #29
 8000712:	d0f4      	beq.n	80006fe <__aeabi_i2f+0x7e>
 8000714:	e7e9      	b.n	80006ea <__aeabi_i2f+0x6a>
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	fbffffff 	.word	0xfbffffff

0800071c <__aeabi_dadd>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	464f      	mov	r7, r9
 8000720:	4646      	mov	r6, r8
 8000722:	46d6      	mov	lr, sl
 8000724:	000d      	movs	r5, r1
 8000726:	0004      	movs	r4, r0
 8000728:	b5c0      	push	{r6, r7, lr}
 800072a:	001f      	movs	r7, r3
 800072c:	0011      	movs	r1, r2
 800072e:	0328      	lsls	r0, r5, #12
 8000730:	0f62      	lsrs	r2, r4, #29
 8000732:	0a40      	lsrs	r0, r0, #9
 8000734:	4310      	orrs	r0, r2
 8000736:	007a      	lsls	r2, r7, #1
 8000738:	0d52      	lsrs	r2, r2, #21
 800073a:	00e3      	lsls	r3, r4, #3
 800073c:	033c      	lsls	r4, r7, #12
 800073e:	4691      	mov	r9, r2
 8000740:	0a64      	lsrs	r4, r4, #9
 8000742:	0ffa      	lsrs	r2, r7, #31
 8000744:	0f4f      	lsrs	r7, r1, #29
 8000746:	006e      	lsls	r6, r5, #1
 8000748:	4327      	orrs	r7, r4
 800074a:	4692      	mov	sl, r2
 800074c:	46b8      	mov	r8, r7
 800074e:	0d76      	lsrs	r6, r6, #21
 8000750:	0fed      	lsrs	r5, r5, #31
 8000752:	00c9      	lsls	r1, r1, #3
 8000754:	4295      	cmp	r5, r2
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x3e>
 8000758:	e099      	b.n	800088e <__aeabi_dadd+0x172>
 800075a:	464c      	mov	r4, r9
 800075c:	1b34      	subs	r4, r6, r4
 800075e:	46a4      	mov	ip, r4
 8000760:	2c00      	cmp	r4, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_dadd+0x4a>
 8000764:	e07c      	b.n	8000860 <__aeabi_dadd+0x144>
 8000766:	464a      	mov	r2, r9
 8000768:	2a00      	cmp	r2, #0
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x52>
 800076c:	e0b8      	b.n	80008e0 <__aeabi_dadd+0x1c4>
 800076e:	4ac5      	ldr	r2, [pc, #788]	; (8000a84 <__aeabi_dadd+0x368>)
 8000770:	4296      	cmp	r6, r2
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x5a>
 8000774:	e11c      	b.n	80009b0 <__aeabi_dadd+0x294>
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	003c      	movs	r4, r7
 800077a:	0412      	lsls	r2, r2, #16
 800077c:	4314      	orrs	r4, r2
 800077e:	46a0      	mov	r8, r4
 8000780:	4662      	mov	r2, ip
 8000782:	2a38      	cmp	r2, #56	; 0x38
 8000784:	dd00      	ble.n	8000788 <__aeabi_dadd+0x6c>
 8000786:	e161      	b.n	8000a4c <__aeabi_dadd+0x330>
 8000788:	2a1f      	cmp	r2, #31
 800078a:	dd00      	ble.n	800078e <__aeabi_dadd+0x72>
 800078c:	e1cc      	b.n	8000b28 <__aeabi_dadd+0x40c>
 800078e:	4664      	mov	r4, ip
 8000790:	2220      	movs	r2, #32
 8000792:	1b12      	subs	r2, r2, r4
 8000794:	4644      	mov	r4, r8
 8000796:	4094      	lsls	r4, r2
 8000798:	000f      	movs	r7, r1
 800079a:	46a1      	mov	r9, r4
 800079c:	4664      	mov	r4, ip
 800079e:	4091      	lsls	r1, r2
 80007a0:	40e7      	lsrs	r7, r4
 80007a2:	464c      	mov	r4, r9
 80007a4:	1e4a      	subs	r2, r1, #1
 80007a6:	4191      	sbcs	r1, r2
 80007a8:	433c      	orrs	r4, r7
 80007aa:	4642      	mov	r2, r8
 80007ac:	4321      	orrs	r1, r4
 80007ae:	4664      	mov	r4, ip
 80007b0:	40e2      	lsrs	r2, r4
 80007b2:	1a80      	subs	r0, r0, r2
 80007b4:	1a5c      	subs	r4, r3, r1
 80007b6:	42a3      	cmp	r3, r4
 80007b8:	419b      	sbcs	r3, r3
 80007ba:	425f      	negs	r7, r3
 80007bc:	1bc7      	subs	r7, r0, r7
 80007be:	023b      	lsls	r3, r7, #8
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_dadd+0xa8>
 80007c2:	e0d0      	b.n	8000966 <__aeabi_dadd+0x24a>
 80007c4:	027f      	lsls	r7, r7, #9
 80007c6:	0a7f      	lsrs	r7, r7, #9
 80007c8:	2f00      	cmp	r7, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0xb2>
 80007cc:	e0ff      	b.n	80009ce <__aeabi_dadd+0x2b2>
 80007ce:	0038      	movs	r0, r7
 80007d0:	f001 fe16 	bl	8002400 <__clzsi2>
 80007d4:	0001      	movs	r1, r0
 80007d6:	3908      	subs	r1, #8
 80007d8:	2320      	movs	r3, #32
 80007da:	0022      	movs	r2, r4
 80007dc:	1a5b      	subs	r3, r3, r1
 80007de:	408f      	lsls	r7, r1
 80007e0:	40da      	lsrs	r2, r3
 80007e2:	408c      	lsls	r4, r1
 80007e4:	4317      	orrs	r7, r2
 80007e6:	42b1      	cmp	r1, r6
 80007e8:	da00      	bge.n	80007ec <__aeabi_dadd+0xd0>
 80007ea:	e0ff      	b.n	80009ec <__aeabi_dadd+0x2d0>
 80007ec:	1b89      	subs	r1, r1, r6
 80007ee:	1c4b      	adds	r3, r1, #1
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dadd+0xda>
 80007f4:	e0a8      	b.n	8000948 <__aeabi_dadd+0x22c>
 80007f6:	2220      	movs	r2, #32
 80007f8:	0039      	movs	r1, r7
 80007fa:	1ad2      	subs	r2, r2, r3
 80007fc:	0020      	movs	r0, r4
 80007fe:	4094      	lsls	r4, r2
 8000800:	4091      	lsls	r1, r2
 8000802:	40d8      	lsrs	r0, r3
 8000804:	1e62      	subs	r2, r4, #1
 8000806:	4194      	sbcs	r4, r2
 8000808:	40df      	lsrs	r7, r3
 800080a:	2600      	movs	r6, #0
 800080c:	4301      	orrs	r1, r0
 800080e:	430c      	orrs	r4, r1
 8000810:	0763      	lsls	r3, r4, #29
 8000812:	d009      	beq.n	8000828 <__aeabi_dadd+0x10c>
 8000814:	230f      	movs	r3, #15
 8000816:	4023      	ands	r3, r4
 8000818:	2b04      	cmp	r3, #4
 800081a:	d005      	beq.n	8000828 <__aeabi_dadd+0x10c>
 800081c:	1d23      	adds	r3, r4, #4
 800081e:	42a3      	cmp	r3, r4
 8000820:	41a4      	sbcs	r4, r4
 8000822:	4264      	negs	r4, r4
 8000824:	193f      	adds	r7, r7, r4
 8000826:	001c      	movs	r4, r3
 8000828:	023b      	lsls	r3, r7, #8
 800082a:	d400      	bmi.n	800082e <__aeabi_dadd+0x112>
 800082c:	e09e      	b.n	800096c <__aeabi_dadd+0x250>
 800082e:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <__aeabi_dadd+0x368>)
 8000830:	3601      	adds	r6, #1
 8000832:	429e      	cmp	r6, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x11c>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dadd+0x28c>
 8000838:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <__aeabi_dadd+0x36c>)
 800083a:	08e4      	lsrs	r4, r4, #3
 800083c:	4017      	ands	r7, r2
 800083e:	077b      	lsls	r3, r7, #29
 8000840:	0571      	lsls	r1, r6, #21
 8000842:	027f      	lsls	r7, r7, #9
 8000844:	4323      	orrs	r3, r4
 8000846:	0b3f      	lsrs	r7, r7, #12
 8000848:	0d4a      	lsrs	r2, r1, #21
 800084a:	0512      	lsls	r2, r2, #20
 800084c:	433a      	orrs	r2, r7
 800084e:	07ed      	lsls	r5, r5, #31
 8000850:	432a      	orrs	r2, r5
 8000852:	0018      	movs	r0, r3
 8000854:	0011      	movs	r1, r2
 8000856:	bce0      	pop	{r5, r6, r7}
 8000858:	46ba      	mov	sl, r7
 800085a:	46b1      	mov	r9, r6
 800085c:	46a8      	mov	r8, r5
 800085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000860:	2c00      	cmp	r4, #0
 8000862:	d04b      	beq.n	80008fc <__aeabi_dadd+0x1e0>
 8000864:	464c      	mov	r4, r9
 8000866:	1ba4      	subs	r4, r4, r6
 8000868:	46a4      	mov	ip, r4
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x154>
 800086e:	e123      	b.n	8000ab8 <__aeabi_dadd+0x39c>
 8000870:	0004      	movs	r4, r0
 8000872:	431c      	orrs	r4, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x15c>
 8000876:	e1af      	b.n	8000bd8 <__aeabi_dadd+0x4bc>
 8000878:	4662      	mov	r2, ip
 800087a:	1e54      	subs	r4, r2, #1
 800087c:	2a01      	cmp	r2, #1
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x166>
 8000880:	e215      	b.n	8000cae <__aeabi_dadd+0x592>
 8000882:	4d80      	ldr	r5, [pc, #512]	; (8000a84 <__aeabi_dadd+0x368>)
 8000884:	45ac      	cmp	ip, r5
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x16e>
 8000888:	e1c8      	b.n	8000c1c <__aeabi_dadd+0x500>
 800088a:	46a4      	mov	ip, r4
 800088c:	e11b      	b.n	8000ac6 <__aeabi_dadd+0x3aa>
 800088e:	464a      	mov	r2, r9
 8000890:	1ab2      	subs	r2, r6, r2
 8000892:	4694      	mov	ip, r2
 8000894:	2a00      	cmp	r2, #0
 8000896:	dc00      	bgt.n	800089a <__aeabi_dadd+0x17e>
 8000898:	e0ac      	b.n	80009f4 <__aeabi_dadd+0x2d8>
 800089a:	464a      	mov	r2, r9
 800089c:	2a00      	cmp	r2, #0
 800089e:	d043      	beq.n	8000928 <__aeabi_dadd+0x20c>
 80008a0:	4a78      	ldr	r2, [pc, #480]	; (8000a84 <__aeabi_dadd+0x368>)
 80008a2:	4296      	cmp	r6, r2
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x18c>
 80008a6:	e1af      	b.n	8000c08 <__aeabi_dadd+0x4ec>
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	003c      	movs	r4, r7
 80008ac:	0412      	lsls	r2, r2, #16
 80008ae:	4314      	orrs	r4, r2
 80008b0:	46a0      	mov	r8, r4
 80008b2:	4662      	mov	r2, ip
 80008b4:	2a38      	cmp	r2, #56	; 0x38
 80008b6:	dc67      	bgt.n	8000988 <__aeabi_dadd+0x26c>
 80008b8:	2a1f      	cmp	r2, #31
 80008ba:	dc00      	bgt.n	80008be <__aeabi_dadd+0x1a2>
 80008bc:	e15f      	b.n	8000b7e <__aeabi_dadd+0x462>
 80008be:	4647      	mov	r7, r8
 80008c0:	3a20      	subs	r2, #32
 80008c2:	40d7      	lsrs	r7, r2
 80008c4:	4662      	mov	r2, ip
 80008c6:	2a20      	cmp	r2, #32
 80008c8:	d005      	beq.n	80008d6 <__aeabi_dadd+0x1ba>
 80008ca:	4664      	mov	r4, ip
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	1b12      	subs	r2, r2, r4
 80008d0:	4644      	mov	r4, r8
 80008d2:	4094      	lsls	r4, r2
 80008d4:	4321      	orrs	r1, r4
 80008d6:	1e4a      	subs	r2, r1, #1
 80008d8:	4191      	sbcs	r1, r2
 80008da:	000c      	movs	r4, r1
 80008dc:	433c      	orrs	r4, r7
 80008de:	e057      	b.n	8000990 <__aeabi_dadd+0x274>
 80008e0:	003a      	movs	r2, r7
 80008e2:	430a      	orrs	r2, r1
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x1cc>
 80008e6:	e105      	b.n	8000af4 <__aeabi_dadd+0x3d8>
 80008e8:	0022      	movs	r2, r4
 80008ea:	3a01      	subs	r2, #1
 80008ec:	2c01      	cmp	r4, #1
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x1d6>
 80008f0:	e182      	b.n	8000bf8 <__aeabi_dadd+0x4dc>
 80008f2:	4c64      	ldr	r4, [pc, #400]	; (8000a84 <__aeabi_dadd+0x368>)
 80008f4:	45a4      	cmp	ip, r4
 80008f6:	d05b      	beq.n	80009b0 <__aeabi_dadd+0x294>
 80008f8:	4694      	mov	ip, r2
 80008fa:	e741      	b.n	8000780 <__aeabi_dadd+0x64>
 80008fc:	4c63      	ldr	r4, [pc, #396]	; (8000a8c <__aeabi_dadd+0x370>)
 80008fe:	1c77      	adds	r7, r6, #1
 8000900:	4227      	tst	r7, r4
 8000902:	d000      	beq.n	8000906 <__aeabi_dadd+0x1ea>
 8000904:	e0c4      	b.n	8000a90 <__aeabi_dadd+0x374>
 8000906:	0004      	movs	r4, r0
 8000908:	431c      	orrs	r4, r3
 800090a:	2e00      	cmp	r6, #0
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x1f4>
 800090e:	e169      	b.n	8000be4 <__aeabi_dadd+0x4c8>
 8000910:	2c00      	cmp	r4, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x1fa>
 8000914:	e1bf      	b.n	8000c96 <__aeabi_dadd+0x57a>
 8000916:	4644      	mov	r4, r8
 8000918:	430c      	orrs	r4, r1
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x202>
 800091c:	e1d0      	b.n	8000cc0 <__aeabi_dadd+0x5a4>
 800091e:	0742      	lsls	r2, r0, #29
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	4313      	orrs	r3, r2
 8000924:	08c0      	lsrs	r0, r0, #3
 8000926:	e029      	b.n	800097c <__aeabi_dadd+0x260>
 8000928:	003a      	movs	r2, r7
 800092a:	430a      	orrs	r2, r1
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x214>
 800092e:	e170      	b.n	8000c12 <__aeabi_dadd+0x4f6>
 8000930:	4662      	mov	r2, ip
 8000932:	4664      	mov	r4, ip
 8000934:	3a01      	subs	r2, #1
 8000936:	2c01      	cmp	r4, #1
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x220>
 800093a:	e0e0      	b.n	8000afe <__aeabi_dadd+0x3e2>
 800093c:	4c51      	ldr	r4, [pc, #324]	; (8000a84 <__aeabi_dadd+0x368>)
 800093e:	45a4      	cmp	ip, r4
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x228>
 8000942:	e161      	b.n	8000c08 <__aeabi_dadd+0x4ec>
 8000944:	4694      	mov	ip, r2
 8000946:	e7b4      	b.n	80008b2 <__aeabi_dadd+0x196>
 8000948:	003a      	movs	r2, r7
 800094a:	391f      	subs	r1, #31
 800094c:	40ca      	lsrs	r2, r1
 800094e:	0011      	movs	r1, r2
 8000950:	2b20      	cmp	r3, #32
 8000952:	d003      	beq.n	800095c <__aeabi_dadd+0x240>
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	409f      	lsls	r7, r3
 800095a:	433c      	orrs	r4, r7
 800095c:	1e63      	subs	r3, r4, #1
 800095e:	419c      	sbcs	r4, r3
 8000960:	2700      	movs	r7, #0
 8000962:	2600      	movs	r6, #0
 8000964:	430c      	orrs	r4, r1
 8000966:	0763      	lsls	r3, r4, #29
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x250>
 800096a:	e753      	b.n	8000814 <__aeabi_dadd+0xf8>
 800096c:	46b4      	mov	ip, r6
 800096e:	08e4      	lsrs	r4, r4, #3
 8000970:	077b      	lsls	r3, r7, #29
 8000972:	4323      	orrs	r3, r4
 8000974:	08f8      	lsrs	r0, r7, #3
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <__aeabi_dadd+0x368>)
 8000978:	4594      	cmp	ip, r2
 800097a:	d01d      	beq.n	80009b8 <__aeabi_dadd+0x29c>
 800097c:	4662      	mov	r2, ip
 800097e:	0307      	lsls	r7, r0, #12
 8000980:	0552      	lsls	r2, r2, #21
 8000982:	0b3f      	lsrs	r7, r7, #12
 8000984:	0d52      	lsrs	r2, r2, #21
 8000986:	e760      	b.n	800084a <__aeabi_dadd+0x12e>
 8000988:	4644      	mov	r4, r8
 800098a:	430c      	orrs	r4, r1
 800098c:	1e62      	subs	r2, r4, #1
 800098e:	4194      	sbcs	r4, r2
 8000990:	18e4      	adds	r4, r4, r3
 8000992:	429c      	cmp	r4, r3
 8000994:	419b      	sbcs	r3, r3
 8000996:	425f      	negs	r7, r3
 8000998:	183f      	adds	r7, r7, r0
 800099a:	023b      	lsls	r3, r7, #8
 800099c:	d5e3      	bpl.n	8000966 <__aeabi_dadd+0x24a>
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <__aeabi_dadd+0x368>)
 80009a0:	3601      	adds	r6, #1
 80009a2:	429e      	cmp	r6, r3
 80009a4:	d000      	beq.n	80009a8 <__aeabi_dadd+0x28c>
 80009a6:	e0b5      	b.n	8000b14 <__aeabi_dadd+0x3f8>
 80009a8:	0032      	movs	r2, r6
 80009aa:	2700      	movs	r7, #0
 80009ac:	2300      	movs	r3, #0
 80009ae:	e74c      	b.n	800084a <__aeabi_dadd+0x12e>
 80009b0:	0742      	lsls	r2, r0, #29
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	08c0      	lsrs	r0, r0, #3
 80009b8:	001a      	movs	r2, r3
 80009ba:	4302      	orrs	r2, r0
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x2a4>
 80009be:	e1e1      	b.n	8000d84 <__aeabi_dadd+0x668>
 80009c0:	2780      	movs	r7, #128	; 0x80
 80009c2:	033f      	lsls	r7, r7, #12
 80009c4:	4307      	orrs	r7, r0
 80009c6:	033f      	lsls	r7, r7, #12
 80009c8:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <__aeabi_dadd+0x368>)
 80009ca:	0b3f      	lsrs	r7, r7, #12
 80009cc:	e73d      	b.n	800084a <__aeabi_dadd+0x12e>
 80009ce:	0020      	movs	r0, r4
 80009d0:	f001 fd16 	bl	8002400 <__clzsi2>
 80009d4:	0001      	movs	r1, r0
 80009d6:	3118      	adds	r1, #24
 80009d8:	291f      	cmp	r1, #31
 80009da:	dc00      	bgt.n	80009de <__aeabi_dadd+0x2c2>
 80009dc:	e6fc      	b.n	80007d8 <__aeabi_dadd+0xbc>
 80009de:	3808      	subs	r0, #8
 80009e0:	4084      	lsls	r4, r0
 80009e2:	0027      	movs	r7, r4
 80009e4:	2400      	movs	r4, #0
 80009e6:	42b1      	cmp	r1, r6
 80009e8:	db00      	blt.n	80009ec <__aeabi_dadd+0x2d0>
 80009ea:	e6ff      	b.n	80007ec <__aeabi_dadd+0xd0>
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <__aeabi_dadd+0x36c>)
 80009ee:	1a76      	subs	r6, r6, r1
 80009f0:	4017      	ands	r7, r2
 80009f2:	e70d      	b.n	8000810 <__aeabi_dadd+0xf4>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d02f      	beq.n	8000a58 <__aeabi_dadd+0x33c>
 80009f8:	464a      	mov	r2, r9
 80009fa:	1b92      	subs	r2, r2, r6
 80009fc:	4694      	mov	ip, r2
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0x2e8>
 8000a02:	e0ad      	b.n	8000b60 <__aeabi_dadd+0x444>
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <__aeabi_dadd+0x368>)
 8000a06:	4591      	cmp	r9, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x2f0>
 8000a0a:	e10f      	b.n	8000c2c <__aeabi_dadd+0x510>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	0412      	lsls	r2, r2, #16
 8000a10:	4310      	orrs	r0, r2
 8000a12:	4662      	mov	r2, ip
 8000a14:	2a38      	cmp	r2, #56	; 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x2fe>
 8000a18:	e10f      	b.n	8000c3a <__aeabi_dadd+0x51e>
 8000a1a:	2a1f      	cmp	r2, #31
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dadd+0x304>
 8000a1e:	e180      	b.n	8000d22 <__aeabi_dadd+0x606>
 8000a20:	4664      	mov	r4, ip
 8000a22:	2220      	movs	r2, #32
 8000a24:	001e      	movs	r6, r3
 8000a26:	1b12      	subs	r2, r2, r4
 8000a28:	4667      	mov	r7, ip
 8000a2a:	0004      	movs	r4, r0
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	4094      	lsls	r4, r2
 8000a30:	40fe      	lsrs	r6, r7
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	4193      	sbcs	r3, r2
 8000a36:	40f8      	lsrs	r0, r7
 8000a38:	4334      	orrs	r4, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	4480      	add	r8, r0
 8000a3e:	1864      	adds	r4, r4, r1
 8000a40:	428c      	cmp	r4, r1
 8000a42:	41bf      	sbcs	r7, r7
 8000a44:	427f      	negs	r7, r7
 8000a46:	464e      	mov	r6, r9
 8000a48:	4447      	add	r7, r8
 8000a4a:	e7a6      	b.n	800099a <__aeabi_dadd+0x27e>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	0011      	movs	r1, r2
 8000a52:	1e4a      	subs	r2, r1, #1
 8000a54:	4191      	sbcs	r1, r2
 8000a56:	e6ad      	b.n	80007b4 <__aeabi_dadd+0x98>
 8000a58:	4c0c      	ldr	r4, [pc, #48]	; (8000a8c <__aeabi_dadd+0x370>)
 8000a5a:	1c72      	adds	r2, r6, #1
 8000a5c:	4222      	tst	r2, r4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x346>
 8000a60:	e0a1      	b.n	8000ba6 <__aeabi_dadd+0x48a>
 8000a62:	0002      	movs	r2, r0
 8000a64:	431a      	orrs	r2, r3
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_dadd+0x350>
 8000a6a:	e0fa      	b.n	8000c62 <__aeabi_dadd+0x546>
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x356>
 8000a70:	e145      	b.n	8000cfe <__aeabi_dadd+0x5e2>
 8000a72:	003a      	movs	r2, r7
 8000a74:	430a      	orrs	r2, r1
 8000a76:	d000      	beq.n	8000a7a <__aeabi_dadd+0x35e>
 8000a78:	e146      	b.n	8000d08 <__aeabi_dadd+0x5ec>
 8000a7a:	0742      	lsls	r2, r0, #29
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	08c0      	lsrs	r0, r0, #3
 8000a82:	e77b      	b.n	800097c <__aeabi_dadd+0x260>
 8000a84:	000007ff 	.word	0x000007ff
 8000a88:	ff7fffff 	.word	0xff7fffff
 8000a8c:	000007fe 	.word	0x000007fe
 8000a90:	4647      	mov	r7, r8
 8000a92:	1a5c      	subs	r4, r3, r1
 8000a94:	1bc2      	subs	r2, r0, r7
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	41bf      	sbcs	r7, r7
 8000a9a:	427f      	negs	r7, r7
 8000a9c:	46b9      	mov	r9, r7
 8000a9e:	0017      	movs	r7, r2
 8000aa0:	464a      	mov	r2, r9
 8000aa2:	1abf      	subs	r7, r7, r2
 8000aa4:	023a      	lsls	r2, r7, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x38e>
 8000aa8:	e08d      	b.n	8000bc6 <__aeabi_dadd+0x4aa>
 8000aaa:	0023      	movs	r3, r4
 8000aac:	433b      	orrs	r3, r7
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x396>
 8000ab0:	e68a      	b.n	80007c8 <__aeabi_dadd+0xac>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	e761      	b.n	800097c <__aeabi_dadd+0x260>
 8000ab8:	4cb4      	ldr	r4, [pc, #720]	; (8000d8c <__aeabi_dadd+0x670>)
 8000aba:	45a1      	cmp	r9, r4
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x3a4>
 8000abe:	e0ad      	b.n	8000c1c <__aeabi_dadd+0x500>
 8000ac0:	2480      	movs	r4, #128	; 0x80
 8000ac2:	0424      	lsls	r4, r4, #16
 8000ac4:	4320      	orrs	r0, r4
 8000ac6:	4664      	mov	r4, ip
 8000ac8:	2c38      	cmp	r4, #56	; 0x38
 8000aca:	dc3d      	bgt.n	8000b48 <__aeabi_dadd+0x42c>
 8000acc:	4662      	mov	r2, ip
 8000ace:	2c1f      	cmp	r4, #31
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_dadd+0x3b8>
 8000ad2:	e0b7      	b.n	8000c44 <__aeabi_dadd+0x528>
 8000ad4:	2520      	movs	r5, #32
 8000ad6:	001e      	movs	r6, r3
 8000ad8:	1b2d      	subs	r5, r5, r4
 8000ada:	0004      	movs	r4, r0
 8000adc:	40ab      	lsls	r3, r5
 8000ade:	40ac      	lsls	r4, r5
 8000ae0:	40d6      	lsrs	r6, r2
 8000ae2:	40d0      	lsrs	r0, r2
 8000ae4:	4642      	mov	r2, r8
 8000ae6:	1e5d      	subs	r5, r3, #1
 8000ae8:	41ab      	sbcs	r3, r5
 8000aea:	4334      	orrs	r4, r6
 8000aec:	1a12      	subs	r2, r2, r0
 8000aee:	4690      	mov	r8, r2
 8000af0:	4323      	orrs	r3, r4
 8000af2:	e02c      	b.n	8000b4e <__aeabi_dadd+0x432>
 8000af4:	0742      	lsls	r2, r0, #29
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	08c0      	lsrs	r0, r0, #3
 8000afc:	e73b      	b.n	8000976 <__aeabi_dadd+0x25a>
 8000afe:	185c      	adds	r4, r3, r1
 8000b00:	429c      	cmp	r4, r3
 8000b02:	419b      	sbcs	r3, r3
 8000b04:	4440      	add	r0, r8
 8000b06:	425b      	negs	r3, r3
 8000b08:	18c7      	adds	r7, r0, r3
 8000b0a:	2601      	movs	r6, #1
 8000b0c:	023b      	lsls	r3, r7, #8
 8000b0e:	d400      	bmi.n	8000b12 <__aeabi_dadd+0x3f6>
 8000b10:	e729      	b.n	8000966 <__aeabi_dadd+0x24a>
 8000b12:	2602      	movs	r6, #2
 8000b14:	4a9e      	ldr	r2, [pc, #632]	; (8000d90 <__aeabi_dadd+0x674>)
 8000b16:	0863      	lsrs	r3, r4, #1
 8000b18:	4017      	ands	r7, r2
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4014      	ands	r4, r2
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	07fb      	lsls	r3, r7, #31
 8000b22:	431c      	orrs	r4, r3
 8000b24:	087f      	lsrs	r7, r7, #1
 8000b26:	e673      	b.n	8000810 <__aeabi_dadd+0xf4>
 8000b28:	4644      	mov	r4, r8
 8000b2a:	3a20      	subs	r2, #32
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	4662      	mov	r2, ip
 8000b30:	2a20      	cmp	r2, #32
 8000b32:	d005      	beq.n	8000b40 <__aeabi_dadd+0x424>
 8000b34:	4667      	mov	r7, ip
 8000b36:	2240      	movs	r2, #64	; 0x40
 8000b38:	1bd2      	subs	r2, r2, r7
 8000b3a:	4647      	mov	r7, r8
 8000b3c:	4097      	lsls	r7, r2
 8000b3e:	4339      	orrs	r1, r7
 8000b40:	1e4a      	subs	r2, r1, #1
 8000b42:	4191      	sbcs	r1, r2
 8000b44:	4321      	orrs	r1, r4
 8000b46:	e635      	b.n	80007b4 <__aeabi_dadd+0x98>
 8000b48:	4303      	orrs	r3, r0
 8000b4a:	1e58      	subs	r0, r3, #1
 8000b4c:	4183      	sbcs	r3, r0
 8000b4e:	1acc      	subs	r4, r1, r3
 8000b50:	42a1      	cmp	r1, r4
 8000b52:	41bf      	sbcs	r7, r7
 8000b54:	4643      	mov	r3, r8
 8000b56:	427f      	negs	r7, r7
 8000b58:	4655      	mov	r5, sl
 8000b5a:	464e      	mov	r6, r9
 8000b5c:	1bdf      	subs	r7, r3, r7
 8000b5e:	e62e      	b.n	80007be <__aeabi_dadd+0xa2>
 8000b60:	0002      	movs	r2, r0
 8000b62:	431a      	orrs	r2, r3
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x44c>
 8000b66:	e0bd      	b.n	8000ce4 <__aeabi_dadd+0x5c8>
 8000b68:	4662      	mov	r2, ip
 8000b6a:	4664      	mov	r4, ip
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	2c01      	cmp	r4, #1
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x458>
 8000b72:	e0e5      	b.n	8000d40 <__aeabi_dadd+0x624>
 8000b74:	4c85      	ldr	r4, [pc, #532]	; (8000d8c <__aeabi_dadd+0x670>)
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	d058      	beq.n	8000c2c <__aeabi_dadd+0x510>
 8000b7a:	4694      	mov	ip, r2
 8000b7c:	e749      	b.n	8000a12 <__aeabi_dadd+0x2f6>
 8000b7e:	4664      	mov	r4, ip
 8000b80:	2220      	movs	r2, #32
 8000b82:	1b12      	subs	r2, r2, r4
 8000b84:	4644      	mov	r4, r8
 8000b86:	4094      	lsls	r4, r2
 8000b88:	000f      	movs	r7, r1
 8000b8a:	46a1      	mov	r9, r4
 8000b8c:	4664      	mov	r4, ip
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	40e7      	lsrs	r7, r4
 8000b92:	464c      	mov	r4, r9
 8000b94:	1e4a      	subs	r2, r1, #1
 8000b96:	4191      	sbcs	r1, r2
 8000b98:	433c      	orrs	r4, r7
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	430c      	orrs	r4, r1
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	40ca      	lsrs	r2, r1
 8000ba2:	1880      	adds	r0, r0, r2
 8000ba4:	e6f4      	b.n	8000990 <__aeabi_dadd+0x274>
 8000ba6:	4c79      	ldr	r4, [pc, #484]	; (8000d8c <__aeabi_dadd+0x670>)
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x492>
 8000bac:	e6fd      	b.n	80009aa <__aeabi_dadd+0x28e>
 8000bae:	1859      	adds	r1, r3, r1
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	419b      	sbcs	r3, r3
 8000bb4:	4440      	add	r0, r8
 8000bb6:	425f      	negs	r7, r3
 8000bb8:	19c7      	adds	r7, r0, r7
 8000bba:	07fc      	lsls	r4, r7, #31
 8000bbc:	0849      	lsrs	r1, r1, #1
 8000bbe:	0016      	movs	r6, r2
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	087f      	lsrs	r7, r7, #1
 8000bc4:	e6cf      	b.n	8000966 <__aeabi_dadd+0x24a>
 8000bc6:	1acc      	subs	r4, r1, r3
 8000bc8:	42a1      	cmp	r1, r4
 8000bca:	41bf      	sbcs	r7, r7
 8000bcc:	4643      	mov	r3, r8
 8000bce:	427f      	negs	r7, r7
 8000bd0:	1a18      	subs	r0, r3, r0
 8000bd2:	4655      	mov	r5, sl
 8000bd4:	1bc7      	subs	r7, r0, r7
 8000bd6:	e5f7      	b.n	80007c8 <__aeabi_dadd+0xac>
 8000bd8:	08c9      	lsrs	r1, r1, #3
 8000bda:	077b      	lsls	r3, r7, #29
 8000bdc:	4655      	mov	r5, sl
 8000bde:	430b      	orrs	r3, r1
 8000be0:	08f8      	lsrs	r0, r7, #3
 8000be2:	e6c8      	b.n	8000976 <__aeabi_dadd+0x25a>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d000      	beq.n	8000bea <__aeabi_dadd+0x4ce>
 8000be8:	e081      	b.n	8000cee <__aeabi_dadd+0x5d2>
 8000bea:	4643      	mov	r3, r8
 8000bec:	430b      	orrs	r3, r1
 8000bee:	d115      	bne.n	8000c1c <__aeabi_dadd+0x500>
 8000bf0:	2080      	movs	r0, #128	; 0x80
 8000bf2:	2500      	movs	r5, #0
 8000bf4:	0300      	lsls	r0, r0, #12
 8000bf6:	e6e3      	b.n	80009c0 <__aeabi_dadd+0x2a4>
 8000bf8:	1a5c      	subs	r4, r3, r1
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	419b      	sbcs	r3, r3
 8000bfe:	1bc7      	subs	r7, r0, r7
 8000c00:	425b      	negs	r3, r3
 8000c02:	2601      	movs	r6, #1
 8000c04:	1aff      	subs	r7, r7, r3
 8000c06:	e5da      	b.n	80007be <__aeabi_dadd+0xa2>
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	08c0      	lsrs	r0, r0, #3
 8000c10:	e6d2      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000c12:	0742      	lsls	r2, r0, #29
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	e6ac      	b.n	8000976 <__aeabi_dadd+0x25a>
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	4642      	mov	r2, r8
 8000c20:	08c9      	lsrs	r1, r1, #3
 8000c22:	075b      	lsls	r3, r3, #29
 8000c24:	4655      	mov	r5, sl
 8000c26:	430b      	orrs	r3, r1
 8000c28:	08d0      	lsrs	r0, r2, #3
 8000c2a:	e6c5      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	4642      	mov	r2, r8
 8000c30:	075b      	lsls	r3, r3, #29
 8000c32:	08c9      	lsrs	r1, r1, #3
 8000c34:	430b      	orrs	r3, r1
 8000c36:	08d0      	lsrs	r0, r2, #3
 8000c38:	e6be      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	001c      	movs	r4, r3
 8000c3e:	1e63      	subs	r3, r4, #1
 8000c40:	419c      	sbcs	r4, r3
 8000c42:	e6fc      	b.n	8000a3e <__aeabi_dadd+0x322>
 8000c44:	0002      	movs	r2, r0
 8000c46:	3c20      	subs	r4, #32
 8000c48:	40e2      	lsrs	r2, r4
 8000c4a:	0014      	movs	r4, r2
 8000c4c:	4662      	mov	r2, ip
 8000c4e:	2a20      	cmp	r2, #32
 8000c50:	d003      	beq.n	8000c5a <__aeabi_dadd+0x53e>
 8000c52:	2540      	movs	r5, #64	; 0x40
 8000c54:	1aad      	subs	r5, r5, r2
 8000c56:	40a8      	lsls	r0, r5
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	1e58      	subs	r0, r3, #1
 8000c5c:	4183      	sbcs	r3, r0
 8000c5e:	4323      	orrs	r3, r4
 8000c60:	e775      	b.n	8000b4e <__aeabi_dadd+0x432>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d0e2      	beq.n	8000c2c <__aeabi_dadd+0x510>
 8000c66:	003a      	movs	r2, r7
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	d0cd      	beq.n	8000c08 <__aeabi_dadd+0x4ec>
 8000c6c:	0742      	lsls	r2, r0, #29
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	08c0      	lsrs	r0, r0, #3
 8000c76:	0312      	lsls	r2, r2, #12
 8000c78:	4210      	tst	r0, r2
 8000c7a:	d006      	beq.n	8000c8a <__aeabi_dadd+0x56e>
 8000c7c:	08fc      	lsrs	r4, r7, #3
 8000c7e:	4214      	tst	r4, r2
 8000c80:	d103      	bne.n	8000c8a <__aeabi_dadd+0x56e>
 8000c82:	0020      	movs	r0, r4
 8000c84:	08cb      	lsrs	r3, r1, #3
 8000c86:	077a      	lsls	r2, r7, #29
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	0f5a      	lsrs	r2, r3, #29
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	0752      	lsls	r2, r2, #29
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	e690      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000c96:	4643      	mov	r3, r8
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x582>
 8000c9c:	e709      	b.n	8000ab2 <__aeabi_dadd+0x396>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4642      	mov	r2, r8
 8000ca2:	08c9      	lsrs	r1, r1, #3
 8000ca4:	075b      	lsls	r3, r3, #29
 8000ca6:	4655      	mov	r5, sl
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08d0      	lsrs	r0, r2, #3
 8000cac:	e666      	b.n	800097c <__aeabi_dadd+0x260>
 8000cae:	1acc      	subs	r4, r1, r3
 8000cb0:	42a1      	cmp	r1, r4
 8000cb2:	4189      	sbcs	r1, r1
 8000cb4:	1a3f      	subs	r7, r7, r0
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	4655      	mov	r5, sl
 8000cba:	2601      	movs	r6, #1
 8000cbc:	1a7f      	subs	r7, r7, r1
 8000cbe:	e57e      	b.n	80007be <__aeabi_dadd+0xa2>
 8000cc0:	4642      	mov	r2, r8
 8000cc2:	1a5c      	subs	r4, r3, r1
 8000cc4:	1a87      	subs	r7, r0, r2
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	4252      	negs	r2, r2
 8000ccc:	1abf      	subs	r7, r7, r2
 8000cce:	023a      	lsls	r2, r7, #8
 8000cd0:	d53d      	bpl.n	8000d4e <__aeabi_dadd+0x632>
 8000cd2:	1acc      	subs	r4, r1, r3
 8000cd4:	42a1      	cmp	r1, r4
 8000cd6:	4189      	sbcs	r1, r1
 8000cd8:	4643      	mov	r3, r8
 8000cda:	4249      	negs	r1, r1
 8000cdc:	1a1f      	subs	r7, r3, r0
 8000cde:	4655      	mov	r5, sl
 8000ce0:	1a7f      	subs	r7, r7, r1
 8000ce2:	e595      	b.n	8000810 <__aeabi_dadd+0xf4>
 8000ce4:	077b      	lsls	r3, r7, #29
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	08f8      	lsrs	r0, r7, #3
 8000cec:	e643      	b.n	8000976 <__aeabi_dadd+0x25a>
 8000cee:	4644      	mov	r4, r8
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	d130      	bne.n	8000d58 <__aeabi_dadd+0x63c>
 8000cf6:	0742      	lsls	r2, r0, #29
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	08c0      	lsrs	r0, r0, #3
 8000cfc:	e65c      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000cfe:	077b      	lsls	r3, r7, #29
 8000d00:	08c9      	lsrs	r1, r1, #3
 8000d02:	430b      	orrs	r3, r1
 8000d04:	08f8      	lsrs	r0, r7, #3
 8000d06:	e639      	b.n	800097c <__aeabi_dadd+0x260>
 8000d08:	185c      	adds	r4, r3, r1
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	419b      	sbcs	r3, r3
 8000d0e:	4440      	add	r0, r8
 8000d10:	425b      	negs	r3, r3
 8000d12:	18c7      	adds	r7, r0, r3
 8000d14:	023b      	lsls	r3, r7, #8
 8000d16:	d400      	bmi.n	8000d1a <__aeabi_dadd+0x5fe>
 8000d18:	e625      	b.n	8000966 <__aeabi_dadd+0x24a>
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <__aeabi_dadd+0x674>)
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	401f      	ands	r7, r3
 8000d20:	e621      	b.n	8000966 <__aeabi_dadd+0x24a>
 8000d22:	0004      	movs	r4, r0
 8000d24:	3a20      	subs	r2, #32
 8000d26:	40d4      	lsrs	r4, r2
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a20      	cmp	r2, #32
 8000d2c:	d004      	beq.n	8000d38 <__aeabi_dadd+0x61c>
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	4666      	mov	r6, ip
 8000d32:	1b92      	subs	r2, r2, r6
 8000d34:	4090      	lsls	r0, r2
 8000d36:	4303      	orrs	r3, r0
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	4193      	sbcs	r3, r2
 8000d3c:	431c      	orrs	r4, r3
 8000d3e:	e67e      	b.n	8000a3e <__aeabi_dadd+0x322>
 8000d40:	185c      	adds	r4, r3, r1
 8000d42:	428c      	cmp	r4, r1
 8000d44:	4189      	sbcs	r1, r1
 8000d46:	4440      	add	r0, r8
 8000d48:	4249      	negs	r1, r1
 8000d4a:	1847      	adds	r7, r0, r1
 8000d4c:	e6dd      	b.n	8000b0a <__aeabi_dadd+0x3ee>
 8000d4e:	0023      	movs	r3, r4
 8000d50:	433b      	orrs	r3, r7
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x63a>
 8000d54:	e6ad      	b.n	8000ab2 <__aeabi_dadd+0x396>
 8000d56:	e606      	b.n	8000966 <__aeabi_dadd+0x24a>
 8000d58:	0744      	lsls	r4, r0, #29
 8000d5a:	4323      	orrs	r3, r4
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	08c0      	lsrs	r0, r0, #3
 8000d60:	0324      	lsls	r4, r4, #12
 8000d62:	4220      	tst	r0, r4
 8000d64:	d008      	beq.n	8000d78 <__aeabi_dadd+0x65c>
 8000d66:	4642      	mov	r2, r8
 8000d68:	08d6      	lsrs	r6, r2, #3
 8000d6a:	4226      	tst	r6, r4
 8000d6c:	d104      	bne.n	8000d78 <__aeabi_dadd+0x65c>
 8000d6e:	4655      	mov	r5, sl
 8000d70:	0030      	movs	r0, r6
 8000d72:	08cb      	lsrs	r3, r1, #3
 8000d74:	0751      	lsls	r1, r2, #29
 8000d76:	430b      	orrs	r3, r1
 8000d78:	0f5a      	lsrs	r2, r3, #29
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	0752      	lsls	r2, r2, #29
 8000d80:	4313      	orrs	r3, r2
 8000d82:	e619      	b.n	80009b8 <__aeabi_dadd+0x29c>
 8000d84:	2300      	movs	r3, #0
 8000d86:	4a01      	ldr	r2, [pc, #4]	; (8000d8c <__aeabi_dadd+0x670>)
 8000d88:	001f      	movs	r7, r3
 8000d8a:	e55e      	b.n	800084a <__aeabi_dadd+0x12e>
 8000d8c:	000007ff 	.word	0x000007ff
 8000d90:	ff7fffff 	.word	0xff7fffff

08000d94 <__aeabi_ddiv>:
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	4657      	mov	r7, sl
 8000d98:	464e      	mov	r6, r9
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	46de      	mov	lr, fp
 8000d9e:	b5e0      	push	{r5, r6, r7, lr}
 8000da0:	4681      	mov	r9, r0
 8000da2:	0005      	movs	r5, r0
 8000da4:	030c      	lsls	r4, r1, #12
 8000da6:	0048      	lsls	r0, r1, #1
 8000da8:	4692      	mov	sl, r2
 8000daa:	001f      	movs	r7, r3
 8000dac:	b085      	sub	sp, #20
 8000dae:	0b24      	lsrs	r4, r4, #12
 8000db0:	0d40      	lsrs	r0, r0, #21
 8000db2:	0fce      	lsrs	r6, r1, #31
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_ddiv+0x26>
 8000db8:	e156      	b.n	8001068 <__aeabi_ddiv+0x2d4>
 8000dba:	4bd4      	ldr	r3, [pc, #848]	; (800110c <__aeabi_ddiv+0x378>)
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x2e>
 8000dc0:	e172      	b.n	80010a8 <__aeabi_ddiv+0x314>
 8000dc2:	0f6b      	lsrs	r3, r5, #29
 8000dc4:	00e4      	lsls	r4, r4, #3
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	4698      	mov	r8, r3
 8000dd0:	4bcf      	ldr	r3, [pc, #828]	; (8001110 <__aeabi_ddiv+0x37c>)
 8000dd2:	00ed      	lsls	r5, r5, #3
 8000dd4:	469b      	mov	fp, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4699      	mov	r9, r3
 8000dda:	4483      	add	fp, r0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	033c      	lsls	r4, r7, #12
 8000de0:	007b      	lsls	r3, r7, #1
 8000de2:	4650      	mov	r0, sl
 8000de4:	0b24      	lsrs	r4, r4, #12
 8000de6:	0d5b      	lsrs	r3, r3, #21
 8000de8:	0fff      	lsrs	r7, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x5c>
 8000dee:	e11f      	b.n	8001030 <__aeabi_ddiv+0x29c>
 8000df0:	4ac6      	ldr	r2, [pc, #792]	; (800110c <__aeabi_ddiv+0x378>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x64>
 8000df6:	e162      	b.n	80010be <__aeabi_ddiv+0x32a>
 8000df8:	49c5      	ldr	r1, [pc, #788]	; (8001110 <__aeabi_ddiv+0x37c>)
 8000dfa:	0f42      	lsrs	r2, r0, #29
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	00e4      	lsls	r4, r4, #3
 8000e00:	4659      	mov	r1, fp
 8000e02:	4314      	orrs	r4, r2
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	4463      	add	r3, ip
 8000e08:	0412      	lsls	r2, r2, #16
 8000e0a:	1acb      	subs	r3, r1, r3
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	469b      	mov	fp, r3
 8000e10:	00c2      	lsls	r2, r0, #3
 8000e12:	2000      	movs	r0, #0
 8000e14:	0033      	movs	r3, r6
 8000e16:	407b      	eors	r3, r7
 8000e18:	469a      	mov	sl, r3
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d827      	bhi.n	8000e70 <__aeabi_ddiv+0xdc>
 8000e20:	49bc      	ldr	r1, [pc, #752]	; (8001114 <__aeabi_ddiv+0x380>)
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	58cb      	ldr	r3, [r1, r3]
 8000e26:	469f      	mov	pc, r3
 8000e28:	46b2      	mov	sl, r6
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d016      	beq.n	8000e5e <__aeabi_ddiv+0xca>
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0xa2>
 8000e34:	e28e      	b.n	8001354 <__aeabi_ddiv+0x5c0>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d000      	beq.n	8000e3c <__aeabi_ddiv+0xa8>
 8000e3a:	e0d9      	b.n	8000ff0 <__aeabi_ddiv+0x25c>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2500      	movs	r5, #0
 8000e42:	4652      	mov	r2, sl
 8000e44:	051b      	lsls	r3, r3, #20
 8000e46:	4323      	orrs	r3, r4
 8000e48:	07d2      	lsls	r2, r2, #31
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	0019      	movs	r1, r3
 8000e50:	b005      	add	sp, #20
 8000e52:	bcf0      	pop	{r4, r5, r6, r7}
 8000e54:	46bb      	mov	fp, r7
 8000e56:	46b2      	mov	sl, r6
 8000e58:	46a9      	mov	r9, r5
 8000e5a:	46a0      	mov	r8, r4
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5e:	2400      	movs	r4, #0
 8000e60:	2500      	movs	r5, #0
 8000e62:	4baa      	ldr	r3, [pc, #680]	; (800110c <__aeabi_ddiv+0x378>)
 8000e64:	e7ed      	b.n	8000e42 <__aeabi_ddiv+0xae>
 8000e66:	46ba      	mov	sl, r7
 8000e68:	46a0      	mov	r8, r4
 8000e6a:	0015      	movs	r5, r2
 8000e6c:	9000      	str	r0, [sp, #0]
 8000e6e:	e7dc      	b.n	8000e2a <__aeabi_ddiv+0x96>
 8000e70:	4544      	cmp	r4, r8
 8000e72:	d200      	bcs.n	8000e76 <__aeabi_ddiv+0xe2>
 8000e74:	e1c7      	b.n	8001206 <__aeabi_ddiv+0x472>
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0xe6>
 8000e78:	e1c2      	b.n	8001200 <__aeabi_ddiv+0x46c>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	469c      	mov	ip, r3
 8000e80:	002e      	movs	r6, r5
 8000e82:	4640      	mov	r0, r8
 8000e84:	2500      	movs	r5, #0
 8000e86:	44e3      	add	fp, ip
 8000e88:	0223      	lsls	r3, r4, #8
 8000e8a:	0e14      	lsrs	r4, r2, #24
 8000e8c:	431c      	orrs	r4, r3
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	4699      	mov	r9, r3
 8000e92:	0423      	lsls	r3, r4, #16
 8000e94:	0c1f      	lsrs	r7, r3, #16
 8000e96:	0212      	lsls	r2, r2, #8
 8000e98:	4649      	mov	r1, r9
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	9701      	str	r7, [sp, #4]
 8000e9e:	f7ff f9b7 	bl	8000210 <__aeabi_uidivmod>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	437a      	muls	r2, r7
 8000ea6:	040b      	lsls	r3, r1, #16
 8000ea8:	0c31      	lsrs	r1, r6, #16
 8000eaa:	4680      	mov	r8, r0
 8000eac:	4319      	orrs	r1, r3
 8000eae:	428a      	cmp	r2, r1
 8000eb0:	d907      	bls.n	8000ec2 <__aeabi_ddiv+0x12e>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	1909      	adds	r1, r1, r4
 8000eba:	44e0      	add	r8, ip
 8000ebc:	428c      	cmp	r4, r1
 8000ebe:	d800      	bhi.n	8000ec2 <__aeabi_ddiv+0x12e>
 8000ec0:	e207      	b.n	80012d2 <__aeabi_ddiv+0x53e>
 8000ec2:	1a88      	subs	r0, r1, r2
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	f7ff f9a3 	bl	8000210 <__aeabi_uidivmod>
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	468c      	mov	ip, r1
 8000ece:	0431      	lsls	r1, r6, #16
 8000ed0:	4666      	mov	r6, ip
 8000ed2:	9a01      	ldr	r2, [sp, #4]
 8000ed4:	0c09      	lsrs	r1, r1, #16
 8000ed6:	4342      	muls	r2, r0
 8000ed8:	0003      	movs	r3, r0
 8000eda:	4331      	orrs	r1, r6
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d904      	bls.n	8000eea <__aeabi_ddiv+0x156>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d800      	bhi.n	8000eea <__aeabi_ddiv+0x156>
 8000ee8:	e1ed      	b.n	80012c6 <__aeabi_ddiv+0x532>
 8000eea:	1a88      	subs	r0, r1, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	0412      	lsls	r2, r2, #16
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	4690      	mov	r8, r2
 8000ef4:	4641      	mov	r1, r8
 8000ef6:	9b00      	ldr	r3, [sp, #0]
 8000ef8:	040e      	lsls	r6, r1, #16
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	001f      	movs	r7, r3
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	9b00      	ldr	r3, [sp, #0]
 8000f02:	0c36      	lsrs	r6, r6, #16
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	0c19      	lsrs	r1, r3, #16
 8000f08:	000b      	movs	r3, r1
 8000f0a:	4373      	muls	r3, r6
 8000f0c:	0c12      	lsrs	r2, r2, #16
 8000f0e:	437e      	muls	r6, r7
 8000f10:	9103      	str	r1, [sp, #12]
 8000f12:	4351      	muls	r1, r2
 8000f14:	437a      	muls	r2, r7
 8000f16:	0c1f      	lsrs	r7, r3, #16
 8000f18:	46bc      	mov	ip, r7
 8000f1a:	1876      	adds	r6, r6, r1
 8000f1c:	4466      	add	r6, ip
 8000f1e:	42b1      	cmp	r1, r6
 8000f20:	d903      	bls.n	8000f2a <__aeabi_ddiv+0x196>
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	0249      	lsls	r1, r1, #9
 8000f26:	468c      	mov	ip, r1
 8000f28:	4462      	add	r2, ip
 8000f2a:	0c31      	lsrs	r1, r6, #16
 8000f2c:	188a      	adds	r2, r1, r2
 8000f2e:	0431      	lsls	r1, r6, #16
 8000f30:	041e      	lsls	r6, r3, #16
 8000f32:	0c36      	lsrs	r6, r6, #16
 8000f34:	198e      	adds	r6, r1, r6
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d302      	bcc.n	8000f40 <__aeabi_ddiv+0x1ac>
 8000f3a:	d112      	bne.n	8000f62 <__aeabi_ddiv+0x1ce>
 8000f3c:	42b5      	cmp	r5, r6
 8000f3e:	d210      	bcs.n	8000f62 <__aeabi_ddiv+0x1ce>
 8000f40:	4643      	mov	r3, r8
 8000f42:	1e59      	subs	r1, r3, #1
 8000f44:	9b00      	ldr	r3, [sp, #0]
 8000f46:	469c      	mov	ip, r3
 8000f48:	4465      	add	r5, ip
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	429d      	cmp	r5, r3
 8000f4e:	419b      	sbcs	r3, r3
 8000f50:	425b      	negs	r3, r3
 8000f52:	191b      	adds	r3, r3, r4
 8000f54:	18c0      	adds	r0, r0, r3
 8000f56:	4284      	cmp	r4, r0
 8000f58:	d200      	bcs.n	8000f5c <__aeabi_ddiv+0x1c8>
 8000f5a:	e1a0      	b.n	800129e <__aeabi_ddiv+0x50a>
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x1cc>
 8000f5e:	e19b      	b.n	8001298 <__aeabi_ddiv+0x504>
 8000f60:	4688      	mov	r8, r1
 8000f62:	1bae      	subs	r6, r5, r6
 8000f64:	42b5      	cmp	r5, r6
 8000f66:	41ad      	sbcs	r5, r5
 8000f68:	1a80      	subs	r0, r0, r2
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	1b40      	subs	r0, r0, r5
 8000f6e:	4284      	cmp	r4, r0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x1e0>
 8000f72:	e1d5      	b.n	8001320 <__aeabi_ddiv+0x58c>
 8000f74:	4649      	mov	r1, r9
 8000f76:	f7ff f94b 	bl	8000210 <__aeabi_uidivmod>
 8000f7a:	9a01      	ldr	r2, [sp, #4]
 8000f7c:	040b      	lsls	r3, r1, #16
 8000f7e:	4342      	muls	r2, r0
 8000f80:	0c31      	lsrs	r1, r6, #16
 8000f82:	0005      	movs	r5, r0
 8000f84:	4319      	orrs	r1, r3
 8000f86:	428a      	cmp	r2, r1
 8000f88:	d900      	bls.n	8000f8c <__aeabi_ddiv+0x1f8>
 8000f8a:	e16c      	b.n	8001266 <__aeabi_ddiv+0x4d2>
 8000f8c:	1a88      	subs	r0, r1, r2
 8000f8e:	4649      	mov	r1, r9
 8000f90:	f7ff f93e 	bl	8000210 <__aeabi_uidivmod>
 8000f94:	9a01      	ldr	r2, [sp, #4]
 8000f96:	0436      	lsls	r6, r6, #16
 8000f98:	4342      	muls	r2, r0
 8000f9a:	0409      	lsls	r1, r1, #16
 8000f9c:	0c36      	lsrs	r6, r6, #16
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	430e      	orrs	r6, r1
 8000fa2:	42b2      	cmp	r2, r6
 8000fa4:	d900      	bls.n	8000fa8 <__aeabi_ddiv+0x214>
 8000fa6:	e153      	b.n	8001250 <__aeabi_ddiv+0x4bc>
 8000fa8:	9803      	ldr	r0, [sp, #12]
 8000faa:	1ab6      	subs	r6, r6, r2
 8000fac:	0002      	movs	r2, r0
 8000fae:	042d      	lsls	r5, r5, #16
 8000fb0:	431d      	orrs	r5, r3
 8000fb2:	9f02      	ldr	r7, [sp, #8]
 8000fb4:	042b      	lsls	r3, r5, #16
 8000fb6:	0c1b      	lsrs	r3, r3, #16
 8000fb8:	435a      	muls	r2, r3
 8000fba:	437b      	muls	r3, r7
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	0c29      	lsrs	r1, r5, #16
 8000fc0:	4348      	muls	r0, r1
 8000fc2:	0c13      	lsrs	r3, r2, #16
 8000fc4:	4484      	add	ip, r0
 8000fc6:	4463      	add	r3, ip
 8000fc8:	4379      	muls	r1, r7
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d903      	bls.n	8000fd6 <__aeabi_ddiv+0x242>
 8000fce:	2080      	movs	r0, #128	; 0x80
 8000fd0:	0240      	lsls	r0, r0, #9
 8000fd2:	4684      	mov	ip, r0
 8000fd4:	4461      	add	r1, ip
 8000fd6:	0c18      	lsrs	r0, r3, #16
 8000fd8:	0412      	lsls	r2, r2, #16
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	0c12      	lsrs	r2, r2, #16
 8000fde:	1841      	adds	r1, r0, r1
 8000fe0:	189b      	adds	r3, r3, r2
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d200      	bcs.n	8000fe8 <__aeabi_ddiv+0x254>
 8000fe6:	e0ff      	b.n	80011e8 <__aeabi_ddiv+0x454>
 8000fe8:	d100      	bne.n	8000fec <__aeabi_ddiv+0x258>
 8000fea:	e0fa      	b.n	80011e2 <__aeabi_ddiv+0x44e>
 8000fec:	2301      	movs	r3, #1
 8000fee:	431d      	orrs	r5, r3
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <__aeabi_ddiv+0x384>)
 8000ff2:	445a      	add	r2, fp
 8000ff4:	2a00      	cmp	r2, #0
 8000ff6:	dc00      	bgt.n	8000ffa <__aeabi_ddiv+0x266>
 8000ff8:	e0aa      	b.n	8001150 <__aeabi_ddiv+0x3bc>
 8000ffa:	076b      	lsls	r3, r5, #29
 8000ffc:	d000      	beq.n	8001000 <__aeabi_ddiv+0x26c>
 8000ffe:	e13d      	b.n	800127c <__aeabi_ddiv+0x4e8>
 8001000:	08ed      	lsrs	r5, r5, #3
 8001002:	4643      	mov	r3, r8
 8001004:	01db      	lsls	r3, r3, #7
 8001006:	d506      	bpl.n	8001016 <__aeabi_ddiv+0x282>
 8001008:	4642      	mov	r2, r8
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <__aeabi_ddiv+0x388>)
 800100c:	401a      	ands	r2, r3
 800100e:	4690      	mov	r8, r2
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	00d2      	lsls	r2, r2, #3
 8001014:	445a      	add	r2, fp
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <__aeabi_ddiv+0x38c>)
 8001018:	429a      	cmp	r2, r3
 800101a:	dd00      	ble.n	800101e <__aeabi_ddiv+0x28a>
 800101c:	e71f      	b.n	8000e5e <__aeabi_ddiv+0xca>
 800101e:	4643      	mov	r3, r8
 8001020:	075b      	lsls	r3, r3, #29
 8001022:	431d      	orrs	r5, r3
 8001024:	4643      	mov	r3, r8
 8001026:	0552      	lsls	r2, r2, #21
 8001028:	025c      	lsls	r4, r3, #9
 800102a:	0b24      	lsrs	r4, r4, #12
 800102c:	0d53      	lsrs	r3, r2, #21
 800102e:	e708      	b.n	8000e42 <__aeabi_ddiv+0xae>
 8001030:	4652      	mov	r2, sl
 8001032:	4322      	orrs	r2, r4
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x2a4>
 8001036:	e07b      	b.n	8001130 <__aeabi_ddiv+0x39c>
 8001038:	2c00      	cmp	r4, #0
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x2aa>
 800103c:	e0fa      	b.n	8001234 <__aeabi_ddiv+0x4a0>
 800103e:	0020      	movs	r0, r4
 8001040:	f001 f9de 	bl	8002400 <__clzsi2>
 8001044:	0002      	movs	r2, r0
 8001046:	3a0b      	subs	r2, #11
 8001048:	231d      	movs	r3, #29
 800104a:	0001      	movs	r1, r0
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	4652      	mov	r2, sl
 8001050:	3908      	subs	r1, #8
 8001052:	40da      	lsrs	r2, r3
 8001054:	408c      	lsls	r4, r1
 8001056:	4314      	orrs	r4, r2
 8001058:	4652      	mov	r2, sl
 800105a:	408a      	lsls	r2, r1
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <__aeabi_ddiv+0x390>)
 800105e:	4458      	add	r0, fp
 8001060:	469b      	mov	fp, r3
 8001062:	4483      	add	fp, r0
 8001064:	2000      	movs	r0, #0
 8001066:	e6d5      	b.n	8000e14 <__aeabi_ddiv+0x80>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d044      	beq.n	80010fa <__aeabi_ddiv+0x366>
 8001070:	2c00      	cmp	r4, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_ddiv+0x2e2>
 8001074:	e0ce      	b.n	8001214 <__aeabi_ddiv+0x480>
 8001076:	0020      	movs	r0, r4
 8001078:	f001 f9c2 	bl	8002400 <__clzsi2>
 800107c:	0001      	movs	r1, r0
 800107e:	0002      	movs	r2, r0
 8001080:	390b      	subs	r1, #11
 8001082:	231d      	movs	r3, #29
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	4649      	mov	r1, r9
 8001088:	0010      	movs	r0, r2
 800108a:	40d9      	lsrs	r1, r3
 800108c:	3808      	subs	r0, #8
 800108e:	4084      	lsls	r4, r0
 8001090:	000b      	movs	r3, r1
 8001092:	464d      	mov	r5, r9
 8001094:	4323      	orrs	r3, r4
 8001096:	4698      	mov	r8, r3
 8001098:	4085      	lsls	r5, r0
 800109a:	4823      	ldr	r0, [pc, #140]	; (8001128 <__aeabi_ddiv+0x394>)
 800109c:	1a83      	subs	r3, r0, r2
 800109e:	469b      	mov	fp, r3
 80010a0:	2300      	movs	r3, #0
 80010a2:	4699      	mov	r9, r3
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	e69a      	b.n	8000dde <__aeabi_ddiv+0x4a>
 80010a8:	464b      	mov	r3, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	d11d      	bne.n	80010ec <__aeabi_ddiv+0x358>
 80010b0:	2308      	movs	r3, #8
 80010b2:	4699      	mov	r9, r3
 80010b4:	3b06      	subs	r3, #6
 80010b6:	2500      	movs	r5, #0
 80010b8:	4683      	mov	fp, r0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	e68f      	b.n	8000dde <__aeabi_ddiv+0x4a>
 80010be:	4652      	mov	r2, sl
 80010c0:	4322      	orrs	r2, r4
 80010c2:	d109      	bne.n	80010d8 <__aeabi_ddiv+0x344>
 80010c4:	2302      	movs	r3, #2
 80010c6:	4649      	mov	r1, r9
 80010c8:	4319      	orrs	r1, r3
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <__aeabi_ddiv+0x398>)
 80010cc:	4689      	mov	r9, r1
 80010ce:	469c      	mov	ip, r3
 80010d0:	2400      	movs	r4, #0
 80010d2:	2002      	movs	r0, #2
 80010d4:	44e3      	add	fp, ip
 80010d6:	e69d      	b.n	8000e14 <__aeabi_ddiv+0x80>
 80010d8:	2303      	movs	r3, #3
 80010da:	464a      	mov	r2, r9
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <__aeabi_ddiv+0x398>)
 80010e0:	4691      	mov	r9, r2
 80010e2:	469c      	mov	ip, r3
 80010e4:	4652      	mov	r2, sl
 80010e6:	2003      	movs	r0, #3
 80010e8:	44e3      	add	fp, ip
 80010ea:	e693      	b.n	8000e14 <__aeabi_ddiv+0x80>
 80010ec:	230c      	movs	r3, #12
 80010ee:	4699      	mov	r9, r3
 80010f0:	3b09      	subs	r3, #9
 80010f2:	46a0      	mov	r8, r4
 80010f4:	4683      	mov	fp, r0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	e671      	b.n	8000dde <__aeabi_ddiv+0x4a>
 80010fa:	2304      	movs	r3, #4
 80010fc:	4699      	mov	r9, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	469b      	mov	fp, r3
 8001102:	3301      	adds	r3, #1
 8001104:	2500      	movs	r5, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	e669      	b.n	8000dde <__aeabi_ddiv+0x4a>
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	000007ff 	.word	0x000007ff
 8001110:	fffffc01 	.word	0xfffffc01
 8001114:	0800a5d8 	.word	0x0800a5d8
 8001118:	000003ff 	.word	0x000003ff
 800111c:	feffffff 	.word	0xfeffffff
 8001120:	000007fe 	.word	0x000007fe
 8001124:	000003f3 	.word	0x000003f3
 8001128:	fffffc0d 	.word	0xfffffc0d
 800112c:	fffff801 	.word	0xfffff801
 8001130:	4649      	mov	r1, r9
 8001132:	2301      	movs	r3, #1
 8001134:	4319      	orrs	r1, r3
 8001136:	4689      	mov	r9, r1
 8001138:	2400      	movs	r4, #0
 800113a:	2001      	movs	r0, #1
 800113c:	e66a      	b.n	8000e14 <__aeabi_ddiv+0x80>
 800113e:	2300      	movs	r3, #0
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	469a      	mov	sl, r3
 8001144:	2500      	movs	r5, #0
 8001146:	4b8a      	ldr	r3, [pc, #552]	; (8001370 <__aeabi_ddiv+0x5dc>)
 8001148:	0324      	lsls	r4, r4, #12
 800114a:	e67a      	b.n	8000e42 <__aeabi_ddiv+0xae>
 800114c:	2501      	movs	r5, #1
 800114e:	426d      	negs	r5, r5
 8001150:	2301      	movs	r3, #1
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	2b38      	cmp	r3, #56	; 0x38
 8001156:	dd00      	ble.n	800115a <__aeabi_ddiv+0x3c6>
 8001158:	e670      	b.n	8000e3c <__aeabi_ddiv+0xa8>
 800115a:	2b1f      	cmp	r3, #31
 800115c:	dc00      	bgt.n	8001160 <__aeabi_ddiv+0x3cc>
 800115e:	e0bf      	b.n	80012e0 <__aeabi_ddiv+0x54c>
 8001160:	211f      	movs	r1, #31
 8001162:	4249      	negs	r1, r1
 8001164:	1a8a      	subs	r2, r1, r2
 8001166:	4641      	mov	r1, r8
 8001168:	40d1      	lsrs	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	2b20      	cmp	r3, #32
 800116e:	d004      	beq.n	800117a <__aeabi_ddiv+0x3e6>
 8001170:	4641      	mov	r1, r8
 8001172:	4b80      	ldr	r3, [pc, #512]	; (8001374 <__aeabi_ddiv+0x5e0>)
 8001174:	445b      	add	r3, fp
 8001176:	4099      	lsls	r1, r3
 8001178:	430d      	orrs	r5, r1
 800117a:	1e6b      	subs	r3, r5, #1
 800117c:	419d      	sbcs	r5, r3
 800117e:	2307      	movs	r3, #7
 8001180:	432a      	orrs	r2, r5
 8001182:	001d      	movs	r5, r3
 8001184:	2400      	movs	r4, #0
 8001186:	4015      	ands	r5, r2
 8001188:	4213      	tst	r3, r2
 800118a:	d100      	bne.n	800118e <__aeabi_ddiv+0x3fa>
 800118c:	e0d4      	b.n	8001338 <__aeabi_ddiv+0x5a4>
 800118e:	210f      	movs	r1, #15
 8001190:	2300      	movs	r3, #0
 8001192:	4011      	ands	r1, r2
 8001194:	2904      	cmp	r1, #4
 8001196:	d100      	bne.n	800119a <__aeabi_ddiv+0x406>
 8001198:	e0cb      	b.n	8001332 <__aeabi_ddiv+0x59e>
 800119a:	1d11      	adds	r1, r2, #4
 800119c:	4291      	cmp	r1, r2
 800119e:	4192      	sbcs	r2, r2
 80011a0:	4252      	negs	r2, r2
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	000a      	movs	r2, r1
 80011a6:	0219      	lsls	r1, r3, #8
 80011a8:	d400      	bmi.n	80011ac <__aeabi_ddiv+0x418>
 80011aa:	e0c2      	b.n	8001332 <__aeabi_ddiv+0x59e>
 80011ac:	2301      	movs	r3, #1
 80011ae:	2400      	movs	r4, #0
 80011b0:	2500      	movs	r5, #0
 80011b2:	e646      	b.n	8000e42 <__aeabi_ddiv+0xae>
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	4641      	mov	r1, r8
 80011b8:	031b      	lsls	r3, r3, #12
 80011ba:	4219      	tst	r1, r3
 80011bc:	d008      	beq.n	80011d0 <__aeabi_ddiv+0x43c>
 80011be:	421c      	tst	r4, r3
 80011c0:	d106      	bne.n	80011d0 <__aeabi_ddiv+0x43c>
 80011c2:	431c      	orrs	r4, r3
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	46ba      	mov	sl, r7
 80011c8:	0015      	movs	r5, r2
 80011ca:	4b69      	ldr	r3, [pc, #420]	; (8001370 <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e638      	b.n	8000e42 <__aeabi_ddiv+0xae>
 80011d0:	2480      	movs	r4, #128	; 0x80
 80011d2:	4643      	mov	r3, r8
 80011d4:	0324      	lsls	r4, r4, #12
 80011d6:	431c      	orrs	r4, r3
 80011d8:	0324      	lsls	r4, r4, #12
 80011da:	46b2      	mov	sl, r6
 80011dc:	4b64      	ldr	r3, [pc, #400]	; (8001370 <__aeabi_ddiv+0x5dc>)
 80011de:	0b24      	lsrs	r4, r4, #12
 80011e0:	e62f      	b.n	8000e42 <__aeabi_ddiv+0xae>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x454>
 80011e6:	e703      	b.n	8000ff0 <__aeabi_ddiv+0x25c>
 80011e8:	19a6      	adds	r6, r4, r6
 80011ea:	1e68      	subs	r0, r5, #1
 80011ec:	42a6      	cmp	r6, r4
 80011ee:	d200      	bcs.n	80011f2 <__aeabi_ddiv+0x45e>
 80011f0:	e08d      	b.n	800130e <__aeabi_ddiv+0x57a>
 80011f2:	428e      	cmp	r6, r1
 80011f4:	d200      	bcs.n	80011f8 <__aeabi_ddiv+0x464>
 80011f6:	e0a3      	b.n	8001340 <__aeabi_ddiv+0x5ac>
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x468>
 80011fa:	e0b3      	b.n	8001364 <__aeabi_ddiv+0x5d0>
 80011fc:	0005      	movs	r5, r0
 80011fe:	e6f5      	b.n	8000fec <__aeabi_ddiv+0x258>
 8001200:	42aa      	cmp	r2, r5
 8001202:	d900      	bls.n	8001206 <__aeabi_ddiv+0x472>
 8001204:	e639      	b.n	8000e7a <__aeabi_ddiv+0xe6>
 8001206:	4643      	mov	r3, r8
 8001208:	07de      	lsls	r6, r3, #31
 800120a:	0858      	lsrs	r0, r3, #1
 800120c:	086b      	lsrs	r3, r5, #1
 800120e:	431e      	orrs	r6, r3
 8001210:	07ed      	lsls	r5, r5, #31
 8001212:	e639      	b.n	8000e88 <__aeabi_ddiv+0xf4>
 8001214:	4648      	mov	r0, r9
 8001216:	f001 f8f3 	bl	8002400 <__clzsi2>
 800121a:	0001      	movs	r1, r0
 800121c:	0002      	movs	r2, r0
 800121e:	3115      	adds	r1, #21
 8001220:	3220      	adds	r2, #32
 8001222:	291c      	cmp	r1, #28
 8001224:	dc00      	bgt.n	8001228 <__aeabi_ddiv+0x494>
 8001226:	e72c      	b.n	8001082 <__aeabi_ddiv+0x2ee>
 8001228:	464b      	mov	r3, r9
 800122a:	3808      	subs	r0, #8
 800122c:	4083      	lsls	r3, r0
 800122e:	2500      	movs	r5, #0
 8001230:	4698      	mov	r8, r3
 8001232:	e732      	b.n	800109a <__aeabi_ddiv+0x306>
 8001234:	f001 f8e4 	bl	8002400 <__clzsi2>
 8001238:	0003      	movs	r3, r0
 800123a:	001a      	movs	r2, r3
 800123c:	3215      	adds	r2, #21
 800123e:	3020      	adds	r0, #32
 8001240:	2a1c      	cmp	r2, #28
 8001242:	dc00      	bgt.n	8001246 <__aeabi_ddiv+0x4b2>
 8001244:	e700      	b.n	8001048 <__aeabi_ddiv+0x2b4>
 8001246:	4654      	mov	r4, sl
 8001248:	3b08      	subs	r3, #8
 800124a:	2200      	movs	r2, #0
 800124c:	409c      	lsls	r4, r3
 800124e:	e705      	b.n	800105c <__aeabi_ddiv+0x2c8>
 8001250:	1936      	adds	r6, r6, r4
 8001252:	3b01      	subs	r3, #1
 8001254:	42b4      	cmp	r4, r6
 8001256:	d900      	bls.n	800125a <__aeabi_ddiv+0x4c6>
 8001258:	e6a6      	b.n	8000fa8 <__aeabi_ddiv+0x214>
 800125a:	42b2      	cmp	r2, r6
 800125c:	d800      	bhi.n	8001260 <__aeabi_ddiv+0x4cc>
 800125e:	e6a3      	b.n	8000fa8 <__aeabi_ddiv+0x214>
 8001260:	1e83      	subs	r3, r0, #2
 8001262:	1936      	adds	r6, r6, r4
 8001264:	e6a0      	b.n	8000fa8 <__aeabi_ddiv+0x214>
 8001266:	1909      	adds	r1, r1, r4
 8001268:	3d01      	subs	r5, #1
 800126a:	428c      	cmp	r4, r1
 800126c:	d900      	bls.n	8001270 <__aeabi_ddiv+0x4dc>
 800126e:	e68d      	b.n	8000f8c <__aeabi_ddiv+0x1f8>
 8001270:	428a      	cmp	r2, r1
 8001272:	d800      	bhi.n	8001276 <__aeabi_ddiv+0x4e2>
 8001274:	e68a      	b.n	8000f8c <__aeabi_ddiv+0x1f8>
 8001276:	1e85      	subs	r5, r0, #2
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e687      	b.n	8000f8c <__aeabi_ddiv+0x1f8>
 800127c:	230f      	movs	r3, #15
 800127e:	402b      	ands	r3, r5
 8001280:	2b04      	cmp	r3, #4
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x4f2>
 8001284:	e6bc      	b.n	8001000 <__aeabi_ddiv+0x26c>
 8001286:	2305      	movs	r3, #5
 8001288:	425b      	negs	r3, r3
 800128a:	42ab      	cmp	r3, r5
 800128c:	419b      	sbcs	r3, r3
 800128e:	3504      	adds	r5, #4
 8001290:	425b      	negs	r3, r3
 8001292:	08ed      	lsrs	r5, r5, #3
 8001294:	4498      	add	r8, r3
 8001296:	e6b4      	b.n	8001002 <__aeabi_ddiv+0x26e>
 8001298:	42af      	cmp	r7, r5
 800129a:	d900      	bls.n	800129e <__aeabi_ddiv+0x50a>
 800129c:	e660      	b.n	8000f60 <__aeabi_ddiv+0x1cc>
 800129e:	4282      	cmp	r2, r0
 80012a0:	d804      	bhi.n	80012ac <__aeabi_ddiv+0x518>
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x512>
 80012a4:	e65c      	b.n	8000f60 <__aeabi_ddiv+0x1cc>
 80012a6:	42ae      	cmp	r6, r5
 80012a8:	d800      	bhi.n	80012ac <__aeabi_ddiv+0x518>
 80012aa:	e659      	b.n	8000f60 <__aeabi_ddiv+0x1cc>
 80012ac:	2302      	movs	r3, #2
 80012ae:	425b      	negs	r3, r3
 80012b0:	469c      	mov	ip, r3
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	44e0      	add	r8, ip
 80012b6:	469c      	mov	ip, r3
 80012b8:	4465      	add	r5, ip
 80012ba:	429d      	cmp	r5, r3
 80012bc:	419b      	sbcs	r3, r3
 80012be:	425b      	negs	r3, r3
 80012c0:	191b      	adds	r3, r3, r4
 80012c2:	18c0      	adds	r0, r0, r3
 80012c4:	e64d      	b.n	8000f62 <__aeabi_ddiv+0x1ce>
 80012c6:	428a      	cmp	r2, r1
 80012c8:	d800      	bhi.n	80012cc <__aeabi_ddiv+0x538>
 80012ca:	e60e      	b.n	8000eea <__aeabi_ddiv+0x156>
 80012cc:	1e83      	subs	r3, r0, #2
 80012ce:	1909      	adds	r1, r1, r4
 80012d0:	e60b      	b.n	8000eea <__aeabi_ddiv+0x156>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x544>
 80012d6:	e5f4      	b.n	8000ec2 <__aeabi_ddiv+0x12e>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	4698      	mov	r8, r3
 80012dc:	1909      	adds	r1, r1, r4
 80012de:	e5f0      	b.n	8000ec2 <__aeabi_ddiv+0x12e>
 80012e0:	4925      	ldr	r1, [pc, #148]	; (8001378 <__aeabi_ddiv+0x5e4>)
 80012e2:	0028      	movs	r0, r5
 80012e4:	4459      	add	r1, fp
 80012e6:	408d      	lsls	r5, r1
 80012e8:	4642      	mov	r2, r8
 80012ea:	408a      	lsls	r2, r1
 80012ec:	1e69      	subs	r1, r5, #1
 80012ee:	418d      	sbcs	r5, r1
 80012f0:	4641      	mov	r1, r8
 80012f2:	40d8      	lsrs	r0, r3
 80012f4:	40d9      	lsrs	r1, r3
 80012f6:	4302      	orrs	r2, r0
 80012f8:	432a      	orrs	r2, r5
 80012fa:	000b      	movs	r3, r1
 80012fc:	0751      	lsls	r1, r2, #29
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0x56e>
 8001300:	e751      	b.n	80011a6 <__aeabi_ddiv+0x412>
 8001302:	210f      	movs	r1, #15
 8001304:	4011      	ands	r1, r2
 8001306:	2904      	cmp	r1, #4
 8001308:	d000      	beq.n	800130c <__aeabi_ddiv+0x578>
 800130a:	e746      	b.n	800119a <__aeabi_ddiv+0x406>
 800130c:	e74b      	b.n	80011a6 <__aeabi_ddiv+0x412>
 800130e:	0005      	movs	r5, r0
 8001310:	428e      	cmp	r6, r1
 8001312:	d000      	beq.n	8001316 <__aeabi_ddiv+0x582>
 8001314:	e66a      	b.n	8000fec <__aeabi_ddiv+0x258>
 8001316:	9a00      	ldr	r2, [sp, #0]
 8001318:	4293      	cmp	r3, r2
 800131a:	d000      	beq.n	800131e <__aeabi_ddiv+0x58a>
 800131c:	e666      	b.n	8000fec <__aeabi_ddiv+0x258>
 800131e:	e667      	b.n	8000ff0 <__aeabi_ddiv+0x25c>
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <__aeabi_ddiv+0x5e8>)
 8001322:	445a      	add	r2, fp
 8001324:	2a00      	cmp	r2, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_ddiv+0x596>
 8001328:	e710      	b.n	800114c <__aeabi_ddiv+0x3b8>
 800132a:	2301      	movs	r3, #1
 800132c:	2500      	movs	r5, #0
 800132e:	4498      	add	r8, r3
 8001330:	e667      	b.n	8001002 <__aeabi_ddiv+0x26e>
 8001332:	075d      	lsls	r5, r3, #29
 8001334:	025b      	lsls	r3, r3, #9
 8001336:	0b1c      	lsrs	r4, r3, #12
 8001338:	08d2      	lsrs	r2, r2, #3
 800133a:	2300      	movs	r3, #0
 800133c:	4315      	orrs	r5, r2
 800133e:	e580      	b.n	8000e42 <__aeabi_ddiv+0xae>
 8001340:	9800      	ldr	r0, [sp, #0]
 8001342:	3d02      	subs	r5, #2
 8001344:	0042      	lsls	r2, r0, #1
 8001346:	4282      	cmp	r2, r0
 8001348:	41bf      	sbcs	r7, r7
 800134a:	427f      	negs	r7, r7
 800134c:	193c      	adds	r4, r7, r4
 800134e:	1936      	adds	r6, r6, r4
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	e7dd      	b.n	8001310 <__aeabi_ddiv+0x57c>
 8001354:	2480      	movs	r4, #128	; 0x80
 8001356:	4643      	mov	r3, r8
 8001358:	0324      	lsls	r4, r4, #12
 800135a:	431c      	orrs	r4, r3
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__aeabi_ddiv+0x5dc>)
 8001360:	0b24      	lsrs	r4, r4, #12
 8001362:	e56e      	b.n	8000e42 <__aeabi_ddiv+0xae>
 8001364:	9a00      	ldr	r2, [sp, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3ea      	bcc.n	8001340 <__aeabi_ddiv+0x5ac>
 800136a:	0005      	movs	r5, r0
 800136c:	e7d3      	b.n	8001316 <__aeabi_ddiv+0x582>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff
 8001374:	0000043e 	.word	0x0000043e
 8001378:	0000041e 	.word	0x0000041e
 800137c:	000003ff 	.word	0x000003ff

08001380 <__eqdf2>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	464e      	mov	r6, r9
 8001384:	4645      	mov	r5, r8
 8001386:	46de      	mov	lr, fp
 8001388:	4657      	mov	r7, sl
 800138a:	4690      	mov	r8, r2
 800138c:	b5e0      	push	{r5, r6, r7, lr}
 800138e:	0017      	movs	r7, r2
 8001390:	031a      	lsls	r2, r3, #12
 8001392:	0b12      	lsrs	r2, r2, #12
 8001394:	0005      	movs	r5, r0
 8001396:	4684      	mov	ip, r0
 8001398:	4819      	ldr	r0, [pc, #100]	; (8001400 <__eqdf2+0x80>)
 800139a:	030e      	lsls	r6, r1, #12
 800139c:	004c      	lsls	r4, r1, #1
 800139e:	4691      	mov	r9, r2
 80013a0:	005a      	lsls	r2, r3, #1
 80013a2:	0fdb      	lsrs	r3, r3, #31
 80013a4:	469b      	mov	fp, r3
 80013a6:	0b36      	lsrs	r6, r6, #12
 80013a8:	0d64      	lsrs	r4, r4, #21
 80013aa:	0fc9      	lsrs	r1, r1, #31
 80013ac:	0d52      	lsrs	r2, r2, #21
 80013ae:	4284      	cmp	r4, r0
 80013b0:	d019      	beq.n	80013e6 <__eqdf2+0x66>
 80013b2:	4282      	cmp	r2, r0
 80013b4:	d010      	beq.n	80013d8 <__eqdf2+0x58>
 80013b6:	2001      	movs	r0, #1
 80013b8:	4294      	cmp	r4, r2
 80013ba:	d10e      	bne.n	80013da <__eqdf2+0x5a>
 80013bc:	454e      	cmp	r6, r9
 80013be:	d10c      	bne.n	80013da <__eqdf2+0x5a>
 80013c0:	2001      	movs	r0, #1
 80013c2:	45c4      	cmp	ip, r8
 80013c4:	d109      	bne.n	80013da <__eqdf2+0x5a>
 80013c6:	4559      	cmp	r1, fp
 80013c8:	d017      	beq.n	80013fa <__eqdf2+0x7a>
 80013ca:	2c00      	cmp	r4, #0
 80013cc:	d105      	bne.n	80013da <__eqdf2+0x5a>
 80013ce:	0030      	movs	r0, r6
 80013d0:	4328      	orrs	r0, r5
 80013d2:	1e43      	subs	r3, r0, #1
 80013d4:	4198      	sbcs	r0, r3
 80013d6:	e000      	b.n	80013da <__eqdf2+0x5a>
 80013d8:	2001      	movs	r0, #1
 80013da:	bcf0      	pop	{r4, r5, r6, r7}
 80013dc:	46bb      	mov	fp, r7
 80013de:	46b2      	mov	sl, r6
 80013e0:	46a9      	mov	r9, r5
 80013e2:	46a0      	mov	r8, r4
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	0033      	movs	r3, r6
 80013e8:	2001      	movs	r0, #1
 80013ea:	432b      	orrs	r3, r5
 80013ec:	d1f5      	bne.n	80013da <__eqdf2+0x5a>
 80013ee:	42a2      	cmp	r2, r4
 80013f0:	d1f3      	bne.n	80013da <__eqdf2+0x5a>
 80013f2:	464b      	mov	r3, r9
 80013f4:	433b      	orrs	r3, r7
 80013f6:	d1f0      	bne.n	80013da <__eqdf2+0x5a>
 80013f8:	e7e2      	b.n	80013c0 <__eqdf2+0x40>
 80013fa:	2000      	movs	r0, #0
 80013fc:	e7ed      	b.n	80013da <__eqdf2+0x5a>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff

08001404 <__gedf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4647      	mov	r7, r8
 8001408:	46ce      	mov	lr, r9
 800140a:	0004      	movs	r4, r0
 800140c:	0018      	movs	r0, r3
 800140e:	0016      	movs	r6, r2
 8001410:	031b      	lsls	r3, r3, #12
 8001412:	0b1b      	lsrs	r3, r3, #12
 8001414:	4d2d      	ldr	r5, [pc, #180]	; (80014cc <__gedf2+0xc8>)
 8001416:	004a      	lsls	r2, r1, #1
 8001418:	4699      	mov	r9, r3
 800141a:	b580      	push	{r7, lr}
 800141c:	0043      	lsls	r3, r0, #1
 800141e:	030f      	lsls	r7, r1, #12
 8001420:	46a4      	mov	ip, r4
 8001422:	46b0      	mov	r8, r6
 8001424:	0b3f      	lsrs	r7, r7, #12
 8001426:	0d52      	lsrs	r2, r2, #21
 8001428:	0fc9      	lsrs	r1, r1, #31
 800142a:	0d5b      	lsrs	r3, r3, #21
 800142c:	0fc0      	lsrs	r0, r0, #31
 800142e:	42aa      	cmp	r2, r5
 8001430:	d021      	beq.n	8001476 <__gedf2+0x72>
 8001432:	42ab      	cmp	r3, r5
 8001434:	d013      	beq.n	800145e <__gedf2+0x5a>
 8001436:	2a00      	cmp	r2, #0
 8001438:	d122      	bne.n	8001480 <__gedf2+0x7c>
 800143a:	433c      	orrs	r4, r7
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <__gedf2+0x42>
 8001440:	464d      	mov	r5, r9
 8001442:	432e      	orrs	r6, r5
 8001444:	d022      	beq.n	800148c <__gedf2+0x88>
 8001446:	2c00      	cmp	r4, #0
 8001448:	d010      	beq.n	800146c <__gedf2+0x68>
 800144a:	4281      	cmp	r1, r0
 800144c:	d022      	beq.n	8001494 <__gedf2+0x90>
 800144e:	2002      	movs	r0, #2
 8001450:	3901      	subs	r1, #1
 8001452:	4008      	ands	r0, r1
 8001454:	3801      	subs	r0, #1
 8001456:	bcc0      	pop	{r6, r7}
 8001458:	46b9      	mov	r9, r7
 800145a:	46b0      	mov	r8, r6
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	464d      	mov	r5, r9
 8001460:	432e      	orrs	r6, r5
 8001462:	d129      	bne.n	80014b8 <__gedf2+0xb4>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d1f0      	bne.n	800144a <__gedf2+0x46>
 8001468:	433c      	orrs	r4, r7
 800146a:	d1ee      	bne.n	800144a <__gedf2+0x46>
 800146c:	2800      	cmp	r0, #0
 800146e:	d1f2      	bne.n	8001456 <__gedf2+0x52>
 8001470:	2001      	movs	r0, #1
 8001472:	4240      	negs	r0, r0
 8001474:	e7ef      	b.n	8001456 <__gedf2+0x52>
 8001476:	003d      	movs	r5, r7
 8001478:	4325      	orrs	r5, r4
 800147a:	d11d      	bne.n	80014b8 <__gedf2+0xb4>
 800147c:	4293      	cmp	r3, r2
 800147e:	d0ee      	beq.n	800145e <__gedf2+0x5a>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e2      	bne.n	800144a <__gedf2+0x46>
 8001484:	464c      	mov	r4, r9
 8001486:	4326      	orrs	r6, r4
 8001488:	d1df      	bne.n	800144a <__gedf2+0x46>
 800148a:	e7e0      	b.n	800144e <__gedf2+0x4a>
 800148c:	2000      	movs	r0, #0
 800148e:	2c00      	cmp	r4, #0
 8001490:	d0e1      	beq.n	8001456 <__gedf2+0x52>
 8001492:	e7dc      	b.n	800144e <__gedf2+0x4a>
 8001494:	429a      	cmp	r2, r3
 8001496:	dc0a      	bgt.n	80014ae <__gedf2+0xaa>
 8001498:	dbe8      	blt.n	800146c <__gedf2+0x68>
 800149a:	454f      	cmp	r7, r9
 800149c:	d8d7      	bhi.n	800144e <__gedf2+0x4a>
 800149e:	d00e      	beq.n	80014be <__gedf2+0xba>
 80014a0:	2000      	movs	r0, #0
 80014a2:	454f      	cmp	r7, r9
 80014a4:	d2d7      	bcs.n	8001456 <__gedf2+0x52>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d0e2      	beq.n	8001470 <__gedf2+0x6c>
 80014aa:	0008      	movs	r0, r1
 80014ac:	e7d3      	b.n	8001456 <__gedf2+0x52>
 80014ae:	4243      	negs	r3, r0
 80014b0:	4158      	adcs	r0, r3
 80014b2:	0040      	lsls	r0, r0, #1
 80014b4:	3801      	subs	r0, #1
 80014b6:	e7ce      	b.n	8001456 <__gedf2+0x52>
 80014b8:	2002      	movs	r0, #2
 80014ba:	4240      	negs	r0, r0
 80014bc:	e7cb      	b.n	8001456 <__gedf2+0x52>
 80014be:	45c4      	cmp	ip, r8
 80014c0:	d8c5      	bhi.n	800144e <__gedf2+0x4a>
 80014c2:	2000      	movs	r0, #0
 80014c4:	45c4      	cmp	ip, r8
 80014c6:	d2c6      	bcs.n	8001456 <__gedf2+0x52>
 80014c8:	e7ed      	b.n	80014a6 <__gedf2+0xa2>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__ledf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	4647      	mov	r7, r8
 80014d4:	46ce      	mov	lr, r9
 80014d6:	0004      	movs	r4, r0
 80014d8:	0018      	movs	r0, r3
 80014da:	0016      	movs	r6, r2
 80014dc:	031b      	lsls	r3, r3, #12
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4d2c      	ldr	r5, [pc, #176]	; (8001594 <__ledf2+0xc4>)
 80014e2:	004a      	lsls	r2, r1, #1
 80014e4:	4699      	mov	r9, r3
 80014e6:	b580      	push	{r7, lr}
 80014e8:	0043      	lsls	r3, r0, #1
 80014ea:	030f      	lsls	r7, r1, #12
 80014ec:	46a4      	mov	ip, r4
 80014ee:	46b0      	mov	r8, r6
 80014f0:	0b3f      	lsrs	r7, r7, #12
 80014f2:	0d52      	lsrs	r2, r2, #21
 80014f4:	0fc9      	lsrs	r1, r1, #31
 80014f6:	0d5b      	lsrs	r3, r3, #21
 80014f8:	0fc0      	lsrs	r0, r0, #31
 80014fa:	42aa      	cmp	r2, r5
 80014fc:	d00d      	beq.n	800151a <__ledf2+0x4a>
 80014fe:	42ab      	cmp	r3, r5
 8001500:	d010      	beq.n	8001524 <__ledf2+0x54>
 8001502:	2a00      	cmp	r2, #0
 8001504:	d127      	bne.n	8001556 <__ledf2+0x86>
 8001506:	433c      	orrs	r4, r7
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <__ledf2+0x60>
 800150c:	464d      	mov	r5, r9
 800150e:	432e      	orrs	r6, r5
 8001510:	d10e      	bne.n	8001530 <__ledf2+0x60>
 8001512:	2000      	movs	r0, #0
 8001514:	2c00      	cmp	r4, #0
 8001516:	d015      	beq.n	8001544 <__ledf2+0x74>
 8001518:	e00e      	b.n	8001538 <__ledf2+0x68>
 800151a:	003d      	movs	r5, r7
 800151c:	4325      	orrs	r5, r4
 800151e:	d110      	bne.n	8001542 <__ledf2+0x72>
 8001520:	4293      	cmp	r3, r2
 8001522:	d118      	bne.n	8001556 <__ledf2+0x86>
 8001524:	464d      	mov	r5, r9
 8001526:	432e      	orrs	r6, r5
 8001528:	d10b      	bne.n	8001542 <__ledf2+0x72>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d102      	bne.n	8001534 <__ledf2+0x64>
 800152e:	433c      	orrs	r4, r7
 8001530:	2c00      	cmp	r4, #0
 8001532:	d00b      	beq.n	800154c <__ledf2+0x7c>
 8001534:	4281      	cmp	r1, r0
 8001536:	d014      	beq.n	8001562 <__ledf2+0x92>
 8001538:	2002      	movs	r0, #2
 800153a:	3901      	subs	r1, #1
 800153c:	4008      	ands	r0, r1
 800153e:	3801      	subs	r0, #1
 8001540:	e000      	b.n	8001544 <__ledf2+0x74>
 8001542:	2002      	movs	r0, #2
 8001544:	bcc0      	pop	{r6, r7}
 8001546:	46b9      	mov	r9, r7
 8001548:	46b0      	mov	r8, r6
 800154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154c:	2800      	cmp	r0, #0
 800154e:	d1f9      	bne.n	8001544 <__ledf2+0x74>
 8001550:	2001      	movs	r0, #1
 8001552:	4240      	negs	r0, r0
 8001554:	e7f6      	b.n	8001544 <__ledf2+0x74>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ec      	bne.n	8001534 <__ledf2+0x64>
 800155a:	464c      	mov	r4, r9
 800155c:	4326      	orrs	r6, r4
 800155e:	d1e9      	bne.n	8001534 <__ledf2+0x64>
 8001560:	e7ea      	b.n	8001538 <__ledf2+0x68>
 8001562:	429a      	cmp	r2, r3
 8001564:	dd04      	ble.n	8001570 <__ledf2+0xa0>
 8001566:	4243      	negs	r3, r0
 8001568:	4158      	adcs	r0, r3
 800156a:	0040      	lsls	r0, r0, #1
 800156c:	3801      	subs	r0, #1
 800156e:	e7e9      	b.n	8001544 <__ledf2+0x74>
 8001570:	429a      	cmp	r2, r3
 8001572:	dbeb      	blt.n	800154c <__ledf2+0x7c>
 8001574:	454f      	cmp	r7, r9
 8001576:	d8df      	bhi.n	8001538 <__ledf2+0x68>
 8001578:	d006      	beq.n	8001588 <__ledf2+0xb8>
 800157a:	2000      	movs	r0, #0
 800157c:	454f      	cmp	r7, r9
 800157e:	d2e1      	bcs.n	8001544 <__ledf2+0x74>
 8001580:	2900      	cmp	r1, #0
 8001582:	d0e5      	beq.n	8001550 <__ledf2+0x80>
 8001584:	0008      	movs	r0, r1
 8001586:	e7dd      	b.n	8001544 <__ledf2+0x74>
 8001588:	45c4      	cmp	ip, r8
 800158a:	d8d5      	bhi.n	8001538 <__ledf2+0x68>
 800158c:	2000      	movs	r0, #0
 800158e:	45c4      	cmp	ip, r8
 8001590:	d2d8      	bcs.n	8001544 <__ledf2+0x74>
 8001592:	e7f5      	b.n	8001580 <__ledf2+0xb0>
 8001594:	000007ff 	.word	0x000007ff

08001598 <__aeabi_dmul>:
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	4657      	mov	r7, sl
 800159c:	464e      	mov	r6, r9
 800159e:	4645      	mov	r5, r8
 80015a0:	46de      	mov	lr, fp
 80015a2:	b5e0      	push	{r5, r6, r7, lr}
 80015a4:	4698      	mov	r8, r3
 80015a6:	030c      	lsls	r4, r1, #12
 80015a8:	004b      	lsls	r3, r1, #1
 80015aa:	0006      	movs	r6, r0
 80015ac:	4692      	mov	sl, r2
 80015ae:	b087      	sub	sp, #28
 80015b0:	0b24      	lsrs	r4, r4, #12
 80015b2:	0d5b      	lsrs	r3, r3, #21
 80015b4:	0fcf      	lsrs	r7, r1, #31
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_dmul+0x24>
 80015ba:	e15c      	b.n	8001876 <__aeabi_dmul+0x2de>
 80015bc:	4ad9      	ldr	r2, [pc, #868]	; (8001924 <__aeabi_dmul+0x38c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x2c>
 80015c2:	e175      	b.n	80018b0 <__aeabi_dmul+0x318>
 80015c4:	0f42      	lsrs	r2, r0, #29
 80015c6:	00e4      	lsls	r4, r4, #3
 80015c8:	4314      	orrs	r4, r2
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0412      	lsls	r2, r2, #16
 80015ce:	4314      	orrs	r4, r2
 80015d0:	4ad5      	ldr	r2, [pc, #852]	; (8001928 <__aeabi_dmul+0x390>)
 80015d2:	00c5      	lsls	r5, r0, #3
 80015d4:	4694      	mov	ip, r2
 80015d6:	4463      	add	r3, ip
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	4699      	mov	r9, r3
 80015de:	469b      	mov	fp, r3
 80015e0:	4643      	mov	r3, r8
 80015e2:	4642      	mov	r2, r8
 80015e4:	031e      	lsls	r6, r3, #12
 80015e6:	0fd2      	lsrs	r2, r2, #31
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4650      	mov	r0, sl
 80015ec:	4690      	mov	r8, r2
 80015ee:	0b36      	lsrs	r6, r6, #12
 80015f0:	0d5b      	lsrs	r3, r3, #21
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x5e>
 80015f4:	e120      	b.n	8001838 <__aeabi_dmul+0x2a0>
 80015f6:	4acb      	ldr	r2, [pc, #812]	; (8001924 <__aeabi_dmul+0x38c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d100      	bne.n	80015fe <__aeabi_dmul+0x66>
 80015fc:	e162      	b.n	80018c4 <__aeabi_dmul+0x32c>
 80015fe:	49ca      	ldr	r1, [pc, #808]	; (8001928 <__aeabi_dmul+0x390>)
 8001600:	0f42      	lsrs	r2, r0, #29
 8001602:	468c      	mov	ip, r1
 8001604:	9900      	ldr	r1, [sp, #0]
 8001606:	4463      	add	r3, ip
 8001608:	00f6      	lsls	r6, r6, #3
 800160a:	468c      	mov	ip, r1
 800160c:	4316      	orrs	r6, r2
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	449c      	add	ip, r3
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	4663      	mov	r3, ip
 8001616:	4316      	orrs	r6, r2
 8001618:	00c2      	lsls	r2, r0, #3
 800161a:	2000      	movs	r0, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	9900      	ldr	r1, [sp, #0]
 8001620:	4643      	mov	r3, r8
 8001622:	3101      	adds	r1, #1
 8001624:	468c      	mov	ip, r1
 8001626:	4649      	mov	r1, r9
 8001628:	407b      	eors	r3, r7
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	290f      	cmp	r1, #15
 800162e:	d826      	bhi.n	800167e <__aeabi_dmul+0xe6>
 8001630:	4bbe      	ldr	r3, [pc, #760]	; (800192c <__aeabi_dmul+0x394>)
 8001632:	0089      	lsls	r1, r1, #2
 8001634:	5859      	ldr	r1, [r3, r1]
 8001636:	468f      	mov	pc, r1
 8001638:	4643      	mov	r3, r8
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	0034      	movs	r4, r6
 800163e:	0015      	movs	r5, r2
 8001640:	4683      	mov	fp, r0
 8001642:	465b      	mov	r3, fp
 8001644:	2b02      	cmp	r3, #2
 8001646:	d016      	beq.n	8001676 <__aeabi_dmul+0xde>
 8001648:	2b03      	cmp	r3, #3
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0xb6>
 800164c:	e203      	b.n	8001a56 <__aeabi_dmul+0x4be>
 800164e:	2b01      	cmp	r3, #1
 8001650:	d000      	beq.n	8001654 <__aeabi_dmul+0xbc>
 8001652:	e0cd      	b.n	80017f0 <__aeabi_dmul+0x258>
 8001654:	2200      	movs	r2, #0
 8001656:	2400      	movs	r4, #0
 8001658:	2500      	movs	r5, #0
 800165a:	9b01      	ldr	r3, [sp, #4]
 800165c:	0512      	lsls	r2, r2, #20
 800165e:	4322      	orrs	r2, r4
 8001660:	07db      	lsls	r3, r3, #31
 8001662:	431a      	orrs	r2, r3
 8001664:	0028      	movs	r0, r5
 8001666:	0011      	movs	r1, r2
 8001668:	b007      	add	sp, #28
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	2400      	movs	r4, #0
 8001678:	2500      	movs	r5, #0
 800167a:	4aaa      	ldr	r2, [pc, #680]	; (8001924 <__aeabi_dmul+0x38c>)
 800167c:	e7ed      	b.n	800165a <__aeabi_dmul+0xc2>
 800167e:	0c28      	lsrs	r0, r5, #16
 8001680:	042d      	lsls	r5, r5, #16
 8001682:	0c2d      	lsrs	r5, r5, #16
 8001684:	002b      	movs	r3, r5
 8001686:	0c11      	lsrs	r1, r2, #16
 8001688:	0412      	lsls	r2, r2, #16
 800168a:	0c12      	lsrs	r2, r2, #16
 800168c:	4353      	muls	r3, r2
 800168e:	4698      	mov	r8, r3
 8001690:	0013      	movs	r3, r2
 8001692:	002f      	movs	r7, r5
 8001694:	4343      	muls	r3, r0
 8001696:	4699      	mov	r9, r3
 8001698:	434f      	muls	r7, r1
 800169a:	444f      	add	r7, r9
 800169c:	46bb      	mov	fp, r7
 800169e:	4647      	mov	r7, r8
 80016a0:	000b      	movs	r3, r1
 80016a2:	0c3f      	lsrs	r7, r7, #16
 80016a4:	46ba      	mov	sl, r7
 80016a6:	4343      	muls	r3, r0
 80016a8:	44da      	add	sl, fp
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	45d1      	cmp	r9, sl
 80016ae:	d904      	bls.n	80016ba <__aeabi_dmul+0x122>
 80016b0:	2780      	movs	r7, #128	; 0x80
 80016b2:	027f      	lsls	r7, r7, #9
 80016b4:	46b9      	mov	r9, r7
 80016b6:	444b      	add	r3, r9
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	4653      	mov	r3, sl
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	469b      	mov	fp, r3
 80016c0:	4653      	mov	r3, sl
 80016c2:	041f      	lsls	r7, r3, #16
 80016c4:	4643      	mov	r3, r8
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	4698      	mov	r8, r3
 80016cc:	003b      	movs	r3, r7
 80016ce:	4443      	add	r3, r8
 80016d0:	9304      	str	r3, [sp, #16]
 80016d2:	0c33      	lsrs	r3, r6, #16
 80016d4:	0436      	lsls	r6, r6, #16
 80016d6:	0c36      	lsrs	r6, r6, #16
 80016d8:	4698      	mov	r8, r3
 80016da:	0033      	movs	r3, r6
 80016dc:	4343      	muls	r3, r0
 80016de:	4699      	mov	r9, r3
 80016e0:	4643      	mov	r3, r8
 80016e2:	4343      	muls	r3, r0
 80016e4:	002f      	movs	r7, r5
 80016e6:	469a      	mov	sl, r3
 80016e8:	4643      	mov	r3, r8
 80016ea:	4377      	muls	r7, r6
 80016ec:	435d      	muls	r5, r3
 80016ee:	0c38      	lsrs	r0, r7, #16
 80016f0:	444d      	add	r5, r9
 80016f2:	1945      	adds	r5, r0, r5
 80016f4:	45a9      	cmp	r9, r5
 80016f6:	d903      	bls.n	8001700 <__aeabi_dmul+0x168>
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	4699      	mov	r9, r3
 80016fe:	44ca      	add	sl, r9
 8001700:	043f      	lsls	r7, r7, #16
 8001702:	0c28      	lsrs	r0, r5, #16
 8001704:	0c3f      	lsrs	r7, r7, #16
 8001706:	042d      	lsls	r5, r5, #16
 8001708:	19ed      	adds	r5, r5, r7
 800170a:	0c27      	lsrs	r7, r4, #16
 800170c:	0424      	lsls	r4, r4, #16
 800170e:	0c24      	lsrs	r4, r4, #16
 8001710:	0003      	movs	r3, r0
 8001712:	0020      	movs	r0, r4
 8001714:	4350      	muls	r0, r2
 8001716:	437a      	muls	r2, r7
 8001718:	4691      	mov	r9, r2
 800171a:	003a      	movs	r2, r7
 800171c:	4453      	add	r3, sl
 800171e:	9305      	str	r3, [sp, #20]
 8001720:	0c03      	lsrs	r3, r0, #16
 8001722:	469a      	mov	sl, r3
 8001724:	434a      	muls	r2, r1
 8001726:	4361      	muls	r1, r4
 8001728:	4449      	add	r1, r9
 800172a:	4451      	add	r1, sl
 800172c:	44ab      	add	fp, r5
 800172e:	4589      	cmp	r9, r1
 8001730:	d903      	bls.n	800173a <__aeabi_dmul+0x1a2>
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	025b      	lsls	r3, r3, #9
 8001736:	4699      	mov	r9, r3
 8001738:	444a      	add	r2, r9
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c0b      	lsrs	r3, r1, #16
 800173e:	0c00      	lsrs	r0, r0, #16
 8001740:	0409      	lsls	r1, r1, #16
 8001742:	1809      	adds	r1, r1, r0
 8001744:	0020      	movs	r0, r4
 8001746:	4699      	mov	r9, r3
 8001748:	4643      	mov	r3, r8
 800174a:	4370      	muls	r0, r6
 800174c:	435c      	muls	r4, r3
 800174e:	437e      	muls	r6, r7
 8001750:	435f      	muls	r7, r3
 8001752:	0c03      	lsrs	r3, r0, #16
 8001754:	4698      	mov	r8, r3
 8001756:	19a4      	adds	r4, r4, r6
 8001758:	4444      	add	r4, r8
 800175a:	444a      	add	r2, r9
 800175c:	9703      	str	r7, [sp, #12]
 800175e:	42a6      	cmp	r6, r4
 8001760:	d904      	bls.n	800176c <__aeabi_dmul+0x1d4>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	4698      	mov	r8, r3
 8001768:	4447      	add	r7, r8
 800176a:	9703      	str	r7, [sp, #12]
 800176c:	0423      	lsls	r3, r4, #16
 800176e:	9e02      	ldr	r6, [sp, #8]
 8001770:	469a      	mov	sl, r3
 8001772:	9b05      	ldr	r3, [sp, #20]
 8001774:	445e      	add	r6, fp
 8001776:	4698      	mov	r8, r3
 8001778:	42ae      	cmp	r6, r5
 800177a:	41ad      	sbcs	r5, r5
 800177c:	1876      	adds	r6, r6, r1
 800177e:	428e      	cmp	r6, r1
 8001780:	4189      	sbcs	r1, r1
 8001782:	0400      	lsls	r0, r0, #16
 8001784:	0c00      	lsrs	r0, r0, #16
 8001786:	4450      	add	r0, sl
 8001788:	4440      	add	r0, r8
 800178a:	426d      	negs	r5, r5
 800178c:	1947      	adds	r7, r0, r5
 800178e:	46b8      	mov	r8, r7
 8001790:	4693      	mov	fp, r2
 8001792:	4249      	negs	r1, r1
 8001794:	4689      	mov	r9, r1
 8001796:	44c3      	add	fp, r8
 8001798:	44d9      	add	r9, fp
 800179a:	4298      	cmp	r0, r3
 800179c:	4180      	sbcs	r0, r0
 800179e:	45a8      	cmp	r8, r5
 80017a0:	41ad      	sbcs	r5, r5
 80017a2:	4593      	cmp	fp, r2
 80017a4:	4192      	sbcs	r2, r2
 80017a6:	4589      	cmp	r9, r1
 80017a8:	4189      	sbcs	r1, r1
 80017aa:	426d      	negs	r5, r5
 80017ac:	4240      	negs	r0, r0
 80017ae:	4328      	orrs	r0, r5
 80017b0:	0c24      	lsrs	r4, r4, #16
 80017b2:	4252      	negs	r2, r2
 80017b4:	4249      	negs	r1, r1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	9b03      	ldr	r3, [sp, #12]
 80017ba:	1900      	adds	r0, r0, r4
 80017bc:	1880      	adds	r0, r0, r2
 80017be:	18c7      	adds	r7, r0, r3
 80017c0:	464b      	mov	r3, r9
 80017c2:	0ddc      	lsrs	r4, r3, #23
 80017c4:	9b04      	ldr	r3, [sp, #16]
 80017c6:	0275      	lsls	r5, r6, #9
 80017c8:	431d      	orrs	r5, r3
 80017ca:	1e6a      	subs	r2, r5, #1
 80017cc:	4195      	sbcs	r5, r2
 80017ce:	464b      	mov	r3, r9
 80017d0:	0df6      	lsrs	r6, r6, #23
 80017d2:	027f      	lsls	r7, r7, #9
 80017d4:	4335      	orrs	r5, r6
 80017d6:	025a      	lsls	r2, r3, #9
 80017d8:	433c      	orrs	r4, r7
 80017da:	4315      	orrs	r5, r2
 80017dc:	01fb      	lsls	r3, r7, #7
 80017de:	d400      	bmi.n	80017e2 <__aeabi_dmul+0x24a>
 80017e0:	e11c      	b.n	8001a1c <__aeabi_dmul+0x484>
 80017e2:	2101      	movs	r1, #1
 80017e4:	086a      	lsrs	r2, r5, #1
 80017e6:	400d      	ands	r5, r1
 80017e8:	4315      	orrs	r5, r2
 80017ea:	07e2      	lsls	r2, r4, #31
 80017ec:	4315      	orrs	r5, r2
 80017ee:	0864      	lsrs	r4, r4, #1
 80017f0:	494f      	ldr	r1, [pc, #316]	; (8001930 <__aeabi_dmul+0x398>)
 80017f2:	4461      	add	r1, ip
 80017f4:	2900      	cmp	r1, #0
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_dmul+0x262>
 80017f8:	e0b0      	b.n	800195c <__aeabi_dmul+0x3c4>
 80017fa:	076b      	lsls	r3, r5, #29
 80017fc:	d009      	beq.n	8001812 <__aeabi_dmul+0x27a>
 80017fe:	220f      	movs	r2, #15
 8001800:	402a      	ands	r2, r5
 8001802:	2a04      	cmp	r2, #4
 8001804:	d005      	beq.n	8001812 <__aeabi_dmul+0x27a>
 8001806:	1d2a      	adds	r2, r5, #4
 8001808:	42aa      	cmp	r2, r5
 800180a:	41ad      	sbcs	r5, r5
 800180c:	426d      	negs	r5, r5
 800180e:	1964      	adds	r4, r4, r5
 8001810:	0015      	movs	r5, r2
 8001812:	01e3      	lsls	r3, r4, #7
 8001814:	d504      	bpl.n	8001820 <__aeabi_dmul+0x288>
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <__aeabi_dmul+0x39c>)
 800181a:	00c9      	lsls	r1, r1, #3
 800181c:	4014      	ands	r4, r2
 800181e:	4461      	add	r1, ip
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <__aeabi_dmul+0x3a0>)
 8001822:	4291      	cmp	r1, r2
 8001824:	dd00      	ble.n	8001828 <__aeabi_dmul+0x290>
 8001826:	e726      	b.n	8001676 <__aeabi_dmul+0xde>
 8001828:	0762      	lsls	r2, r4, #29
 800182a:	08ed      	lsrs	r5, r5, #3
 800182c:	0264      	lsls	r4, r4, #9
 800182e:	0549      	lsls	r1, r1, #21
 8001830:	4315      	orrs	r5, r2
 8001832:	0b24      	lsrs	r4, r4, #12
 8001834:	0d4a      	lsrs	r2, r1, #21
 8001836:	e710      	b.n	800165a <__aeabi_dmul+0xc2>
 8001838:	4652      	mov	r2, sl
 800183a:	4332      	orrs	r2, r6
 800183c:	d100      	bne.n	8001840 <__aeabi_dmul+0x2a8>
 800183e:	e07f      	b.n	8001940 <__aeabi_dmul+0x3a8>
 8001840:	2e00      	cmp	r6, #0
 8001842:	d100      	bne.n	8001846 <__aeabi_dmul+0x2ae>
 8001844:	e0dc      	b.n	8001a00 <__aeabi_dmul+0x468>
 8001846:	0030      	movs	r0, r6
 8001848:	f000 fdda 	bl	8002400 <__clzsi2>
 800184c:	0002      	movs	r2, r0
 800184e:	3a0b      	subs	r2, #11
 8001850:	231d      	movs	r3, #29
 8001852:	0001      	movs	r1, r0
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	4652      	mov	r2, sl
 8001858:	3908      	subs	r1, #8
 800185a:	40da      	lsrs	r2, r3
 800185c:	408e      	lsls	r6, r1
 800185e:	4316      	orrs	r6, r2
 8001860:	4652      	mov	r2, sl
 8001862:	408a      	lsls	r2, r1
 8001864:	9b00      	ldr	r3, [sp, #0]
 8001866:	4935      	ldr	r1, [pc, #212]	; (800193c <__aeabi_dmul+0x3a4>)
 8001868:	1a18      	subs	r0, r3, r0
 800186a:	0003      	movs	r3, r0
 800186c:	468c      	mov	ip, r1
 800186e:	4463      	add	r3, ip
 8001870:	2000      	movs	r0, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	e6d3      	b.n	800161e <__aeabi_dmul+0x86>
 8001876:	0025      	movs	r5, r4
 8001878:	4305      	orrs	r5, r0
 800187a:	d04a      	beq.n	8001912 <__aeabi_dmul+0x37a>
 800187c:	2c00      	cmp	r4, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_dmul+0x2ea>
 8001880:	e0b0      	b.n	80019e4 <__aeabi_dmul+0x44c>
 8001882:	0020      	movs	r0, r4
 8001884:	f000 fdbc 	bl	8002400 <__clzsi2>
 8001888:	0001      	movs	r1, r0
 800188a:	0002      	movs	r2, r0
 800188c:	390b      	subs	r1, #11
 800188e:	231d      	movs	r3, #29
 8001890:	0010      	movs	r0, r2
 8001892:	1a5b      	subs	r3, r3, r1
 8001894:	0031      	movs	r1, r6
 8001896:	0035      	movs	r5, r6
 8001898:	3808      	subs	r0, #8
 800189a:	4084      	lsls	r4, r0
 800189c:	40d9      	lsrs	r1, r3
 800189e:	4085      	lsls	r5, r0
 80018a0:	430c      	orrs	r4, r1
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <__aeabi_dmul+0x3a4>)
 80018a4:	1a83      	subs	r3, r0, r2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	4699      	mov	r9, r3
 80018ac:	469b      	mov	fp, r3
 80018ae:	e697      	b.n	80015e0 <__aeabi_dmul+0x48>
 80018b0:	0005      	movs	r5, r0
 80018b2:	4325      	orrs	r5, r4
 80018b4:	d126      	bne.n	8001904 <__aeabi_dmul+0x36c>
 80018b6:	2208      	movs	r2, #8
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2302      	movs	r3, #2
 80018bc:	2400      	movs	r4, #0
 80018be:	4691      	mov	r9, r2
 80018c0:	469b      	mov	fp, r3
 80018c2:	e68d      	b.n	80015e0 <__aeabi_dmul+0x48>
 80018c4:	4652      	mov	r2, sl
 80018c6:	9b00      	ldr	r3, [sp, #0]
 80018c8:	4332      	orrs	r2, r6
 80018ca:	d110      	bne.n	80018ee <__aeabi_dmul+0x356>
 80018cc:	4915      	ldr	r1, [pc, #84]	; (8001924 <__aeabi_dmul+0x38c>)
 80018ce:	2600      	movs	r6, #0
 80018d0:	468c      	mov	ip, r1
 80018d2:	4463      	add	r3, ip
 80018d4:	4649      	mov	r1, r9
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2302      	movs	r3, #2
 80018da:	4319      	orrs	r1, r3
 80018dc:	4689      	mov	r9, r1
 80018de:	2002      	movs	r0, #2
 80018e0:	e69d      	b.n	800161e <__aeabi_dmul+0x86>
 80018e2:	465b      	mov	r3, fp
 80018e4:	9701      	str	r7, [sp, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d000      	beq.n	80018ec <__aeabi_dmul+0x354>
 80018ea:	e6ad      	b.n	8001648 <__aeabi_dmul+0xb0>
 80018ec:	e6c3      	b.n	8001676 <__aeabi_dmul+0xde>
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <__aeabi_dmul+0x38c>)
 80018f0:	2003      	movs	r0, #3
 80018f2:	4694      	mov	ip, r2
 80018f4:	4463      	add	r3, ip
 80018f6:	464a      	mov	r2, r9
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2303      	movs	r3, #3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	4691      	mov	r9, r2
 8001900:	4652      	mov	r2, sl
 8001902:	e68c      	b.n	800161e <__aeabi_dmul+0x86>
 8001904:	220c      	movs	r2, #12
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2303      	movs	r3, #3
 800190a:	0005      	movs	r5, r0
 800190c:	4691      	mov	r9, r2
 800190e:	469b      	mov	fp, r3
 8001910:	e666      	b.n	80015e0 <__aeabi_dmul+0x48>
 8001912:	2304      	movs	r3, #4
 8001914:	4699      	mov	r9, r3
 8001916:	2300      	movs	r3, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	2400      	movs	r4, #0
 800191e:	469b      	mov	fp, r3
 8001920:	e65e      	b.n	80015e0 <__aeabi_dmul+0x48>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff
 8001928:	fffffc01 	.word	0xfffffc01
 800192c:	0800a618 	.word	0x0800a618
 8001930:	000003ff 	.word	0x000003ff
 8001934:	feffffff 	.word	0xfeffffff
 8001938:	000007fe 	.word	0x000007fe
 800193c:	fffffc0d 	.word	0xfffffc0d
 8001940:	4649      	mov	r1, r9
 8001942:	2301      	movs	r3, #1
 8001944:	4319      	orrs	r1, r3
 8001946:	4689      	mov	r9, r1
 8001948:	2600      	movs	r6, #0
 800194a:	2001      	movs	r0, #1
 800194c:	e667      	b.n	800161e <__aeabi_dmul+0x86>
 800194e:	2300      	movs	r3, #0
 8001950:	2480      	movs	r4, #128	; 0x80
 8001952:	2500      	movs	r5, #0
 8001954:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <__aeabi_dmul+0x4cc>)
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	0324      	lsls	r4, r4, #12
 800195a:	e67e      	b.n	800165a <__aeabi_dmul+0xc2>
 800195c:	2001      	movs	r0, #1
 800195e:	1a40      	subs	r0, r0, r1
 8001960:	2838      	cmp	r0, #56	; 0x38
 8001962:	dd00      	ble.n	8001966 <__aeabi_dmul+0x3ce>
 8001964:	e676      	b.n	8001654 <__aeabi_dmul+0xbc>
 8001966:	281f      	cmp	r0, #31
 8001968:	dd5b      	ble.n	8001a22 <__aeabi_dmul+0x48a>
 800196a:	221f      	movs	r2, #31
 800196c:	0023      	movs	r3, r4
 800196e:	4252      	negs	r2, r2
 8001970:	1a51      	subs	r1, r2, r1
 8001972:	40cb      	lsrs	r3, r1
 8001974:	0019      	movs	r1, r3
 8001976:	2820      	cmp	r0, #32
 8001978:	d003      	beq.n	8001982 <__aeabi_dmul+0x3ea>
 800197a:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <__aeabi_dmul+0x4d0>)
 800197c:	4462      	add	r2, ip
 800197e:	4094      	lsls	r4, r2
 8001980:	4325      	orrs	r5, r4
 8001982:	1e6a      	subs	r2, r5, #1
 8001984:	4195      	sbcs	r5, r2
 8001986:	002a      	movs	r2, r5
 8001988:	430a      	orrs	r2, r1
 800198a:	2107      	movs	r1, #7
 800198c:	000d      	movs	r5, r1
 800198e:	2400      	movs	r4, #0
 8001990:	4015      	ands	r5, r2
 8001992:	4211      	tst	r1, r2
 8001994:	d05b      	beq.n	8001a4e <__aeabi_dmul+0x4b6>
 8001996:	210f      	movs	r1, #15
 8001998:	2400      	movs	r4, #0
 800199a:	4011      	ands	r1, r2
 800199c:	2904      	cmp	r1, #4
 800199e:	d053      	beq.n	8001a48 <__aeabi_dmul+0x4b0>
 80019a0:	1d11      	adds	r1, r2, #4
 80019a2:	4291      	cmp	r1, r2
 80019a4:	4192      	sbcs	r2, r2
 80019a6:	4252      	negs	r2, r2
 80019a8:	18a4      	adds	r4, r4, r2
 80019aa:	000a      	movs	r2, r1
 80019ac:	0223      	lsls	r3, r4, #8
 80019ae:	d54b      	bpl.n	8001a48 <__aeabi_dmul+0x4b0>
 80019b0:	2201      	movs	r2, #1
 80019b2:	2400      	movs	r4, #0
 80019b4:	2500      	movs	r5, #0
 80019b6:	e650      	b.n	800165a <__aeabi_dmul+0xc2>
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	031b      	lsls	r3, r3, #12
 80019bc:	421c      	tst	r4, r3
 80019be:	d009      	beq.n	80019d4 <__aeabi_dmul+0x43c>
 80019c0:	421e      	tst	r6, r3
 80019c2:	d107      	bne.n	80019d4 <__aeabi_dmul+0x43c>
 80019c4:	4333      	orrs	r3, r6
 80019c6:	031c      	lsls	r4, r3, #12
 80019c8:	4643      	mov	r3, r8
 80019ca:	0015      	movs	r5, r2
 80019cc:	0b24      	lsrs	r4, r4, #12
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <__aeabi_dmul+0x4cc>)
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	e642      	b.n	800165a <__aeabi_dmul+0xc2>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0312      	lsls	r2, r2, #12
 80019d8:	4314      	orrs	r4, r2
 80019da:	0324      	lsls	r4, r4, #12
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <__aeabi_dmul+0x4cc>)
 80019de:	0b24      	lsrs	r4, r4, #12
 80019e0:	9701      	str	r7, [sp, #4]
 80019e2:	e63a      	b.n	800165a <__aeabi_dmul+0xc2>
 80019e4:	f000 fd0c 	bl	8002400 <__clzsi2>
 80019e8:	0001      	movs	r1, r0
 80019ea:	0002      	movs	r2, r0
 80019ec:	3115      	adds	r1, #21
 80019ee:	3220      	adds	r2, #32
 80019f0:	291c      	cmp	r1, #28
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dmul+0x45e>
 80019f4:	e74b      	b.n	800188e <__aeabi_dmul+0x2f6>
 80019f6:	0034      	movs	r4, r6
 80019f8:	3808      	subs	r0, #8
 80019fa:	2500      	movs	r5, #0
 80019fc:	4084      	lsls	r4, r0
 80019fe:	e750      	b.n	80018a2 <__aeabi_dmul+0x30a>
 8001a00:	f000 fcfe 	bl	8002400 <__clzsi2>
 8001a04:	0003      	movs	r3, r0
 8001a06:	001a      	movs	r2, r3
 8001a08:	3215      	adds	r2, #21
 8001a0a:	3020      	adds	r0, #32
 8001a0c:	2a1c      	cmp	r2, #28
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_dmul+0x47a>
 8001a10:	e71e      	b.n	8001850 <__aeabi_dmul+0x2b8>
 8001a12:	4656      	mov	r6, sl
 8001a14:	3b08      	subs	r3, #8
 8001a16:	2200      	movs	r2, #0
 8001a18:	409e      	lsls	r6, r3
 8001a1a:	e723      	b.n	8001864 <__aeabi_dmul+0x2cc>
 8001a1c:	9b00      	ldr	r3, [sp, #0]
 8001a1e:	469c      	mov	ip, r3
 8001a20:	e6e6      	b.n	80017f0 <__aeabi_dmul+0x258>
 8001a22:	4912      	ldr	r1, [pc, #72]	; (8001a6c <__aeabi_dmul+0x4d4>)
 8001a24:	0022      	movs	r2, r4
 8001a26:	4461      	add	r1, ip
 8001a28:	002e      	movs	r6, r5
 8001a2a:	408d      	lsls	r5, r1
 8001a2c:	408a      	lsls	r2, r1
 8001a2e:	40c6      	lsrs	r6, r0
 8001a30:	1e69      	subs	r1, r5, #1
 8001a32:	418d      	sbcs	r5, r1
 8001a34:	4332      	orrs	r2, r6
 8001a36:	432a      	orrs	r2, r5
 8001a38:	40c4      	lsrs	r4, r0
 8001a3a:	0753      	lsls	r3, r2, #29
 8001a3c:	d0b6      	beq.n	80019ac <__aeabi_dmul+0x414>
 8001a3e:	210f      	movs	r1, #15
 8001a40:	4011      	ands	r1, r2
 8001a42:	2904      	cmp	r1, #4
 8001a44:	d1ac      	bne.n	80019a0 <__aeabi_dmul+0x408>
 8001a46:	e7b1      	b.n	80019ac <__aeabi_dmul+0x414>
 8001a48:	0765      	lsls	r5, r4, #29
 8001a4a:	0264      	lsls	r4, r4, #9
 8001a4c:	0b24      	lsrs	r4, r4, #12
 8001a4e:	08d2      	lsrs	r2, r2, #3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2200      	movs	r2, #0
 8001a54:	e601      	b.n	800165a <__aeabi_dmul+0xc2>
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	0312      	lsls	r2, r2, #12
 8001a5a:	4314      	orrs	r4, r2
 8001a5c:	0324      	lsls	r4, r4, #12
 8001a5e:	4a01      	ldr	r2, [pc, #4]	; (8001a64 <__aeabi_dmul+0x4cc>)
 8001a60:	0b24      	lsrs	r4, r4, #12
 8001a62:	e5fa      	b.n	800165a <__aeabi_dmul+0xc2>
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	0000043e 	.word	0x0000043e
 8001a6c:	0000041e 	.word	0x0000041e

08001a70 <__aeabi_dsub>:
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	4645      	mov	r5, r8
 8001a78:	46de      	mov	lr, fp
 8001a7a:	b5e0      	push	{r5, r6, r7, lr}
 8001a7c:	001e      	movs	r6, r3
 8001a7e:	0017      	movs	r7, r2
 8001a80:	004a      	lsls	r2, r1, #1
 8001a82:	030b      	lsls	r3, r1, #12
 8001a84:	0d52      	lsrs	r2, r2, #21
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	4690      	mov	r8, r2
 8001a8a:	0f42      	lsrs	r2, r0, #29
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	0fcd      	lsrs	r5, r1, #31
 8001a90:	4ccd      	ldr	r4, [pc, #820]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001a92:	0331      	lsls	r1, r6, #12
 8001a94:	00c3      	lsls	r3, r0, #3
 8001a96:	4694      	mov	ip, r2
 8001a98:	0070      	lsls	r0, r6, #1
 8001a9a:	0f7a      	lsrs	r2, r7, #29
 8001a9c:	0a49      	lsrs	r1, r1, #9
 8001a9e:	00ff      	lsls	r7, r7, #3
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	46b9      	mov	r9, r7
 8001aa4:	0d40      	lsrs	r0, r0, #21
 8001aa6:	0ff6      	lsrs	r6, r6, #31
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	42a0      	cmp	r0, r4
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x40>
 8001aae:	e0b1      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4056      	eors	r6, r2
 8001ab4:	46b3      	mov	fp, r6
 8001ab6:	42b5      	cmp	r5, r6
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x4c>
 8001aba:	e088      	b.n	8001bce <__aeabi_dsub+0x15e>
 8001abc:	4642      	mov	r2, r8
 8001abe:	1a12      	subs	r2, r2, r0
 8001ac0:	2a00      	cmp	r2, #0
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_dsub+0x56>
 8001ac4:	e0ae      	b.n	8001c24 <__aeabi_dsub+0x1b4>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x5c>
 8001aca:	e0c1      	b.n	8001c50 <__aeabi_dsub+0x1e0>
 8001acc:	48be      	ldr	r0, [pc, #760]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001ace:	4580      	cmp	r8, r0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x64>
 8001ad2:	e151      	b.n	8001d78 <__aeabi_dsub+0x308>
 8001ad4:	2080      	movs	r0, #128	; 0x80
 8001ad6:	0400      	lsls	r0, r0, #16
 8001ad8:	4301      	orrs	r1, r0
 8001ada:	2a38      	cmp	r2, #56	; 0x38
 8001adc:	dd00      	ble.n	8001ae0 <__aeabi_dsub+0x70>
 8001ade:	e17b      	b.n	8001dd8 <__aeabi_dsub+0x368>
 8001ae0:	2a1f      	cmp	r2, #31
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dsub+0x76>
 8001ae4:	e1ee      	b.n	8001ec4 <__aeabi_dsub+0x454>
 8001ae6:	2020      	movs	r0, #32
 8001ae8:	003e      	movs	r6, r7
 8001aea:	1a80      	subs	r0, r0, r2
 8001aec:	000c      	movs	r4, r1
 8001aee:	40d6      	lsrs	r6, r2
 8001af0:	40d1      	lsrs	r1, r2
 8001af2:	4087      	lsls	r7, r0
 8001af4:	4662      	mov	r2, ip
 8001af6:	4084      	lsls	r4, r0
 8001af8:	1a52      	subs	r2, r2, r1
 8001afa:	1e78      	subs	r0, r7, #1
 8001afc:	4187      	sbcs	r7, r0
 8001afe:	4694      	mov	ip, r2
 8001b00:	4334      	orrs	r4, r6
 8001b02:	4327      	orrs	r7, r4
 8001b04:	1bdc      	subs	r4, r3, r7
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	419b      	sbcs	r3, r3
 8001b0a:	4662      	mov	r2, ip
 8001b0c:	425b      	negs	r3, r3
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4699      	mov	r9, r3
 8001b12:	464b      	mov	r3, r9
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	d400      	bmi.n	8001b1a <__aeabi_dsub+0xaa>
 8001b18:	e118      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	0258      	lsls	r0, r3, #9
 8001b1e:	0a43      	lsrs	r3, r0, #9
 8001b20:	4699      	mov	r9, r3
 8001b22:	464b      	mov	r3, r9
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dsub+0xba>
 8001b28:	e137      	b.n	8001d9a <__aeabi_dsub+0x32a>
 8001b2a:	4648      	mov	r0, r9
 8001b2c:	f000 fc68 	bl	8002400 <__clzsi2>
 8001b30:	0001      	movs	r1, r0
 8001b32:	3908      	subs	r1, #8
 8001b34:	2320      	movs	r3, #32
 8001b36:	0022      	movs	r2, r4
 8001b38:	4648      	mov	r0, r9
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	40da      	lsrs	r2, r3
 8001b3e:	4088      	lsls	r0, r1
 8001b40:	408c      	lsls	r4, r1
 8001b42:	4643      	mov	r3, r8
 8001b44:	4310      	orrs	r0, r2
 8001b46:	4588      	cmp	r8, r1
 8001b48:	dd00      	ble.n	8001b4c <__aeabi_dsub+0xdc>
 8001b4a:	e136      	b.n	8001dba <__aeabi_dsub+0x34a>
 8001b4c:	1ac9      	subs	r1, r1, r3
 8001b4e:	1c4b      	adds	r3, r1, #1
 8001b50:	2b1f      	cmp	r3, #31
 8001b52:	dd00      	ble.n	8001b56 <__aeabi_dsub+0xe6>
 8001b54:	e0ea      	b.n	8001d2c <__aeabi_dsub+0x2bc>
 8001b56:	2220      	movs	r2, #32
 8001b58:	0026      	movs	r6, r4
 8001b5a:	1ad2      	subs	r2, r2, r3
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	4094      	lsls	r4, r2
 8001b60:	40de      	lsrs	r6, r3
 8001b62:	40d8      	lsrs	r0, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	4091      	lsls	r1, r2
 8001b68:	1e62      	subs	r2, r4, #1
 8001b6a:	4194      	sbcs	r4, r2
 8001b6c:	4681      	mov	r9, r0
 8001b6e:	4698      	mov	r8, r3
 8001b70:	4331      	orrs	r1, r6
 8001b72:	430c      	orrs	r4, r1
 8001b74:	0763      	lsls	r3, r4, #29
 8001b76:	d009      	beq.n	8001b8c <__aeabi_dsub+0x11c>
 8001b78:	230f      	movs	r3, #15
 8001b7a:	4023      	ands	r3, r4
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d005      	beq.n	8001b8c <__aeabi_dsub+0x11c>
 8001b80:	1d23      	adds	r3, r4, #4
 8001b82:	42a3      	cmp	r3, r4
 8001b84:	41a4      	sbcs	r4, r4
 8001b86:	4264      	negs	r4, r4
 8001b88:	44a1      	add	r9, r4
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	464b      	mov	r3, r9
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	d400      	bmi.n	8001b94 <__aeabi_dsub+0x124>
 8001b92:	e0de      	b.n	8001d52 <__aeabi_dsub+0x2e2>
 8001b94:	4641      	mov	r1, r8
 8001b96:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001b98:	3101      	adds	r1, #1
 8001b9a:	4299      	cmp	r1, r3
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x130>
 8001b9e:	e0e7      	b.n	8001d70 <__aeabi_dsub+0x300>
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	488a      	ldr	r0, [pc, #552]	; (8001dcc <__aeabi_dsub+0x35c>)
 8001ba4:	08e4      	lsrs	r4, r4, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	0018      	movs	r0, r3
 8001baa:	0549      	lsls	r1, r1, #21
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	0240      	lsls	r0, r0, #9
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	0d4a      	lsrs	r2, r1, #21
 8001bb4:	0b04      	lsrs	r4, r0, #12
 8001bb6:	0512      	lsls	r2, r2, #20
 8001bb8:	07ed      	lsls	r5, r5, #31
 8001bba:	4322      	orrs	r2, r4
 8001bbc:	432a      	orrs	r2, r5
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc4:	46bb      	mov	fp, r7
 8001bc6:	46b2      	mov	sl, r6
 8001bc8:	46a9      	mov	r9, r5
 8001bca:	46a0      	mov	r8, r4
 8001bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bce:	4642      	mov	r2, r8
 8001bd0:	1a12      	subs	r2, r2, r0
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	dd52      	ble.n	8001c7c <__aeabi_dsub+0x20c>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x16c>
 8001bda:	e09c      	b.n	8001d16 <__aeabi_dsub+0x2a6>
 8001bdc:	45a0      	cmp	r8, r4
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x172>
 8001be0:	e0ca      	b.n	8001d78 <__aeabi_dsub+0x308>
 8001be2:	2080      	movs	r0, #128	; 0x80
 8001be4:	0400      	lsls	r0, r0, #16
 8001be6:	4301      	orrs	r1, r0
 8001be8:	2a38      	cmp	r2, #56	; 0x38
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dsub+0x17e>
 8001bec:	e149      	b.n	8001e82 <__aeabi_dsub+0x412>
 8001bee:	2a1f      	cmp	r2, #31
 8001bf0:	dc00      	bgt.n	8001bf4 <__aeabi_dsub+0x184>
 8001bf2:	e197      	b.n	8001f24 <__aeabi_dsub+0x4b4>
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	000e      	movs	r6, r1
 8001bf8:	3820      	subs	r0, #32
 8001bfa:	40c6      	lsrs	r6, r0
 8001bfc:	2a20      	cmp	r2, #32
 8001bfe:	d004      	beq.n	8001c0a <__aeabi_dsub+0x19a>
 8001c00:	2040      	movs	r0, #64	; 0x40
 8001c02:	1a82      	subs	r2, r0, r2
 8001c04:	4091      	lsls	r1, r2
 8001c06:	430f      	orrs	r7, r1
 8001c08:	46b9      	mov	r9, r7
 8001c0a:	464c      	mov	r4, r9
 8001c0c:	1e62      	subs	r2, r4, #1
 8001c0e:	4194      	sbcs	r4, r2
 8001c10:	4334      	orrs	r4, r6
 8001c12:	e13a      	b.n	8001e8a <__aeabi_dsub+0x41a>
 8001c14:	000a      	movs	r2, r1
 8001c16:	433a      	orrs	r2, r7
 8001c18:	d028      	beq.n	8001c6c <__aeabi_dsub+0x1fc>
 8001c1a:	46b3      	mov	fp, r6
 8001c1c:	42b5      	cmp	r5, r6
 8001c1e:	d02b      	beq.n	8001c78 <__aeabi_dsub+0x208>
 8001c20:	4a6b      	ldr	r2, [pc, #428]	; (8001dd0 <__aeabi_dsub+0x360>)
 8001c22:	4442      	add	r2, r8
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d05d      	beq.n	8001ce4 <__aeabi_dsub+0x274>
 8001c28:	4642      	mov	r2, r8
 8001c2a:	4644      	mov	r4, r8
 8001c2c:	1a82      	subs	r2, r0, r2
 8001c2e:	2c00      	cmp	r4, #0
 8001c30:	d000      	beq.n	8001c34 <__aeabi_dsub+0x1c4>
 8001c32:	e0f5      	b.n	8001e20 <__aeabi_dsub+0x3b0>
 8001c34:	4665      	mov	r5, ip
 8001c36:	431d      	orrs	r5, r3
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x1cc>
 8001c3a:	e19c      	b.n	8001f76 <__aeabi_dsub+0x506>
 8001c3c:	1e55      	subs	r5, r2, #1
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x1d4>
 8001c42:	e1fb      	b.n	800203c <__aeabi_dsub+0x5cc>
 8001c44:	4c60      	ldr	r4, [pc, #384]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001c46:	42a2      	cmp	r2, r4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_dsub+0x1dc>
 8001c4a:	e1bd      	b.n	8001fc8 <__aeabi_dsub+0x558>
 8001c4c:	002a      	movs	r2, r5
 8001c4e:	e0f0      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001c50:	0008      	movs	r0, r1
 8001c52:	4338      	orrs	r0, r7
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x1e8>
 8001c56:	e0c3      	b.n	8001de0 <__aeabi_dsub+0x370>
 8001c58:	1e50      	subs	r0, r2, #1
 8001c5a:	2a01      	cmp	r2, #1
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1f0>
 8001c5e:	e1a8      	b.n	8001fb2 <__aeabi_dsub+0x542>
 8001c60:	4c59      	ldr	r4, [pc, #356]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001c62:	42a2      	cmp	r2, r4
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1f8>
 8001c66:	e087      	b.n	8001d78 <__aeabi_dsub+0x308>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	e736      	b.n	8001ada <__aeabi_dsub+0x6a>
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4056      	eors	r6, r2
 8001c70:	46b3      	mov	fp, r6
 8001c72:	42b5      	cmp	r5, r6
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dsub+0x208>
 8001c76:	e721      	b.n	8001abc <__aeabi_dsub+0x4c>
 8001c78:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <__aeabi_dsub+0x360>)
 8001c7a:	4442      	add	r2, r8
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x212>
 8001c80:	e0b5      	b.n	8001dee <__aeabi_dsub+0x37e>
 8001c82:	4642      	mov	r2, r8
 8001c84:	4644      	mov	r4, r8
 8001c86:	1a82      	subs	r2, r0, r2
 8001c88:	2c00      	cmp	r4, #0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x21e>
 8001c8c:	e138      	b.n	8001f00 <__aeabi_dsub+0x490>
 8001c8e:	4e4e      	ldr	r6, [pc, #312]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001c90:	42b0      	cmp	r0, r6
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x226>
 8001c94:	e1de      	b.n	8002054 <__aeabi_dsub+0x5e4>
 8001c96:	2680      	movs	r6, #128	; 0x80
 8001c98:	4664      	mov	r4, ip
 8001c9a:	0436      	lsls	r6, r6, #16
 8001c9c:	4334      	orrs	r4, r6
 8001c9e:	46a4      	mov	ip, r4
 8001ca0:	2a38      	cmp	r2, #56	; 0x38
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_dsub+0x236>
 8001ca4:	e196      	b.n	8001fd4 <__aeabi_dsub+0x564>
 8001ca6:	2a1f      	cmp	r2, #31
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0x23c>
 8001caa:	e224      	b.n	80020f6 <__aeabi_dsub+0x686>
 8001cac:	2620      	movs	r6, #32
 8001cae:	1ab4      	subs	r4, r6, r2
 8001cb0:	46a2      	mov	sl, r4
 8001cb2:	4664      	mov	r4, ip
 8001cb4:	4656      	mov	r6, sl
 8001cb6:	40b4      	lsls	r4, r6
 8001cb8:	46a1      	mov	r9, r4
 8001cba:	001c      	movs	r4, r3
 8001cbc:	464e      	mov	r6, r9
 8001cbe:	40d4      	lsrs	r4, r2
 8001cc0:	4326      	orrs	r6, r4
 8001cc2:	0034      	movs	r4, r6
 8001cc4:	4656      	mov	r6, sl
 8001cc6:	40b3      	lsls	r3, r6
 8001cc8:	1e5e      	subs	r6, r3, #1
 8001cca:	41b3      	sbcs	r3, r6
 8001ccc:	431c      	orrs	r4, r3
 8001cce:	4663      	mov	r3, ip
 8001cd0:	40d3      	lsrs	r3, r2
 8001cd2:	18c9      	adds	r1, r1, r3
 8001cd4:	19e4      	adds	r4, r4, r7
 8001cd6:	42bc      	cmp	r4, r7
 8001cd8:	41bf      	sbcs	r7, r7
 8001cda:	427f      	negs	r7, r7
 8001cdc:	46b9      	mov	r9, r7
 8001cde:	4680      	mov	r8, r0
 8001ce0:	4489      	add	r9, r1
 8001ce2:	e0d8      	b.n	8001e96 <__aeabi_dsub+0x426>
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	4c3b      	ldr	r4, [pc, #236]	; (8001dd4 <__aeabi_dsub+0x364>)
 8001ce8:	3001      	adds	r0, #1
 8001cea:	4220      	tst	r0, r4
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_dsub+0x280>
 8001cee:	e0b4      	b.n	8001e5a <__aeabi_dsub+0x3ea>
 8001cf0:	4640      	mov	r0, r8
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x288>
 8001cf6:	e144      	b.n	8001f82 <__aeabi_dsub+0x512>
 8001cf8:	4660      	mov	r0, ip
 8001cfa:	4318      	orrs	r0, r3
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x290>
 8001cfe:	e190      	b.n	8002022 <__aeabi_dsub+0x5b2>
 8001d00:	0008      	movs	r0, r1
 8001d02:	4338      	orrs	r0, r7
 8001d04:	d000      	beq.n	8001d08 <__aeabi_dsub+0x298>
 8001d06:	e1aa      	b.n	800205e <__aeabi_dsub+0x5ee>
 8001d08:	4661      	mov	r1, ip
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	0749      	lsls	r1, r1, #29
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	4661      	mov	r1, ip
 8001d12:	08cc      	lsrs	r4, r1, #3
 8001d14:	e027      	b.n	8001d66 <__aeabi_dsub+0x2f6>
 8001d16:	0008      	movs	r0, r1
 8001d18:	4338      	orrs	r0, r7
 8001d1a:	d061      	beq.n	8001de0 <__aeabi_dsub+0x370>
 8001d1c:	1e50      	subs	r0, r2, #1
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x2b4>
 8001d22:	e139      	b.n	8001f98 <__aeabi_dsub+0x528>
 8001d24:	42a2      	cmp	r2, r4
 8001d26:	d027      	beq.n	8001d78 <__aeabi_dsub+0x308>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	e75d      	b.n	8001be8 <__aeabi_dsub+0x178>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	391f      	subs	r1, #31
 8001d30:	40ca      	lsrs	r2, r1
 8001d32:	0011      	movs	r1, r2
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d003      	beq.n	8001d40 <__aeabi_dsub+0x2d0>
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4098      	lsls	r0, r3
 8001d3e:	4304      	orrs	r4, r0
 8001d40:	1e63      	subs	r3, r4, #1
 8001d42:	419c      	sbcs	r4, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	4699      	mov	r9, r3
 8001d48:	4698      	mov	r8, r3
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	0763      	lsls	r3, r4, #29
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x2e2>
 8001d50:	e712      	b.n	8001b78 <__aeabi_dsub+0x108>
 8001d52:	464b      	mov	r3, r9
 8001d54:	464a      	mov	r2, r9
 8001d56:	08e4      	lsrs	r4, r4, #3
 8001d58:	075b      	lsls	r3, r3, #29
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	08d4      	lsrs	r4, r2, #3
 8001d5e:	4642      	mov	r2, r8
 8001d60:	4919      	ldr	r1, [pc, #100]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001d62:	428a      	cmp	r2, r1
 8001d64:	d00e      	beq.n	8001d84 <__aeabi_dsub+0x314>
 8001d66:	0324      	lsls	r4, r4, #12
 8001d68:	0552      	lsls	r2, r2, #21
 8001d6a:	0b24      	lsrs	r4, r4, #12
 8001d6c:	0d52      	lsrs	r2, r2, #21
 8001d6e:	e722      	b.n	8001bb6 <__aeabi_dsub+0x146>
 8001d70:	000a      	movs	r2, r1
 8001d72:	2400      	movs	r4, #0
 8001d74:	2300      	movs	r3, #0
 8001d76:	e71e      	b.n	8001bb6 <__aeabi_dsub+0x146>
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	4662      	mov	r2, ip
 8001d7c:	0752      	lsls	r2, r2, #29
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4662      	mov	r2, ip
 8001d82:	08d4      	lsrs	r4, r2, #3
 8001d84:	001a      	movs	r2, r3
 8001d86:	4322      	orrs	r2, r4
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x31c>
 8001d8a:	e1fc      	b.n	8002186 <__aeabi_dsub+0x716>
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0312      	lsls	r2, r2, #12
 8001d90:	4314      	orrs	r4, r2
 8001d92:	0324      	lsls	r4, r4, #12
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <__aeabi_dsub+0x358>)
 8001d96:	0b24      	lsrs	r4, r4, #12
 8001d98:	e70d      	b.n	8001bb6 <__aeabi_dsub+0x146>
 8001d9a:	0020      	movs	r0, r4
 8001d9c:	f000 fb30 	bl	8002400 <__clzsi2>
 8001da0:	0001      	movs	r1, r0
 8001da2:	3118      	adds	r1, #24
 8001da4:	291f      	cmp	r1, #31
 8001da6:	dc00      	bgt.n	8001daa <__aeabi_dsub+0x33a>
 8001da8:	e6c4      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001daa:	3808      	subs	r0, #8
 8001dac:	4084      	lsls	r4, r0
 8001dae:	4643      	mov	r3, r8
 8001db0:	0020      	movs	r0, r4
 8001db2:	2400      	movs	r4, #0
 8001db4:	4588      	cmp	r8, r1
 8001db6:	dc00      	bgt.n	8001dba <__aeabi_dsub+0x34a>
 8001db8:	e6c8      	b.n	8001b4c <__aeabi_dsub+0xdc>
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__aeabi_dsub+0x35c>)
 8001dbc:	1a5b      	subs	r3, r3, r1
 8001dbe:	4010      	ands	r0, r2
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	4681      	mov	r9, r0
 8001dc4:	e6d6      	b.n	8001b74 <__aeabi_dsub+0x104>
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	000007ff 	.word	0x000007ff
 8001dcc:	ff7fffff 	.word	0xff7fffff
 8001dd0:	fffff801 	.word	0xfffff801
 8001dd4:	000007fe 	.word	0x000007fe
 8001dd8:	430f      	orrs	r7, r1
 8001dda:	1e7a      	subs	r2, r7, #1
 8001ddc:	4197      	sbcs	r7, r2
 8001dde:	e691      	b.n	8001b04 <__aeabi_dsub+0x94>
 8001de0:	4661      	mov	r1, ip
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0749      	lsls	r1, r1, #29
 8001de6:	430b      	orrs	r3, r1
 8001de8:	4661      	mov	r1, ip
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e7b8      	b.n	8001d60 <__aeabi_dsub+0x2f0>
 8001dee:	4640      	mov	r0, r8
 8001df0:	4cd3      	ldr	r4, [pc, #844]	; (8002140 <__aeabi_dsub+0x6d0>)
 8001df2:	3001      	adds	r0, #1
 8001df4:	4220      	tst	r0, r4
 8001df6:	d000      	beq.n	8001dfa <__aeabi_dsub+0x38a>
 8001df8:	e0a2      	b.n	8001f40 <__aeabi_dsub+0x4d0>
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_dsub+0x392>
 8001e00:	e101      	b.n	8002006 <__aeabi_dsub+0x596>
 8001e02:	4660      	mov	r0, ip
 8001e04:	4318      	orrs	r0, r3
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x39a>
 8001e08:	e15e      	b.n	80020c8 <__aeabi_dsub+0x658>
 8001e0a:	0008      	movs	r0, r1
 8001e0c:	4338      	orrs	r0, r7
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x3a2>
 8001e10:	e15f      	b.n	80020d2 <__aeabi_dsub+0x662>
 8001e12:	4661      	mov	r1, ip
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	0749      	lsls	r1, r1, #29
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	4661      	mov	r1, ip
 8001e1c:	08cc      	lsrs	r4, r1, #3
 8001e1e:	e7a2      	b.n	8001d66 <__aeabi_dsub+0x2f6>
 8001e20:	4dc8      	ldr	r5, [pc, #800]	; (8002144 <__aeabi_dsub+0x6d4>)
 8001e22:	42a8      	cmp	r0, r5
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3b8>
 8001e26:	e0cf      	b.n	8001fc8 <__aeabi_dsub+0x558>
 8001e28:	2580      	movs	r5, #128	; 0x80
 8001e2a:	4664      	mov	r4, ip
 8001e2c:	042d      	lsls	r5, r5, #16
 8001e2e:	432c      	orrs	r4, r5
 8001e30:	46a4      	mov	ip, r4
 8001e32:	2a38      	cmp	r2, #56	; 0x38
 8001e34:	dc56      	bgt.n	8001ee4 <__aeabi_dsub+0x474>
 8001e36:	2a1f      	cmp	r2, #31
 8001e38:	dd00      	ble.n	8001e3c <__aeabi_dsub+0x3cc>
 8001e3a:	e0d1      	b.n	8001fe0 <__aeabi_dsub+0x570>
 8001e3c:	2520      	movs	r5, #32
 8001e3e:	001e      	movs	r6, r3
 8001e40:	1aad      	subs	r5, r5, r2
 8001e42:	4664      	mov	r4, ip
 8001e44:	40ab      	lsls	r3, r5
 8001e46:	40ac      	lsls	r4, r5
 8001e48:	40d6      	lsrs	r6, r2
 8001e4a:	1e5d      	subs	r5, r3, #1
 8001e4c:	41ab      	sbcs	r3, r5
 8001e4e:	4334      	orrs	r4, r6
 8001e50:	4323      	orrs	r3, r4
 8001e52:	4664      	mov	r4, ip
 8001e54:	40d4      	lsrs	r4, r2
 8001e56:	1b09      	subs	r1, r1, r4
 8001e58:	e049      	b.n	8001eee <__aeabi_dsub+0x47e>
 8001e5a:	4660      	mov	r0, ip
 8001e5c:	1bdc      	subs	r4, r3, r7
 8001e5e:	1a46      	subs	r6, r0, r1
 8001e60:	42a3      	cmp	r3, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	4240      	negs	r0, r0
 8001e66:	4681      	mov	r9, r0
 8001e68:	0030      	movs	r0, r6
 8001e6a:	464e      	mov	r6, r9
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	4681      	mov	r9, r0
 8001e70:	0200      	lsls	r0, r0, #8
 8001e72:	d476      	bmi.n	8001f62 <__aeabi_dsub+0x4f2>
 8001e74:	464b      	mov	r3, r9
 8001e76:	4323      	orrs	r3, r4
 8001e78:	d000      	beq.n	8001e7c <__aeabi_dsub+0x40c>
 8001e7a:	e652      	b.n	8001b22 <__aeabi_dsub+0xb2>
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2500      	movs	r5, #0
 8001e80:	e771      	b.n	8001d66 <__aeabi_dsub+0x2f6>
 8001e82:	4339      	orrs	r1, r7
 8001e84:	000c      	movs	r4, r1
 8001e86:	1e62      	subs	r2, r4, #1
 8001e88:	4194      	sbcs	r4, r2
 8001e8a:	18e4      	adds	r4, r4, r3
 8001e8c:	429c      	cmp	r4, r3
 8001e8e:	419b      	sbcs	r3, r3
 8001e90:	425b      	negs	r3, r3
 8001e92:	4463      	add	r3, ip
 8001e94:	4699      	mov	r9, r3
 8001e96:	464b      	mov	r3, r9
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	d400      	bmi.n	8001e9e <__aeabi_dsub+0x42e>
 8001e9c:	e756      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	469c      	mov	ip, r3
 8001ea2:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <__aeabi_dsub+0x6d4>)
 8001ea4:	44e0      	add	r8, ip
 8001ea6:	4598      	cmp	r8, r3
 8001ea8:	d038      	beq.n	8001f1c <__aeabi_dsub+0x4ac>
 8001eaa:	464b      	mov	r3, r9
 8001eac:	48a6      	ldr	r0, [pc, #664]	; (8002148 <__aeabi_dsub+0x6d8>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4003      	ands	r3, r0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	0863      	lsrs	r3, r4, #1
 8001eb6:	4014      	ands	r4, r2
 8001eb8:	431c      	orrs	r4, r3
 8001eba:	07c3      	lsls	r3, r0, #31
 8001ebc:	431c      	orrs	r4, r3
 8001ebe:	0843      	lsrs	r3, r0, #1
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	e657      	b.n	8001b74 <__aeabi_dsub+0x104>
 8001ec4:	0010      	movs	r0, r2
 8001ec6:	000e      	movs	r6, r1
 8001ec8:	3820      	subs	r0, #32
 8001eca:	40c6      	lsrs	r6, r0
 8001ecc:	2a20      	cmp	r2, #32
 8001ece:	d004      	beq.n	8001eda <__aeabi_dsub+0x46a>
 8001ed0:	2040      	movs	r0, #64	; 0x40
 8001ed2:	1a82      	subs	r2, r0, r2
 8001ed4:	4091      	lsls	r1, r2
 8001ed6:	430f      	orrs	r7, r1
 8001ed8:	46b9      	mov	r9, r7
 8001eda:	464f      	mov	r7, r9
 8001edc:	1e7a      	subs	r2, r7, #1
 8001ede:	4197      	sbcs	r7, r2
 8001ee0:	4337      	orrs	r7, r6
 8001ee2:	e60f      	b.n	8001b04 <__aeabi_dsub+0x94>
 8001ee4:	4662      	mov	r2, ip
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	4193      	sbcs	r3, r2
 8001eee:	1afc      	subs	r4, r7, r3
 8001ef0:	42a7      	cmp	r7, r4
 8001ef2:	41bf      	sbcs	r7, r7
 8001ef4:	427f      	negs	r7, r7
 8001ef6:	1bcb      	subs	r3, r1, r7
 8001ef8:	4699      	mov	r9, r3
 8001efa:	465d      	mov	r5, fp
 8001efc:	4680      	mov	r8, r0
 8001efe:	e608      	b.n	8001b12 <__aeabi_dsub+0xa2>
 8001f00:	4666      	mov	r6, ip
 8001f02:	431e      	orrs	r6, r3
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x498>
 8001f06:	e0be      	b.n	8002086 <__aeabi_dsub+0x616>
 8001f08:	1e56      	subs	r6, r2, #1
 8001f0a:	2a01      	cmp	r2, #1
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x4a0>
 8001f0e:	e109      	b.n	8002124 <__aeabi_dsub+0x6b4>
 8001f10:	4c8c      	ldr	r4, [pc, #560]	; (8002144 <__aeabi_dsub+0x6d4>)
 8001f12:	42a2      	cmp	r2, r4
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x4a8>
 8001f16:	e119      	b.n	800214c <__aeabi_dsub+0x6dc>
 8001f18:	0032      	movs	r2, r6
 8001f1a:	e6c1      	b.n	8001ca0 <__aeabi_dsub+0x230>
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	2400      	movs	r4, #0
 8001f20:	2300      	movs	r3, #0
 8001f22:	e648      	b.n	8001bb6 <__aeabi_dsub+0x146>
 8001f24:	2020      	movs	r0, #32
 8001f26:	000c      	movs	r4, r1
 8001f28:	1a80      	subs	r0, r0, r2
 8001f2a:	003e      	movs	r6, r7
 8001f2c:	4087      	lsls	r7, r0
 8001f2e:	4084      	lsls	r4, r0
 8001f30:	40d6      	lsrs	r6, r2
 8001f32:	1e78      	subs	r0, r7, #1
 8001f34:	4187      	sbcs	r7, r0
 8001f36:	40d1      	lsrs	r1, r2
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	433c      	orrs	r4, r7
 8001f3c:	448c      	add	ip, r1
 8001f3e:	e7a4      	b.n	8001e8a <__aeabi_dsub+0x41a>
 8001f40:	4a80      	ldr	r2, [pc, #512]	; (8002144 <__aeabi_dsub+0x6d4>)
 8001f42:	4290      	cmp	r0, r2
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x4d8>
 8001f46:	e0e9      	b.n	800211c <__aeabi_dsub+0x6ac>
 8001f48:	19df      	adds	r7, r3, r7
 8001f4a:	429f      	cmp	r7, r3
 8001f4c:	419b      	sbcs	r3, r3
 8001f4e:	4461      	add	r1, ip
 8001f50:	425b      	negs	r3, r3
 8001f52:	18c9      	adds	r1, r1, r3
 8001f54:	07cc      	lsls	r4, r1, #31
 8001f56:	087f      	lsrs	r7, r7, #1
 8001f58:	084b      	lsrs	r3, r1, #1
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	433c      	orrs	r4, r7
 8001f60:	e6f4      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 8001f62:	1afc      	subs	r4, r7, r3
 8001f64:	42a7      	cmp	r7, r4
 8001f66:	41bf      	sbcs	r7, r7
 8001f68:	4663      	mov	r3, ip
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1ac9      	subs	r1, r1, r3
 8001f6e:	1bcb      	subs	r3, r1, r7
 8001f70:	4699      	mov	r9, r3
 8001f72:	465d      	mov	r5, fp
 8001f74:	e5d5      	b.n	8001b22 <__aeabi_dsub+0xb2>
 8001f76:	08ff      	lsrs	r7, r7, #3
 8001f78:	074b      	lsls	r3, r1, #29
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	433b      	orrs	r3, r7
 8001f7e:	08cc      	lsrs	r4, r1, #3
 8001f80:	e6ee      	b.n	8001d60 <__aeabi_dsub+0x2f0>
 8001f82:	4662      	mov	r2, ip
 8001f84:	431a      	orrs	r2, r3
 8001f86:	d000      	beq.n	8001f8a <__aeabi_dsub+0x51a>
 8001f88:	e082      	b.n	8002090 <__aeabi_dsub+0x620>
 8001f8a:	000b      	movs	r3, r1
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	d11b      	bne.n	8001fc8 <__aeabi_dsub+0x558>
 8001f90:	2480      	movs	r4, #128	; 0x80
 8001f92:	2500      	movs	r5, #0
 8001f94:	0324      	lsls	r4, r4, #12
 8001f96:	e6f9      	b.n	8001d8c <__aeabi_dsub+0x31c>
 8001f98:	19dc      	adds	r4, r3, r7
 8001f9a:	429c      	cmp	r4, r3
 8001f9c:	419b      	sbcs	r3, r3
 8001f9e:	4461      	add	r1, ip
 8001fa0:	4689      	mov	r9, r1
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	4499      	add	r9, r3
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	d444      	bmi.n	8002036 <__aeabi_dsub+0x5c6>
 8001fac:	2301      	movs	r3, #1
 8001fae:	4698      	mov	r8, r3
 8001fb0:	e6cc      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 8001fb2:	1bdc      	subs	r4, r3, r7
 8001fb4:	4662      	mov	r2, ip
 8001fb6:	42a3      	cmp	r3, r4
 8001fb8:	419b      	sbcs	r3, r3
 8001fba:	1a51      	subs	r1, r2, r1
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	1acb      	subs	r3, r1, r3
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4698      	mov	r8, r3
 8001fc6:	e5a4      	b.n	8001b12 <__aeabi_dsub+0xa2>
 8001fc8:	08ff      	lsrs	r7, r7, #3
 8001fca:	074b      	lsls	r3, r1, #29
 8001fcc:	465d      	mov	r5, fp
 8001fce:	433b      	orrs	r3, r7
 8001fd0:	08cc      	lsrs	r4, r1, #3
 8001fd2:	e6d7      	b.n	8001d84 <__aeabi_dsub+0x314>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	0014      	movs	r4, r2
 8001fda:	1e63      	subs	r3, r4, #1
 8001fdc:	419c      	sbcs	r4, r3
 8001fde:	e679      	b.n	8001cd4 <__aeabi_dsub+0x264>
 8001fe0:	0015      	movs	r5, r2
 8001fe2:	4664      	mov	r4, ip
 8001fe4:	3d20      	subs	r5, #32
 8001fe6:	40ec      	lsrs	r4, r5
 8001fe8:	46a0      	mov	r8, r4
 8001fea:	2a20      	cmp	r2, #32
 8001fec:	d005      	beq.n	8001ffa <__aeabi_dsub+0x58a>
 8001fee:	2540      	movs	r5, #64	; 0x40
 8001ff0:	4664      	mov	r4, ip
 8001ff2:	1aaa      	subs	r2, r5, r2
 8001ff4:	4094      	lsls	r4, r2
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	4654      	mov	r4, sl
 8001ffc:	1e63      	subs	r3, r4, #1
 8001ffe:	419c      	sbcs	r4, r3
 8002000:	4643      	mov	r3, r8
 8002002:	4323      	orrs	r3, r4
 8002004:	e773      	b.n	8001eee <__aeabi_dsub+0x47e>
 8002006:	4662      	mov	r2, ip
 8002008:	431a      	orrs	r2, r3
 800200a:	d023      	beq.n	8002054 <__aeabi_dsub+0x5e4>
 800200c:	000a      	movs	r2, r1
 800200e:	433a      	orrs	r2, r7
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x5a4>
 8002012:	e0a0      	b.n	8002156 <__aeabi_dsub+0x6e6>
 8002014:	4662      	mov	r2, ip
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	0752      	lsls	r2, r2, #29
 800201a:	4313      	orrs	r3, r2
 800201c:	4662      	mov	r2, ip
 800201e:	08d4      	lsrs	r4, r2, #3
 8002020:	e6b0      	b.n	8001d84 <__aeabi_dsub+0x314>
 8002022:	000b      	movs	r3, r1
 8002024:	433b      	orrs	r3, r7
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5ba>
 8002028:	e728      	b.n	8001e7c <__aeabi_dsub+0x40c>
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	074b      	lsls	r3, r1, #29
 800202e:	465d      	mov	r5, fp
 8002030:	433b      	orrs	r3, r7
 8002032:	08cc      	lsrs	r4, r1, #3
 8002034:	e697      	b.n	8001d66 <__aeabi_dsub+0x2f6>
 8002036:	2302      	movs	r3, #2
 8002038:	4698      	mov	r8, r3
 800203a:	e736      	b.n	8001eaa <__aeabi_dsub+0x43a>
 800203c:	1afc      	subs	r4, r7, r3
 800203e:	42a7      	cmp	r7, r4
 8002040:	41bf      	sbcs	r7, r7
 8002042:	4663      	mov	r3, ip
 8002044:	427f      	negs	r7, r7
 8002046:	1ac9      	subs	r1, r1, r3
 8002048:	1bcb      	subs	r3, r1, r7
 800204a:	4699      	mov	r9, r3
 800204c:	2301      	movs	r3, #1
 800204e:	465d      	mov	r5, fp
 8002050:	4698      	mov	r8, r3
 8002052:	e55e      	b.n	8001b12 <__aeabi_dsub+0xa2>
 8002054:	074b      	lsls	r3, r1, #29
 8002056:	08ff      	lsrs	r7, r7, #3
 8002058:	433b      	orrs	r3, r7
 800205a:	08cc      	lsrs	r4, r1, #3
 800205c:	e692      	b.n	8001d84 <__aeabi_dsub+0x314>
 800205e:	1bdc      	subs	r4, r3, r7
 8002060:	4660      	mov	r0, ip
 8002062:	42a3      	cmp	r3, r4
 8002064:	41b6      	sbcs	r6, r6
 8002066:	1a40      	subs	r0, r0, r1
 8002068:	4276      	negs	r6, r6
 800206a:	1b80      	subs	r0, r0, r6
 800206c:	4681      	mov	r9, r0
 800206e:	0200      	lsls	r0, r0, #8
 8002070:	d560      	bpl.n	8002134 <__aeabi_dsub+0x6c4>
 8002072:	1afc      	subs	r4, r7, r3
 8002074:	42a7      	cmp	r7, r4
 8002076:	41bf      	sbcs	r7, r7
 8002078:	4663      	mov	r3, ip
 800207a:	427f      	negs	r7, r7
 800207c:	1ac9      	subs	r1, r1, r3
 800207e:	1bcb      	subs	r3, r1, r7
 8002080:	4699      	mov	r9, r3
 8002082:	465d      	mov	r5, fp
 8002084:	e576      	b.n	8001b74 <__aeabi_dsub+0x104>
 8002086:	08ff      	lsrs	r7, r7, #3
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	433b      	orrs	r3, r7
 800208c:	08cc      	lsrs	r4, r1, #3
 800208e:	e667      	b.n	8001d60 <__aeabi_dsub+0x2f0>
 8002090:	000a      	movs	r2, r1
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	433a      	orrs	r2, r7
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x62a>
 8002098:	e66f      	b.n	8001d7a <__aeabi_dsub+0x30a>
 800209a:	4662      	mov	r2, ip
 800209c:	0752      	lsls	r2, r2, #29
 800209e:	4313      	orrs	r3, r2
 80020a0:	4662      	mov	r2, ip
 80020a2:	08d4      	lsrs	r4, r2, #3
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	0312      	lsls	r2, r2, #12
 80020a8:	4214      	tst	r4, r2
 80020aa:	d007      	beq.n	80020bc <__aeabi_dsub+0x64c>
 80020ac:	08c8      	lsrs	r0, r1, #3
 80020ae:	4210      	tst	r0, r2
 80020b0:	d104      	bne.n	80020bc <__aeabi_dsub+0x64c>
 80020b2:	465d      	mov	r5, fp
 80020b4:	0004      	movs	r4, r0
 80020b6:	08fb      	lsrs	r3, r7, #3
 80020b8:	0749      	lsls	r1, r1, #29
 80020ba:	430b      	orrs	r3, r1
 80020bc:	0f5a      	lsrs	r2, r3, #29
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	0752      	lsls	r2, r2, #29
 80020c4:	4313      	orrs	r3, r2
 80020c6:	e65d      	b.n	8001d84 <__aeabi_dsub+0x314>
 80020c8:	074b      	lsls	r3, r1, #29
 80020ca:	08ff      	lsrs	r7, r7, #3
 80020cc:	433b      	orrs	r3, r7
 80020ce:	08cc      	lsrs	r4, r1, #3
 80020d0:	e649      	b.n	8001d66 <__aeabi_dsub+0x2f6>
 80020d2:	19dc      	adds	r4, r3, r7
 80020d4:	429c      	cmp	r4, r3
 80020d6:	419b      	sbcs	r3, r3
 80020d8:	4461      	add	r1, ip
 80020da:	4689      	mov	r9, r1
 80020dc:	425b      	negs	r3, r3
 80020de:	4499      	add	r9, r3
 80020e0:	464b      	mov	r3, r9
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	d400      	bmi.n	80020e8 <__aeabi_dsub+0x678>
 80020e6:	e631      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 80020e8:	464a      	mov	r2, r9
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <__aeabi_dsub+0x6d8>)
 80020ec:	401a      	ands	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	4691      	mov	r9, r2
 80020f2:	4698      	mov	r8, r3
 80020f4:	e62a      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 80020f6:	0016      	movs	r6, r2
 80020f8:	4664      	mov	r4, ip
 80020fa:	3e20      	subs	r6, #32
 80020fc:	40f4      	lsrs	r4, r6
 80020fe:	46a0      	mov	r8, r4
 8002100:	2a20      	cmp	r2, #32
 8002102:	d005      	beq.n	8002110 <__aeabi_dsub+0x6a0>
 8002104:	2640      	movs	r6, #64	; 0x40
 8002106:	4664      	mov	r4, ip
 8002108:	1ab2      	subs	r2, r6, r2
 800210a:	4094      	lsls	r4, r2
 800210c:	4323      	orrs	r3, r4
 800210e:	469a      	mov	sl, r3
 8002110:	4654      	mov	r4, sl
 8002112:	1e63      	subs	r3, r4, #1
 8002114:	419c      	sbcs	r4, r3
 8002116:	4643      	mov	r3, r8
 8002118:	431c      	orrs	r4, r3
 800211a:	e5db      	b.n	8001cd4 <__aeabi_dsub+0x264>
 800211c:	0002      	movs	r2, r0
 800211e:	2400      	movs	r4, #0
 8002120:	2300      	movs	r3, #0
 8002122:	e548      	b.n	8001bb6 <__aeabi_dsub+0x146>
 8002124:	19dc      	adds	r4, r3, r7
 8002126:	42bc      	cmp	r4, r7
 8002128:	41bf      	sbcs	r7, r7
 800212a:	4461      	add	r1, ip
 800212c:	4689      	mov	r9, r1
 800212e:	427f      	negs	r7, r7
 8002130:	44b9      	add	r9, r7
 8002132:	e738      	b.n	8001fa6 <__aeabi_dsub+0x536>
 8002134:	464b      	mov	r3, r9
 8002136:	4323      	orrs	r3, r4
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x6cc>
 800213a:	e69f      	b.n	8001e7c <__aeabi_dsub+0x40c>
 800213c:	e606      	b.n	8001d4c <__aeabi_dsub+0x2dc>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	000007fe 	.word	0x000007fe
 8002144:	000007ff 	.word	0x000007ff
 8002148:	ff7fffff 	.word	0xff7fffff
 800214c:	08ff      	lsrs	r7, r7, #3
 800214e:	074b      	lsls	r3, r1, #29
 8002150:	433b      	orrs	r3, r7
 8002152:	08cc      	lsrs	r4, r1, #3
 8002154:	e616      	b.n	8001d84 <__aeabi_dsub+0x314>
 8002156:	4662      	mov	r2, ip
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	0752      	lsls	r2, r2, #29
 800215c:	4313      	orrs	r3, r2
 800215e:	4662      	mov	r2, ip
 8002160:	08d4      	lsrs	r4, r2, #3
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	4214      	tst	r4, r2
 8002168:	d007      	beq.n	800217a <__aeabi_dsub+0x70a>
 800216a:	08c8      	lsrs	r0, r1, #3
 800216c:	4210      	tst	r0, r2
 800216e:	d104      	bne.n	800217a <__aeabi_dsub+0x70a>
 8002170:	465d      	mov	r5, fp
 8002172:	0004      	movs	r4, r0
 8002174:	08fb      	lsrs	r3, r7, #3
 8002176:	0749      	lsls	r1, r1, #29
 8002178:	430b      	orrs	r3, r1
 800217a:	0f5a      	lsrs	r2, r3, #29
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	0752      	lsls	r2, r2, #29
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	4313      	orrs	r3, r2
 8002184:	e5fe      	b.n	8001d84 <__aeabi_dsub+0x314>
 8002186:	2300      	movs	r3, #0
 8002188:	4a01      	ldr	r2, [pc, #4]	; (8002190 <__aeabi_dsub+0x720>)
 800218a:	001c      	movs	r4, r3
 800218c:	e513      	b.n	8001bb6 <__aeabi_dsub+0x146>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff

08002194 <__aeabi_d2iz>:
 8002194:	000a      	movs	r2, r1
 8002196:	b530      	push	{r4, r5, lr}
 8002198:	4c13      	ldr	r4, [pc, #76]	; (80021e8 <__aeabi_d2iz+0x54>)
 800219a:	0053      	lsls	r3, r2, #1
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0005      	movs	r5, r0
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	2000      	movs	r0, #0
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	0fd2      	lsrs	r2, r2, #31
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	dd04      	ble.n	80021b6 <__aeabi_d2iz+0x22>
 80021ac:	480f      	ldr	r0, [pc, #60]	; (80021ec <__aeabi_d2iz+0x58>)
 80021ae:	4283      	cmp	r3, r0
 80021b0:	dd02      	ble.n	80021b8 <__aeabi_d2iz+0x24>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x5c>)
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	0340      	lsls	r0, r0, #13
 80021bc:	4301      	orrs	r1, r0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <__aeabi_d2iz+0x60>)
 80021c0:	1ac0      	subs	r0, r0, r3
 80021c2:	281f      	cmp	r0, #31
 80021c4:	dd08      	ble.n	80021d8 <__aeabi_d2iz+0x44>
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <__aeabi_d2iz+0x64>)
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	40d9      	lsrs	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	4258      	negs	r0, r3
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1f0      	bne.n	80021b6 <__aeabi_d2iz+0x22>
 80021d4:	0018      	movs	r0, r3
 80021d6:	e7ee      	b.n	80021b6 <__aeabi_d2iz+0x22>
 80021d8:	4c08      	ldr	r4, [pc, #32]	; (80021fc <__aeabi_d2iz+0x68>)
 80021da:	40c5      	lsrs	r5, r0
 80021dc:	46a4      	mov	ip, r4
 80021de:	4463      	add	r3, ip
 80021e0:	4099      	lsls	r1, r3
 80021e2:	000b      	movs	r3, r1
 80021e4:	432b      	orrs	r3, r5
 80021e6:	e7f2      	b.n	80021ce <__aeabi_d2iz+0x3a>
 80021e8:	000003fe 	.word	0x000003fe
 80021ec:	0000041d 	.word	0x0000041d
 80021f0:	7fffffff 	.word	0x7fffffff
 80021f4:	00000433 	.word	0x00000433
 80021f8:	00000413 	.word	0x00000413
 80021fc:	fffffbed 	.word	0xfffffbed

08002200 <__aeabi_i2d>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2800      	cmp	r0, #0
 8002204:	d016      	beq.n	8002234 <__aeabi_i2d+0x34>
 8002206:	17c3      	asrs	r3, r0, #31
 8002208:	18c5      	adds	r5, r0, r3
 800220a:	405d      	eors	r5, r3
 800220c:	0fc4      	lsrs	r4, r0, #31
 800220e:	0028      	movs	r0, r5
 8002210:	f000 f8f6 	bl	8002400 <__clzsi2>
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <__aeabi_i2d+0x5c>)
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	280a      	cmp	r0, #10
 800221a:	dc16      	bgt.n	800224a <__aeabi_i2d+0x4a>
 800221c:	0003      	movs	r3, r0
 800221e:	002e      	movs	r6, r5
 8002220:	3315      	adds	r3, #21
 8002222:	409e      	lsls	r6, r3
 8002224:	230b      	movs	r3, #11
 8002226:	1a18      	subs	r0, r3, r0
 8002228:	40c5      	lsrs	r5, r0
 800222a:	0552      	lsls	r2, r2, #21
 800222c:	032d      	lsls	r5, r5, #12
 800222e:	0b2d      	lsrs	r5, r5, #12
 8002230:	0d53      	lsrs	r3, r2, #21
 8002232:	e003      	b.n	800223c <__aeabi_i2d+0x3c>
 8002234:	2400      	movs	r4, #0
 8002236:	2300      	movs	r3, #0
 8002238:	2500      	movs	r5, #0
 800223a:	2600      	movs	r6, #0
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	432b      	orrs	r3, r5
 8002240:	07e4      	lsls	r4, r4, #31
 8002242:	4323      	orrs	r3, r4
 8002244:	0030      	movs	r0, r6
 8002246:	0019      	movs	r1, r3
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	380b      	subs	r0, #11
 800224c:	4085      	lsls	r5, r0
 800224e:	0552      	lsls	r2, r2, #21
 8002250:	032d      	lsls	r5, r5, #12
 8002252:	2600      	movs	r6, #0
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	0d53      	lsrs	r3, r2, #21
 8002258:	e7f0      	b.n	800223c <__aeabi_i2d+0x3c>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	0000041e 	.word	0x0000041e

08002260 <__aeabi_f2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	0043      	lsls	r3, r0, #1
 8002264:	0246      	lsls	r6, r0, #9
 8002266:	0fc4      	lsrs	r4, r0, #31
 8002268:	20fe      	movs	r0, #254	; 0xfe
 800226a:	0e1b      	lsrs	r3, r3, #24
 800226c:	1c59      	adds	r1, r3, #1
 800226e:	0a75      	lsrs	r5, r6, #9
 8002270:	4208      	tst	r0, r1
 8002272:	d00c      	beq.n	800228e <__aeabi_f2d+0x2e>
 8002274:	22e0      	movs	r2, #224	; 0xe0
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4694      	mov	ip, r2
 800227a:	076d      	lsls	r5, r5, #29
 800227c:	0b36      	lsrs	r6, r6, #12
 800227e:	4463      	add	r3, ip
 8002280:	051b      	lsls	r3, r3, #20
 8002282:	4333      	orrs	r3, r6
 8002284:	07e4      	lsls	r4, r4, #31
 8002286:	4323      	orrs	r3, r4
 8002288:	0028      	movs	r0, r5
 800228a:	0019      	movs	r1, r3
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	2b00      	cmp	r3, #0
 8002290:	d114      	bne.n	80022bc <__aeabi_f2d+0x5c>
 8002292:	2d00      	cmp	r5, #0
 8002294:	d01b      	beq.n	80022ce <__aeabi_f2d+0x6e>
 8002296:	0028      	movs	r0, r5
 8002298:	f000 f8b2 	bl	8002400 <__clzsi2>
 800229c:	280a      	cmp	r0, #10
 800229e:	dc1c      	bgt.n	80022da <__aeabi_f2d+0x7a>
 80022a0:	230b      	movs	r3, #11
 80022a2:	002e      	movs	r6, r5
 80022a4:	1a1b      	subs	r3, r3, r0
 80022a6:	40de      	lsrs	r6, r3
 80022a8:	0003      	movs	r3, r0
 80022aa:	3315      	adds	r3, #21
 80022ac:	409d      	lsls	r5, r3
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <__aeabi_f2d+0x88>)
 80022b0:	0336      	lsls	r6, r6, #12
 80022b2:	1a12      	subs	r2, r2, r0
 80022b4:	0552      	lsls	r2, r2, #21
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d53      	lsrs	r3, r2, #21
 80022ba:	e7e1      	b.n	8002280 <__aeabi_f2d+0x20>
 80022bc:	2d00      	cmp	r5, #0
 80022be:	d009      	beq.n	80022d4 <__aeabi_f2d+0x74>
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	0b36      	lsrs	r6, r6, #12
 80022c4:	0312      	lsls	r2, r2, #12
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <__aeabi_f2d+0x8c>)
 80022c8:	076d      	lsls	r5, r5, #29
 80022ca:	4316      	orrs	r6, r2
 80022cc:	e7d8      	b.n	8002280 <__aeabi_f2d+0x20>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2600      	movs	r6, #0
 80022d2:	e7d5      	b.n	8002280 <__aeabi_f2d+0x20>
 80022d4:	2600      	movs	r6, #0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <__aeabi_f2d+0x8c>)
 80022d8:	e7d2      	b.n	8002280 <__aeabi_f2d+0x20>
 80022da:	0003      	movs	r3, r0
 80022dc:	3b0b      	subs	r3, #11
 80022de:	409d      	lsls	r5, r3
 80022e0:	002e      	movs	r6, r5
 80022e2:	2500      	movs	r5, #0
 80022e4:	e7e3      	b.n	80022ae <__aeabi_f2d+0x4e>
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	00000389 	.word	0x00000389
 80022ec:	000007ff 	.word	0x000007ff

080022f0 <__aeabi_d2f>:
 80022f0:	0002      	movs	r2, r0
 80022f2:	004b      	lsls	r3, r1, #1
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	0d5b      	lsrs	r3, r3, #21
 80022f8:	030c      	lsls	r4, r1, #12
 80022fa:	4e3d      	ldr	r6, [pc, #244]	; (80023f0 <__aeabi_d2f+0x100>)
 80022fc:	0a64      	lsrs	r4, r4, #9
 80022fe:	0f40      	lsrs	r0, r0, #29
 8002300:	1c5f      	adds	r7, r3, #1
 8002302:	0fc9      	lsrs	r1, r1, #31
 8002304:	4304      	orrs	r4, r0
 8002306:	00d5      	lsls	r5, r2, #3
 8002308:	4237      	tst	r7, r6
 800230a:	d00a      	beq.n	8002322 <__aeabi_d2f+0x32>
 800230c:	4839      	ldr	r0, [pc, #228]	; (80023f4 <__aeabi_d2f+0x104>)
 800230e:	181e      	adds	r6, r3, r0
 8002310:	2efe      	cmp	r6, #254	; 0xfe
 8002312:	dd16      	ble.n	8002342 <__aeabi_d2f+0x52>
 8002314:	20ff      	movs	r0, #255	; 0xff
 8002316:	2400      	movs	r4, #0
 8002318:	05c0      	lsls	r0, r0, #23
 800231a:	4320      	orrs	r0, r4
 800231c:	07c9      	lsls	r1, r1, #31
 800231e:	4308      	orrs	r0, r1
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <__aeabi_d2f+0x44>
 8002326:	432c      	orrs	r4, r5
 8002328:	d026      	beq.n	8002378 <__aeabi_d2f+0x88>
 800232a:	2205      	movs	r2, #5
 800232c:	0192      	lsls	r2, r2, #6
 800232e:	0a54      	lsrs	r4, r2, #9
 8002330:	b2d8      	uxtb	r0, r3
 8002332:	e7f1      	b.n	8002318 <__aeabi_d2f+0x28>
 8002334:	4325      	orrs	r5, r4
 8002336:	d0ed      	beq.n	8002314 <__aeabi_d2f+0x24>
 8002338:	2080      	movs	r0, #128	; 0x80
 800233a:	03c0      	lsls	r0, r0, #15
 800233c:	4304      	orrs	r4, r0
 800233e:	20ff      	movs	r0, #255	; 0xff
 8002340:	e7ea      	b.n	8002318 <__aeabi_d2f+0x28>
 8002342:	2e00      	cmp	r6, #0
 8002344:	dd1b      	ble.n	800237e <__aeabi_d2f+0x8e>
 8002346:	0192      	lsls	r2, r2, #6
 8002348:	1e53      	subs	r3, r2, #1
 800234a:	419a      	sbcs	r2, r3
 800234c:	00e4      	lsls	r4, r4, #3
 800234e:	0f6d      	lsrs	r5, r5, #29
 8002350:	4322      	orrs	r2, r4
 8002352:	432a      	orrs	r2, r5
 8002354:	0753      	lsls	r3, r2, #29
 8002356:	d048      	beq.n	80023ea <__aeabi_d2f+0xfa>
 8002358:	230f      	movs	r3, #15
 800235a:	4013      	ands	r3, r2
 800235c:	2b04      	cmp	r3, #4
 800235e:	d000      	beq.n	8002362 <__aeabi_d2f+0x72>
 8002360:	3204      	adds	r2, #4
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	04db      	lsls	r3, r3, #19
 8002366:	4013      	ands	r3, r2
 8002368:	d03f      	beq.n	80023ea <__aeabi_d2f+0xfa>
 800236a:	1c70      	adds	r0, r6, #1
 800236c:	2efe      	cmp	r6, #254	; 0xfe
 800236e:	d0d1      	beq.n	8002314 <__aeabi_d2f+0x24>
 8002370:	0192      	lsls	r2, r2, #6
 8002372:	0a54      	lsrs	r4, r2, #9
 8002374:	b2c0      	uxtb	r0, r0
 8002376:	e7cf      	b.n	8002318 <__aeabi_d2f+0x28>
 8002378:	2000      	movs	r0, #0
 800237a:	2400      	movs	r4, #0
 800237c:	e7cc      	b.n	8002318 <__aeabi_d2f+0x28>
 800237e:	0032      	movs	r2, r6
 8002380:	3217      	adds	r2, #23
 8002382:	db22      	blt.n	80023ca <__aeabi_d2f+0xda>
 8002384:	2080      	movs	r0, #128	; 0x80
 8002386:	0400      	lsls	r0, r0, #16
 8002388:	4320      	orrs	r0, r4
 800238a:	241e      	movs	r4, #30
 800238c:	1ba4      	subs	r4, r4, r6
 800238e:	2c1f      	cmp	r4, #31
 8002390:	dd1d      	ble.n	80023ce <__aeabi_d2f+0xde>
 8002392:	2202      	movs	r2, #2
 8002394:	4252      	negs	r2, r2
 8002396:	1b96      	subs	r6, r2, r6
 8002398:	0002      	movs	r2, r0
 800239a:	40f2      	lsrs	r2, r6
 800239c:	0016      	movs	r6, r2
 800239e:	2c20      	cmp	r4, #32
 80023a0:	d004      	beq.n	80023ac <__aeabi_d2f+0xbc>
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <__aeabi_d2f+0x108>)
 80023a4:	4694      	mov	ip, r2
 80023a6:	4463      	add	r3, ip
 80023a8:	4098      	lsls	r0, r3
 80023aa:	4305      	orrs	r5, r0
 80023ac:	002a      	movs	r2, r5
 80023ae:	1e53      	subs	r3, r2, #1
 80023b0:	419a      	sbcs	r2, r3
 80023b2:	4332      	orrs	r2, r6
 80023b4:	2600      	movs	r6, #0
 80023b6:	0753      	lsls	r3, r2, #29
 80023b8:	d1ce      	bne.n	8002358 <__aeabi_d2f+0x68>
 80023ba:	2480      	movs	r4, #128	; 0x80
 80023bc:	0013      	movs	r3, r2
 80023be:	04e4      	lsls	r4, r4, #19
 80023c0:	2001      	movs	r0, #1
 80023c2:	4023      	ands	r3, r4
 80023c4:	4222      	tst	r2, r4
 80023c6:	d1d3      	bne.n	8002370 <__aeabi_d2f+0x80>
 80023c8:	e7b0      	b.n	800232c <__aeabi_d2f+0x3c>
 80023ca:	2300      	movs	r3, #0
 80023cc:	e7ad      	b.n	800232a <__aeabi_d2f+0x3a>
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <__aeabi_d2f+0x10c>)
 80023d0:	4694      	mov	ip, r2
 80023d2:	002a      	movs	r2, r5
 80023d4:	40e2      	lsrs	r2, r4
 80023d6:	0014      	movs	r4, r2
 80023d8:	002a      	movs	r2, r5
 80023da:	4463      	add	r3, ip
 80023dc:	409a      	lsls	r2, r3
 80023de:	4098      	lsls	r0, r3
 80023e0:	1e55      	subs	r5, r2, #1
 80023e2:	41aa      	sbcs	r2, r5
 80023e4:	4302      	orrs	r2, r0
 80023e6:	4322      	orrs	r2, r4
 80023e8:	e7e4      	b.n	80023b4 <__aeabi_d2f+0xc4>
 80023ea:	0033      	movs	r3, r6
 80023ec:	e79e      	b.n	800232c <__aeabi_d2f+0x3c>
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	000007fe 	.word	0x000007fe
 80023f4:	fffffc80 	.word	0xfffffc80
 80023f8:	fffffca2 	.word	0xfffffca2
 80023fc:	fffffc82 	.word	0xfffffc82

08002400 <__clzsi2>:
 8002400:	211c      	movs	r1, #28
 8002402:	2301      	movs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	4298      	cmp	r0, r3
 8002408:	d301      	bcc.n	800240e <__clzsi2+0xe>
 800240a:	0c00      	lsrs	r0, r0, #16
 800240c:	3910      	subs	r1, #16
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	4298      	cmp	r0, r3
 8002412:	d301      	bcc.n	8002418 <__clzsi2+0x18>
 8002414:	0a00      	lsrs	r0, r0, #8
 8002416:	3908      	subs	r1, #8
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	4298      	cmp	r0, r3
 800241c:	d301      	bcc.n	8002422 <__clzsi2+0x22>
 800241e:	0900      	lsrs	r0, r0, #4
 8002420:	3904      	subs	r1, #4
 8002422:	a202      	add	r2, pc, #8	; (adr r2, 800242c <__clzsi2+0x2c>)
 8002424:	5c10      	ldrb	r0, [r2, r0]
 8002426:	1840      	adds	r0, r0, r1
 8002428:	4770      	bx	lr
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	02020304 	.word	0x02020304
 8002430:	01010101 	.word	0x01010101
	...

0800243c <__clzdi2>:
 800243c:	b510      	push	{r4, lr}
 800243e:	2900      	cmp	r1, #0
 8002440:	d103      	bne.n	800244a <__clzdi2+0xe>
 8002442:	f7ff ffdd 	bl	8002400 <__clzsi2>
 8002446:	3020      	adds	r0, #32
 8002448:	e002      	b.n	8002450 <__clzdi2+0x14>
 800244a:	0008      	movs	r0, r1
 800244c:	f7ff ffd8 	bl	8002400 <__clzsi2>
 8002450:	bd10      	pop	{r4, pc}
 8002452:	46c0      	nop			; (mov r8, r8)

08002454 <HAL_FDCAN_RxFifo0Callback>:

//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d100      	bne.n	8002468 <HAL_FDCAN_RxFifo0Callback+0x14>
 8002466:	e3be      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
	{
		if(hfdcan==&hfdcan1)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4bea      	ldr	r3, [pc, #936]	; (8002814 <HAL_FDCAN_RxFifo0Callback+0x3c0>)
 800246c:	429a      	cmp	r2, r3
 800246e:	d000      	beq.n	8002472 <HAL_FDCAN_RxFifo0Callback+0x1e>
 8002470:	e1e6      	b.n	8002840 <HAL_FDCAN_RxFifo0Callback+0x3ec>
		  {
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, slot1.RxData) == HAL_OK)
 8002472:	4be9      	ldr	r3, [pc, #932]	; (8002818 <HAL_FDCAN_RxFifo0Callback+0x3c4>)
 8002474:	4ae9      	ldr	r2, [pc, #932]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	f002 fb71 	bl	8004b60 <HAL_FDCAN_GetRxMessage>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d000      	beq.n	8002484 <HAL_FDCAN_RxFifo0Callback+0x30>
 8002482:	e1ba      	b.n	80027fa <HAL_FDCAN_RxFifo0Callback+0x3a6>
			{
				if((RxHeader.Identifier>>20)==0X0B0)//batre
 8002484:	4be5      	ldr	r3, [pc, #916]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0d1b      	lsrs	r3, r3, #20
 800248a:	2bb0      	cmp	r3, #176	; 0xb0
 800248c:	d159      	bne.n	8002542 <HAL_FDCAN_RxFifo0Callback+0xee>
				{
					slot1.batt_protocol1=1;
 800248e:	4be4      	ldr	r3, [pc, #912]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002490:	2201      	movs	r2, #1
 8002492:	73da      	strb	r2, [r3, #15]
					slot1.Vbatt=(((slot1.RxData[1]<<8)|slot1.RxData[0])*0.01);
 8002494:	4be2      	ldr	r3, [pc, #904]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002496:	2265      	movs	r2, #101	; 0x65
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	4ae0      	ldr	r2, [pc, #896]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800249e:	2164      	movs	r1, #100	; 0x64
 80024a0:	5c52      	ldrb	r2, [r2, r1]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff feab 	bl	8002200 <__aeabi_i2d>
 80024aa:	4ade      	ldr	r2, [pc, #888]	; (8002824 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 80024ac:	4bde      	ldr	r3, [pc, #888]	; (8002828 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 80024ae:	f7ff f873 	bl	8001598 <__aeabi_dmul>
 80024b2:	0002      	movs	r2, r0
 80024b4:	000b      	movs	r3, r1
 80024b6:	0010      	movs	r0, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	f7ff ff19 	bl	80022f0 <__aeabi_d2f>
 80024be:	1c02      	adds	r2, r0, #0
 80024c0:	4bd7      	ldr	r3, [pc, #860]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024c2:	63da      	str	r2, [r3, #60]	; 0x3c
					slot1.Abatt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.1);
 80024c4:	4bd6      	ldr	r3, [pc, #856]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024c6:	2267      	movs	r2, #103	; 0x67
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4ad4      	ldr	r2, [pc, #848]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024ce:	2166      	movs	r1, #102	; 0x66
 80024d0:	5c52      	ldrb	r2, [r2, r1]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fe93 	bl	8002200 <__aeabi_i2d>
 80024da:	4ad4      	ldr	r2, [pc, #848]	; (800282c <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80024dc:	4bd4      	ldr	r3, [pc, #848]	; (8002830 <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80024de:	f7ff f85b 	bl	8001598 <__aeabi_dmul>
 80024e2:	0002      	movs	r2, r0
 80024e4:	000b      	movs	r3, r1
 80024e6:	0010      	movs	r0, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	f7ff ff01 	bl	80022f0 <__aeabi_d2f>
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	4bcb      	ldr	r3, [pc, #812]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
					slot1.SOC_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 80024f4:	4bca      	ldr	r3, [pc, #808]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024f6:	2269      	movs	r2, #105	; 0x69
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4ac8      	ldr	r2, [pc, #800]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80024fe:	2168      	movs	r1, #104	; 0x68
 8002500:	5c52      	ldrb	r2, [r2, r1]
 8002502:	4313      	orrs	r3, r2
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe f8bb 	bl	8000680 <__aeabi_i2f>
 800250a:	1c02      	adds	r2, r0, #0
 800250c:	4bc4      	ldr	r3, [pc, #784]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
					slot1.temp_batt=(slot1.RxData[6]-40);
 8002510:	4bc3      	ldr	r3, [pc, #780]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002512:	226a      	movs	r2, #106	; 0x6a
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	3b28      	subs	r3, #40	; 0x28
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe f8b1 	bl	8000680 <__aeabi_i2f>
 800251e:	1c02      	adds	r2, r0, #0
 8002520:	4bbf      	ldr	r3, [pc, #764]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002522:	649a      	str	r2, [r3, #72]	; 0x48
					slot1.flag_recieve_batt1=1;
 8002524:	4bbe      	ldr	r3, [pc, #760]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002526:	2220      	movs	r2, #32
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]
					slot1.can_batt_trouble_state=0;
 800252c:	4bbc      	ldr	r3, [pc, #752]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800252e:	2222      	movs	r2, #34	; 0x22
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8002534:	4bb9      	ldr	r3, [pc, #740]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	031b      	lsls	r3, r3, #12
 800253a:	0b1a      	lsrs	r2, r3, #12
 800253c:	4bb8      	ldr	r3, [pc, #736]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002540:	e0dd      	b.n	80026fe <HAL_FDCAN_RxFifo0Callback+0x2aa>
				}
				else if((RxHeader.Identifier>>20)==0X0B1)//batre
 8002542:	4bb6      	ldr	r3, [pc, #728]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0d1b      	lsrs	r3, r3, #20
 8002548:	2bb1      	cmp	r3, #177	; 0xb1
 800254a:	d000      	beq.n	800254e <HAL_FDCAN_RxFifo0Callback+0xfa>
 800254c:	e0d7      	b.n	80026fe <HAL_FDCAN_RxFifo0Callback+0x2aa>
				{
					slot1.batt_protocol2=1;
 800254e:	4bb4      	ldr	r3, [pc, #720]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002550:	2201      	movs	r2, #1
 8002552:	741a      	strb	r2, [r3, #16]

					slot1.SOH_batt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.01);
 8002554:	4bb2      	ldr	r3, [pc, #712]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002556:	2267      	movs	r2, #103	; 0x67
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	4ab0      	ldr	r2, [pc, #704]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800255e:	2166      	movs	r1, #102	; 0x66
 8002560:	5c52      	ldrb	r2, [r2, r1]
 8002562:	4313      	orrs	r3, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff fe4b 	bl	8002200 <__aeabi_i2d>
 800256a:	4aae      	ldr	r2, [pc, #696]	; (8002824 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 800256c:	4bae      	ldr	r3, [pc, #696]	; (8002828 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 800256e:	f7ff f813 	bl	8001598 <__aeabi_dmul>
 8002572:	0002      	movs	r2, r0
 8002574:	000b      	movs	r3, r1
 8002576:	0010      	movs	r0, r2
 8002578:	0019      	movs	r1, r3
 800257a:	f7ff feb9 	bl	80022f0 <__aeabi_d2f>
 800257e:	1c02      	adds	r2, r0, #0
 8002580:	4ba7      	ldr	r3, [pc, #668]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002582:	64da      	str	r2, [r3, #76]	; 0x4c
					slot1.cycle_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8002584:	4ba6      	ldr	r3, [pc, #664]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002586:	2269      	movs	r2, #105	; 0x69
 8002588:	5c9b      	ldrb	r3, [r3, r2]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	4aa4      	ldr	r2, [pc, #656]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800258e:	2168      	movs	r1, #104	; 0x68
 8002590:	5c52      	ldrb	r2, [r2, r1]
 8002592:	431a      	orrs	r2, r3
 8002594:	4ba2      	ldr	r3, [pc, #648]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002596:	651a      	str	r2, [r3, #80]	; 0x50
					slot1.batt_discharge_overcurrent=(slot1.RxData[6])&(0x01<<0);
 8002598:	4ba1      	ldr	r3, [pc, #644]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800259a:	226a      	movs	r2, #106	; 0x6a
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	001a      	movs	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	4193      	sbcs	r3, r2
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b9d      	ldr	r3, [pc, #628]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025ac:	745a      	strb	r2, [r3, #17]
					slot1.batt_charge_overCurrent = (slot1.RxData[6])&(0x01<<1);
 80025ae:	4b9c      	ldr	r3, [pc, #624]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025b0:	226a      	movs	r2, #106	; 0x6a
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	001a      	movs	r2, r3
 80025b6:	2302      	movs	r3, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	1e5a      	subs	r2, r3, #1
 80025bc:	4193      	sbcs	r3, r2
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b97      	ldr	r3, [pc, #604]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025c2:	749a      	strb	r2, [r3, #18]
					slot1.batt_short_circuit=(slot1.RxData[6])&(0x01<<2);
 80025c4:	4b96      	ldr	r3, [pc, #600]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025c6:	226a      	movs	r2, #106	; 0x6a
 80025c8:	5c9b      	ldrb	r3, [r3, r2]
 80025ca:	001a      	movs	r2, r3
 80025cc:	2304      	movs	r3, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	4193      	sbcs	r3, r2
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b92      	ldr	r3, [pc, #584]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025d8:	74da      	strb	r2, [r3, #19]
					slot1.batt_discharge_overtempreature=(slot1.RxData[6])&(0x01<<3);
 80025da:	4b91      	ldr	r3, [pc, #580]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025dc:	226a      	movs	r2, #106	; 0x6a
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	001a      	movs	r2, r3
 80025e2:	2308      	movs	r3, #8
 80025e4:	4013      	ands	r3, r2
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	4193      	sbcs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b8c      	ldr	r3, [pc, #560]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025ee:	751a      	strb	r2, [r3, #20]
					slot1.batt_discharge_undertempreature=(slot1.RxData[6])&(0x01<<4);
 80025f0:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80025f2:	226a      	movs	r2, #106	; 0x6a
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	001a      	movs	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	4013      	ands	r3, r2
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	4193      	sbcs	r3, r2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b87      	ldr	r3, [pc, #540]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002604:	755a      	strb	r2, [r3, #21]
					slot1.batt_charge_overtempreature=(slot1.RxData[6])&(0x01<<5);
 8002606:	4b86      	ldr	r3, [pc, #536]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002608:	226a      	movs	r2, #106	; 0x6a
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	001a      	movs	r2, r3
 800260e:	2320      	movs	r3, #32
 8002610:	4013      	ands	r3, r2
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	4193      	sbcs	r3, r2
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800261a:	759a      	strb	r2, [r3, #22]
					slot1.batt_charge_undertempreature=(slot1.RxData[6])&(0x01<<6);
 800261c:	4b80      	ldr	r3, [pc, #512]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800261e:	226a      	movs	r2, #106	; 0x6a
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	001a      	movs	r2, r3
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	4013      	ands	r3, r2
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	4193      	sbcs	r3, r2
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002630:	75da      	strb	r2, [r3, #23]
					slot1.batt_under_voltage=(slot1.RxData[6])&(0x01<<7);
 8002632:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002634:	226a      	movs	r2, #106	; 0x6a
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	001a      	movs	r2, r3
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	4013      	ands	r3, r2
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	4193      	sbcs	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002646:	761a      	strb	r2, [r3, #24]

					slot1.batt_over_voltage=(slot1.RxData[7])&(0x01<<0);
 8002648:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800264a:	226b      	movs	r2, #107	; 0x6b
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	001a      	movs	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	4013      	ands	r3, r2
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	4193      	sbcs	r3, r2
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b71      	ldr	r3, [pc, #452]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800265c:	765a      	strb	r2, [r3, #25]
					slot1.batt_over_discharge_capacity=(slot1.RxData[7])&(0x01<<1);
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002660:	226b      	movs	r2, #107	; 0x6b
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	001a      	movs	r2, r3
 8002666:	2302      	movs	r3, #2
 8002668:	4013      	ands	r3, r2
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	4193      	sbcs	r3, r2
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b6b      	ldr	r3, [pc, #428]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002672:	769a      	strb	r2, [r3, #26]
					slot1.batt_unbalance=(slot1.RxData[7])&(0x01<<2);
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002676:	226b      	movs	r2, #107	; 0x6b
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	001a      	movs	r2, r3
 800267c:	2304      	movs	r3, #4
 800267e:	4013      	ands	r3, r2
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	4193      	sbcs	r3, r2
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002688:	76da      	strb	r2, [r3, #27]
					slot1.batt_system_failure=(slot1.RxData[7])&(0x01<<3);
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800268c:	226b      	movs	r2, #107	; 0x6b
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	001a      	movs	r2, r3
 8002692:	2308      	movs	r3, #8
 8002694:	4013      	ands	r3, r2
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	4193      	sbcs	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	4b60      	ldr	r3, [pc, #384]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800269e:	771a      	strb	r2, [r3, #28]
					slot1.batt_charge_state=(slot1.RxData[7])&(0x01<<4);
 80026a0:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026a2:	226b      	movs	r2, #107	; 0x6b
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	001a      	movs	r2, r3
 80026a8:	2310      	movs	r3, #16
 80026aa:	4013      	ands	r3, r2
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	4193      	sbcs	r3, r2
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026b4:	775a      	strb	r2, [r3, #29]
					slot1.batt_discharge_state=(slot1.RxData[7])&(0x01<<5);
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026b8:	226b      	movs	r2, #107	; 0x6b
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	001a      	movs	r2, r3
 80026be:	2320      	movs	r3, #32
 80026c0:	4013      	ands	r3, r2
 80026c2:	1e5a      	subs	r2, r3, #1
 80026c4:	4193      	sbcs	r3, r2
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026ca:	779a      	strb	r2, [r3, #30]
					slot1.batt_sleep_state=(slot1.RxData[7])&(0x01<<6);
 80026cc:	4b54      	ldr	r3, [pc, #336]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026ce:	226b      	movs	r2, #107	; 0x6b
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	001a      	movs	r2, r3
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	4013      	ands	r3, r2
 80026d8:	1e5a      	subs	r2, r3, #1
 80026da:	4193      	sbcs	r3, r2
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026e0:	77da      	strb	r2, [r3, #31]

					slot1.flag_recieve_batt2=1;
 80026e2:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
					slot1.can_batt2_trouble_state=0;
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026ec:	2223      	movs	r2, #35	; 0x23
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	0b1a      	lsrs	r2, r3, #12
 80026fa:	4b49      	ldr	r3, [pc, #292]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				if(RxHeader.Identifier==0x18FF50E5)//charger
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_FDCAN_RxFifo0Callback+0x3e0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d000      	beq.n	800270a <HAL_FDCAN_RxFifo0Callback+0x2b6>
 8002708:	e26d      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
				{
					slot1.isCharger=1;
 800270a:	4b45      	ldr	r3, [pc, #276]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800270c:	2201      	movs	r2, #1
 800270e:	70da      	strb	r2, [r3, #3]
					slot1.Vcharger=(((slot1.RxData[0]<<8)|slot1.RxData[1])*0.1);
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002712:	2264      	movs	r2, #100	; 0x64
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	4a41      	ldr	r2, [pc, #260]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800271a:	2165      	movs	r1, #101	; 0x65
 800271c:	5c52      	ldrb	r2, [r2, r1]
 800271e:	4313      	orrs	r3, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fd6d 	bl	8002200 <__aeabi_i2d>
 8002726:	4a41      	ldr	r2, [pc, #260]	; (800282c <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8002728:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 800272a:	f7fe ff35 	bl	8001598 <__aeabi_dmul>
 800272e:	0002      	movs	r2, r0
 8002730:	000b      	movs	r3, r1
 8002732:	0010      	movs	r0, r2
 8002734:	0019      	movs	r1, r3
 8002736:	f7ff fddb 	bl	80022f0 <__aeabi_d2f>
 800273a:	1c02      	adds	r2, r0, #0
 800273c:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
					slot1.Acharger=(((slot1.RxData[2]<<8)|slot1.RxData[3])*0.1);
 8002740:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002742:	2266      	movs	r2, #102	; 0x66
 8002744:	5c9b      	ldrb	r3, [r3, r2]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4a35      	ldr	r2, [pc, #212]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800274a:	2167      	movs	r1, #103	; 0x67
 800274c:	5c52      	ldrb	r2, [r2, r1]
 800274e:	4313      	orrs	r3, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fd55 	bl	8002200 <__aeabi_i2d>
 8002756:	4a35      	ldr	r2, [pc, #212]	; (800282c <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 800275a:	f7fe ff1d 	bl	8001598 <__aeabi_dmul>
 800275e:	0002      	movs	r2, r0
 8002760:	000b      	movs	r3, r1
 8002762:	0010      	movs	r0, r2
 8002764:	0019      	movs	r1, r3
 8002766:	f7ff fdc3 	bl	80022f0 <__aeabi_d2f>
 800276a:	1c02      	adds	r2, r0, #0
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800276e:	659a      	str	r2, [r3, #88]	; 0x58
					slot1.charger_hardware_error=(slot1.RxData[4])&(0x01<<0);
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002772:	2268      	movs	r2, #104	; 0x68
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	001a      	movs	r2, r3
 8002778:	2301      	movs	r3, #1
 800277a:	4013      	ands	r3, r2
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	4193      	sbcs	r3, r2
 8002780:	b2d9      	uxtb	r1, r3
 8002782:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002784:	222a      	movs	r2, #42	; 0x2a
 8002786:	5499      	strb	r1, [r3, r2]
					slot1.charger_temp=(slot1.RxData[4])&(0x01<<1);
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800278a:	2268      	movs	r2, #104	; 0x68
 800278c:	5c9b      	ldrb	r3, [r3, r2]
 800278e:	001a      	movs	r2, r3
 8002790:	2302      	movs	r3, #2
 8002792:	4013      	ands	r3, r2
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	4193      	sbcs	r3, r2
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800279c:	222b      	movs	r2, #43	; 0x2b
 800279e:	5499      	strb	r1, [r3, r2]
					slot1.charger_input_voltage=(slot1.RxData[4])&(0x01<<2);
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027a2:	2268      	movs	r2, #104	; 0x68
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	001a      	movs	r2, r3
 80027a8:	2304      	movs	r3, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	4193      	sbcs	r3, r2
 80027b0:	b2d9      	uxtb	r1, r3
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027b4:	222c      	movs	r2, #44	; 0x2c
 80027b6:	5499      	strb	r1, [r3, r2]
					slot1.charger_work_condition=(slot1.RxData[4])&(0x01<<3);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027ba:	2268      	movs	r2, #104	; 0x68
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	001a      	movs	r2, r3
 80027c0:	2308      	movs	r3, #8
 80027c2:	4013      	ands	r3, r2
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	4193      	sbcs	r3, r2
 80027c8:	b2d9      	uxtb	r1, r3
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027cc:	222d      	movs	r2, #45	; 0x2d
 80027ce:	5499      	strb	r1, [r3, r2]
					slot1.charger_communication_error=(slot1.RxData[4])&(0x01<<4);
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027d2:	2268      	movs	r2, #104	; 0x68
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	001a      	movs	r2, r3
 80027d8:	2310      	movs	r3, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	4193      	sbcs	r3, r2
 80027e0:	b2d9      	uxtb	r1, r3
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027e4:	222e      	movs	r2, #46	; 0x2e
 80027e6:	5499      	strb	r1, [r3, r2]
					slot1.can_charger_trouble_state=0;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027ea:	2230      	movs	r2, #48	; 0x30
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]
					slot1.flag_recieve_charger=1;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80027f2:	222f      	movs	r2, #47	; 0x2f
 80027f4:	2101      	movs	r1, #1
 80027f6:	5499      	strb	r1, [r3, r2]
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();

		}

	}
}
 80027f8:	e1f5      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_FDCAN_RxFifo0Callback+0x3e4>)
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_FDCAN_RxFifo0Callback+0x3e8>)
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	f002 f9ad 	bl	8004b60 <HAL_FDCAN_GetRxMessage>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d100      	bne.n	800280c <HAL_FDCAN_RxFifo0Callback+0x3b8>
 800280a:	e1ec      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
 800280c:	f000 fd9a 	bl	8003344 <Error_Handler>
}
 8002810:	e1e9      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000790 	.word	0x20000790
 8002818:	20000118 	.word	0x20000118
 800281c:	20000058 	.word	0x20000058
 8002820:	200000b4 	.word	0x200000b4
 8002824:	47ae147b 	.word	0x47ae147b
 8002828:	3f847ae1 	.word	0x3f847ae1
 800282c:	9999999a 	.word	0x9999999a
 8002830:	3fb99999 	.word	0x3fb99999
 8002834:	18ff50e5 	.word	0x18ff50e5
 8002838:	20000460 	.word	0x20000460
 800283c:	20000744 	.word	0x20000744
		else if (hfdcan==&hfdcan2)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4beb      	ldr	r3, [pc, #940]	; (8002bf0 <HAL_FDCAN_RxFifo0Callback+0x79c>)
 8002844:	429a      	cmp	r2, r3
 8002846:	d000      	beq.n	800284a <HAL_FDCAN_RxFifo0Callback+0x3f6>
 8002848:	e1cd      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) == HAL_OK)
 800284a:	4bea      	ldr	r3, [pc, #936]	; (8002bf4 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 800284c:	4aea      	ldr	r2, [pc, #936]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	f002 f985 	bl	8004b60 <HAL_FDCAN_GetRxMessage>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d000      	beq.n	800285c <HAL_FDCAN_RxFifo0Callback+0x408>
 800285a:	e1ba      	b.n	8002bd2 <HAL_FDCAN_RxFifo0Callback+0x77e>
				if((RxHeader2.Identifier>>20)==0X0B0)//batre
 800285c:	4be6      	ldr	r3, [pc, #920]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0d1b      	lsrs	r3, r3, #20
 8002862:	2bb0      	cmp	r3, #176	; 0xb0
 8002864:	d159      	bne.n	800291a <HAL_FDCAN_RxFifo0Callback+0x4c6>
				slot2.batt_protocol1=1;
 8002866:	4be5      	ldr	r3, [pc, #916]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002868:	2201      	movs	r2, #1
 800286a:	73da      	strb	r2, [r3, #15]
				slot2.Vbatt=(((slot2.RxData[1]<<8)|slot2.RxData[0])*0.01);
 800286c:	4be3      	ldr	r3, [pc, #908]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800286e:	2265      	movs	r2, #101	; 0x65
 8002870:	5c9b      	ldrb	r3, [r3, r2]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	4ae1      	ldr	r2, [pc, #900]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002876:	2164      	movs	r1, #100	; 0x64
 8002878:	5c52      	ldrb	r2, [r2, r1]
 800287a:	4313      	orrs	r3, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff fcbf 	bl	8002200 <__aeabi_i2d>
 8002882:	4adf      	ldr	r2, [pc, #892]	; (8002c00 <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 8002884:	4bdf      	ldr	r3, [pc, #892]	; (8002c04 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 8002886:	f7fe fe87 	bl	8001598 <__aeabi_dmul>
 800288a:	0002      	movs	r2, r0
 800288c:	000b      	movs	r3, r1
 800288e:	0010      	movs	r0, r2
 8002890:	0019      	movs	r1, r3
 8002892:	f7ff fd2d 	bl	80022f0 <__aeabi_d2f>
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	4bd8      	ldr	r3, [pc, #864]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800289a:	63da      	str	r2, [r3, #60]	; 0x3c
				slot2.Abatt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.1);
 800289c:	4bd7      	ldr	r3, [pc, #860]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800289e:	2267      	movs	r2, #103	; 0x67
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	4ad5      	ldr	r2, [pc, #852]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028a6:	2166      	movs	r1, #102	; 0x66
 80028a8:	5c52      	ldrb	r2, [r2, r1]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff fca7 	bl	8002200 <__aeabi_i2d>
 80028b2:	4ad5      	ldr	r2, [pc, #852]	; (8002c08 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 80028b4:	4bd5      	ldr	r3, [pc, #852]	; (8002c0c <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 80028b6:	f7fe fe6f 	bl	8001598 <__aeabi_dmul>
 80028ba:	0002      	movs	r2, r0
 80028bc:	000b      	movs	r3, r1
 80028be:	0010      	movs	r0, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	f7ff fd15 	bl	80022f0 <__aeabi_d2f>
 80028c6:	1c02      	adds	r2, r0, #0
 80028c8:	4bcc      	ldr	r3, [pc, #816]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
				slot2.SOC_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 80028cc:	4bcb      	ldr	r3, [pc, #812]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028ce:	2269      	movs	r2, #105	; 0x69
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4ac9      	ldr	r2, [pc, #804]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028d6:	2168      	movs	r1, #104	; 0x68
 80028d8:	5c52      	ldrb	r2, [r2, r1]
 80028da:	4313      	orrs	r3, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fd fecf 	bl	8000680 <__aeabi_i2f>
 80028e2:	1c02      	adds	r2, r0, #0
 80028e4:	4bc5      	ldr	r3, [pc, #788]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
				slot2.temp_batt=(slot2.RxData[6]-40);
 80028e8:	4bc4      	ldr	r3, [pc, #784]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028ea:	226a      	movs	r2, #106	; 0x6a
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	3b28      	subs	r3, #40	; 0x28
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fd fec5 	bl	8000680 <__aeabi_i2f>
 80028f6:	1c02      	adds	r2, r0, #0
 80028f8:	4bc0      	ldr	r3, [pc, #768]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028fa:	649a      	str	r2, [r3, #72]	; 0x48
				slot2.flag_recieve_batt1=1;
 80028fc:	4bbf      	ldr	r3, [pc, #764]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80028fe:	2220      	movs	r2, #32
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]
				slot2.can_batt_trouble_state=0;
 8002904:	4bbd      	ldr	r3, [pc, #756]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002906:	2222      	movs	r2, #34	; 0x22
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader2.Identifier&0x000FFFFF);
 800290c:	4bba      	ldr	r3, [pc, #744]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	0b1a      	lsrs	r2, r3, #12
 8002914:	4bb9      	ldr	r3, [pc, #740]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
 8002918:	e0dd      	b.n	8002ad6 <HAL_FDCAN_RxFifo0Callback+0x682>
				else if((RxHeader2.Identifier>>20)==0X0B1)//batre
 800291a:	4bb7      	ldr	r3, [pc, #732]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0d1b      	lsrs	r3, r3, #20
 8002920:	2bb1      	cmp	r3, #177	; 0xb1
 8002922:	d000      	beq.n	8002926 <HAL_FDCAN_RxFifo0Callback+0x4d2>
 8002924:	e0d7      	b.n	8002ad6 <HAL_FDCAN_RxFifo0Callback+0x682>
				slot2.batt_protocol2=1;
 8002926:	4bb5      	ldr	r3, [pc, #724]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002928:	2201      	movs	r2, #1
 800292a:	741a      	strb	r2, [r3, #16]
				slot2.SOH_batt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.01);
 800292c:	4bb3      	ldr	r3, [pc, #716]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800292e:	2267      	movs	r2, #103	; 0x67
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	4ab1      	ldr	r2, [pc, #708]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002936:	2166      	movs	r1, #102	; 0x66
 8002938:	5c52      	ldrb	r2, [r2, r1]
 800293a:	4313      	orrs	r3, r2
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff fc5f 	bl	8002200 <__aeabi_i2d>
 8002942:	4aaf      	ldr	r2, [pc, #700]	; (8002c00 <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 8002944:	4baf      	ldr	r3, [pc, #700]	; (8002c04 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 8002946:	f7fe fe27 	bl	8001598 <__aeabi_dmul>
 800294a:	0002      	movs	r2, r0
 800294c:	000b      	movs	r3, r1
 800294e:	0010      	movs	r0, r2
 8002950:	0019      	movs	r1, r3
 8002952:	f7ff fccd 	bl	80022f0 <__aeabi_d2f>
 8002956:	1c02      	adds	r2, r0, #0
 8002958:	4ba8      	ldr	r3, [pc, #672]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800295a:	64da      	str	r2, [r3, #76]	; 0x4c
				slot2.cycle_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 800295c:	4ba7      	ldr	r3, [pc, #668]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800295e:	2269      	movs	r2, #105	; 0x69
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4aa5      	ldr	r2, [pc, #660]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002966:	2168      	movs	r1, #104	; 0x68
 8002968:	5c52      	ldrb	r2, [r2, r1]
 800296a:	431a      	orrs	r2, r3
 800296c:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800296e:	651a      	str	r2, [r3, #80]	; 0x50
				slot2.batt_discharge_overcurrent=(slot2.RxData[6])&(0x01<<0);
 8002970:	4ba2      	ldr	r3, [pc, #648]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002972:	226a      	movs	r2, #106	; 0x6a
 8002974:	5c9b      	ldrb	r3, [r3, r2]
 8002976:	001a      	movs	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	4013      	ands	r3, r2
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	4193      	sbcs	r3, r2
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002984:	745a      	strb	r2, [r3, #17]
				slot2.batt_charge_overCurrent = (slot2.RxData[6])&(0x01<<1);
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002988:	226a      	movs	r2, #106	; 0x6a
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	001a      	movs	r2, r3
 800298e:	2302      	movs	r3, #2
 8002990:	4013      	ands	r3, r2
 8002992:	1e5a      	subs	r2, r3, #1
 8002994:	4193      	sbcs	r3, r2
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b98      	ldr	r3, [pc, #608]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800299a:	749a      	strb	r2, [r3, #18]
				slot2.batt_short_circuit=(slot2.RxData[6])&(0x01<<2);
 800299c:	4b97      	ldr	r3, [pc, #604]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800299e:	226a      	movs	r2, #106	; 0x6a
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	001a      	movs	r2, r3
 80029a4:	2304      	movs	r3, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	4193      	sbcs	r3, r2
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b93      	ldr	r3, [pc, #588]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029b0:	74da      	strb	r2, [r3, #19]
				slot2.batt_discharge_overtempreature=(slot2.RxData[6])&(0x01<<3);
 80029b2:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029b4:	226a      	movs	r2, #106	; 0x6a
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	001a      	movs	r2, r3
 80029ba:	2308      	movs	r3, #8
 80029bc:	4013      	ands	r3, r2
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	4193      	sbcs	r3, r2
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b8d      	ldr	r3, [pc, #564]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029c6:	751a      	strb	r2, [r3, #20]
				slot2.batt_discharge_undertempreature=(slot2.RxData[6])&(0x01<<4);
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029ca:	226a      	movs	r2, #106	; 0x6a
 80029cc:	5c9b      	ldrb	r3, [r3, r2]
 80029ce:	001a      	movs	r2, r3
 80029d0:	2310      	movs	r3, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	4193      	sbcs	r3, r2
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029dc:	755a      	strb	r2, [r3, #21]
				slot2.batt_charge_overtempreature=(slot2.RxData[6])&(0x01<<5);
 80029de:	4b87      	ldr	r3, [pc, #540]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029e0:	226a      	movs	r2, #106	; 0x6a
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	001a      	movs	r2, r3
 80029e6:	2320      	movs	r3, #32
 80029e8:	4013      	ands	r3, r2
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	4193      	sbcs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029f2:	759a      	strb	r2, [r3, #22]
				slot2.batt_charge_undertempreature=(slot2.RxData[6])&(0x01<<6);
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80029f6:	226a      	movs	r2, #106	; 0x6a
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	001a      	movs	r2, r3
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	4013      	ands	r3, r2
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	4193      	sbcs	r3, r2
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a08:	75da      	strb	r2, [r3, #23]
				slot2.batt_under_voltage=(slot2.RxData[6])&(0x01<<7);
 8002a0a:	4b7c      	ldr	r3, [pc, #496]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a0c:	226a      	movs	r2, #106	; 0x6a
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	001a      	movs	r2, r3
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	4013      	ands	r3, r2
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	4193      	sbcs	r3, r2
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a1e:	761a      	strb	r2, [r3, #24]
				slot2.batt_over_voltage=(slot2.RxData[7])&(0x01<<0);
 8002a20:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a22:	226b      	movs	r2, #107	; 0x6b
 8002a24:	5c9b      	ldrb	r3, [r3, r2]
 8002a26:	001a      	movs	r2, r3
 8002a28:	2301      	movs	r3, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	4193      	sbcs	r3, r2
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a34:	765a      	strb	r2, [r3, #25]
				slot2.batt_over_discharge_capacity=(slot2.RxData[7])&(0x01<<1);
 8002a36:	4b71      	ldr	r3, [pc, #452]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a38:	226b      	movs	r2, #107	; 0x6b
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2302      	movs	r3, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	4193      	sbcs	r3, r2
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a4a:	769a      	strb	r2, [r3, #26]
				slot2.batt_unbalance=(slot2.RxData[7])&(0x01<<2);
 8002a4c:	4b6b      	ldr	r3, [pc, #428]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a4e:	226b      	movs	r2, #107	; 0x6b
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	001a      	movs	r2, r3
 8002a54:	2304      	movs	r3, #4
 8002a56:	4013      	ands	r3, r2
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	4193      	sbcs	r3, r2
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a60:	76da      	strb	r2, [r3, #27]
				slot2.batt_system_failure=(slot2.RxData[7])&(0x01<<3);
 8002a62:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a64:	226b      	movs	r2, #107	; 0x6b
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	001a      	movs	r2, r3
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	4193      	sbcs	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a76:	771a      	strb	r2, [r3, #28]
				slot2.batt_charge_state=(slot2.RxData[7])&(0x01<<4);
 8002a78:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a7a:	226b      	movs	r2, #107	; 0x6b
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	001a      	movs	r2, r3
 8002a80:	2310      	movs	r3, #16
 8002a82:	4013      	ands	r3, r2
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	4193      	sbcs	r3, r2
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a8c:	775a      	strb	r2, [r3, #29]
				slot2.batt_discharge_state=(slot2.RxData[7])&(0x01<<5);
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002a90:	226b      	movs	r2, #107	; 0x6b
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	001a      	movs	r2, r3
 8002a96:	2320      	movs	r3, #32
 8002a98:	4013      	ands	r3, r2
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	4193      	sbcs	r3, r2
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002aa2:	779a      	strb	r2, [r3, #30]
				slot2.batt_sleep_state=(slot2.RxData[7])&(0x01<<6);
 8002aa4:	4b55      	ldr	r3, [pc, #340]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002aa6:	226b      	movs	r2, #107	; 0x6b
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	4013      	ands	r3, r2
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	4193      	sbcs	r3, r2
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002ab8:	77da      	strb	r2, [r3, #31]
				slot2.flag_recieve_batt2=1;
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002abc:	2221      	movs	r2, #33	; 0x21
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]
				slot2.can_batt2_trouble_state=0;
 8002ac2:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002ac4:	2223      	movs	r2, #35	; 0x23
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <HAL_FDCAN_RxFifo0Callback+0x7bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	031b      	lsls	r3, r3, #12
 8002ad0:	0b1a      	lsrs	r2, r3, #12
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002ad4:	65da      	str	r2, [r3, #92]	; 0x5c
				if(RxHeader2.Identifier==0x18FF50E5)//charger
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <HAL_FDCAN_RxFifo0Callback+0x7c0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d000      	beq.n	8002ae2 <HAL_FDCAN_RxFifo0Callback+0x68e>
 8002ae0:	e081      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
				slot2.isCharger=1;
 8002ae2:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	70da      	strb	r2, [r3, #3]
				slot2.Vcharger=(((slot2.RxData[0]<<8)|slot2.RxData[1])*0.1);
 8002ae8:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002aea:	2264      	movs	r2, #100	; 0x64
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002af2:	2165      	movs	r1, #101	; 0x65
 8002af4:	5c52      	ldrb	r2, [r2, r1]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fb81 	bl	8002200 <__aeabi_i2d>
 8002afe:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 8002b02:	f7fe fd49 	bl	8001598 <__aeabi_dmul>
 8002b06:	0002      	movs	r2, r0
 8002b08:	000b      	movs	r3, r1
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	f7ff fbef 	bl	80022f0 <__aeabi_d2f>
 8002b12:	1c02      	adds	r2, r0, #0
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
				slot2.Acharger=(((slot2.RxData[2]<<8)|slot2.RxData[3])*0.1);
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b1a:	2266      	movs	r2, #102	; 0x66
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b22:	2167      	movs	r1, #103	; 0x67
 8002b24:	5c52      	ldrb	r2, [r2, r1]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7ff fb69 	bl	8002200 <__aeabi_i2d>
 8002b2e:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 8002b32:	f7fe fd31 	bl	8001598 <__aeabi_dmul>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	f7ff fbd7 	bl	80022f0 <__aeabi_d2f>
 8002b42:	1c02      	adds	r2, r0, #0
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58
				slot2.charger_hardware_error=(slot2.RxData[4])&(0x01<<0);
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b4a:	2268      	movs	r2, #104	; 0x68
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	4193      	sbcs	r3, r2
 8002b58:	b2d9      	uxtb	r1, r3
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b5c:	222a      	movs	r2, #42	; 0x2a
 8002b5e:	5499      	strb	r1, [r3, r2]
				slot2.charger_temp=(slot2.RxData[4])&(0x01<<1);
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b62:	2268      	movs	r2, #104	; 0x68
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	001a      	movs	r2, r3
 8002b68:	2302      	movs	r3, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	4193      	sbcs	r3, r2
 8002b70:	b2d9      	uxtb	r1, r3
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b74:	222b      	movs	r2, #43	; 0x2b
 8002b76:	5499      	strb	r1, [r3, r2]
				slot2.charger_input_voltage=(slot2.RxData[4])&(0x01<<2);
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b7a:	2268      	movs	r2, #104	; 0x68
 8002b7c:	5c9b      	ldrb	r3, [r3, r2]
 8002b7e:	001a      	movs	r2, r3
 8002b80:	2304      	movs	r3, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	4193      	sbcs	r3, r2
 8002b88:	b2d9      	uxtb	r1, r3
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b8c:	222c      	movs	r2, #44	; 0x2c
 8002b8e:	5499      	strb	r1, [r3, r2]
				slot2.charger_work_condition=(slot2.RxData[4])&(0x01<<3);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002b92:	2268      	movs	r2, #104	; 0x68
 8002b94:	5c9b      	ldrb	r3, [r3, r2]
 8002b96:	001a      	movs	r2, r3
 8002b98:	2308      	movs	r3, #8
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	4193      	sbcs	r3, r2
 8002ba0:	b2d9      	uxtb	r1, r3
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002ba4:	222d      	movs	r2, #45	; 0x2d
 8002ba6:	5499      	strb	r1, [r3, r2]
				slot2.charger_communication_error=(slot2.RxData[4])&(0x01<<4);
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002baa:	2268      	movs	r2, #104	; 0x68
 8002bac:	5c9b      	ldrb	r3, [r3, r2]
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	4193      	sbcs	r3, r2
 8002bb8:	b2d9      	uxtb	r1, r3
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002bbc:	222e      	movs	r2, #46	; 0x2e
 8002bbe:	5499      	strb	r1, [r3, r2]
				slot2.can_charger_trouble_state=0;
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002bc2:	2230      	movs	r2, #48	; 0x30
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]
				slot2.flag_recieve_charger=1;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8002bca:	222f      	movs	r2, #47	; 0x2f
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]
}
 8002bd0:	e009      	b.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	f001 ffc1 	bl	8004b60 <HAL_FDCAN_GetRxMessage>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_FDCAN_RxFifo0Callback+0x792>
 8002be2:	f000 fbaf 	bl	8003344 <Error_Handler>
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	200007f4 	.word	0x200007f4
 8002bf4:	20000460 	.word	0x20000460
 8002bf8:	20000744 	.word	0x20000744
 8002bfc:	200003fc 	.word	0x200003fc
 8002c00:	47ae147b 	.word	0x47ae147b
 8002c04:	3f847ae1 	.word	0x3f847ae1
 8002c08:	9999999a 	.word	0x9999999a
 8002c0c:	3fb99999 	.word	0x3fb99999
 8002c10:	20000058 	.word	0x20000058
 8002c14:	18ff50e5 	.word	0x18ff50e5

08002c18 <CAN_config>:


void CAN_config()
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002c1c:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <CAN_config+0x130>)
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	05d2      	lsls	r2, r2, #23
 8002c22:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIndex = 0;
 8002c24:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <CAN_config+0x130>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_DISABLE;
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <CAN_config+0x130>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <CAN_config+0x130>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterID1 = 0;
 8002c36:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <CAN_config+0x130>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterID2 = 0;
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <CAN_config+0x130>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]


	  sFilterConfig2.IdType = FDCAN_EXTENDED_ID;
 8002c42:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <CAN_config+0x134>)
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	05d2      	lsls	r2, r2, #23
 8002c48:	601a      	str	r2, [r3, #0]
	  sFilterConfig2.FilterIndex = 0;
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <CAN_config+0x134>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
	  sFilterConfig2.FilterType = FDCAN_FILTER_DISABLE;
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <CAN_config+0x134>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
	  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <CAN_config+0x134>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	60da      	str	r2, [r3, #12]
	  sFilterConfig2.FilterID1 = 0;
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <CAN_config+0x134>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
	  sFilterConfig2.FilterID2 = 0;
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <CAN_config+0x134>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]

	  TxHeader.Identifier = 0x01;
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <CAN_config+0x138>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <CAN_config+0x138>)
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	05d2      	lsls	r2, r2, #23
 8002c74:	605a      	str	r2, [r3, #4]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <CAN_config+0x138>)
 8002c78:	2280      	movs	r2, #128	; 0x80
 8002c7a:	0312      	lsls	r2, r2, #12
 8002c7c:	60da      	str	r2, [r3, #12]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <CAN_config+0x138>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002c84:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <CAN_config+0x138>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <CAN_config+0x138>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002c90:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <CAN_config+0x138>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <CAN_config+0x138>)
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	0412      	lsls	r2, r2, #16
 8002c9c:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <CAN_config+0x138>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]

	  TxHeader2.Identifier = 0x02;
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <CAN_config+0x13c>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	601a      	str	r2, [r3, #0]
	  TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <CAN_config+0x13c>)
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	05d2      	lsls	r2, r2, #23
 8002cb0:	605a      	str	r2, [r3, #4]
	  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <CAN_config+0x13c>)
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0312      	lsls	r2, r2, #12
 8002cb8:	60da      	str	r2, [r3, #12]
	  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <CAN_config+0x13c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
	  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <CAN_config+0x13c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
	  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <CAN_config+0x13c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
	  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <CAN_config+0x13c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
	  TxHeader2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <CAN_config+0x13c>)
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0412      	lsls	r2, r2, #16
 8002cd8:	61da      	str	r2, [r3, #28]
	  TxHeader2.MessageMarker = 0x00;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <CAN_config+0x13c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]

	  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <CAN_config+0x130>)
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <CAN_config+0x140>)
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f001 feb6 	bl	8004a58 <HAL_FDCAN_ConfigFilter>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <CAN_config+0x140>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f001 ff0f 	bl	8004b12 <HAL_FDCAN_Start>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d001      	beq.n	8002cfc <CAN_config+0xe4>
	  {
	    Error_Handler();
 8002cf8:	f000 fb24 	bl	8003344 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <CAN_config+0x140>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2101      	movs	r1, #1
 8002d02:	0018      	movs	r0, r3
 8002d04:	f002 f80e 	bl	8004d24 <HAL_FDCAN_ActivateNotification>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <CAN_config+0xf8>
	  {
	    Error_Handler();
 8002d0c:	f000 fb1a 	bl	8003344 <Error_Handler>
	  }


	  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2);
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <CAN_config+0x134>)
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <CAN_config+0x144>)
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 fe9e 	bl	8004a58 <HAL_FDCAN_ConfigFilter>
	  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <CAN_config+0x144>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f001 fef7 	bl	8004b12 <HAL_FDCAN_Start>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d001      	beq.n	8002d2c <CAN_config+0x114>
	  {
	   Error_Handler();
 8002d28:	f000 fb0c 	bl	8003344 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <CAN_config+0x144>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2101      	movs	r1, #1
 8002d32:	0018      	movs	r0, r3
 8002d34:	f001 fff6 	bl	8004d24 <HAL_FDCAN_ActivateNotification>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d001      	beq.n	8002d40 <CAN_config+0x128>
	  {
	    /* Notification Error */
	    Error_Handler();
 8002d3c:	f000 fb02 	bl	8003344 <Error_Handler>
	  }
    
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000028 	.word	0x20000028
 8002d4c:	20000040 	.word	0x20000040
 8002d50:	20000080 	.word	0x20000080
 8002d54:	2000076c 	.word	0x2000076c
 8002d58:	20000790 	.word	0x20000790
 8002d5c:	200007f4 	.word	0x200007f4

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d64:	f001 f846 	bl	8003df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d68:	f000 f86e 	bl	8002e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6c:	f000 faa6 	bl	80032bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002d70:	f000 fa7e 	bl	8003270 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002d74:	f000 f8c6 	bl	8002f04 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002d78:	f000 f90c 	bl	8002f94 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8002d7c:	f000 f952 	bl	8003024 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002d80:	f000 fa28 	bl	80031d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_config();
 8002d84:	f7ff ff48 	bl	8002c18 <CAN_config>
  slot1.notif=led_standby;
 8002d88:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <main+0xd8>)
 8002d8a:	23c4      	movs	r3, #196	; 0xc4
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	2101      	movs	r1, #1
 8002d90:	54d1      	strb	r1, [r2, r3]
  slot2.notif=led_standby;
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <main+0xdc>)
 8002d94:	23c4      	movs	r3, #196	; 0xc4
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	2101      	movs	r1, #1
 8002d9a:	54d1      	strb	r1, [r2, r3]
  slot1.state = standby;
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <main+0xd8>)
 8002d9e:	2274      	movs	r2, #116	; 0x74
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
  slot2.state=standby;
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <main+0xdc>)
 8002da6:	2274      	movs	r2, #116	; 0x74
 8002da8:	2101      	movs	r1, #1
 8002daa:	5499      	strb	r1, [r3, r2]

  slot1.wake_trig=1;
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <main+0xd8>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	705a      	strb	r2, [r3, #1]
  slot2.wake_trig=1;
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <main+0xdc>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
  slot1.last_lock_state=1;
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <main+0xd8>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	731a      	strb	r2, [r3, #12]
  slot2.last_lock_state=1;
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <main+0xdc>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	731a      	strb	r2, [r3, #12]
  slot1.charger_start_DIS=1;
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <main+0xd8>)
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]
  slot2.charger_start_DIS=1;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <main+0xdc>)
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]
  slot1.unlock_command=1;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <main+0xd8>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	721a      	strb	r2, [r3, #8]
  slot2.unlock_command=1;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <main+0xdc>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	721a      	strb	r2, [r3, #8]
  slot1.batt_state=0x01;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <main+0xd8>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	661a      	str	r2, [r3, #96]	; 0x60
  slot2.batt_state=0x01;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <main+0xdc>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60

  slot1.datasentflag=0;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <main+0xd8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	679a      	str	r2, [r3, #120]	; 0x78
  slot2.datasentflag=1;
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <main+0xdc>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	679a      	str	r2, [r3, #120]	; 0x78
  fault_led(&slot1);
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <main+0xd8>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 ff7a 	bl	8003cf4 <fault_led>
  fault_led(&slot2);
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <main+0xdc>)
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 ff76 	bl	8003cf4 <fault_led>
//	  default:
//		  slot2.notif=standby;
//		  slot2.state = standby;
//		  break;
//	  }
	send_led();
 8002e08:	f000 feda 	bl	8003bc0 <send_led>
//	CAN_TX();
//	Flash_Write_Data(0x0801F800, data, 2);

	if(HAL_GetTick()-tick.led>2000)
 8002e0c:	f001 f86e 	bl	8003eec <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <main+0xe0>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	1ad2      	subs	r2, r2, r3
 8002e18:	23fa      	movs	r3, #250	; 0xfa
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d9f3      	bls.n	8002e08 <main+0xa8>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <main+0xe4>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0018      	movs	r0, r3
 8002e26:	f002 fbe4 	bl	80055f2 <HAL_GPIO_TogglePin>
		tick.led=HAL_GetTick();
 8002e2a:	f001 f85f 	bl	8003eec <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <main+0xe0>)
 8002e32:	605a      	str	r2, [r3, #4]
	send_led();
 8002e34:	e7e8      	b.n	8002e08 <main+0xa8>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	200000b4 	.word	0x200000b4
 8002e3c:	200003fc 	.word	0x200003fc
 8002e40:	200000a4 	.word	0x200000a4
 8002e44:	50000400 	.word	0x50000400

08002e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b095      	sub	sp, #84	; 0x54
 8002e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4e:	2414      	movs	r4, #20
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	0018      	movs	r0, r3
 8002e54:	233c      	movs	r3, #60	; 0x3c
 8002e56:	001a      	movs	r2, r3
 8002e58:	2100      	movs	r1, #0
 8002e5a:	f006 fb2b 	bl	80094b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	0018      	movs	r0, r3
 8002e62:	2310      	movs	r3, #16
 8002e64:	001a      	movs	r2, r3
 8002e66:	2100      	movs	r1, #0
 8002e68:	f006 fb24 	bl	80094b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f002 fbd9 	bl	8005628 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	2202      	movs	r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	0052      	lsls	r2, r2, #1
 8002e82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002e84:	0021      	movs	r1, r4
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2202      	movs	r2, #2
 8002e96:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	0292      	lsls	r2, r2, #10
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	0492      	lsls	r2, r2, #18
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	0592      	lsls	r2, r2, #22
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f002 fbfb 	bl	80056c0 <HAL_RCC_OscConfig>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d001      	beq.n	8002ed2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002ece:	f000 fa39 	bl	8003344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	2202      	movs	r2, #2
 8002edc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2102      	movs	r1, #2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f002 ff46 	bl	8005d80 <HAL_RCC_ClockConfig>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002ef8:	f000 fa24 	bl	8003344 <Error_Handler>
  }
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b015      	add	sp, #84	; 0x54
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f0a:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <MX_FDCAN1_Init+0x8c>)
 8002f0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f34:	2210      	movs	r2, #16
 8002f36:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f46:	2208      	movs	r2, #8
 8002f48:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <MX_FDCAN1_Init+0x88>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f001 fc08 	bl	800478c <HAL_FDCAN_Init>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002f80:	f000 f9e0 	bl	8003344 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	20000790 	.word	0x20000790
 8002f90:	40006400 	.word	0x40006400

08002f94 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002f98:	4b20      	ldr	r3, [pc, #128]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <MX_FDCAN2_Init+0x8c>)
 8002f9c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 7;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 8;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_FDCAN2_Init+0x88>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <MX_FDCAN2_Init+0x88>)
 8003000:	2200      	movs	r2, #0
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <MX_FDCAN2_Init+0x88>)
 8003006:	0018      	movs	r0, r3
 8003008:	f001 fbc0 	bl	800478c <HAL_FDCAN_Init>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d001      	beq.n	8003014 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003010:	f000 f998 	bl	8003344 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	200007f4 	.word	0x200007f4
 8003020:	40006800 	.word	0x40006800

08003024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b09c      	sub	sp, #112	; 0x70
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	2360      	movs	r3, #96	; 0x60
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	0018      	movs	r0, r3
 8003030:	2310      	movs	r3, #16
 8003032:	001a      	movs	r2, r3
 8003034:	2100      	movs	r1, #0
 8003036:	f006 fa3d 	bl	80094b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303a:	2354      	movs	r3, #84	; 0x54
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	0018      	movs	r0, r3
 8003040:	230c      	movs	r3, #12
 8003042:	001a      	movs	r2, r3
 8003044:	2100      	movs	r1, #0
 8003046:	f006 fa35 	bl	80094b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304a:	2338      	movs	r3, #56	; 0x38
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	0018      	movs	r0, r3
 8003050:	231c      	movs	r3, #28
 8003052:	001a      	movs	r2, r3
 8003054:	2100      	movs	r1, #0
 8003056:	f006 fa2d 	bl	80094b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	0018      	movs	r0, r3
 800305e:	2334      	movs	r3, #52	; 0x34
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f006 fa26 	bl	80094b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <MX_TIM1_Init+0x1a8>)
 800306a:	4a59      	ldr	r2, [pc, #356]	; (80031d0 <MX_TIM1_Init+0x1ac>)
 800306c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 79;
 800307a:	4b54      	ldr	r3, [pc, #336]	; (80031cc <MX_TIM1_Init+0x1a8>)
 800307c:	224f      	movs	r2, #79	; 0x4f
 800307e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b52      	ldr	r3, [pc, #328]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <MX_TIM1_Init+0x1a8>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003094:	0018      	movs	r0, r3
 8003096:	f003 fa59 	bl	800654c <HAL_TIM_Base_Init>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800309e:	f000 f951 	bl	8003344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a2:	2160      	movs	r1, #96	; 0x60
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	0152      	lsls	r2, r2, #5
 80030aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030ac:	187a      	adds	r2, r7, r1
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <MX_TIM1_Init+0x1a8>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f004 f82a 	bl	800710c <HAL_TIM_ConfigClockSource>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80030bc:	f000 f942 	bl	8003344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <MX_TIM1_Init+0x1a8>)
 80030c2:	0018      	movs	r0, r3
 80030c4:	f003 fa9a 	bl	80065fc <HAL_TIM_PWM_Init>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80030cc:	f000 f93a 	bl	8003344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030d0:	2154      	movs	r1, #84	; 0x54
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2220      	movs	r2, #32
 80030d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2200      	movs	r2, #0
 80030dc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030e4:	187a      	adds	r2, r7, r1
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <MX_TIM1_Init+0x1a8>)
 80030e8:	0011      	movs	r1, r2
 80030ea:	0018      	movs	r0, r3
 80030ec:	f004 fdf6 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80030f4:	f000 f926 	bl	8003344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f8:	2138      	movs	r1, #56	; 0x38
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2260      	movs	r2, #96	; 0x60
 80030fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2200      	movs	r2, #0
 8003104:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800311e:	187b      	adds	r3, r7, r1
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003124:	1879      	adds	r1, r7, r1
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003128:	2204      	movs	r2, #4
 800312a:	0018      	movs	r0, r3
 800312c:	f003 feee 	bl	8006f0c <HAL_TIM_PWM_ConfigChannel>
 8003130:	1e03      	subs	r3, r0, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003134:	f000 f906 	bl	8003344 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003138:	2138      	movs	r1, #56	; 0x38
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2204      	movs	r2, #4
 800313e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003140:	1879      	adds	r1, r7, r1
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <MX_TIM1_Init+0x1a8>)
 8003144:	2208      	movs	r2, #8
 8003146:	0018      	movs	r0, r3
 8003148:	f003 fee0 	bl	8006f0c <HAL_TIM_PWM_ConfigChannel>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8003150:	f000 f8f8 	bl	8003344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	2200      	movs	r2, #0
 800315e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	2200      	movs	r2, #0
 800316a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	0192      	lsls	r2, r2, #6
 8003178:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	0492      	lsls	r2, r2, #18
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2200      	movs	r2, #0
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	2200      	movs	r2, #0
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031a6:	1d3a      	adds	r2, r7, #4
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <MX_TIM1_Init+0x1a8>)
 80031aa:	0011      	movs	r1, r2
 80031ac:	0018      	movs	r0, r3
 80031ae:	f004 fe0b 	bl	8007dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 80031b6:	f000 f8c5 	bl	8003344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <MX_TIM1_Init+0x1a8>)
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fa73 	bl	80036a8 <HAL_TIM_MspPostInit>

}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b01c      	add	sp, #112	; 0x70
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	20000858 	.word	0x20000858
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031d8:	4b23      	ldr	r3, [pc, #140]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031da:	4a24      	ldr	r2, [pc, #144]	; (800326c <MX_USART1_UART_Init+0x98>)
 80031dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031e0:	22e1      	movs	r2, #225	; 0xe1
 80031e2:	0252      	lsls	r2, r2, #9
 80031e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <MX_USART1_UART_Init+0x94>)
 80031fa:	220c      	movs	r2, #12
 80031fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <MX_USART1_UART_Init+0x94>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003218:	2200      	movs	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <MX_USART1_UART_Init+0x94>)
 800321e:	0018      	movs	r0, r3
 8003220:	f004 fe90 	bl	8007f44 <HAL_UART_Init>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003228:	f000 f88c 	bl	8003344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_USART1_UART_Init+0x94>)
 800322e:	2100      	movs	r1, #0
 8003230:	0018      	movs	r0, r3
 8003232:	f006 f83b 	bl	80092ac <HAL_UARTEx_SetTxFifoThreshold>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d001      	beq.n	800323e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800323a:	f000 f883 	bl	8003344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003240:	2100      	movs	r1, #0
 8003242:	0018      	movs	r0, r3
 8003244:	f006 f872 	bl	800932c <HAL_UARTEx_SetRxFifoThreshold>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800324c:	f000 f87a 	bl	8003344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <MX_USART1_UART_Init+0x94>)
 8003252:	0018      	movs	r0, r3
 8003254:	f005 fff0 	bl	8009238 <HAL_UARTEx_DisableFifoMode>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800325c:	f000 f872 	bl	8003344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000964 	.word	0x20000964
 800326c:	40013800 	.word	0x40013800

08003270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <MX_DMA_Init+0x48>)
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_DMA_Init+0x48>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <MX_DMA_Init+0x48>)
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	2201      	movs	r2, #1
 8003288:	4013      	ands	r3, r2
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	2009      	movs	r0, #9
 8003294:	f000 fee0 	bl	8004058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003298:	2009      	movs	r0, #9
 800329a:	f000 fef2 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	200a      	movs	r0, #10
 80032a4:	f000 fed8 	bl	8004058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032a8:	200a      	movs	r0, #10
 80032aa:	f000 feea 	bl	8004082 <HAL_NVIC_EnableIRQ>

}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000

080032bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	240c      	movs	r4, #12
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	0018      	movs	r0, r3
 80032c8:	2314      	movs	r3, #20
 80032ca:	001a      	movs	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f006 f8f1 	bl	80094b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <MX_GPIO_Init+0x80>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <MX_GPIO_Init+0x80>)
 80032d8:	2102      	movs	r1, #2
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <MX_GPIO_Init+0x80>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2202      	movs	r2, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <MX_GPIO_Init+0x80>)
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <MX_GPIO_Init+0x80>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_GPIO_Init+0x80>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_GPIO_Init+0x84>)
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	0018      	movs	r0, r3
 800330a:	f002 f955 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800330e:	0021      	movs	r1, r4
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2201      	movs	r2, #1
 800331a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003328:	187b      	adds	r3, r7, r1
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <MX_GPIO_Init+0x84>)
 800332c:	0019      	movs	r1, r3
 800332e:	0010      	movs	r0, r2
 8003330:	f001 ffd6 	bl	80052e0 <HAL_GPIO_Init>

}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b009      	add	sp, #36	; 0x24
 800333a:	bd90      	pop	{r4, r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	50000400 	.word	0x50000400

08003344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003348:	b672      	cpsid	i
}
 800334a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800334c:	e7fe      	b.n	800334c <Error_Handler+0x8>
	...

08003350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_MspInit+0x44>)
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_MspInit+0x44>)
 800335c:	2101      	movs	r1, #1
 800335e:	430a      	orrs	r2, r1
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_MspInit+0x44>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2201      	movs	r2, #1
 8003368:	4013      	ands	r3, r2
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_MspInit+0x44>)
 8003370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_MspInit+0x44>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0549      	lsls	r1, r1, #21
 8003378:	430a      	orrs	r2, r1
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_MspInit+0x44>)
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	055b      	lsls	r3, r3, #21
 8003384:	4013      	ands	r3, r2
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b09f      	sub	sp, #124	; 0x7c
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	2364      	movs	r3, #100	; 0x64
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	0018      	movs	r0, r3
 80033a6:	2314      	movs	r3, #20
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f006 f882 	bl	80094b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b0:	2418      	movs	r4, #24
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	0018      	movs	r0, r3
 80033b6:	234c      	movs	r3, #76	; 0x4c
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f006 f87a 	bl	80094b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5f      	ldr	r2, [pc, #380]	; (8003544 <HAL_FDCAN_MspInit+0x1ac>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d15a      	bne.n	8003480 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	0492      	lsls	r2, r2, #18
 80033d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2200      	movs	r2, #0
 80033d6:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	0018      	movs	r0, r3
 80033dc:	f002 fe7a 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80033e4:	f7ff ffae 	bl	8003344 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80033f0:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10d      	bne.n	8003416 <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80033fa:	4b54      	ldr	r3, [pc, #336]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80033fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fe:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0149      	lsls	r1, r1, #5
 8003404:	430a      	orrs	r2, r1
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	4013      	ands	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	4b4d      	ldr	r3, [pc, #308]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 8003418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 800341c:	2101      	movs	r1, #1
 800341e:	430a      	orrs	r2, r1
 8003420:	635a      	str	r2, [r3, #52]	; 0x34
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800342e:	2164      	movs	r1, #100	; 0x64
 8003430:	187b      	adds	r3, r7, r1
 8003432:	22c0      	movs	r2, #192	; 0xc0
 8003434:	0152      	lsls	r2, r2, #5
 8003436:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2202      	movs	r2, #2
 800343c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2203      	movs	r2, #3
 800344e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	187a      	adds	r2, r7, r1
 8003452:	23a0      	movs	r3, #160	; 0xa0
 8003454:	05db      	lsls	r3, r3, #23
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f001 ff41 	bl	80052e0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2100      	movs	r1, #0
 8003462:	2015      	movs	r0, #21
 8003464:	f000 fdf8 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8003468:	2015      	movs	r0, #21
 800346a:	f000 fe0a 	bl	8004082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	2016      	movs	r0, #22
 8003474:	f000 fdf0 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8003478:	2016      	movs	r0, #22
 800347a:	f000 fe02 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800347e:	e05d      	b.n	800353c <HAL_FDCAN_MspInit+0x1a4>
  else if(hfdcan->Instance==FDCAN2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a32      	ldr	r2, [pc, #200]	; (8003550 <HAL_FDCAN_MspInit+0x1b8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d158      	bne.n	800353c <HAL_FDCAN_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800348a:	2118      	movs	r1, #24
 800348c:	187b      	adds	r3, r7, r1
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	0492      	lsls	r2, r2, #18
 8003492:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2200      	movs	r2, #0
 8003498:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800349a:	187b      	adds	r3, r7, r1
 800349c:	0018      	movs	r0, r3
 800349e:	f002 fe19 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d001      	beq.n	80034aa <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80034a6:	f7ff ff4d 	bl	8003344 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80034aa:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80034b2:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_FDCAN_MspInit+0x1b0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10d      	bne.n	80034d8 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80034bc:	4b23      	ldr	r3, [pc, #140]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	0149      	lsls	r1, r1, #5
 80034c6:	430a      	orrs	r2, r1
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	015b      	lsls	r3, r3, #5
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034de:	2102      	movs	r1, #2
 80034e0:	430a      	orrs	r2, r1
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_FDCAN_MspInit+0x1b4>)
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	2202      	movs	r2, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034f0:	2164      	movs	r1, #100	; 0x64
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2203      	movs	r2, #3
 80034f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	2202      	movs	r2, #2
 80034fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2203      	movs	r2, #3
 800350e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003510:	187b      	adds	r3, r7, r1
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_FDCAN_MspInit+0x1bc>)
 8003514:	0019      	movs	r1, r3
 8003516:	0010      	movs	r0, r2
 8003518:	f001 fee2 	bl	80052e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2015      	movs	r0, #21
 8003522:	f000 fd99 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8003526:	2015      	movs	r0, #21
 8003528:	f000 fdab 	bl	8004082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2016      	movs	r0, #22
 8003532:	f000 fd91 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8003536:	2016      	movs	r0, #22
 8003538:	f000 fda3 	bl	8004082 <HAL_NVIC_EnableIRQ>
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b01f      	add	sp, #124	; 0x7c
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	40006400 	.word	0x40006400
 8003548:	20000a58 	.word	0x20000a58
 800354c:	40021000 	.word	0x40021000
 8003550:	40006800 	.word	0x40006800
 8003554:	50000400 	.word	0x50000400

08003558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b097      	sub	sp, #92	; 0x5c
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003560:	240c      	movs	r4, #12
 8003562:	193b      	adds	r3, r7, r4
 8003564:	0018      	movs	r0, r3
 8003566:	234c      	movs	r3, #76	; 0x4c
 8003568:	001a      	movs	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f005 ffa2 	bl	80094b4 <memset>
  if(htim_base->Instance==TIM1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_TIM_Base_MspInit+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d000      	beq.n	800357c <HAL_TIM_Base_MspInit+0x24>
 800357a:	e084      	b.n	8003686 <HAL_TIM_Base_MspInit+0x12e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800357c:	193b      	adds	r3, r7, r4
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0392      	lsls	r2, r2, #14
 8003582:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8003584:	193b      	adds	r3, r7, r4
 8003586:	2200      	movs	r2, #0
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800358a:	193b      	adds	r3, r7, r4
 800358c:	0018      	movs	r0, r3
 800358e:	f002 fda1 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8003596:	f7ff fed5 	bl	8003344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <HAL_TIM_Base_MspInit+0x13c>)
 800359c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_TIM_Base_MspInit+0x13c>)
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	0109      	lsls	r1, r1, #4
 80035a4:	430a      	orrs	r2, r1
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
 80035a8:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_TIM_Base_MspInit+0x13c>)
 80035aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 80035b6:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035b8:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_TIM_Base_MspInit+0x144>)
 80035ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035be:	2215      	movs	r2, #21
 80035c0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035c2:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035c4:	2210      	movs	r2, #16
 80035c6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80035ce:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0052      	lsls	r2, r2, #1
 80035da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	00d2      	lsls	r2, r2, #3
 80035e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80035ea:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0192      	lsls	r2, r2, #6
 80035f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fd61 	bl	80040bc <HAL_DMA_Init>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_Base_MspInit+0xaa>
    {
      Error_Handler();
 80035fe:	f7ff fea1 	bl	8003344 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_TIM_Base_MspInit+0x140>)
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel2;
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003610:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <HAL_TIM_Base_MspInit+0x14c>)
 8003612:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003616:	2216      	movs	r2, #22
 8003618:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 800361c:	2210      	movs	r2, #16
 800361e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0052      	lsls	r2, r2, #1
 8003632:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	00d2      	lsls	r2, r2, #3
 800363a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	0192      	lsls	r2, r2, #6
 8003648:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fd35 	bl	80040bc <HAL_DMA_Init>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <HAL_TIM_Base_MspInit+0x102>
    {
      Error_Handler();
 8003656:	f7ff fe75 	bl	8003344 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_TIM_Base_MspInit+0x148>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	200d      	movs	r0, #13
 800366c:	f000 fcf4 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003670:	200d      	movs	r0, #13
 8003672:	f000 fd06 	bl	8004082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	200e      	movs	r0, #14
 800367c:	f000 fcec 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003680:	200e      	movs	r0, #14
 8003682:	f000 fcfe 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b017      	add	sp, #92	; 0x5c
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40021000 	.word	0x40021000
 8003698:	200008a4 	.word	0x200008a4
 800369c:	40020008 	.word	0x40020008
 80036a0:	20000904 	.word	0x20000904
 80036a4:	4002001c 	.word	0x4002001c

080036a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	240c      	movs	r4, #12
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	0018      	movs	r0, r3
 80036b6:	2314      	movs	r3, #20
 80036b8:	001a      	movs	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	f005 fefa 	bl	80094b4 <memset>
  if(htim->Instance==TIM1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <HAL_TIM_MspPostInit+0x70>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d121      	bne.n	800370e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_TIM_MspPostInit+0x74>)
 80036cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <HAL_TIM_MspPostInit+0x74>)
 80036d0:	2102      	movs	r1, #2
 80036d2:	430a      	orrs	r2, r1
 80036d4:	635a      	str	r2, [r3, #52]	; 0x34
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_TIM_MspPostInit+0x74>)
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80036e2:	0021      	movs	r1, r4
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2248      	movs	r2, #72	; 0x48
 80036e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2202      	movs	r2, #2
 80036ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	187b      	adds	r3, r7, r1
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	2201      	movs	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	187b      	adds	r3, r7, r1
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <HAL_TIM_MspPostInit+0x78>)
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f001 fde9 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b009      	add	sp, #36	; 0x24
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40021000 	.word	0x40021000
 8003720:	50000400 	.word	0x50000400

08003724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b09d      	sub	sp, #116	; 0x74
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	235c      	movs	r3, #92	; 0x5c
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	0018      	movs	r0, r3
 8003732:	2314      	movs	r3, #20
 8003734:	001a      	movs	r2, r3
 8003736:	2100      	movs	r1, #0
 8003738:	f005 febc 	bl	80094b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	2410      	movs	r4, #16
 800373e:	193b      	adds	r3, r7, r4
 8003740:	0018      	movs	r0, r3
 8003742:	234c      	movs	r3, #76	; 0x4c
 8003744:	001a      	movs	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	f005 feb4 	bl	80094b4 <memset>
  if(huart->Instance==USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_UART_MspInit+0x120>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d171      	bne.n	800383a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003762:	193b      	adds	r3, r7, r4
 8003764:	0018      	movs	r0, r3
 8003766:	f002 fcb5 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800376e:	f7ff fde9 	bl	8003344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_UART_MspInit+0x124>)
 8003774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_UART_MspInit+0x124>)
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	01c9      	lsls	r1, r1, #7
 800377c:	430a      	orrs	r2, r1
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
 8003780:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_UART_MspInit+0x124>)
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_UART_MspInit+0x124>)
 8003790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_UART_MspInit+0x124>)
 8003794:	2101      	movs	r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	635a      	str	r2, [r3, #52]	; 0x34
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_UART_MspInit+0x124>)
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037a6:	215c      	movs	r1, #92	; 0x5c
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	22c0      	movs	r2, #192	; 0xc0
 80037ac:	00d2      	lsls	r2, r2, #3
 80037ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2202      	movs	r2, #2
 80037b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2201      	movs	r2, #1
 80037c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c8:	187a      	adds	r2, r7, r1
 80037ca:	23a0      	movs	r3, #160	; 0xa0
 80037cc:	05db      	lsls	r3, r3, #23
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f001 fd85 	bl	80052e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_UART_MspInit+0x128>)
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_UART_MspInit+0x12c>)
 80037da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_UART_MspInit+0x128>)
 80037de:	2232      	movs	r2, #50	; 0x32
 80037e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_UART_MspInit+0x128>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_UART_MspInit+0x128>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <HAL_UART_MspInit+0x128>)
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_UART_MspInit+0x128>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_UART_MspInit+0x128>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_UART_MspInit+0x128>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_UART_MspInit+0x128>)
 8003808:	2200      	movs	r2, #0
 800380a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_UART_MspInit+0x128>)
 800380e:	0018      	movs	r0, r3
 8003810:	f000 fc54 	bl	80040bc <HAL_DMA_Init>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8003818:	f7ff fd94 	bl	8003344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_UART_MspInit+0x128>)
 8003822:	505a      	str	r2, [r3, r1]
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_UART_MspInit+0x128>)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	201b      	movs	r0, #27
 8003830:	f000 fc12 	bl	8004058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003834:	201b      	movs	r0, #27
 8003836:	f000 fc24 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b01d      	add	sp, #116	; 0x74
 8003840:	bd90      	pop	{r4, r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40013800 	.word	0x40013800
 8003848:	40021000 	.word	0x40021000
 800384c:	200009f8 	.word	0x200009f8
 8003850:	40020030 	.word	0x40020030

08003854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <NMI_Handler+0x4>

0800385a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800385e:	e7fe      	b.n	800385e <HardFault_Handler+0x4>

08003860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003878:	f000 fb26 	bl	8003ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <DMA1_Channel1_IRQHandler+0x14>)
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fe10 	bl	80044b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200008a4 	.word	0x200008a4

0800389c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 fe04 	bl	80044b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <DMA1_Channel2_3_IRQHandler+0x20>)
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fe00 	bl	80044b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	20000904 	.word	0x20000904
 80038bc:	200009f8 	.word	0x200009f8

080038c0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80038c6:	0018      	movs	r0, r3
 80038c8:	f003 f9ee 	bl	8006ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	20000858 	.word	0x20000858

080038d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <TIM1_CC_IRQHandler+0x14>)
 80038de:	0018      	movs	r0, r3
 80038e0:	f003 f9e2 	bl	8006ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	20000858 	.word	0x20000858

080038f0 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f001 faea 	bl	8004ed0 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f001 fae6 	bl	8004ed0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20000790 	.word	0x20000790
 8003910:	200007f4 	.word	0x200007f4

08003914 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 800391a:	0018      	movs	r0, r3
 800391c:	f001 fad8 	bl	8004ed0 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8003922:	0018      	movs	r0, r3
 8003924:	f001 fad4 	bl	8004ed0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000790 	.word	0x20000790
 8003934:	200007f4 	.word	0x200007f4

08003938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <USART1_IRQHandler+0x14>)
 800393e:	0018      	movs	r0, r3
 8003940:	f004 fb56 	bl	8007ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	20000964 	.word	0x20000964

08003950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <Set_LED>:
extern DMA_HandleTypeDef hdma_tim1_ch3;
extern DMA_HandleTypeDef hdma_tim1_ch2;
extern slot slot1,slot2;

void Set_LED (slot *Slot,int LEDnum, int Red, int Green, int Blue)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
	Slot->LED_Data[LEDnum][0] = LEDnum;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	b2d9      	uxtb	r1, r3
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	331e      	adds	r3, #30
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	3304      	adds	r3, #4
 8003978:	1c0a      	adds	r2, r1, #0
 800397a:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][1] = Green;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2d8      	uxtb	r0, r3
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	217d      	movs	r1, #125	; 0x7d
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	185b      	adds	r3, r3, r1
 800398c:	1c02      	adds	r2, r0, #0
 800398e:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][2] = Red;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	217e      	movs	r1, #126	; 0x7e
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	185b      	adds	r3, r3, r1
 80039a0:	1c02      	adds	r2, r0, #0
 80039a2:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][3] = Blue;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	217f      	movs	r1, #127	; 0x7f
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	185b      	adds	r3, r3, r1
 80039b4:	1c02      	adds	r2, r0, #0
 80039b6:	701a      	strb	r2, [r3, #0]
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b004      	add	sp, #16
 80039be:	bd80      	pop	{r7, pc}

080039c0 <Set_Brightness>:
#define PI 3.14159265
void Set_Brightness (slot *Slot,int brightness)  // 0-45
{
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b2d      	cmp	r3, #45	; 0x2d
 80039ce:	dd01      	ble.n	80039d4 <Set_Brightness+0x14>
 80039d0:	232d      	movs	r3, #45	; 0x2d
 80039d2:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e068      	b.n	8003aac <Set_Brightness+0xec>
	{
		Slot->LED_Mod[i][0] = Slot->LED_Data[i][0];
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	331e      	adds	r3, #30
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	18d3      	adds	r3, r2, r3
 80039e4:	3304      	adds	r3, #4
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	18d3      	adds	r3, r2, r3
 80039f2:	3304      	adds	r3, #4
 80039f4:	1c0a      	adds	r2, r1, #0
 80039f6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80039f8:	2301      	movs	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e050      	b.n	8003aa0 <Set_Brightness+0xe0>
		{
			float angle = 90-brightness;  // in degrees
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	225a      	movs	r2, #90	; 0x5a
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7fc fe3b 	bl	8000680 <__aeabi_i2f>
 8003a0a:	1c03      	adds	r3, r0, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7fe fc26 	bl	8002260 <__aeabi_f2d>
 8003a14:	4a29      	ldr	r2, [pc, #164]	; (8003abc <Set_Brightness+0xfc>)
 8003a16:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <Set_Brightness+0x100>)
 8003a18:	f7fd fdbe 	bl	8001598 <__aeabi_dmul>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	000b      	movs	r3, r1
 8003a20:	0010      	movs	r0, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	2200      	movs	r2, #0
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <Set_Brightness+0x104>)
 8003a28:	f7fd f9b4 	bl	8000d94 <__aeabi_ddiv>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	000b      	movs	r3, r1
 8003a30:	0010      	movs	r0, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	f7fe fc5c 	bl	80022f0 <__aeabi_d2f>
 8003a38:	1c03      	adds	r3, r0, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
			Slot->LED_Mod[i][j] = (Slot->LED_Data[i][j])/(tan(angle));
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	217c      	movs	r1, #124	; 0x7c
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	18d2      	adds	r2, r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	185b      	adds	r3, r3, r1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7fe fbd6 	bl	8002200 <__aeabi_i2d>
 8003a54:	0004      	movs	r4, r0
 8003a56:	000d      	movs	r5, r1
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7fe fc01 	bl	8002260 <__aeabi_f2d>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	000b      	movs	r3, r1
 8003a62:	0010      	movs	r0, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	f005 fd2d 	bl	80094c4 <tan>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	000b      	movs	r3, r1
 8003a6e:	0020      	movs	r0, r4
 8003a70:	0029      	movs	r1, r5
 8003a72:	f7fd f98f 	bl	8000d94 <__aeabi_ddiv>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	f7fc fd15 	bl	80004ac <__aeabi_d2uiz>
 8003a82:	0003      	movs	r3, r0
 8003a84:	b2d8      	uxtb	r0, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	21a4      	movs	r1, #164	; 0xa4
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	18d2      	adds	r2, r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	18d3      	adds	r3, r2, r3
 8003a94:	185b      	adds	r3, r3, r1
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	ddab      	ble.n	80039fe <Set_Brightness+0x3e>
	for (int i=0; i<MAX_LED; i++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	dd93      	ble.n	80039da <Set_Brightness+0x1a>
		}
	}

#endif

}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b006      	add	sp, #24
 8003aba:	bdb0      	pop	{r4, r5, r7, pc}
 8003abc:	53c8d4f1 	.word	0x53c8d4f1
 8003ac0:	400921fb 	.word	0x400921fb
 8003ac4:	40668000 	.word	0x40668000

08003ac8 <WS2812_Send>:
void WS2812_Send (void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e041      	b.n	8003b5c <WS2812_Send+0x94>
	{
	  if (USE_BRIGHTNESS)
	  {
			color = ((slot1.LED_Mod[i][1]<<16) | (slot1.LED_Mod[i][2]<<8) | (slot1.LED_Mod[i][3]));
 8003ad8:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <WS2812_Send+0xe8>)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	21a5      	movs	r1, #165	; 0xa5
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	185b      	adds	r3, r3, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	041a      	lsls	r2, r3, #16
 8003ae8:	4931      	ldr	r1, [pc, #196]	; (8003bb0 <WS2812_Send+0xe8>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	20a6      	movs	r0, #166	; 0xa6
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	18cb      	adds	r3, r1, r3
 8003af2:	181b      	adds	r3, r3, r0
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4313      	orrs	r3, r2
 8003afa:	492d      	ldr	r1, [pc, #180]	; (8003bb0 <WS2812_Send+0xe8>)
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	20a7      	movs	r0, #167	; 0xa7
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	188a      	adds	r2, r1, r2
 8003b04:	1812      	adds	r2, r2, r0
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	607b      	str	r3, [r7, #4]
	  {
			color = ((slot1.LED_Data[i][1]<<16) | (slot1.LED_Data[i][2]<<8) | (slot1.LED_Data[i][3]));
	  }


		for (int i=23; i>=0; i--)
 8003b0c:	2317      	movs	r3, #23
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e01e      	b.n	8003b50 <WS2812_Send+0x88>
		{
			if (color&(1<<i))
 8003b12:	2201      	movs	r2, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	409a      	lsls	r2, r3
 8003b18:	0013      	movs	r3, r2
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d008      	beq.n	8003b34 <WS2812_Send+0x6c>
			{
				slot1.pwmData[indx] = 51;  // 2/3 of 79
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <WS2812_Send+0xe8>)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3364      	adds	r3, #100	; 0x64
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	18d3      	adds	r3, r2, r3
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2233      	movs	r2, #51	; 0x33
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <WS2812_Send+0x7c>
			}

			else slot1.pwmData[indx] = 29;  // 1/3 of 79
 8003b34:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <WS2812_Send+0xe8>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3364      	adds	r3, #100	; 0x64
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	3304      	adds	r3, #4
 8003b40:	221d      	movs	r2, #29
 8003b42:	801a      	strh	r2, [r3, #0]

			indx++;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dadd      	bge.n	8003b12 <WS2812_Send+0x4a>
	for (int i= 0; i<MAX_LED; i++)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	ddba      	ble.n	8003ad8 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	e00d      	b.n	8003b84 <WS2812_Send+0xbc>
	{
		slot1.pwmData[indx] = 0;
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <WS2812_Send+0xe8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3364      	adds	r3, #100	; 0x64
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	18d3      	adds	r3, r2, r3
 8003b72:	3304      	adds	r3, #4
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]
		indx++;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b31      	cmp	r3, #49	; 0x31
 8003b88:	ddee      	ble.n	8003b68 <WS2812_Send+0xa0>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)slot1.pwmData, indx);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <WS2812_Send+0xec>)
 8003b90:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <WS2812_Send+0xf0>)
 8003b92:	2108      	movs	r1, #8
 8003b94:	f002 fd92 	bl	80066bc <HAL_TIM_PWM_Start_DMA>
	while (!slot1.datasentflag){};
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <WS2812_Send+0xe8>)
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0fb      	beq.n	8003b9a <WS2812_Send+0xd2>
	slot2.datasentflag = 0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <WS2812_Send+0xf4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200000b4 	.word	0x200000b4
 8003bb4:	20000180 	.word	0x20000180
 8003bb8:	20000858 	.word	0x20000858
 8003bbc:	200003fc 	.word	0x200003fc

08003bc0 <send_led>:
void send_led()
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	if(slot1.datasentflag==0&&slot2.datasentflag==1){WS2812_Send();}
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <send_led+0x34>)
 8003bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <send_led+0x1a>
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <send_led+0x38>)
 8003bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <send_led+0x1a>
 8003bd4:	f7ff ff78 	bl	8003ac8 <WS2812_Send>
	else if((slot2.datasentflag==0&&slot1.datasentflag==1)){WS2812_Send2();}

}
 8003bd8:	e009      	b.n	8003bee <send_led+0x2e>
	else if((slot2.datasentflag==0&&slot1.datasentflag==1)){WS2812_Send2();}
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <send_led+0x38>)
 8003bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <send_led+0x2e>
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <send_led+0x34>)
 8003be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <send_led+0x2e>
 8003bea:	f000 f807 	bl	8003bfc <WS2812_Send2>
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200000b4 	.word	0x200000b4
 8003bf8:	200003fc 	.word	0x200003fc

08003bfc <WS2812_Send2>:
void WS2812_Send2 (void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e041      	b.n	8003c90 <WS2812_Send2+0x94>
	{
	  if (USE_BRIGHTNESS)
	  {
			color = ((slot2.LED_Mod[i][1]<<16) | (slot2.LED_Mod[i][2]<<8) | (slot2.LED_Mod[i][3]));
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	21a5      	movs	r1, #165	; 0xa5
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	185b      	adds	r3, r3, r1
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	041a      	lsls	r2, r3, #16
 8003c1c:	4931      	ldr	r1, [pc, #196]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	20a6      	movs	r0, #166	; 0xa6
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	18cb      	adds	r3, r1, r3
 8003c26:	181b      	adds	r3, r3, r0
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	492d      	ldr	r1, [pc, #180]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	20a7      	movs	r0, #167	; 0xa7
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	188a      	adds	r2, r1, r2
 8003c38:	1812      	adds	r2, r2, r0
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	607b      	str	r3, [r7, #4]
	  {
			color = ((slot2.LED_Data[i][1]<<16) | (slot2.LED_Data[i][2]<<8) | (slot2.LED_Data[i][3]));
	  }


		for (int i=23; i>=0; i--)
 8003c40:	2317      	movs	r3, #23
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e01e      	b.n	8003c84 <WS2812_Send2+0x88>
		{
			if (color&(1<<i))
 8003c46:	2201      	movs	r2, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	001a      	movs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4013      	ands	r3, r2
 8003c54:	d008      	beq.n	8003c68 <WS2812_Send2+0x6c>
			{
				slot2.pwmData[indx] = 51;  // 2/3 of 79
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3364      	adds	r3, #100	; 0x64
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	3304      	adds	r3, #4
 8003c62:	2233      	movs	r2, #51	; 0x33
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e007      	b.n	8003c78 <WS2812_Send2+0x7c>
			}

			else slot2.pwmData[indx] = 29;  // 1/3 of 79
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3364      	adds	r3, #100	; 0x64
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	18d3      	adds	r3, r2, r3
 8003c72:	3304      	adds	r3, #4
 8003c74:	221d      	movs	r2, #29
 8003c76:	801a      	strh	r2, [r3, #0]

			indx++;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	dadd      	bge.n	8003c46 <WS2812_Send2+0x4a>
	for (int i= 0; i<MAX_LED; i++)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	ddba      	ble.n	8003c0c <WS2812_Send2+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	e00d      	b.n	8003cb8 <WS2812_Send2+0xbc>
	{
		slot2.pwmData[indx] = 0;
 8003c9c:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3364      	adds	r3, #100	; 0x64
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2200      	movs	r2, #0
 8003caa:	801a      	strh	r2, [r3, #0]
		indx++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b31      	cmp	r3, #49	; 0x31
 8003cbc:	ddee      	ble.n	8003c9c <WS2812_Send2+0xa0>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)slot2.pwmData, indx);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <WS2812_Send2+0xec>)
 8003cc4:	4809      	ldr	r0, [pc, #36]	; (8003cec <WS2812_Send2+0xf0>)
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	f002 fcf8 	bl	80066bc <HAL_TIM_PWM_Start_DMA>

	while (!slot2.datasentflag){};
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <WS2812_Send2+0xe8>)
 8003cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0fb      	beq.n	8003cce <WS2812_Send2+0xd2>
	slot1.datasentflag = 0;
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <WS2812_Send2+0xf4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b006      	add	sp, #24
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200003fc 	.word	0x200003fc
 8003ce8:	200004c8 	.word	0x200004c8
 8003cec:	20000858 	.word	0x20000858
 8003cf0:	200000b4 	.word	0x200000b4

08003cf4 <fault_led>:



}
void fault_led(slot *Slot)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e017      	b.n	8003d32 <fault_led+0x3e>
	  {
		  if(Slot==&slot1)
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <fault_led+0x58>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d108      	bne.n	8003d1c <fault_led+0x28>
		  Set_LED(Slot,i, 255, 255, 0);
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	23ff      	movs	r3, #255	; 0xff
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	f7ff fe20 	bl	800395a <Set_LED>
 8003d1a:	e007      	b.n	8003d2c <fault_led+0x38>
		  else Set_LED(Slot,i, 255, 0, 0);
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	f7ff fe17 	bl	800395a <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	dde4      	ble.n	8003d02 <fault_led+0xe>
	  }

		Set_Brightness(Slot,46);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	212e      	movs	r1, #46	; 0x2e
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff fe3f 	bl	80039c0 <Set_Brightness>
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	200000b4 	.word	0x200000b4

08003d50 <HAL_TIM_PWM_PulseFinishedCallback>:
	  }

		Set_Brightness(Slot,46);
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7f1b      	ldrb	r3, [r3, #28]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d108      	bne.n	8003d72 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003d62:	2108      	movs	r1, #8
 8003d64:	0018      	movs	r0, r3
 8003d66:	f002 feaf 	bl	8006ac8 <HAL_TIM_PWM_Stop_DMA>
		slot1.datasentflag=1;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	679a      	str	r2, [r3, #120]	; 0x78
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
		slot2.datasentflag=1;
	}


}
 8003d70:	e00b      	b.n	8003d8a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7f1b      	ldrb	r3, [r3, #28]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f002 fea2 	bl	8006ac8 <HAL_TIM_PWM_Stop_DMA>
		slot2.datasentflag=1;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	20000858 	.word	0x20000858
 8003d98:	200000b4 	.word	0x200000b4
 8003d9c:	200003fc 	.word	0x200003fc

08003da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003da0:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003da2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003da4:	f7ff fdd4 	bl	8003950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003da8:	480c      	ldr	r0, [pc, #48]	; (8003ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8003daa:	490d      	ldr	r1, [pc, #52]	; (8003de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <LoopForever+0xe>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db0:	e002      	b.n	8003db8 <LoopCopyDataInit>

08003db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db6:	3304      	adds	r3, #4

08003db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dbc:	d3f9      	bcc.n	8003db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dc0:	4c0a      	ldr	r4, [pc, #40]	; (8003dec <LoopForever+0x16>)
  movs r3, #0
 8003dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc4:	e001      	b.n	8003dca <LoopFillZerobss>

08003dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc8:	3204      	adds	r2, #4

08003dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dcc:	d3fb      	bcc.n	8003dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dce:	f005 fb4d 	bl	800946c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003dd2:	f7fe ffc5 	bl	8002d60 <main>

08003dd6 <LoopForever>:

LoopForever:
  b LoopForever
 8003dd6:	e7fe      	b.n	8003dd6 <LoopForever>
  ldr   r0, =_estack
 8003dd8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003de4:	0800a930 	.word	0x0800a930
  ldr r2, =_sbss
 8003de8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003dec:	20000a60 	.word	0x20000a60

08003df0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003df0:	e7fe      	b.n	8003df0 <ADC1_COMP_IRQHandler>
	...

08003df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dfa:	1dfb      	adds	r3, r7, #7
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_Init+0x3c>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_Init+0x3c>)
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	0049      	lsls	r1, r1, #1
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e0e:	2003      	movs	r0, #3
 8003e10:	f000 f810 	bl	8003e34 <HAL_InitTick>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e001      	b.n	8003e24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e20:	f7ff fa96 	bl	8003350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40022000 	.word	0x40022000

08003e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e3c:	230f      	movs	r3, #15
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_InitTick+0x88>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02b      	beq.n	8003ea4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_InitTick+0x8c>)
 8003e4e:	681c      	ldr	r4, [r3, #0]
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_InitTick+0x88>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	0019      	movs	r1, r3
 8003e56:	23fa      	movs	r3, #250	; 0xfa
 8003e58:	0098      	lsls	r0, r3, #2
 8003e5a:	f7fc f953 	bl	8000104 <__udivsi3>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	0019      	movs	r1, r3
 8003e62:	0020      	movs	r0, r4
 8003e64:	f7fc f94e 	bl	8000104 <__udivsi3>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 f919 	bl	80040a2 <HAL_SYSTICK_Config>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d112      	bne.n	8003e9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d80a      	bhi.n	8003e90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	425b      	negs	r3, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f8e8 	bl	8004058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_InitTick+0x90>)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e00d      	b.n	8003eac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e008      	b.n	8003eac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e9a:	230f      	movs	r3, #15
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e003      	b.n	8003eac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003eac:	230f      	movs	r3, #15
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b005      	add	sp, #20
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_IncTick+0x1c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_IncTick+0x20>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	18d2      	adds	r2, r2, r3
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_IncTick+0x20>)
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	20000008 	.word	0x20000008
 8003ee8:	20000a5c 	.word	0x20000a5c

08003eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef0:	4b02      	ldr	r3, [pc, #8]	; (8003efc <HAL_GetTick+0x10>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	20000a5c 	.word	0x20000a5c

08003f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	0002      	movs	r2, r0
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b7f      	cmp	r3, #127	; 0x7f
 8003f12:	d809      	bhi.n	8003f28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	231f      	movs	r3, #31
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <__NVIC_EnableIRQ+0x30>)
 8003f20:	2101      	movs	r1, #1
 8003f22:	4091      	lsls	r1, r2
 8003f24:	000a      	movs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	1dfb      	adds	r3, r7, #7
 8003f40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f42:	1dfb      	adds	r3, r7, #7
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b7f      	cmp	r3, #127	; 0x7f
 8003f48:	d828      	bhi.n	8003f9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <__NVIC_SetPriority+0xd4>)
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	33c0      	adds	r3, #192	; 0xc0
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	589b      	ldr	r3, [r3, r2]
 8003f5a:	1dfa      	adds	r2, r7, #7
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	0011      	movs	r1, r2
 8003f60:	2203      	movs	r2, #3
 8003f62:	400a      	ands	r2, r1
 8003f64:	00d2      	lsls	r2, r2, #3
 8003f66:	21ff      	movs	r1, #255	; 0xff
 8003f68:	4091      	lsls	r1, r2
 8003f6a:	000a      	movs	r2, r1
 8003f6c:	43d2      	mvns	r2, r2
 8003f6e:	401a      	ands	r2, r3
 8003f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	401a      	ands	r2, r3
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	2303      	movs	r3, #3
 8003f82:	4003      	ands	r3, r0
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f88:	481f      	ldr	r0, [pc, #124]	; (8004008 <__NVIC_SetPriority+0xd4>)
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b25b      	sxtb	r3, r3
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	430a      	orrs	r2, r1
 8003f94:	33c0      	adds	r3, #192	; 0xc0
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f9a:	e031      	b.n	8004000 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <__NVIC_SetPriority+0xd8>)
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	400b      	ands	r3, r1
 8003fa8:	3b08      	subs	r3, #8
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3306      	adds	r3, #6
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	18d3      	adds	r3, r2, r3
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1dfa      	adds	r2, r7, #7
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	00d2      	lsls	r2, r2, #3
 8003fc2:	21ff      	movs	r1, #255	; 0xff
 8003fc4:	4091      	lsls	r1, r2
 8003fc6:	000a      	movs	r2, r1
 8003fc8:	43d2      	mvns	r2, r2
 8003fca:	401a      	ands	r2, r3
 8003fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	2303      	movs	r3, #3
 8003fde:	4003      	ands	r3, r0
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe4:	4809      	ldr	r0, [pc, #36]	; (800400c <__NVIC_SetPriority+0xd8>)
 8003fe6:	1dfb      	adds	r3, r7, #7
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	001c      	movs	r4, r3
 8003fec:	230f      	movs	r3, #15
 8003fee:	4023      	ands	r3, r4
 8003ff0:	3b08      	subs	r3, #8
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	3306      	adds	r3, #6
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	18c3      	adds	r3, r0, r3
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	601a      	str	r2, [r3, #0]
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b003      	add	sp, #12
 8004006:	bd90      	pop	{r4, r7, pc}
 8004008:	e000e100 	.word	0xe000e100
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	045b      	lsls	r3, r3, #17
 8004020:	429a      	cmp	r2, r3
 8004022:	d301      	bcc.n	8004028 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004024:	2301      	movs	r3, #1
 8004026:	e010      	b.n	800404a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <SysTick_Config+0x44>)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	3a01      	subs	r2, #1
 800402e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004030:	2301      	movs	r3, #1
 8004032:	425b      	negs	r3, r3
 8004034:	2103      	movs	r1, #3
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff ff7c 	bl	8003f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <SysTick_Config+0x44>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <SysTick_Config+0x44>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	e000e010 	.word	0xe000e010

08004058 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	210f      	movs	r1, #15
 8004064:	187b      	adds	r3, r7, r1
 8004066:	1c02      	adds	r2, r0, #0
 8004068:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	187b      	adds	r3, r7, r1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b25b      	sxtb	r3, r3
 8004072:	0011      	movs	r1, r2
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff ff5d 	bl	8003f34 <__NVIC_SetPriority>
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	0002      	movs	r2, r0
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408e:	1dfb      	adds	r3, r7, #7
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	b25b      	sxtb	r3, r3
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff ff33 	bl	8003f00 <__NVIC_EnableIRQ>
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff ffaf 	bl	8004010 <SysTick_Config>
 80040b2:	0003      	movs	r3, r0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e091      	b.n	80041f2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	001a      	movs	r2, r3
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <HAL_DMA_Init+0x140>)
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d810      	bhi.n	80040fc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a48      	ldr	r2, [pc, #288]	; (8004200 <HAL_DMA_Init+0x144>)
 80040e0:	4694      	mov	ip, r2
 80040e2:	4463      	add	r3, ip
 80040e4:	2114      	movs	r1, #20
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fc f80c 	bl	8000104 <__udivsi3>
 80040ec:	0003      	movs	r3, r0
 80040ee:	009a      	lsls	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a43      	ldr	r2, [pc, #268]	; (8004204 <HAL_DMA_Init+0x148>)
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
 80040fa:	e00f      	b.n	800411c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a41      	ldr	r2, [pc, #260]	; (8004208 <HAL_DMA_Init+0x14c>)
 8004102:	4694      	mov	ip, r2
 8004104:	4463      	add	r3, ip
 8004106:	2114      	movs	r1, #20
 8004108:	0018      	movs	r0, r3
 800410a:	f7fb fffb 	bl	8000104 <__udivsi3>
 800410e:	0003      	movs	r3, r0
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a3c      	ldr	r2, [pc, #240]	; (800420c <HAL_DMA_Init+0x150>)
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2225      	movs	r2, #37	; 0x25
 8004120:	2102      	movs	r1, #2
 8004122:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4938      	ldr	r1, [pc, #224]	; (8004210 <HAL_DMA_Init+0x154>)
 8004130:	400a      	ands	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0018      	movs	r0, r3
 800416e:	f000 fa9f 	bl	80046b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	01db      	lsls	r3, r3, #7
 800417a:	429a      	cmp	r2, r3
 800417c:	d102      	bne.n	8004184 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	217f      	movs	r1, #127	; 0x7f
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800419a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <HAL_DMA_Init+0x10c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d80d      	bhi.n	80041c8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f000 fac8 	bl	8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	e008      	b.n	80041da <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2225      	movs	r2, #37	; 0x25
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	40020407 	.word	0x40020407
 8004200:	bffdfff8 	.word	0xbffdfff8
 8004204:	40020000 	.word	0x40020000
 8004208:	bffdfbf8 	.word	0xbffdfbf8
 800420c:	40020400 	.word	0x40020400
 8004210:	ffff800f 	.word	0xffff800f

08004214 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2317      	movs	r3, #23
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2224      	movs	r2, #36	; 0x24
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_DMA_Start_IT+0x24>
 8004234:	2302      	movs	r3, #2
 8004236:	e06f      	b.n	8004318 <HAL_DMA_Start_IT+0x104>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2225      	movs	r2, #37	; 0x25
 8004244:	5c9b      	ldrb	r3, [r3, r2]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d157      	bne.n	80042fc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2225      	movs	r2, #37	; 0x25
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	438a      	bics	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f9e1 	bl	8004638 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	210e      	movs	r1, #14
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e00f      	b.n	80042b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2104      	movs	r1, #4
 800429c:	438a      	bics	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	210a      	movs	r1, #10
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	4013      	ands	r3, r2
 80042bc:	d008      	beq.n	80042d0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	0049      	lsls	r1, r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	0049      	lsls	r1, r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e00a      	b.n	8004312 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2224      	movs	r2, #36	; 0x24
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800430a:	2317      	movs	r3, #23
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004312:	2317      	movs	r3, #23
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e04f      	b.n	80043d2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2225      	movs	r2, #37	; 0x25
 8004336:	5c9b      	ldrb	r3, [r3, r2]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d008      	beq.n	8004350 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e040      	b.n	80043d2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	210e      	movs	r1, #14
 800435c:	438a      	bics	r2, r1
 800435e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	491c      	ldr	r1, [pc, #112]	; (80043dc <HAL_DMA_Abort+0xbc>)
 800436c:	400a      	ands	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2101      	movs	r1, #1
 800437c:	438a      	bics	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	221c      	movs	r2, #28
 8004386:	401a      	ands	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	4091      	lsls	r1, r2
 8004390:	000a      	movs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800439c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	490a      	ldr	r1, [pc, #40]	; (80043dc <HAL_DMA_Abort+0xbc>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2225      	movs	r2, #37	; 0x25
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b002      	add	sp, #8
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	fffffeff 	.word	0xfffffeff

080043e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	210f      	movs	r1, #15
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2225      	movs	r2, #37	; 0x25
 80043f4:	5c9b      	ldrb	r3, [r3, r2]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d006      	beq.n	800440a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2204      	movs	r2, #4
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004402:	187b      	adds	r3, r7, r1
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e048      	b.n	800449c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	210e      	movs	r1, #14
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	438a      	bics	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004434:	491d      	ldr	r1, [pc, #116]	; (80044ac <HAL_DMA_Abort_IT+0xcc>)
 8004436:	400a      	ands	r2, r1
 8004438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	221c      	movs	r2, #28
 8004440:	401a      	ands	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2101      	movs	r1, #1
 8004448:	4091      	lsls	r1, r2
 800444a:	000a      	movs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00c      	beq.n	800447a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	4910      	ldr	r1, [pc, #64]	; (80044ac <HAL_DMA_Abort_IT+0xcc>)
 800446c:	400a      	ands	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2225      	movs	r2, #37	; 0x25
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	0010      	movs	r0, r2
 800449a:	4798      	blx	r3
    }
  }
  return status;
 800449c:	230f      	movs	r3, #15
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	781b      	ldrb	r3, [r3, #0]
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	fffffeff 	.word	0xfffffeff

080044b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	221c      	movs	r2, #28
 80044ce:	4013      	ands	r3, r2
 80044d0:	2204      	movs	r2, #4
 80044d2:	409a      	lsls	r2, r3
 80044d4:	0013      	movs	r3, r2
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	d026      	beq.n	800452a <HAL_DMA_IRQHandler+0x7a>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2204      	movs	r2, #4
 80044e0:	4013      	ands	r3, r2
 80044e2:	d022      	beq.n	800452a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	4013      	ands	r3, r2
 80044ee:	d107      	bne.n	8004500 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2104      	movs	r1, #4
 80044fc:	438a      	bics	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	221c      	movs	r2, #28
 8004506:	401a      	ands	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2104      	movs	r1, #4
 800450e:	4091      	lsls	r1, r2
 8004510:	000a      	movs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b00      	cmp	r3, #0
 800451a:	d100      	bne.n	800451e <HAL_DMA_IRQHandler+0x6e>
 800451c:	e080      	b.n	8004620 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	0010      	movs	r0, r2
 8004526:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004528:	e07a      	b.n	8004620 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	221c      	movs	r2, #28
 8004530:	4013      	ands	r3, r2
 8004532:	2202      	movs	r2, #2
 8004534:	409a      	lsls	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	d03c      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x108>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2202      	movs	r2, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d038      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2220      	movs	r2, #32
 800454e:	4013      	ands	r3, r2
 8004550:	d10b      	bne.n	800456a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	210a      	movs	r1, #10
 800455e:	438a      	bics	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2225      	movs	r2, #37	; 0x25
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	001a      	movs	r2, r3
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_DMA_IRQHandler+0x17c>)
 8004572:	429a      	cmp	r2, r3
 8004574:	d909      	bls.n	800458a <HAL_DMA_IRQHandler+0xda>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	221c      	movs	r2, #28
 800457c:	401a      	ands	r2, r3
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <HAL_DMA_IRQHandler+0x180>)
 8004580:	2102      	movs	r1, #2
 8004582:	4091      	lsls	r1, r2
 8004584:	000a      	movs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	e008      	b.n	800459c <HAL_DMA_IRQHandler+0xec>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	221c      	movs	r2, #28
 8004590:	401a      	ands	r2, r3
 8004592:	4b28      	ldr	r3, [pc, #160]	; (8004634 <HAL_DMA_IRQHandler+0x184>)
 8004594:	2102      	movs	r1, #2
 8004596:	4091      	lsls	r1, r2
 8004598:	000a      	movs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d039      	beq.n	8004620 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	0010      	movs	r0, r2
 80045b4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80045b6:	e033      	b.n	8004620 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	221c      	movs	r2, #28
 80045be:	4013      	ands	r3, r2
 80045c0:	2208      	movs	r2, #8
 80045c2:	409a      	lsls	r2, r3
 80045c4:	0013      	movs	r3, r2
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4013      	ands	r3, r2
 80045ca:	d02a      	beq.n	8004622 <HAL_DMA_IRQHandler+0x172>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2208      	movs	r2, #8
 80045d0:	4013      	ands	r3, r2
 80045d2:	d026      	beq.n	8004622 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	210e      	movs	r1, #14
 80045e0:	438a      	bics	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	221c      	movs	r2, #28
 80045ea:	401a      	ands	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	2101      	movs	r1, #1
 80045f2:	4091      	lsls	r1, r2
 80045f4:	000a      	movs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2225      	movs	r2, #37	; 0x25
 8004602:	2101      	movs	r1, #1
 8004604:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	0010      	movs	r0, r2
 800461e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46c0      	nop			; (mov r8, r8)
}
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	40020080 	.word	0x40020080
 8004630:	40020400 	.word	0x40020400
 8004634:	40020000 	.word	0x40020000

08004638 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800464e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	221c      	movs	r2, #28
 8004668:	401a      	ands	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2101      	movs	r1, #1
 8004670:	4091      	lsls	r1, r2
 8004672:	000a      	movs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d108      	bne.n	8004698 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004696:	e007      	b.n	80046a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b004      	add	sp, #16
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	001a      	movs	r2, r3
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d814      	bhi.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80046ce:	189a      	adds	r2, r3, r2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	001a      	movs	r2, r3
 80046da:	23ff      	movs	r3, #255	; 0xff
 80046dc:	4013      	ands	r3, r2
 80046de:	3b08      	subs	r3, #8
 80046e0:	2114      	movs	r1, #20
 80046e2:	0018      	movs	r0, r3
 80046e4:	f7fb fd0e 	bl	8000104 <__udivsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e014      	b.n	8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80046f8:	189a      	adds	r2, r3, r2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	001a      	movs	r2, r3
 8004704:	23ff      	movs	r3, #255	; 0xff
 8004706:	4013      	ands	r3, r2
 8004708:	3b08      	subs	r3, #8
 800470a:	2114      	movs	r1, #20
 800470c:	0018      	movs	r0, r3
 800470e:	f7fb fcf9 	bl	8000104 <__udivsi3>
 8004712:	0003      	movs	r3, r0
 8004714:	3307      	adds	r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800471c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	221f      	movs	r2, #31
 8004722:	4013      	ands	r3, r2
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b004      	add	sp, #16
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40020407 	.word	0x40020407
 8004738:	40020800 	.word	0x40020800
 800473c:	4002081c 	.word	0x4002081c
 8004740:	40020880 	.word	0x40020880

08004744 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	227f      	movs	r2, #127	; 0x7f
 8004752:	4013      	ands	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800475a:	4694      	mov	ip, r2
 800475c:	4463      	add	r3, ip
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	001a      	movs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a07      	ldr	r2, [pc, #28]	; (8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800476a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3b01      	subs	r3, #1
 8004770:	2203      	movs	r2, #3
 8004772:	4013      	ands	r3, r2
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}
 8004784:	1000823f 	.word	0x1000823f
 8004788:	40020940 	.word	0x40020940

0800478c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e14e      	b.n	8004a3c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	225c      	movs	r2, #92	; 0x5c
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	225d      	movs	r2, #93	; 0x5d
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fe fdef 	bl	8003398 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2110      	movs	r1, #16
 80047c6:	438a      	bics	r2, r1
 80047c8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ca:	f7ff fb8f 	bl	8003eec <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80047d2:	e012      	b.n	80047fa <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047d4:	f7ff fb8a 	bl	8003eec <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b0a      	cmp	r3, #10
 80047e0:	d90b      	bls.n	80047fa <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	2201      	movs	r2, #1
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	225c      	movs	r2, #92	; 0x5c
 80047f2:	2103      	movs	r1, #3
 80047f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e120      	b.n	8004a3c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2208      	movs	r2, #8
 8004802:	4013      	ands	r3, r2
 8004804:	2b08      	cmp	r3, #8
 8004806:	d0e5      	beq.n	80047d4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	430a      	orrs	r2, r1
 8004816:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004818:	f7ff fb68 	bl	8003eec <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004820:	e012      	b.n	8004848 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004822:	f7ff fb63 	bl	8003eec <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b0a      	cmp	r3, #10
 800482e:	d90b      	bls.n	8004848 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004834:	2201      	movs	r2, #1
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	225c      	movs	r2, #92	; 0x5c
 8004840:	2103      	movs	r1, #3
 8004842:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0f9      	b.n	8004a3c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2201      	movs	r2, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d0e6      	beq.n	8004822 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2102      	movs	r1, #2
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a76      	ldr	r2, [pc, #472]	; (8004a44 <HAL_FDCAN_Init+0x2b8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d103      	bne.n	8004876 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800486e:	4a76      	ldr	r2, [pc, #472]	; (8004a48 <HAL_FDCAN_Init+0x2bc>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	7c1b      	ldrb	r3, [r3, #16]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d108      	bne.n	8004890 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	438a      	bics	r2, r1
 800488c:	619a      	str	r2, [r3, #24]
 800488e:	e007      	b.n	80048a0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2140      	movs	r1, #64	; 0x40
 800489c:	430a      	orrs	r2, r1
 800489e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7c5b      	ldrb	r3, [r3, #17]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d109      	bne.n	80048bc <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	01c9      	lsls	r1, r1, #7
 80048b6:	430a      	orrs	r2, r1
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	e007      	b.n	80048cc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4961      	ldr	r1, [pc, #388]	; (8004a4c <HAL_FDCAN_Init+0x2c0>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	7c9b      	ldrb	r3, [r3, #18]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d108      	bne.n	80048e6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	495c      	ldr	r1, [pc, #368]	; (8004a50 <HAL_FDCAN_Init+0x2c4>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
 80048e4:	e008      	b.n	80048f8 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	0149      	lsls	r1, r1, #5
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	4a55      	ldr	r2, [pc, #340]	; (8004a54 <HAL_FDCAN_Init+0x2c8>)
 8004900:	4013      	ands	r3, r2
 8004902:	0019      	movs	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	21a4      	movs	r1, #164	; 0xa4
 800491c:	438a      	bics	r2, r1
 800491e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2110      	movs	r1, #16
 800492c:	438a      	bics	r2, r1
 800492e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2104      	movs	r1, #4
 8004944:	430a      	orrs	r2, r1
 8004946:	619a      	str	r2, [r3, #24]
 8004948:	e02c      	b.n	80049a4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d028      	beq.n	80049a4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d01c      	beq.n	8004994 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	430a      	orrs	r2, r1
 8004968:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2110      	movs	r1, #16
 8004976:	430a      	orrs	r2, r1
 8004978:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d110      	bne.n	80049a4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2120      	movs	r1, #32
 800498e:	430a      	orrs	r2, r1
 8004990:	619a      	str	r2, [r3, #24]
 8004992:	e007      	b.n	80049a4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2120      	movs	r1, #32
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049bc:	431a      	orrs	r2, r3
 80049be:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	23c0      	movs	r3, #192	; 0xc0
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d115      	bne.n	8004a08 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	3b01      	subs	r3, #1
 80049e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80049ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	3b01      	subs	r3, #1
 80049f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80049f4:	431a      	orrs	r2, r3
 80049f6:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	22c0      	movs	r2, #192	; 0xc0
 8004a0e:	5899      	ldr	r1, [r3, r2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	21c0      	movs	r1, #192	; 0xc0
 8004a1c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 fbf1 	bl	8005208 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	225c      	movs	r2, #92	; 0x5c
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40006400 	.word	0x40006400
 8004a48:	40006500 	.word	0x40006500
 8004a4c:	ffffbfff 	.word	0xffffbfff
 8004a50:	ffffefff 	.word	0xffffefff
 8004a54:	fffffcff 	.word	0xfffffcff

08004a58 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a62:	2017      	movs	r0, #23
 8004a64:	183b      	adds	r3, r7, r0
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	215c      	movs	r1, #92	; 0x5c
 8004a6a:	5c52      	ldrb	r2, [r2, r1]
 8004a6c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a6e:	0002      	movs	r2, r0
 8004a70:	18bb      	adds	r3, r7, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d003      	beq.n	8004a80 <HAL_FDCAN_ConfigFilter+0x28>
 8004a78:	18bb      	adds	r3, r7, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d13d      	bne.n	8004afc <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d119      	bne.n	8004abc <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a94:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004a9c:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18d3      	adds	r3, r2, r3
 8004ab2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	075a      	lsls	r2, r3, #29
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	079a      	lsls	r2, r3, #30
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	18d3      	adds	r3, r2, r3
 8004ae4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3304      	adds	r3, #4
 8004af0:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e006      	b.n	8004b0a <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	2202      	movs	r2, #2
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
  }
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b006      	add	sp, #24
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	225c      	movs	r2, #92	; 0x5c
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d110      	bne.n	8004b48 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	225c      	movs	r2, #92	; 0x5c
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e006      	b.n	8004b56 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
  }
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b002      	add	sp, #8
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b6e:	201b      	movs	r0, #27
 8004b70:	183b      	adds	r3, r7, r0
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	215c      	movs	r1, #92	; 0x5c
 8004b76:	5c52      	ldrb	r2, [r2, r1]
 8004b78:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004b7a:	183b      	adds	r3, r7, r0
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d000      	beq.n	8004b84 <HAL_FDCAN_GetRxMessage+0x24>
 8004b82:	e0c1      	b.n	8004d08 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d121      	bne.n	8004bce <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2290      	movs	r2, #144	; 0x90
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	220f      	movs	r2, #15
 8004b94:	4013      	ands	r3, r2
 8004b96:	d108      	bne.n	8004baa <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	0052      	lsls	r2, r2, #1
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0b5      	b.n	8004d16 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2290      	movs	r2, #144	; 0x90
 8004bb0:	589b      	ldr	r3, [r3, r2]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	18cb      	adds	r3, r1, r3
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	e020      	b.n	8004c10 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2298      	movs	r2, #152	; 0x98
 8004bd4:	589b      	ldr	r3, [r3, r2]
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d108      	bne.n	8004bee <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	0052      	lsls	r2, r2, #1
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e093      	b.n	8004d16 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2298      	movs	r2, #152	; 0x98
 8004bf4:	589b      	ldr	r3, [r3, r2]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	0013      	movs	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	189b      	adds	r3, r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	18cb      	adds	r3, r1, r3
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	05db      	lsls	r3, r3, #23
 8004c18:	401a      	ands	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0c9b      	lsrs	r3, r3, #18
 8004c2c:	055b      	lsls	r3, r3, #21
 8004c2e:	0d5a      	lsrs	r2, r3, #21
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e005      	b.n	8004c42 <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	08da      	lsrs	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	059b      	lsls	r3, r3, #22
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0fdb      	lsrs	r3, r3, #31
 8004c56:	07da      	lsls	r2, r3, #31
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	3304      	adds	r3, #4
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	0c1a      	lsrs	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	23f0      	movs	r3, #240	; 0xf0
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	401a      	ands	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	035b      	lsls	r3, r3, #13
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	039b      	lsls	r3, r3, #14
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0e1b      	lsrs	r3, r3, #24
 8004c9e:	227f      	movs	r2, #127	; 0x7f
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0fda      	lsrs	r2, r3, #31
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	e00a      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	18d2      	adds	r2, r2, r3
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	18cb      	adds	r3, r1, r3
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d3eb      	bcc.n	8004cc0 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d105      	bne.n	8004cfa <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2194      	movs	r1, #148	; 0x94
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	505a      	str	r2, [r3, r1]
 8004cf8:	e004      	b.n	8004d04 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	219c      	movs	r1, #156	; 0x9c
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e006      	b.n	8004d16 <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
  }
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b00a      	add	sp, #40	; 0x28
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	0800a6b8 	.word	0x0800a6b8

08004d24 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004d30:	2017      	movs	r0, #23
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	215c      	movs	r1, #92	; 0x5c
 8004d38:	5c52      	ldrb	r2, [r2, r1]
 8004d3a:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	18bb      	adds	r3, r7, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d004      	beq.n	8004d50 <HAL_FDCAN_ActivateNotification+0x2c>
 8004d46:	18bb      	adds	r3, r7, r2
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d000      	beq.n	8004d50 <HAL_FDCAN_ActivateNotification+0x2c>
 8004d4e:	e0b4      	b.n	8004eba <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2201      	movs	r2, #1
 8004d64:	4013      	ands	r3, r2
 8004d66:	d034      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2238      	movs	r2, #56	; 0x38
 8004d6c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004d6e:	d003      	beq.n	8004d78 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2202      	movs	r2, #2
 8004d74:	4013      	ands	r3, r2
 8004d76:	d02c      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	23e0      	movs	r3, #224	; 0xe0
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004d80:	d003      	beq.n	8004d8a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2204      	movs	r2, #4
 8004d86:	4013      	ands	r3, r2
 8004d88:	d023      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	23f0      	movs	r3, #240	; 0xf0
 8004d8e:	015b      	lsls	r3, r3, #5
 8004d90:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004d92:	d003      	beq.n	8004d9c <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2208      	movs	r2, #8
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d01a      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	23e0      	movs	r3, #224	; 0xe0
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004da4:	d003      	beq.n	8004dae <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2210      	movs	r2, #16
 8004daa:	4013      	ands	r3, r2
 8004dac:	d011      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	23c0      	movs	r3, #192	; 0xc0
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004db6:	d003      	beq.n	8004dc0 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d008      	beq.n	8004dd2 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	23fc      	movs	r3, #252	; 0xfc
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004dc8:	d00b      	beq.n	8004de2 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2240      	movs	r2, #64	; 0x40
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d107      	bne.n	8004de2 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	430a      	orrs	r2, r1
 8004de0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2207      	movs	r2, #7
 8004de6:	4013      	ands	r3, r2
 8004de8:	d003      	beq.n	8004df2 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2201      	movs	r2, #1
 8004dee:	4013      	ands	r3, r2
 8004df0:	d134      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2238      	movs	r2, #56	; 0x38
 8004df6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004df8:	d003      	beq.n	8004e02 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d12c      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	23e0      	movs	r3, #224	; 0xe0
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004e0a:	d003      	beq.n	8004e14 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	d123      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	23f0      	movs	r3, #240	; 0xf0
 8004e18:	015b      	lsls	r3, r3, #5
 8004e1a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004e1c:	d003      	beq.n	8004e26 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2208      	movs	r2, #8
 8004e22:	4013      	ands	r3, r2
 8004e24:	d11a      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	23e0      	movs	r3, #224	; 0xe0
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004e2e:	d003      	beq.n	8004e38 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2210      	movs	r2, #16
 8004e34:	4013      	ands	r3, r2
 8004e36:	d111      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	23c0      	movs	r3, #192	; 0xc0
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004e40:	d003      	beq.n	8004e4a <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2220      	movs	r2, #32
 8004e46:	4013      	ands	r3, r2
 8004e48:	d108      	bne.n	8004e5c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	23fc      	movs	r3, #252	; 0xfc
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004e52:	d00b      	beq.n	8004e6c <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2240      	movs	r2, #64	; 0x40
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2102      	movs	r1, #2
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	4013      	ands	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	22dc      	movs	r2, #220	; 0xdc
 8004e7a:	5899      	ldr	r1, [r3, r2]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	21dc      	movs	r1, #220	; 0xdc
 8004e86:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	22e0      	movs	r2, #224	; 0xe0
 8004e98:	5899      	ldr	r1, [r3, r2]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	21e0      	movs	r1, #224	; 0xe0
 8004ea4:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e006      	b.n	8004ec8 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
  }
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b006      	add	sp, #24
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ede:	23e0      	movs	r3, #224	; 0xe0
 8004ee0:	015b      	lsls	r3, r3, #5
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	4013      	ands	r3, r2
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	2207      	movs	r2, #7
 8004efa:	4013      	ands	r3, r2
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	4013      	ands	r3, r2
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	2238      	movs	r2, #56	; 0x38
 8004f12:	4013      	ands	r3, r2
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	4013      	ands	r3, r2
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f28:	23f1      	movs	r3, #241	; 0xf1
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f42:	23e0      	movs	r3, #224	; 0xe0
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	4013      	ands	r3, r2
 8004f48:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f64:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d00d      	beq.n	8004f8e <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	001a      	movs	r2, r3
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2240      	movs	r2, #64	; 0x40
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f924 	bl	80051d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	001a      	movs	r2, r3
 8004f94:	2301      	movs	r3, #1
 8004f96:	4013      	ands	r3, r2
 8004f98:	d01c      	beq.n	8004fd4 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d016      	beq.n	8004fd4 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	22d8      	movs	r2, #216	; 0xd8
 8004fac:	589b      	ldr	r3, [r3, r2]
 8004fae:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	22e0      	movs	r2, #224	; 0xe0
 8004fb6:	589a      	ldr	r2, [r3, r2]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	0052      	lsls	r2, r2, #1
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 f8e8 	bl	80051a4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	0011      	movs	r1, r2
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 f8b8 	bl	800515e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0011      	movs	r1, r2
 8005002:	0018      	movs	r0, r3
 8005004:	f7fd fa26 	bl	8002454 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0011      	movs	r1, r2
 800501c:	0018      	movs	r0, r3
 800501e:	f000 f8a7 	bl	8005170 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0a5b      	lsrs	r3, r3, #9
 8005026:	001a      	movs	r2, r3
 8005028:	2301      	movs	r3, #1
 800502a:	4013      	ands	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	0a5b      	lsrs	r3, r3, #9
 8005032:	001a      	movs	r2, r3
 8005034:	2301      	movs	r3, #1
 8005036:	4013      	ands	r3, r2
 8005038:	d008      	beq.n	800504c <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	0092      	lsls	r2, r2, #2
 8005042:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f89b 	bl	8005182 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	09db      	lsrs	r3, r3, #7
 8005050:	001a      	movs	r2, r3
 8005052:	2301      	movs	r3, #1
 8005054:	4013      	ands	r3, r2
 8005056:	d01b      	beq.n	8005090 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	001a      	movs	r2, r3
 800505e:	2301      	movs	r3, #1
 8005060:	4013      	ands	r3, r2
 8005062:	d015      	beq.n	8005090 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	22d4      	movs	r2, #212	; 0xd4
 800506a:	589b      	ldr	r3, [r3, r2]
 800506c:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	22dc      	movs	r2, #220	; 0xdc
 8005074:	589a      	ldr	r2, [r3, r2]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2280      	movs	r2, #128	; 0x80
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0011      	movs	r1, r2
 800508a:	0018      	movs	r0, r3
 800508c:	f000 f881 	bl	8005192 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0b5b      	lsrs	r3, r3, #13
 8005094:	001a      	movs	r2, r3
 8005096:	2301      	movs	r3, #1
 8005098:	4013      	ands	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	0b5b      	lsrs	r3, r3, #13
 80050a0:	001a      	movs	r2, r3
 80050a2:	2301      	movs	r3, #1
 80050a4:	4013      	ands	r3, r2
 80050a6:	d008      	beq.n	80050ba <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	0192      	lsls	r2, r2, #6
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 f87e 	bl	80051b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	0bdb      	lsrs	r3, r3, #15
 80050be:	001a      	movs	r2, r3
 80050c0:	2301      	movs	r3, #1
 80050c2:	4013      	ands	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	0bdb      	lsrs	r3, r3, #15
 80050ca:	001a      	movs	r2, r3
 80050cc:	2301      	movs	r3, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d008      	beq.n	80050e4 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	0212      	lsls	r2, r2, #8
 80050da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	0018      	movs	r0, r3
 80050e0:	f000 f871 	bl	80051c6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	0b9b      	lsrs	r3, r3, #14
 80050e8:	001a      	movs	r2, r3
 80050ea:	2301      	movs	r3, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	d010      	beq.n	8005112 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	0b9b      	lsrs	r3, r3, #14
 80050f4:	001a      	movs	r2, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00a      	beq.n	8005112 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	01d2      	lsls	r2, r2, #7
 8005104:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0011      	movs	r1, r2
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f865 	bl	80051f6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f848 	bl	80051e6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b00c      	add	sp, #48	; 0x30
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b002      	add	sp, #8
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b002      	add	sp, #8
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b002      	add	sp, #8
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b002      	add	sp, #8
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	46bd      	mov	sp, r7
 8005204:	b002      	add	sp, #8
 8005206:	bd80      	pop	{r7, pc}

08005208 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8005212:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2e      	ldr	r2, [pc, #184]	; (80052d4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d105      	bne.n	800522a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	22d4      	movs	r2, #212	; 0xd4
 8005222:	0092      	lsls	r2, r2, #2
 8005224:	4694      	mov	ip, r2
 8005226:	4463      	add	r3, ip
 8005228:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	589b      	ldr	r3, [r3, r2]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	041a      	lsls	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3370      	adds	r3, #112	; 0x70
 8005252:	001a      	movs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2280      	movs	r2, #128	; 0x80
 800525e:	589b      	ldr	r3, [r3, r2]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	061a      	lsls	r2, r3, #24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	33b0      	adds	r3, #176	; 0xb0
 800527a:	001a      	movs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	3389      	adds	r3, #137	; 0x89
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	001a      	movs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2298      	movs	r2, #152	; 0x98
 8005290:	0092      	lsls	r2, r2, #2
 8005292:	189a      	adds	r2, r3, r2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	229e      	movs	r2, #158	; 0x9e
 800529c:	0092      	lsls	r2, r2, #2
 800529e:	189a      	adds	r2, r3, r2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e005      	b.n	80052b6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3304      	adds	r3, #4
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	22d4      	movs	r2, #212	; 0xd4
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	4694      	mov	ip, r2
 80052be:	4463      	add	r3, ip
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3f1      	bcc.n	80052aa <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	4000b400 	.word	0x4000b400
 80052d4:	40006800 	.word	0x40006800
 80052d8:	ffe0ffff 	.word	0xffe0ffff
 80052dc:	f0ffffff 	.word	0xf0ffffff

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ee:	e14d      	b.n	800558c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4091      	lsls	r1, r2
 80052fa:	000a      	movs	r2, r1
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d100      	bne.n	8005308 <HAL_GPIO_Init+0x28>
 8005306:	e13e      	b.n	8005586 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	4013      	ands	r3, r2
 8005310:	2b01      	cmp	r3, #1
 8005312:	d005      	beq.n	8005320 <HAL_GPIO_Init+0x40>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2203      	movs	r2, #3
 800531a:	4013      	ands	r3, r2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d130      	bne.n	8005382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	409a      	lsls	r2, r3
 800532e:	0013      	movs	r3, r2
 8005330:	43da      	mvns	r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4013      	ands	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	0013      	movs	r3, r2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005356:	2201      	movs	r2, #1
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	409a      	lsls	r2, r3
 800535c:	0013      	movs	r3, r2
 800535e:	43da      	mvns	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	2201      	movs	r2, #1
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	409a      	lsls	r2, r3
 8005374:	0013      	movs	r3, r2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2203      	movs	r2, #3
 8005388:	4013      	ands	r3, r2
 800538a:	2b03      	cmp	r3, #3
 800538c:	d017      	beq.n	80053be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	2203      	movs	r2, #3
 800539a:	409a      	lsls	r2, r3
 800539c:	0013      	movs	r3, r2
 800539e:	43da      	mvns	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4013      	ands	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	0013      	movs	r3, r2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d123      	bne.n	8005412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	08da      	lsrs	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3208      	adds	r2, #8
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	58d3      	ldr	r3, [r2, r3]
 80053d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2207      	movs	r2, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	409a      	lsls	r2, r3
 80053e4:	0013      	movs	r3, r2
 80053e6:	43da      	mvns	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2107      	movs	r1, #7
 80053f6:	400b      	ands	r3, r1
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	409a      	lsls	r2, r3
 80053fc:	0013      	movs	r3, r2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	08da      	lsrs	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3208      	adds	r2, #8
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	2203      	movs	r2, #3
 800541e:	409a      	lsls	r2, r3
 8005420:	0013      	movs	r3, r2
 8005422:	43da      	mvns	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	401a      	ands	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	0013      	movs	r3, r2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	23c0      	movs	r3, #192	; 0xc0
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	4013      	ands	r3, r2
 8005450:	d100      	bne.n	8005454 <HAL_GPIO_Init+0x174>
 8005452:	e098      	b.n	8005586 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005454:	4a53      	ldr	r2, [pc, #332]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3318      	adds	r3, #24
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	589b      	ldr	r3, [r3, r2]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2203      	movs	r2, #3
 8005466:	4013      	ands	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	220f      	movs	r2, #15
 800546c:	409a      	lsls	r2, r3
 800546e:	0013      	movs	r3, r2
 8005470:	43da      	mvns	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	23a0      	movs	r3, #160	; 0xa0
 800547c:	05db      	lsls	r3, r3, #23
 800547e:	429a      	cmp	r2, r3
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x1d6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a48      	ldr	r2, [pc, #288]	; (80055a8 <HAL_GPIO_Init+0x2c8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x1d2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a47      	ldr	r2, [pc, #284]	; (80055ac <HAL_GPIO_Init+0x2cc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x1ce>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a46      	ldr	r2, [pc, #280]	; (80055b0 <HAL_GPIO_Init+0x2d0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x1ca>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a45      	ldr	r2, [pc, #276]	; (80055b4 <HAL_GPIO_Init+0x2d4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x1c6>
 80054a2:	2304      	movs	r3, #4
 80054a4:	e008      	b.n	80054b8 <HAL_GPIO_Init+0x1d8>
 80054a6:	2305      	movs	r3, #5
 80054a8:	e006      	b.n	80054b8 <HAL_GPIO_Init+0x1d8>
 80054aa:	2303      	movs	r3, #3
 80054ac:	e004      	b.n	80054b8 <HAL_GPIO_Init+0x1d8>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e002      	b.n	80054b8 <HAL_GPIO_Init+0x1d8>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <HAL_GPIO_Init+0x1d8>
 80054b6:	2300      	movs	r3, #0
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	2103      	movs	r1, #3
 80054bc:	400a      	ands	r2, r1
 80054be:	00d2      	lsls	r2, r2, #3
 80054c0:	4093      	lsls	r3, r2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80054c8:	4936      	ldr	r1, [pc, #216]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	3318      	adds	r3, #24
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	43da      	mvns	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4013      	ands	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	035b      	lsls	r3, r3, #13
 80054ee:	4013      	ands	r3, r2
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054fa:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	43da      	mvns	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	039b      	lsls	r3, r3, #14
 8005518:	4013      	ands	r3, r2
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005524:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800552a:	4a1e      	ldr	r2, [pc, #120]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 800552c:	2384      	movs	r3, #132	; 0x84
 800552e:	58d3      	ldr	r3, [r2, r3]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	43da      	mvns	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	4013      	ands	r3, r2
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005550:	4914      	ldr	r1, [pc, #80]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005552:	2284      	movs	r2, #132	; 0x84
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005558:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	58d3      	ldr	r3, [r2, r3]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	43da      	mvns	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4013      	ands	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	4013      	ands	r3, r2
 8005574:	d003      	beq.n	800557e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800557e:	4909      	ldr	r1, [pc, #36]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3301      	adds	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	40da      	lsrs	r2, r3
 8005594:	1e13      	subs	r3, r2, #0
 8005596:	d000      	beq.n	800559a <HAL_GPIO_Init+0x2ba>
 8005598:	e6aa      	b.n	80052f0 <HAL_GPIO_Init+0x10>
  }
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b006      	add	sp, #24
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021800 	.word	0x40021800
 80055a8:	50000400 	.word	0x50000400
 80055ac:	50000800 	.word	0x50000800
 80055b0:	50000c00 	.word	0x50000c00
 80055b4:	50001000 	.word	0x50001000

080055b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	0008      	movs	r0, r1
 80055c2:	0011      	movs	r1, r2
 80055c4:	1cbb      	adds	r3, r7, #2
 80055c6:	1c02      	adds	r2, r0, #0
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	1c7b      	adds	r3, r7, #1
 80055cc:	1c0a      	adds	r2, r1, #0
 80055ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055d0:	1c7b      	adds	r3, r7, #1
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055d8:	1cbb      	adds	r3, r7, #2
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055e0:	e003      	b.n	80055ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055e2:	1cbb      	adds	r3, r7, #2
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	46bd      	mov	sp, r7
 80055ee:	b002      	add	sp, #8
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	000a      	movs	r2, r1
 80055fc:	1cbb      	adds	r3, r7, #2
 80055fe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005606:	1cbb      	adds	r3, r7, #2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4013      	ands	r3, r2
 800560e:	041a      	lsls	r2, r3, #16
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	43db      	mvns	r3, r3
 8005614:	1cb9      	adds	r1, r7, #2
 8005616:	8809      	ldrh	r1, [r1, #0]
 8005618:	400b      	ands	r3, r1
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b004      	add	sp, #16
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a19      	ldr	r2, [pc, #100]	; (800569c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	429a      	cmp	r2, r3
 800564a:	d11f      	bne.n	800568c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	0013      	movs	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	189b      	adds	r3, r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4912      	ldr	r1, [pc, #72]	; (80056a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800565a:	0018      	movs	r0, r3
 800565c:	f7fa fd52 	bl	8000104 <__udivsi3>
 8005660:	0003      	movs	r3, r0
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005666:	e008      	b.n	800567a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b01      	subs	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e001      	b.n	800567a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e009      	b.n	800568e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	401a      	ands	r2, r3
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	429a      	cmp	r2, r3
 800568a:	d0ed      	beq.n	8005668 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b004      	add	sp, #16
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	40007000 	.word	0x40007000
 800569c:	fffff9ff 	.word	0xfffff9ff
 80056a0:	20000000 	.word	0x20000000
 80056a4:	000f4240 	.word	0x000f4240

080056a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	23e0      	movs	r3, #224	; 0xe0
 80056b2:	01db      	lsls	r3, r3, #7
 80056b4:	4013      	ands	r3, r2
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f000 fb50 	bl	8005d74 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	4013      	ands	r3, r2
 80056dc:	d100      	bne.n	80056e0 <HAL_RCC_OscConfig+0x20>
 80056de:	e07c      	b.n	80057da <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e0:	4bc3      	ldr	r3, [pc, #780]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2238      	movs	r2, #56	; 0x38
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ea:	4bc1      	ldr	r3, [pc, #772]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	2203      	movs	r2, #3
 80056f0:	4013      	ands	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d102      	bne.n	8005700 <HAL_RCC_OscConfig+0x40>
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d002      	beq.n	8005706 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d10b      	bne.n	800571e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005706:	4bba      	ldr	r3, [pc, #744]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	029b      	lsls	r3, r3, #10
 800570e:	4013      	ands	r3, r2
 8005710:	d062      	beq.n	80057d8 <HAL_RCC_OscConfig+0x118>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d15e      	bne.n	80057d8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e32a      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	429a      	cmp	r2, r3
 8005728:	d107      	bne.n	800573a <HAL_RCC_OscConfig+0x7a>
 800572a:	4bb1      	ldr	r3, [pc, #708]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4bb0      	ldr	r3, [pc, #704]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	0249      	lsls	r1, r1, #9
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e020      	b.n	800577c <HAL_RCC_OscConfig+0xbc>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	23a0      	movs	r3, #160	; 0xa0
 8005740:	02db      	lsls	r3, r3, #11
 8005742:	429a      	cmp	r2, r3
 8005744:	d10e      	bne.n	8005764 <HAL_RCC_OscConfig+0xa4>
 8005746:	4baa      	ldr	r3, [pc, #680]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4ba9      	ldr	r3, [pc, #676]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	02c9      	lsls	r1, r1, #11
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	4ba6      	ldr	r3, [pc, #664]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4ba5      	ldr	r3, [pc, #660]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	0249      	lsls	r1, r1, #9
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0xbc>
 8005764:	4ba2      	ldr	r3, [pc, #648]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4ba1      	ldr	r3, [pc, #644]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800576a:	49a2      	ldr	r1, [pc, #648]	; (80059f4 <HAL_RCC_OscConfig+0x334>)
 800576c:	400a      	ands	r2, r1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	4b9f      	ldr	r3, [pc, #636]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b9e      	ldr	r3, [pc, #632]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005776:	49a0      	ldr	r1, [pc, #640]	; (80059f8 <HAL_RCC_OscConfig+0x338>)
 8005778:	400a      	ands	r2, r1
 800577a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fe fbb2 	bl	8003eec <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578e:	f7fe fbad 	bl	8003eec <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b64      	cmp	r3, #100	; 0x64
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e2e9      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	4013      	ands	r3, r2
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0xce>
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ae:	f7fe fb9d 	bl	8003eec <HAL_GetTick>
 80057b2:	0003      	movs	r3, r0
 80057b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fe fb98 	bl	8003eec <HAL_GetTick>
 80057bc:	0002      	movs	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e2d4      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ca:	4b89      	ldr	r3, [pc, #548]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	4013      	ands	r3, r2
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0xf8>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2202      	movs	r2, #2
 80057e0:	4013      	ands	r3, r2
 80057e2:	d100      	bne.n	80057e6 <HAL_RCC_OscConfig+0x126>
 80057e4:	e099      	b.n	800591a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e6:	4b82      	ldr	r3, [pc, #520]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2238      	movs	r2, #56	; 0x38
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f0:	4b7f      	ldr	r3, [pc, #508]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2203      	movs	r2, #3
 80057f6:	4013      	ands	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d102      	bne.n	8005806 <HAL_RCC_OscConfig+0x146>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d002      	beq.n	800580c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d135      	bne.n	8005878 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580c:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4013      	ands	r3, r2
 8005816:	d005      	beq.n	8005824 <HAL_RCC_OscConfig+0x164>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e2a7      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	4b72      	ldr	r3, [pc, #456]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a74      	ldr	r2, [pc, #464]	; (80059fc <HAL_RCC_OscConfig+0x33c>)
 800582a:	4013      	ands	r3, r2
 800582c:	0019      	movs	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	4b6e      	ldr	r3, [pc, #440]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d112      	bne.n	8005866 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005840:	4b6b      	ldr	r3, [pc, #428]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x340>)
 8005846:	4013      	ands	r3, r2
 8005848:	0019      	movs	r1, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005850:	430a      	orrs	r2, r1
 8005852:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005854:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0adb      	lsrs	r3, r3, #11
 800585a:	2207      	movs	r2, #7
 800585c:	4013      	ands	r3, r2
 800585e:	4a69      	ldr	r2, [pc, #420]	; (8005a04 <HAL_RCC_OscConfig+0x344>)
 8005860:	40da      	lsrs	r2, r3
 8005862:	4b69      	ldr	r3, [pc, #420]	; (8005a08 <HAL_RCC_OscConfig+0x348>)
 8005864:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005866:	4b69      	ldr	r3, [pc, #420]	; (8005a0c <HAL_RCC_OscConfig+0x34c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	0018      	movs	r0, r3
 800586c:	f7fe fae2 	bl	8003e34 <HAL_InitTick>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d051      	beq.n	8005918 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e27d      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d030      	beq.n	80058e2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005880:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5e      	ldr	r2, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x340>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	4b58      	ldr	r3, [pc, #352]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005894:	4b56      	ldr	r3, [pc, #344]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4b55      	ldr	r3, [pc, #340]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	0049      	lsls	r1, r1, #1
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a2:	f7fe fb23 	bl	8003eec <HAL_GetTick>
 80058a6:	0003      	movs	r3, r0
 80058a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fe fb1e 	bl	8003eec <HAL_GetTick>
 80058b0:	0002      	movs	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e25a      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058be:	4b4c      	ldr	r3, [pc, #304]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4013      	ands	r3, r2
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b49      	ldr	r3, [pc, #292]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4a4b      	ldr	r2, [pc, #300]	; (80059fc <HAL_RCC_OscConfig+0x33c>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	0019      	movs	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	021a      	lsls	r2, r3, #8
 80058da:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	e01b      	b.n	800591a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058e2:	4b43      	ldr	r3, [pc, #268]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b42      	ldr	r3, [pc, #264]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80058e8:	4949      	ldr	r1, [pc, #292]	; (8005a10 <HAL_RCC_OscConfig+0x350>)
 80058ea:	400a      	ands	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fe fafd 	bl	8003eec <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fe faf8 	bl	8003eec <HAL_GetTick>
 80058fc:	0002      	movs	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e234      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4013      	ands	r3, r2
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x238>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005918:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2208      	movs	r2, #8
 8005920:	4013      	ands	r3, r2
 8005922:	d047      	beq.n	80059b4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005924:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2238      	movs	r2, #56	; 0x38
 800592a:	4013      	ands	r3, r2
 800592c:	2b18      	cmp	r3, #24
 800592e:	d10a      	bne.n	8005946 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005930:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	2202      	movs	r2, #2
 8005936:	4013      	ands	r3, r2
 8005938:	d03c      	beq.n	80059b4 <HAL_RCC_OscConfig+0x2f4>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d138      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e216      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800594e:	4b28      	ldr	r3, [pc, #160]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005952:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005954:	2101      	movs	r1, #1
 8005956:	430a      	orrs	r2, r1
 8005958:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fe fac7 	bl	8003eec <HAL_GetTick>
 800595e:	0003      	movs	r3, r0
 8005960:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005964:	f7fe fac2 	bl	8003eec <HAL_GetTick>
 8005968:	0002      	movs	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e1fe      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597a:	2202      	movs	r2, #2
 800597c:	4013      	ands	r3, r2
 800597e:	d0f1      	beq.n	8005964 <HAL_RCC_OscConfig+0x2a4>
 8005980:	e018      	b.n	80059b4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005982:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005986:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 8005988:	2101      	movs	r1, #1
 800598a:	438a      	bics	r2, r1
 800598c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fe faad 	bl	8003eec <HAL_GetTick>
 8005992:	0003      	movs	r3, r0
 8005994:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005998:	f7fe faa8 	bl	8003eec <HAL_GetTick>
 800599c:	0002      	movs	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1e4      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80059ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ae:	2202      	movs	r2, #2
 80059b0:	4013      	ands	r3, r2
 80059b2:	d1f1      	bne.n	8005998 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2204      	movs	r2, #4
 80059ba:	4013      	ands	r3, r2
 80059bc:	d100      	bne.n	80059c0 <HAL_RCC_OscConfig+0x300>
 80059be:	e0c7      	b.n	8005b50 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c0:	231f      	movs	r3, #31
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2238      	movs	r2, #56	; 0x38
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d11f      	bne.n	8005a14 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_RCC_OscConfig+0x330>)
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	2202      	movs	r2, #2
 80059da:	4013      	ands	r3, r2
 80059dc:	d100      	bne.n	80059e0 <HAL_RCC_OscConfig+0x320>
 80059de:	e0b7      	b.n	8005b50 <HAL_RCC_OscConfig+0x490>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d000      	beq.n	80059ea <HAL_RCC_OscConfig+0x32a>
 80059e8:	e0b2      	b.n	8005b50 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e1c2      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	40021000 	.word	0x40021000
 80059f4:	fffeffff 	.word	0xfffeffff
 80059f8:	fffbffff 	.word	0xfffbffff
 80059fc:	ffff80ff 	.word	0xffff80ff
 8005a00:	ffffc7ff 	.word	0xffffc7ff
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	20000004 	.word	0x20000004
 8005a10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a14:	4bb5      	ldr	r3, [pc, #724]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	055b      	lsls	r3, r3, #21
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_OscConfig+0x364>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x366>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a2a:	4bb0      	ldr	r3, [pc, #704]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2e:	4baf      	ldr	r3, [pc, #700]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	0549      	lsls	r1, r1, #21
 8005a34:	430a      	orrs	r2, r1
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a38:	4bac      	ldr	r3, [pc, #688]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	055b      	lsls	r3, r3, #21
 8005a40:	4013      	ands	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a46:	231f      	movs	r3, #31
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4e:	4ba8      	ldr	r3, [pc, #672]	; (8005cf0 <HAL_RCC_OscConfig+0x630>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4013      	ands	r3, r2
 8005a58:	d11a      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5a:	4ba5      	ldr	r3, [pc, #660]	; (8005cf0 <HAL_RCC_OscConfig+0x630>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4ba4      	ldr	r3, [pc, #656]	; (8005cf0 <HAL_RCC_OscConfig+0x630>)
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	0049      	lsls	r1, r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fa40 	bl	8003eec <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fe fa3b 	bl	8003eec <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e177      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a84:	4b9a      	ldr	r3, [pc, #616]	; (8005cf0 <HAL_RCC_OscConfig+0x630>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x3e6>
 8005a98:	4b94      	ldr	r3, [pc, #592]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a9c:	4b93      	ldr	r3, [pc, #588]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x420>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x408>
 8005aae:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab2:	4b8e      	ldr	r3, [pc, #568]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005aba:	4b8c      	ldr	r3, [pc, #560]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005abe:	4b8b      	ldr	r3, [pc, #556]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ac6:	e00b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x420>
 8005ac8:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005acc:	4b87      	ldr	r3, [pc, #540]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ace:	2101      	movs	r1, #1
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ad4:	4b85      	ldr	r3, [pc, #532]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad8:	4b84      	ldr	r3, [pc, #528]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ada:	2104      	movs	r1, #4
 8005adc:	438a      	bics	r2, r1
 8005ade:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d014      	beq.n	8005b12 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fe fa00 	bl	8003eec <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af0:	e009      	b.n	8005b06 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af2:	f7fe f9fb 	bl	8003eec <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	4a7d      	ldr	r2, [pc, #500]	; (8005cf4 <HAL_RCC_OscConfig+0x634>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e136      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b06:	4b79      	ldr	r3, [pc, #484]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x432>
 8005b10:	e013      	b.n	8005b3a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fe f9eb 	bl	8003eec <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b1a:	e009      	b.n	8005b30 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fe f9e6 	bl	8003eec <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	4a73      	ldr	r2, [pc, #460]	; (8005cf4 <HAL_RCC_OscConfig+0x634>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e121      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b30:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b34:	2202      	movs	r2, #2
 8005b36:	4013      	ands	r3, r2
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b3a:	231f      	movs	r3, #31
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d105      	bne.n	8005b50 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b44:	4b69      	ldr	r3, [pc, #420]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b48:	4b68      	ldr	r3, [pc, #416]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b4a:	496b      	ldr	r1, [pc, #428]	; (8005cf8 <HAL_RCC_OscConfig+0x638>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2220      	movs	r2, #32
 8005b56:	4013      	ands	r3, r2
 8005b58:	d039      	beq.n	8005bce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b62:	4b62      	ldr	r3, [pc, #392]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b61      	ldr	r3, [pc, #388]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	03c9      	lsls	r1, r1, #15
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fe f9bc 	bl	8003eec <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b7a:	f7fe f9b7 	bl	8003eec <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e0f3      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b8c:	4b57      	ldr	r3, [pc, #348]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	4013      	ands	r3, r2
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x4ba>
 8005b98:	e019      	b.n	8005bce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ba0:	4956      	ldr	r1, [pc, #344]	; (8005cfc <HAL_RCC_OscConfig+0x63c>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba6:	f7fe f9a1 	bl	8003eec <HAL_GetTick>
 8005baa:	0003      	movs	r3, r0
 8005bac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb0:	f7fe f99c 	bl	8003eec <HAL_GetTick>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0d8      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d100      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x518>
 8005bd6:	e0cc      	b.n	8005d72 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd8:	4b44      	ldr	r3, [pc, #272]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2238      	movs	r2, #56	; 0x38
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d100      	bne.n	8005be6 <HAL_RCC_OscConfig+0x526>
 8005be4:	e07b      	b.n	8005cde <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d156      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b3e      	ldr	r3, [pc, #248]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005bf4:	4942      	ldr	r1, [pc, #264]	; (8005d00 <HAL_RCC_OscConfig+0x640>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fe f977 	bl	8003eec <HAL_GetTick>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fe f972 	bl	8003eec <HAL_GetTick>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e0ae      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c16:	4b35      	ldr	r3, [pc, #212]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	049b      	lsls	r3, r3, #18
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c22:	4b32      	ldr	r3, [pc, #200]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a37      	ldr	r2, [pc, #220]	; (8005d04 <HAL_RCC_OscConfig+0x644>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	4b26      	ldr	r3, [pc, #152]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c52:	430a      	orrs	r2, r1
 8005c54:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c56:	4b25      	ldr	r3, [pc, #148]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b24      	ldr	r3, [pc, #144]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	0449      	lsls	r1, r1, #17
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	0549      	lsls	r1, r1, #21
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fe f93b 	bl	8003eec <HAL_GetTick>
 8005c76:	0003      	movs	r3, r0
 8005c78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fe f936 	bl	8003eec <HAL_GetTick>
 8005c80:	0002      	movs	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e072      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	4b17      	ldr	r3, [pc, #92]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	049b      	lsls	r3, r3, #18
 8005c96:	4013      	ands	r3, r2
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x5bc>
 8005c9a:	e06a      	b.n	8005d72 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005ca2:	4917      	ldr	r1, [pc, #92]	; (8005d00 <HAL_RCC_OscConfig+0x640>)
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fe f920 	bl	8003eec <HAL_GetTick>
 8005cac:	0003      	movs	r3, r0
 8005cae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fe f91b 	bl	8003eec <HAL_GetTick>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e057      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	049b      	lsls	r3, r3, #18
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d1f0      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_OscConfig+0x62c>)
 8005cd6:	490c      	ldr	r1, [pc, #48]	; (8005d08 <HAL_RCC_OscConfig+0x648>)
 8005cd8:	400a      	ands	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	e049      	b.n	8005d72 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d112      	bne.n	8005d0c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e044      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	00001388 	.word	0x00001388
 8005cf8:	efffffff 	.word	0xefffffff
 8005cfc:	ffbfffff 	.word	0xffbfffff
 8005d00:	feffffff 	.word	0xfeffffff
 8005d04:	11c1808c 	.word	0x11c1808c
 8005d08:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCC_OscConfig+0x6bc>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2203      	movs	r2, #3
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d126      	bne.n	8005d6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2270      	movs	r2, #112	; 0x70
 8005d24:	401a      	ands	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d11f      	bne.n	8005d6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	23fe      	movs	r3, #254	; 0xfe
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	401a      	ands	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d116      	bne.n	8005d6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	23f8      	movs	r3, #248	; 0xf8
 8005d44:	039b      	lsls	r3, r3, #14
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10e      	bne.n	8005d6e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	23e0      	movs	r3, #224	; 0xe0
 8005d54:	051b      	lsls	r3, r3, #20
 8005d56:	401a      	ands	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	0f5b      	lsrs	r3, r3, #29
 8005d64:	075a      	lsls	r2, r3, #29
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b008      	add	sp, #32
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000

08005d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0e9      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d94:	4b76      	ldr	r3, [pc, #472]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2207      	movs	r2, #7
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d91e      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b73      	ldr	r3, [pc, #460]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2207      	movs	r2, #7
 8005da8:	4393      	bics	r3, r2
 8005daa:	0019      	movs	r1, r3
 8005dac:	4b70      	ldr	r3, [pc, #448]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005db4:	f7fe f89a 	bl	8003eec <HAL_GetTick>
 8005db8:	0003      	movs	r3, r0
 8005dba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005dbc:	e009      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dbe:	f7fe f895 	bl	8003eec <HAL_GetTick>
 8005dc2:	0002      	movs	r2, r0
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	4a6a      	ldr	r2, [pc, #424]	; (8005f74 <HAL_RCC_ClockConfig+0x1f4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0ca      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005dd2:	4b67      	ldr	r3, [pc, #412]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	4013      	ands	r3, r2
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1ee      	bne.n	8005dbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2202      	movs	r2, #2
 8005de6:	4013      	ands	r3, r2
 8005de8:	d015      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2204      	movs	r2, #4
 8005df0:	4013      	ands	r3, r2
 8005df2:	d006      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005df4:	4b60      	ldr	r3, [pc, #384]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	4b5f      	ldr	r3, [pc, #380]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005dfa:	21e0      	movs	r1, #224	; 0xe0
 8005dfc:	01c9      	lsls	r1, r1, #7
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e02:	4b5d      	ldr	r3, [pc, #372]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	4a5d      	ldr	r2, [pc, #372]	; (8005f7c <HAL_RCC_ClockConfig+0x1fc>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	0019      	movs	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	4b59      	ldr	r3, [pc, #356]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d057      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e28:	4b53      	ldr	r3, [pc, #332]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	4013      	ands	r3, r2
 8005e32:	d12b      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e097      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d107      	bne.n	8005e50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e40:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	049b      	lsls	r3, r3, #18
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d11f      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e08b      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e58:	4b47      	ldr	r3, [pc, #284]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4013      	ands	r3, r2
 8005e62:	d113      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e07f      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d106      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e70:	4b41      	ldr	r3, [pc, #260]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e74:	2202      	movs	r2, #2
 8005e76:	4013      	ands	r3, r2
 8005e78:	d108      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e074      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	2202      	movs	r2, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e06d      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e8c:	4b3a      	ldr	r3, [pc, #232]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2207      	movs	r2, #7
 8005e92:	4393      	bics	r3, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea0:	f7fe f824 	bl	8003eec <HAL_GetTick>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea8:	e009      	b.n	8005ebe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eaa:	f7fe f81f 	bl	8003eec <HAL_GetTick>
 8005eae:	0002      	movs	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	4a2f      	ldr	r2, [pc, #188]	; (8005f74 <HAL_RCC_ClockConfig+0x1f4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e054      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2238      	movs	r2, #56	; 0x38
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d1ec      	bne.n	8005eaa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d21e      	bcs.n	8005f1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2207      	movs	r2, #7
 8005ee4:	4393      	bics	r3, r2
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ef0:	f7fd fffc 	bl	8003eec <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ef8:	e009      	b.n	8005f0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efa:	f7fd fff7 	bl	8003eec <HAL_GetTick>
 8005efe:	0002      	movs	r2, r0
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_RCC_ClockConfig+0x1f4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e02c      	b.n	8005f68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f0e:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <HAL_RCC_ClockConfig+0x1f0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2207      	movs	r2, #7
 8005f14:	4013      	ands	r3, r2
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d1ee      	bne.n	8005efa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2204      	movs	r2, #4
 8005f22:	4013      	ands	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_RCC_ClockConfig+0x200>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f3a:	f000 f829 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8005f3e:	0001      	movs	r1, r0
 8005f40:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <HAL_RCC_ClockConfig+0x1f8>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	220f      	movs	r2, #15
 8005f48:	401a      	ands	r2, r3
 8005f4a:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <HAL_RCC_ClockConfig+0x204>)
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	58d3      	ldr	r3, [r2, r3]
 8005f50:	221f      	movs	r2, #31
 8005f52:	4013      	ands	r3, r2
 8005f54:	000a      	movs	r2, r1
 8005f56:	40da      	lsrs	r2, r3
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_RCC_ClockConfig+0x208>)
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_ClockConfig+0x20c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7fd ff67 	bl	8003e34 <HAL_InitTick>
 8005f66:	0003      	movs	r3, r0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b004      	add	sp, #16
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40022000 	.word	0x40022000
 8005f74:	00001388 	.word	0x00001388
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	fffff0ff 	.word	0xfffff0ff
 8005f80:	ffff8fff 	.word	0xffff8fff
 8005f84:	0800a658 	.word	0x0800a658
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	20000004 	.word	0x20000004

08005f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f96:	4b3c      	ldr	r3, [pc, #240]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2238      	movs	r2, #56	; 0x38
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005fa0:	4b39      	ldr	r3, [pc, #228]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	0adb      	lsrs	r3, r3, #11
 8005fa6:	2207      	movs	r2, #7
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2201      	movs	r2, #1
 8005fac:	409a      	lsls	r2, r3
 8005fae:	0013      	movs	r3, r2
 8005fb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	4835      	ldr	r0, [pc, #212]	; (800608c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fb6:	f7fa f8a5 	bl	8000104 <__udivsi3>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e05d      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fc0:	4b31      	ldr	r3, [pc, #196]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2238      	movs	r2, #56	; 0x38
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fcc:	4b30      	ldr	r3, [pc, #192]	; (8006090 <HAL_RCC_GetSysClockFreq+0x100>)
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e054      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd2:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2238      	movs	r2, #56	; 0x38
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d138      	bne.n	8006050 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005fde:	4b2a      	ldr	r3, [pc, #168]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	2207      	movs	r2, #7
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d10d      	bne.n	8006018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4824      	ldr	r0, [pc, #144]	; (8006090 <HAL_RCC_GetSysClockFreq+0x100>)
 8006000:	f7fa f880 	bl	8000104 <__udivsi3>
 8006004:	0003      	movs	r3, r0
 8006006:	0019      	movs	r1, r3
 8006008:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	227f      	movs	r2, #127	; 0x7f
 8006010:	4013      	ands	r3, r2
 8006012:	434b      	muls	r3, r1
 8006014:	617b      	str	r3, [r7, #20]
        break;
 8006016:	e00d      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	481c      	ldr	r0, [pc, #112]	; (800608c <HAL_RCC_GetSysClockFreq+0xfc>)
 800601c:	f7fa f872 	bl	8000104 <__udivsi3>
 8006020:	0003      	movs	r3, r0
 8006022:	0019      	movs	r1, r3
 8006024:	4b18      	ldr	r3, [pc, #96]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	227f      	movs	r2, #127	; 0x7f
 800602c:	4013      	ands	r3, r2
 800602e:	434b      	muls	r3, r1
 8006030:	617b      	str	r3, [r7, #20]
        break;
 8006032:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	0f5b      	lsrs	r3, r3, #29
 800603a:	2207      	movs	r2, #7
 800603c:	4013      	ands	r3, r2
 800603e:	3301      	adds	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	6978      	ldr	r0, [r7, #20]
 8006046:	f7fa f85d 	bl	8000104 <__udivsi3>
 800604a:	0003      	movs	r3, r0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	e015      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2238      	movs	r2, #56	; 0x38
 8006056:	4013      	ands	r3, r2
 8006058:	2b20      	cmp	r3, #32
 800605a:	d103      	bne.n	8006064 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	e00b      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2238      	movs	r2, #56	; 0x38
 800606a:	4013      	ands	r3, r2
 800606c:	2b18      	cmp	r3, #24
 800606e:	d103      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006070:	23fa      	movs	r3, #250	; 0xfa
 8006072:	01db      	lsls	r3, r3, #7
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e001      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800607c:	693b      	ldr	r3, [r7, #16]
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b006      	add	sp, #24
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	40021000 	.word	0x40021000
 800608c:	00f42400 	.word	0x00f42400
 8006090:	007a1200 	.word	0x007a1200

08006094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	20000000 	.word	0x20000000

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060ac:	f7ff fff2 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b0:	0004      	movs	r4, r0
 80060b2:	f7ff faf9 	bl	80056a8 <LL_RCC_GetAPB1Prescaler>
 80060b6:	0003      	movs	r3, r0
 80060b8:	0b1a      	lsrs	r2, r3, #12
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	58d3      	ldr	r3, [r2, r3]
 80060c0:	221f      	movs	r2, #31
 80060c2:	4013      	ands	r3, r2
 80060c4:	40dc      	lsrs	r4, r3
 80060c6:	0023      	movs	r3, r4
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bdb0      	pop	{r4, r5, r7, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	0800a698 	.word	0x0800a698

080060d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80060dc:	2313      	movs	r3, #19
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060e4:	2312      	movs	r3, #18
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	4013      	ands	r3, r2
 80060f6:	d100      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80060f8:	e0ad      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fa:	2011      	movs	r0, #17
 80060fc:	183b      	adds	r3, r7, r0
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006102:	4b47      	ldr	r3, [pc, #284]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	055b      	lsls	r3, r3, #21
 800610a:	4013      	ands	r3, r2
 800610c:	d110      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006112:	4b43      	ldr	r3, [pc, #268]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006114:	2180      	movs	r1, #128	; 0x80
 8006116:	0549      	lsls	r1, r1, #21
 8006118:	430a      	orrs	r2, r1
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
 800611c:	4b40      	ldr	r3, [pc, #256]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800611e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	055b      	lsls	r3, r3, #21
 8006124:	4013      	ands	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612a:	183b      	adds	r3, r7, r0
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006130:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	0049      	lsls	r1, r1, #1
 800613a:	430a      	orrs	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800613e:	f7fd fed5 	bl	8003eec <HAL_GetTick>
 8006142:	0003      	movs	r3, r0
 8006144:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006146:	e00b      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006148:	f7fd fed0 	bl	8003eec <HAL_GetTick>
 800614c:	0002      	movs	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d904      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006156:	2313      	movs	r3, #19
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2203      	movs	r2, #3
 800615c:	701a      	strb	r2, [r3, #0]
        break;
 800615e:	e005      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4013      	ands	r3, r2
 800616a:	d0ed      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800616c:	2313      	movs	r3, #19
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d15e      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006176:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006178:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800617a:	23c0      	movs	r3, #192	; 0xc0
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4013      	ands	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d019      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	429a      	cmp	r2, r3
 8006190:	d014      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006192:	4b23      	ldr	r3, [pc, #140]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006198:	4013      	ands	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619c:	4b20      	ldr	r3, [pc, #128]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800619e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a0:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	0249      	lsls	r1, r1, #9
 80061a6:	430a      	orrs	r2, r1
 80061a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ae:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061b0:	491e      	ldr	r1, [pc, #120]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80061b2:	400a      	ands	r2, r1
 80061b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2201      	movs	r2, #1
 80061c0:	4013      	ands	r3, r2
 80061c2:	d016      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fd fe92 	bl	8003eec <HAL_GetTick>
 80061c8:	0003      	movs	r3, r0
 80061ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061cc:	e00c      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ce:	f7fd fe8d 	bl	8003eec <HAL_GetTick>
 80061d2:	0002      	movs	r2, r0
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	4a15      	ldr	r2, [pc, #84]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d904      	bls.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80061de:	2313      	movs	r3, #19
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	2203      	movs	r2, #3
 80061e4:	701a      	strb	r2, [r3, #0]
            break;
 80061e6:	e004      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	2202      	movs	r2, #2
 80061ee:	4013      	ands	r3, r2
 80061f0:	d0ed      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80061f2:	2313      	movs	r3, #19
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	4a09      	ldr	r2, [pc, #36]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800620c:	430a      	orrs	r2, r1
 800620e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006210:	e016      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006212:	2312      	movs	r3, #18
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	2213      	movs	r2, #19
 8006218:	18ba      	adds	r2, r7, r2
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e00f      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006220:	40021000 	.word	0x40021000
 8006224:	40007000 	.word	0x40007000
 8006228:	fffffcff 	.word	0xfffffcff
 800622c:	fffeffff 	.word	0xfffeffff
 8006230:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	2312      	movs	r3, #18
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2213      	movs	r2, #19
 800623a:	18ba      	adds	r2, r7, r2
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006240:	2311      	movs	r3, #17
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624a:	4bb6      	ldr	r3, [pc, #728]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800624c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624e:	4bb5      	ldr	r3, [pc, #724]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006250:	49b5      	ldr	r1, [pc, #724]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006252:	400a      	ands	r2, r1
 8006254:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	4013      	ands	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006260:	4bb0      	ldr	r3, [pc, #704]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	2203      	movs	r2, #3
 8006266:	4393      	bics	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4bad      	ldr	r3, [pc, #692]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006270:	430a      	orrs	r2, r1
 8006272:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2202      	movs	r2, #2
 800627a:	4013      	ands	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800627e:	4ba9      	ldr	r3, [pc, #676]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	220c      	movs	r2, #12
 8006284:	4393      	bics	r3, r2
 8006286:	0019      	movs	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	4ba5      	ldr	r3, [pc, #660]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800628e:	430a      	orrs	r2, r1
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2204      	movs	r2, #4
 8006298:	4013      	ands	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800629c:	4ba1      	ldr	r3, [pc, #644]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	2230      	movs	r2, #48	; 0x30
 80062a2:	4393      	bics	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	4b9e      	ldr	r3, [pc, #632]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062ac:	430a      	orrs	r2, r1
 80062ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2210      	movs	r2, #16
 80062b6:	4013      	ands	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ba:	4b9a      	ldr	r3, [pc, #616]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	4a9b      	ldr	r2, [pc, #620]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	0019      	movs	r1, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	4b96      	ldr	r3, [pc, #600]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062ca:	430a      	orrs	r2, r1
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	4013      	ands	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80062da:	4b92      	ldr	r3, [pc, #584]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	4a94      	ldr	r2, [pc, #592]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	0019      	movs	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	4b8e      	ldr	r3, [pc, #568]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062ea:	430a      	orrs	r2, r1
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4013      	ands	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fa:	4b8a      	ldr	r3, [pc, #552]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	4a8d      	ldr	r2, [pc, #564]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006300:	4013      	ands	r3, r2
 8006302:	0019      	movs	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006308:	4b86      	ldr	r3, [pc, #536]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800630a:	430a      	orrs	r2, r1
 800630c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4013      	ands	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800631a:	4b82      	ldr	r3, [pc, #520]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	4a86      	ldr	r2, [pc, #536]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006320:	4013      	ands	r3, r2
 8006322:	0019      	movs	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	4b7e      	ldr	r3, [pc, #504]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800632a:	430a      	orrs	r2, r1
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2220      	movs	r2, #32
 8006334:	4013      	ands	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006338:	4b7a      	ldr	r3, [pc, #488]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	4a7f      	ldr	r2, [pc, #508]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	4b77      	ldr	r3, [pc, #476]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006348:	430a      	orrs	r2, r1
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2240      	movs	r2, #64	; 0x40
 8006352:	4013      	ands	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006356:	4b73      	ldr	r3, [pc, #460]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	4a79      	ldr	r2, [pc, #484]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800635c:	4013      	ands	r3, r2
 800635e:	0019      	movs	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006366:	430a      	orrs	r2, r1
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	4013      	ands	r3, r2
 8006374:	d015      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006376:	4b6b      	ldr	r3, [pc, #428]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	0899      	lsrs	r1, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006382:	4b68      	ldr	r3, [pc, #416]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006384:	430a      	orrs	r2, r1
 8006386:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	05db      	lsls	r3, r3, #23
 8006390:	429a      	cmp	r2, r3
 8006392:	d106      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006394:	4b63      	ldr	r3, [pc, #396]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	4b62      	ldr	r3, [pc, #392]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	0249      	lsls	r1, r1, #9
 800639e:	430a      	orrs	r2, r1
 80063a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	031b      	lsls	r3, r3, #12
 80063aa:	4013      	ands	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063ae:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	2240      	movs	r2, #64	; 0x40
 80063b4:	4393      	bics	r3, r2
 80063b6:	0019      	movs	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063bc:	4b59      	ldr	r3, [pc, #356]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063be:	430a      	orrs	r2, r1
 80063c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	039b      	lsls	r3, r3, #14
 80063ca:	4013      	ands	r3, r2
 80063cc:	d016      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063ce:	4b55      	ldr	r3, [pc, #340]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	4a5c      	ldr	r2, [pc, #368]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	0019      	movs	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063dc:	4b51      	ldr	r3, [pc, #324]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063de:	430a      	orrs	r2, r1
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	03db      	lsls	r3, r3, #15
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d106      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80063ee:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	4b4c      	ldr	r3, [pc, #304]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	0449      	lsls	r1, r1, #17
 80063f8:	430a      	orrs	r2, r1
 80063fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	03db      	lsls	r3, r3, #15
 8006404:	4013      	ands	r3, r2
 8006406:	d016      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006408:	4b46      	ldr	r3, [pc, #280]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640c:	4a4e      	ldr	r2, [pc, #312]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800640e:	4013      	ands	r3, r2
 8006410:	0019      	movs	r1, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006416:	4b43      	ldr	r3, [pc, #268]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006418:	430a      	orrs	r2, r1
 800641a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	045b      	lsls	r3, r3, #17
 8006424:	429a      	cmp	r2, r3
 8006426:	d106      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006428:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	4b3d      	ldr	r3, [pc, #244]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	0449      	lsls	r1, r1, #17
 8006432:	430a      	orrs	r2, r1
 8006434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	4013      	ands	r3, r2
 8006440:	d014      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006442:	4b38      	ldr	r3, [pc, #224]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	2203      	movs	r2, #3
 8006448:	4393      	bics	r3, r2
 800644a:	0019      	movs	r1, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	4b34      	ldr	r3, [pc, #208]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006452:	430a      	orrs	r2, r1
 8006454:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d106      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	4b30      	ldr	r3, [pc, #192]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	0249      	lsls	r1, r1, #9
 8006468:	430a      	orrs	r2, r1
 800646a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	019b      	lsls	r3, r3, #6
 8006474:	4013      	ands	r3, r2
 8006476:	d014      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	220c      	movs	r2, #12
 800647e:	4393      	bics	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006486:	4b27      	ldr	r3, [pc, #156]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006488:	430a      	orrs	r2, r1
 800648a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b04      	cmp	r3, #4
 8006492:	d106      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	4b22      	ldr	r3, [pc, #136]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	0249      	lsls	r1, r1, #9
 800649e:	430a      	orrs	r2, r1
 80064a0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	045b      	lsls	r3, r3, #17
 80064aa:	4013      	ands	r3, r2
 80064ac:	d016      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	4a22      	ldr	r2, [pc, #136]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	0019      	movs	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064be:	430a      	orrs	r2, r1
 80064c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d106      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064d4:	2180      	movs	r1, #128	; 0x80
 80064d6:	0449      	lsls	r1, r1, #17
 80064d8:	430a      	orrs	r2, r1
 80064da:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	049b      	lsls	r3, r3, #18
 80064e4:	4013      	ands	r3, r2
 80064e6:	d016      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	4a10      	ldr	r2, [pc, #64]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064f8:	430a      	orrs	r2, r1
 80064fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d106      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	0449      	lsls	r1, r1, #17
 8006512:	430a      	orrs	r2, r1
 8006514:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006516:	2312      	movs	r3, #18
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	781b      	ldrb	r3, [r3, #0]
}
 800651c:	0018      	movs	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	b006      	add	sp, #24
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000
 8006528:	efffffff 	.word	0xefffffff
 800652c:	fffff3ff 	.word	0xfffff3ff
 8006530:	fffffcff 	.word	0xfffffcff
 8006534:	fff3ffff 	.word	0xfff3ffff
 8006538:	ffcfffff 	.word	0xffcfffff
 800653c:	ffffcfff 	.word	0xffffcfff
 8006540:	ffff3fff 	.word	0xffff3fff
 8006544:	ffbfffff 	.word	0xffbfffff
 8006548:	feffffff 	.word	0xfeffffff

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e04a      	b.n	80065f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	223d      	movs	r2, #61	; 0x3d
 8006562:	5c9b      	ldrb	r3, [r3, r2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	223c      	movs	r2, #60	; 0x3c
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0018      	movs	r0, r3
 8006576:	f7fc ffef 	bl	8003558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	223d      	movs	r2, #61	; 0x3d
 800657e:	2102      	movs	r1, #2
 8006580:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	0019      	movs	r1, r3
 800658c:	0010      	movs	r0, r2
 800658e:	f000 ff97 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2248      	movs	r2, #72	; 0x48
 8006596:	2101      	movs	r1, #1
 8006598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	223e      	movs	r2, #62	; 0x3e
 800659e:	2101      	movs	r1, #1
 80065a0:	5499      	strb	r1, [r3, r2]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	223f      	movs	r2, #63	; 0x3f
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2241      	movs	r2, #65	; 0x41
 80065b6:	2101      	movs	r1, #1
 80065b8:	5499      	strb	r1, [r3, r2]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2242      	movs	r2, #66	; 0x42
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2243      	movs	r2, #67	; 0x43
 80065c6:	2101      	movs	r1, #1
 80065c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2244      	movs	r2, #68	; 0x44
 80065ce:	2101      	movs	r1, #1
 80065d0:	5499      	strb	r1, [r3, r2]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2245      	movs	r2, #69	; 0x45
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2246      	movs	r2, #70	; 0x46
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2247      	movs	r2, #71	; 0x47
 80065e6:	2101      	movs	r1, #1
 80065e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	223d      	movs	r2, #61	; 0x3d
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e04a      	b.n	80066a4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223d      	movs	r2, #61	; 0x3d
 8006612:	5c9b      	ldrb	r3, [r3, r2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d107      	bne.n	800662a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	223c      	movs	r2, #60	; 0x3c
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f000 f841 	bl	80066ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	223d      	movs	r2, #61	; 0x3d
 800662e:	2102      	movs	r1, #2
 8006630:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	0019      	movs	r1, r3
 800663c:	0010      	movs	r0, r2
 800663e:	f000 ff3f 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2248      	movs	r2, #72	; 0x48
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	223e      	movs	r2, #62	; 0x3e
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	223f      	movs	r2, #63	; 0x3f
 8006656:	2101      	movs	r1, #1
 8006658:	5499      	strb	r1, [r3, r2]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2240      	movs	r2, #64	; 0x40
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2241      	movs	r2, #65	; 0x41
 8006666:	2101      	movs	r1, #1
 8006668:	5499      	strb	r1, [r3, r2]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2242      	movs	r2, #66	; 0x42
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2243      	movs	r2, #67	; 0x43
 8006676:	2101      	movs	r1, #1
 8006678:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2244      	movs	r2, #68	; 0x44
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2245      	movs	r2, #69	; 0x45
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2246      	movs	r2, #70	; 0x46
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2247      	movs	r2, #71	; 0x47
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	223d      	movs	r2, #61	; 0x3d
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	0018      	movs	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b002      	add	sp, #8
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	001a      	movs	r2, r3
 80066ca:	1cbb      	adds	r3, r7, #2
 80066cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ce:	2317      	movs	r3, #23
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d108      	bne.n	80066ee <HAL_TIM_PWM_Start_DMA+0x32>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	223e      	movs	r2, #62	; 0x3e
 80066e0:	5c9b      	ldrb	r3, [r3, r2]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3b02      	subs	r3, #2
 80066e6:	425a      	negs	r2, r3
 80066e8:	4153      	adcs	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e037      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0xa2>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d108      	bne.n	8006706 <HAL_TIM_PWM_Start_DMA+0x4a>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	223f      	movs	r2, #63	; 0x3f
 80066f8:	5c9b      	ldrb	r3, [r3, r2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3b02      	subs	r3, #2
 80066fe:	425a      	negs	r2, r3
 8006700:	4153      	adcs	r3, r2
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e02b      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0xa2>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d108      	bne.n	800671e <HAL_TIM_PWM_Start_DMA+0x62>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	5c9b      	ldrb	r3, [r3, r2]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	3b02      	subs	r3, #2
 8006716:	425a      	negs	r2, r3
 8006718:	4153      	adcs	r3, r2
 800671a:	b2db      	uxtb	r3, r3
 800671c:	e01f      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0xa2>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d108      	bne.n	8006736 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2241      	movs	r2, #65	; 0x41
 8006728:	5c9b      	ldrb	r3, [r3, r2]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	3b02      	subs	r3, #2
 800672e:	425a      	negs	r2, r3
 8006730:	4153      	adcs	r3, r2
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e013      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0xa2>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b10      	cmp	r3, #16
 800673a:	d108      	bne.n	800674e <HAL_TIM_PWM_Start_DMA+0x92>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2242      	movs	r2, #66	; 0x42
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3b02      	subs	r3, #2
 8006746:	425a      	negs	r2, r3
 8006748:	4153      	adcs	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e007      	b.n	800675e <HAL_TIM_PWM_Start_DMA+0xa2>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2243      	movs	r2, #67	; 0x43
 8006752:	5c9b      	ldrb	r3, [r3, r2]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	3b02      	subs	r3, #2
 8006758:	425a      	negs	r2, r3
 800675a:	4153      	adcs	r3, r2
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
 8006764:	e198      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d108      	bne.n	800677e <HAL_TIM_PWM_Start_DMA+0xc2>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	223e      	movs	r2, #62	; 0x3e
 8006770:	5c9b      	ldrb	r3, [r3, r2]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	425a      	negs	r2, r3
 8006778:	4153      	adcs	r3, r2
 800677a:	b2db      	uxtb	r3, r3
 800677c:	e037      	b.n	80067ee <HAL_TIM_PWM_Start_DMA+0x132>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d108      	bne.n	8006796 <HAL_TIM_PWM_Start_DMA+0xda>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	223f      	movs	r2, #63	; 0x3f
 8006788:	5c9b      	ldrb	r3, [r3, r2]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	425a      	negs	r2, r3
 8006790:	4153      	adcs	r3, r2
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e02b      	b.n	80067ee <HAL_TIM_PWM_Start_DMA+0x132>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b08      	cmp	r3, #8
 800679a:	d108      	bne.n	80067ae <HAL_TIM_PWM_Start_DMA+0xf2>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	5c9b      	ldrb	r3, [r3, r2]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	425a      	negs	r2, r3
 80067a8:	4153      	adcs	r3, r2
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e01f      	b.n	80067ee <HAL_TIM_PWM_Start_DMA+0x132>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	d108      	bne.n	80067c6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2241      	movs	r2, #65	; 0x41
 80067b8:	5c9b      	ldrb	r3, [r3, r2]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	425a      	negs	r2, r3
 80067c0:	4153      	adcs	r3, r2
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e013      	b.n	80067ee <HAL_TIM_PWM_Start_DMA+0x132>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d108      	bne.n	80067de <HAL_TIM_PWM_Start_DMA+0x122>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2242      	movs	r2, #66	; 0x42
 80067d0:	5c9b      	ldrb	r3, [r3, r2]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	425a      	negs	r2, r3
 80067d8:	4153      	adcs	r3, r2
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e007      	b.n	80067ee <HAL_TIM_PWM_Start_DMA+0x132>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2243      	movs	r2, #67	; 0x43
 80067e2:	5c9b      	ldrb	r3, [r3, r2]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	425a      	negs	r2, r3
 80067ea:	4153      	adcs	r3, r2
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d035      	beq.n	800685e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_TIM_PWM_Start_DMA+0x144>
 80067f8:	1cbb      	adds	r3, r7, #2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e149      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_TIM_PWM_Start_DMA+0x158>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	223e      	movs	r2, #62	; 0x3e
 800680e:	2102      	movs	r1, #2
 8006810:	5499      	strb	r1, [r3, r2]
 8006812:	e026      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d104      	bne.n	8006824 <HAL_TIM_PWM_Start_DMA+0x168>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	223f      	movs	r2, #63	; 0x3f
 800681e:	2102      	movs	r1, #2
 8006820:	5499      	strb	r1, [r3, r2]
 8006822:	e01e      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b08      	cmp	r3, #8
 8006828:	d104      	bne.n	8006834 <HAL_TIM_PWM_Start_DMA+0x178>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2240      	movs	r2, #64	; 0x40
 800682e:	2102      	movs	r1, #2
 8006830:	5499      	strb	r1, [r3, r2]
 8006832:	e016      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b0c      	cmp	r3, #12
 8006838:	d104      	bne.n	8006844 <HAL_TIM_PWM_Start_DMA+0x188>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2241      	movs	r2, #65	; 0x41
 800683e:	2102      	movs	r1, #2
 8006840:	5499      	strb	r1, [r3, r2]
 8006842:	e00e      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b10      	cmp	r3, #16
 8006848:	d104      	bne.n	8006854 <HAL_TIM_PWM_Start_DMA+0x198>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2242      	movs	r2, #66	; 0x42
 800684e:	2102      	movs	r1, #2
 8006850:	5499      	strb	r1, [r3, r2]
 8006852:	e006      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2243      	movs	r2, #67	; 0x43
 8006858:	2102      	movs	r1, #2
 800685a:	5499      	strb	r1, [r3, r2]
 800685c:	e001      	b.n	8006862 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e11a      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b0c      	cmp	r3, #12
 8006866:	d100      	bne.n	800686a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8006868:	e080      	b.n	800696c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d900      	bls.n	8006872 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8006870:	e0a1      	b.n	80069b6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d054      	beq.n	8006922 <HAL_TIM_PWM_Start_DMA+0x266>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b08      	cmp	r3, #8
 800687c:	d900      	bls.n	8006880 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800687e:	e09a      	b.n	80069b6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b04      	cmp	r3, #4
 800688a:	d025      	beq.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x21c>
 800688c:	e093      	b.n	80069b6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	4a83      	ldr	r2, [pc, #524]	; (8006aa0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006894:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	4a82      	ldr	r2, [pc, #520]	; (8006aa4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	4a81      	ldr	r2, [pc, #516]	; (8006aa8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3334      	adds	r3, #52	; 0x34
 80068b2:	001a      	movs	r2, r3
 80068b4:	1cbb      	adds	r3, r7, #2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	f7fd fcac 	bl	8004214 <HAL_DMA_Start_IT>
 80068bc:	1e03      	subs	r3, r0, #0
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0e9      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	0089      	lsls	r1, r1, #2
 80068d2:	430a      	orrs	r2, r1
 80068d4:	60da      	str	r2, [r3, #12]
      break;
 80068d6:	e073      	b.n	80069c0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	4a70      	ldr	r2, [pc, #448]	; (8006aa0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	4a6f      	ldr	r2, [pc, #444]	; (8006aa4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80068ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3338      	adds	r3, #56	; 0x38
 80068fc:	001a      	movs	r2, r3
 80068fe:	1cbb      	adds	r3, r7, #2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	f7fd fc87 	bl	8004214 <HAL_DMA_Start_IT>
 8006906:	1e03      	subs	r3, r0, #0
 8006908:	d001      	beq.n	800690e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e0c4      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	00c9      	lsls	r1, r1, #3
 800691c:	430a      	orrs	r2, r1
 800691e:	60da      	str	r2, [r3, #12]
      break;
 8006920:	e04e      	b.n	80069c0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a5e      	ldr	r2, [pc, #376]	; (8006aa0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	4a5d      	ldr	r2, [pc, #372]	; (8006aa4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006930:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	4a5c      	ldr	r2, [pc, #368]	; (8006aa8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006938:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	333c      	adds	r3, #60	; 0x3c
 8006946:	001a      	movs	r2, r3
 8006948:	1cbb      	adds	r3, r7, #2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	f7fd fc62 	bl	8004214 <HAL_DMA_Start_IT>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d001      	beq.n	8006958 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e09f      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	0109      	lsls	r1, r1, #4
 8006966:	430a      	orrs	r2, r1
 8006968:	60da      	str	r2, [r3, #12]
      break;
 800696a:	e029      	b.n	80069c0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	4a4b      	ldr	r2, [pc, #300]	; (8006aa0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	4a4a      	ldr	r2, [pc, #296]	; (8006aa4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800697a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	4a49      	ldr	r2, [pc, #292]	; (8006aa8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3340      	adds	r3, #64	; 0x40
 8006990:	001a      	movs	r2, r3
 8006992:	1cbb      	adds	r3, r7, #2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	f7fd fc3d 	bl	8004214 <HAL_DMA_Start_IT>
 800699a:	1e03      	subs	r3, r0, #0
 800699c:	d001      	beq.n	80069a2 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e07a      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	0149      	lsls	r1, r1, #5
 80069b0:	430a      	orrs	r2, r1
 80069b2:	60da      	str	r2, [r3, #12]
      break;
 80069b4:	e004      	b.n	80069c0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80069b6:	2317      	movs	r3, #23
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
      break;
 80069be:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80069c0:	2317      	movs	r3, #23
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d163      	bne.n	8006a92 <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	2201      	movs	r2, #1
 80069d2:	0018      	movs	r0, r3
 80069d4:	f001 f95e 	bl	8007c94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a33      	ldr	r2, [pc, #204]	; (8006aac <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_TIM_PWM_Start_DMA+0x344>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_TIM_PWM_Start_DMA+0x344>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a30      	ldr	r2, [pc, #192]	; (8006ab4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_PWM_Start_DMA+0x344>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2f      	ldr	r2, [pc, #188]	; (8006ab8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_PWM_Start_DMA+0x348>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_PWM_Start_DMA+0x34a>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2180      	movs	r1, #128	; 0x80
 8006a16:	0209      	lsls	r1, r1, #8
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d014      	beq.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x394>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	2380      	movs	r3, #128	; 0x80
 8006a2c:	05db      	lsls	r3, r3, #23
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x394>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a21      	ldr	r2, [pc, #132]	; (8006abc <HAL_TIM_PWM_Start_DMA+0x400>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x394>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x394>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d116      	bne.n	8006a7e <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d016      	beq.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x3d4>
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	025b      	lsls	r3, r3, #9
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d011      	beq.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2101      	movs	r1, #1
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7c:	e008      	b.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2101      	movs	r1, #1
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e000      	b.n	8006a92 <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a90:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8006a92:	2317      	movs	r3, #23
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	781b      	ldrb	r3, [r3, #0]
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b006      	add	sp, #24
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	080073ad 	.word	0x080073ad
 8006aa4:	08007457 	.word	0x08007457
 8006aa8:	08007319 	.word	0x08007319
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	00010007 	.word	0x00010007

08006ac8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad2:	230f      	movs	r3, #15
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d039      	beq.n	8006b54 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d844      	bhi.n	8006b70 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d025      	beq.n	8006b38 <HAL_TIM_PWM_Stop_DMA+0x70>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d83e      	bhi.n	8006b70 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_PWM_Stop_DMA+0x38>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d00e      	beq.n	8006b1c <HAL_TIM_PWM_Stop_DMA+0x54>
 8006afe:	e037      	b.n	8006b70 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	495c      	ldr	r1, [pc, #368]	; (8006c7c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fd fc63 	bl	80043e0 <HAL_DMA_Abort_IT>
      break;
 8006b1a:	e02e      	b.n	8006b7a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4956      	ldr	r1, [pc, #344]	; (8006c80 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8006b28:	400a      	ands	r2, r1
 8006b2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fd fc55 	bl	80043e0 <HAL_DMA_Abort_IT>
      break;
 8006b36:	e020      	b.n	8006b7a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4950      	ldr	r1, [pc, #320]	; (8006c84 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8006b44:	400a      	ands	r2, r1
 8006b46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7fd fc47 	bl	80043e0 <HAL_DMA_Abort_IT>
      break;
 8006b52:	e012      	b.n	8006b7a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	494a      	ldr	r1, [pc, #296]	; (8006c88 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8006b60:	400a      	ands	r2, r1
 8006b62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7fd fc39 	bl	80043e0 <HAL_DMA_Abort_IT>
      break;
 8006b6e:	e004      	b.n	8006b7a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8006b70:	230f      	movs	r3, #15
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	2201      	movs	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]
      break;
 8006b78:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006b7a:	230f      	movs	r3, #15
 8006b7c:	18fb      	adds	r3, r7, r3
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d000      	beq.n	8006b86 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8006b84:	e073      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f001 f880 	bl	8007c94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a39      	ldr	r2, [pc, #228]	; (8006c94 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a38      	ldr	r2, [pc, #224]	; (8006c98 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d013      	beq.n	8006bee <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	4a33      	ldr	r2, [pc, #204]	; (8006c9c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d10d      	bne.n	8006bee <HAL_TIM_PWM_Stop_DMA+0x126>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	4a31      	ldr	r2, [pc, #196]	; (8006ca0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d107      	bne.n	8006bee <HAL_TIM_PWM_Stop_DMA+0x126>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	492e      	ldr	r1, [pc, #184]	; (8006ca4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8006bea:	400a      	ands	r2, r1
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	4a27      	ldr	r2, [pc, #156]	; (8006ca0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	d107      	bne.n	8006c16 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2101      	movs	r1, #1
 8006c12:	438a      	bics	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0x15e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	223e      	movs	r2, #62	; 0x3e
 8006c20:	2101      	movs	r1, #1
 8006c22:	5499      	strb	r1, [r3, r2]
 8006c24:	e023      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	223f      	movs	r2, #63	; 0x3f
 8006c30:	2101      	movs	r1, #1
 8006c32:	5499      	strb	r1, [r3, r2]
 8006c34:	e01b      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	2101      	movs	r1, #1
 8006c42:	5499      	strb	r1, [r3, r2]
 8006c44:	e013      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_PWM_Stop_DMA+0x18e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2241      	movs	r2, #65	; 0x41
 8006c50:	2101      	movs	r1, #1
 8006c52:	5499      	strb	r1, [r3, r2]
 8006c54:	e00b      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Stop_DMA+0x19e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2242      	movs	r2, #66	; 0x42
 8006c60:	2101      	movs	r1, #1
 8006c62:	5499      	strb	r1, [r3, r2]
 8006c64:	e003      	b.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2243      	movs	r2, #67	; 0x43
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8006c6e:	230f      	movs	r3, #15
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	781b      	ldrb	r3, [r3, #0]
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b004      	add	sp, #16
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	fffffdff 	.word	0xfffffdff
 8006c80:	fffffbff 	.word	0xfffffbff
 8006c84:	fffff7ff 	.word	0xfffff7ff
 8006c88:	ffffefff 	.word	0xffffefff
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800
 8006c9c:	00001111 	.word	0x00001111
 8006ca0:	00000444 	.word	0x00000444
 8006ca4:	ffff7fff 	.word	0xffff7fff

08006ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d124      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d11d      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	4252      	negs	r2, r2
 8006cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 faf4 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 8006cf0:	e007      	b.n	8006d02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f000 fae7 	bl	80072c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7fd f827 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d125      	bne.n	8006d62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d11e      	bne.n	8006d62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2205      	movs	r2, #5
 8006d2a:	4252      	negs	r2, r2
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	23c0      	movs	r3, #192	; 0xc0
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d004      	beq.n	8006d4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 fac7 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 8006d4a:	e007      	b.n	8006d5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f000 faba 	bl	80072c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7fc fffa 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d124      	bne.n	8006dba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2208      	movs	r2, #8
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d11d      	bne.n	8006dba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2209      	movs	r2, #9
 8006d84:	4252      	negs	r2, r2
 8006d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2203      	movs	r2, #3
 8006d96:	4013      	ands	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 fa9b 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 8006da2:	e007      	b.n	8006db4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f000 fa8e 	bl	80072c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7fc ffce 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d125      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2210      	movs	r2, #16
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d11e      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2211      	movs	r2, #17
 8006ddc:	4252      	negs	r2, r2
 8006dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2208      	movs	r2, #8
 8006de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	23c0      	movs	r3, #192	; 0xc0
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4013      	ands	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	0018      	movs	r0, r3
 8006df8:	f000 fa6e 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e007      	b.n	8006e0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f000 fa61 	bl	80072c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f7fc ffa1 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10f      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d108      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2202      	movs	r2, #2
 8006e36:	4252      	negs	r2, r2
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 fa3b 	bl	80072b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2280      	movs	r2, #128	; 0x80
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b80      	cmp	r3, #128	; 0x80
 8006e4e:	d10f      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	2280      	movs	r2, #128	; 0x80
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d108      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2281      	movs	r2, #129	; 0x81
 8006e64:	4252      	negs	r2, r2
 8006e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f001 f85a 	bl	8007f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691a      	ldr	r2, [r3, #16]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10e      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2280      	movs	r2, #128	; 0x80
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d107      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1c      	ldr	r2, [pc, #112]	; (8006f08 <HAL_TIM_IRQHandler+0x260>)
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f001 f849 	bl	8007f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2240      	movs	r2, #64	; 0x40
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b40      	cmp	r3, #64	; 0x40
 8006eae:	d10f      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2240      	movs	r2, #64	; 0x40
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d108      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2241      	movs	r2, #65	; 0x41
 8006ec4:	4252      	negs	r2, r2
 8006ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f000 fa14 	bl	80072f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d10f      	bne.n	8006efe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d108      	bne.n	8006efe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2221      	movs	r2, #33	; 0x21
 8006ef2:	4252      	negs	r2, r2
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f001 f80b 	bl	8007f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b002      	add	sp, #8
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	fffffeff 	.word	0xfffffeff

08006f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f18:	2317      	movs	r3, #23
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	223c      	movs	r2, #60	; 0x3c
 8006f24:	5c9b      	ldrb	r3, [r3, r2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_PWM_ConfigChannel+0x22>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e0e5      	b.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	223c      	movs	r2, #60	; 0x3c
 8006f32:	2101      	movs	r1, #1
 8006f34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b14      	cmp	r3, #20
 8006f3a:	d900      	bls.n	8006f3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8006f3c:	e0d1      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	009a      	lsls	r2, r3, #2
 8006f42:	4b70      	ldr	r3, [pc, #448]	; (8007104 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	0011      	movs	r1, r2
 8006f52:	0018      	movs	r0, r3
 8006f54:	f000 fb3e 	bl	80075d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2108      	movs	r1, #8
 8006f64:	430a      	orrs	r2, r1
 8006f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2104      	movs	r1, #4
 8006f74:	438a      	bics	r2, r1
 8006f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	619a      	str	r2, [r3, #24]
      break;
 8006f8a:	e0af      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	0011      	movs	r1, r2
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 fba7 	bl	80076e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	0109      	lsls	r1, r1, #4
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4954      	ldr	r1, [pc, #336]	; (8007108 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6999      	ldr	r1, [r3, #24]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	021a      	lsls	r2, r3, #8
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	619a      	str	r2, [r3, #24]
      break;
 8006fd0:	e08c      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	0011      	movs	r1, r2
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 fc08 	bl	80077f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2108      	movs	r1, #8
 8006fec:	430a      	orrs	r2, r1
 8006fee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69da      	ldr	r2, [r3, #28]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	438a      	bics	r2, r1
 8006ffe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69d9      	ldr	r1, [r3, #28]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	61da      	str	r2, [r3, #28]
      break;
 8007012:	e06b      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	0011      	movs	r1, r2
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fc6f 	bl	8007900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	0109      	lsls	r1, r1, #4
 8007030:	430a      	orrs	r2, r1
 8007032:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69da      	ldr	r2, [r3, #28]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4932      	ldr	r1, [pc, #200]	; (8007108 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007040:	400a      	ands	r2, r1
 8007042:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69d9      	ldr	r1, [r3, #28]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	61da      	str	r2, [r3, #28]
      break;
 8007058:	e048      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	0011      	movs	r1, r2
 8007062:	0018      	movs	r0, r3
 8007064:	f000 fcb6 	bl	80079d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2108      	movs	r1, #8
 8007074:	430a      	orrs	r2, r1
 8007076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2104      	movs	r1, #4
 8007084:	438a      	bics	r2, r1
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800709a:	e027      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	0011      	movs	r1, r2
 80070a4:	0018      	movs	r0, r3
 80070a6:	f000 fcf5 	bl	8007a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	0109      	lsls	r1, r1, #4
 80070b8:	430a      	orrs	r2, r1
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4910      	ldr	r1, [pc, #64]	; (8007108 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80070c8:	400a      	ands	r2, r1
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070e0:	e004      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80070e2:	2317      	movs	r3, #23
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	223c      	movs	r2, #60	; 0x3c
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]

  return status;
 80070f4:	2317      	movs	r3, #23
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	781b      	ldrb	r3, [r3, #0]
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b006      	add	sp, #24
 8007100:	bd80      	pop	{r7, pc}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	0800a6c8 	.word	0x0800a6c8
 8007108:	fffffbff 	.word	0xfffffbff

0800710c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007116:	230f      	movs	r3, #15
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	223c      	movs	r2, #60	; 0x3c
 8007122:	5c9b      	ldrb	r3, [r3, r2]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIM_ConfigClockSource+0x20>
 8007128:	2302      	movs	r3, #2
 800712a:	e0bc      	b.n	80072a6 <HAL_TIM_ConfigClockSource+0x19a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	223c      	movs	r2, #60	; 0x3c
 8007130:	2101      	movs	r1, #1
 8007132:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	223d      	movs	r2, #61	; 0x3d
 8007138:	2102      	movs	r1, #2
 800713a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a5a      	ldr	r2, [pc, #360]	; (80072b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007148:	4013      	ands	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4a59      	ldr	r2, [pc, #356]	; (80072b4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007150:	4013      	ands	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	0192      	lsls	r2, r2, #6
 8007164:	4293      	cmp	r3, r2
 8007166:	d040      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0xde>
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	0192      	lsls	r2, r2, #6
 800716c:	4293      	cmp	r3, r2
 800716e:	d900      	bls.n	8007172 <HAL_TIM_ConfigClockSource+0x66>
 8007170:	e088      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 8007172:	2280      	movs	r2, #128	; 0x80
 8007174:	0152      	lsls	r2, r2, #5
 8007176:	4293      	cmp	r3, r2
 8007178:	d100      	bne.n	800717c <HAL_TIM_ConfigClockSource+0x70>
 800717a:	e088      	b.n	800728e <HAL_TIM_ConfigClockSource+0x182>
 800717c:	2280      	movs	r2, #128	; 0x80
 800717e:	0152      	lsls	r2, r2, #5
 8007180:	4293      	cmp	r3, r2
 8007182:	d900      	bls.n	8007186 <HAL_TIM_ConfigClockSource+0x7a>
 8007184:	e07e      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 8007186:	2b70      	cmp	r3, #112	; 0x70
 8007188:	d018      	beq.n	80071bc <HAL_TIM_ConfigClockSource+0xb0>
 800718a:	d900      	bls.n	800718e <HAL_TIM_ConfigClockSource+0x82>
 800718c:	e07a      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 800718e:	2b60      	cmp	r3, #96	; 0x60
 8007190:	d04f      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x126>
 8007192:	d900      	bls.n	8007196 <HAL_TIM_ConfigClockSource+0x8a>
 8007194:	e076      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 8007196:	2b50      	cmp	r3, #80	; 0x50
 8007198:	d03b      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x106>
 800719a:	d900      	bls.n	800719e <HAL_TIM_ConfigClockSource+0x92>
 800719c:	e072      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	d057      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x146>
 80071a2:	d900      	bls.n	80071a6 <HAL_TIM_ConfigClockSource+0x9a>
 80071a4:	e06e      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 80071a6:	2b30      	cmp	r3, #48	; 0x30
 80071a8:	d063      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x166>
 80071aa:	d86b      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d060      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x166>
 80071b0:	d868      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d05d      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x166>
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d05b      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x166>
 80071ba:	e063      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	6899      	ldr	r1, [r3, #8]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f000 fd42 	bl	8007c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2277      	movs	r2, #119	; 0x77
 80071dc:	4313      	orrs	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	609a      	str	r2, [r3, #8]
      break;
 80071e8:	e052      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6899      	ldr	r1, [r3, #8]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f000 fd2b 	bl	8007c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	01c9      	lsls	r1, r1, #7
 800720c:	430a      	orrs	r2, r1
 800720e:	609a      	str	r2, [r3, #8]
      break;
 8007210:	e03e      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	001a      	movs	r2, r3
 8007220:	f000 fc9c 	bl	8007b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2150      	movs	r1, #80	; 0x50
 800722a:	0018      	movs	r0, r3
 800722c:	f000 fcf6 	bl	8007c1c <TIM_ITRx_SetConfig>
      break;
 8007230:	e02e      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	001a      	movs	r2, r3
 8007240:	f000 fcba 	bl	8007bb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2160      	movs	r1, #96	; 0x60
 800724a:	0018      	movs	r0, r3
 800724c:	f000 fce6 	bl	8007c1c <TIM_ITRx_SetConfig>
      break;
 8007250:	e01e      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6859      	ldr	r1, [r3, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	001a      	movs	r2, r3
 8007260:	f000 fc7c 	bl	8007b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	0018      	movs	r0, r3
 800726c:	f000 fcd6 	bl	8007c1c <TIM_ITRx_SetConfig>
      break;
 8007270:	e00e      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	0019      	movs	r1, r3
 800727c:	0010      	movs	r0, r2
 800727e:	f000 fccd 	bl	8007c1c <TIM_ITRx_SetConfig>
      break;
 8007282:	e005      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007284:	230f      	movs	r3, #15
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e000      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800728e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	223d      	movs	r2, #61	; 0x3d
 8007294:	2101      	movs	r1, #1
 8007296:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	223c      	movs	r2, #60	; 0x3c
 800729c:	2100      	movs	r1, #0
 800729e:	5499      	strb	r1, [r3, r2]

  return status;
 80072a0:	230f      	movs	r3, #15
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	781b      	ldrb	r3, [r3, #0]
}
 80072a6:	0018      	movs	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b004      	add	sp, #16
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	ffceff88 	.word	0xffceff88
 80072b4:	ffff00ff 	.word	0xffff00ff

080072b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072c0:	46c0      	nop			; (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b002      	add	sp, #8
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b002      	add	sp, #8
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b002      	add	sp, #8
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b002      	add	sp, #8
 8007316:	bd80      	pop	{r7, pc}

08007318 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d107      	bne.n	8007340 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	223e      	movs	r2, #62	; 0x3e
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
 800733e:	e02a      	b.n	8007396 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d107      	bne.n	800735a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2202      	movs	r2, #2
 800734e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	223f      	movs	r2, #63	; 0x3f
 8007354:	2101      	movs	r1, #1
 8007356:	5499      	strb	r1, [r3, r2]
 8007358:	e01d      	b.n	8007396 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d107      	bne.n	8007374 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2204      	movs	r2, #4
 8007368:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2240      	movs	r2, #64	; 0x40
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]
 8007372:	e010      	b.n	8007396 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	429a      	cmp	r2, r3
 800737c:	d107      	bne.n	800738e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2208      	movs	r2, #8
 8007382:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2241      	movs	r2, #65	; 0x41
 8007388:	2101      	movs	r1, #1
 800738a:	5499      	strb	r1, [r3, r2]
 800738c:	e003      	b.n	8007396 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	223d      	movs	r2, #61	; 0x3d
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff ffb5 	bl	8007308 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b004      	add	sp, #16
 80073aa:	bd80      	pop	{r7, pc}

080073ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d10b      	bne.n	80073dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d136      	bne.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	223e      	movs	r2, #62	; 0x3e
 80073d6:	2101      	movs	r1, #1
 80073d8:	5499      	strb	r1, [r3, r2]
 80073da:	e031      	b.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d10b      	bne.n	80073fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2202      	movs	r2, #2
 80073ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d125      	bne.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	223f      	movs	r2, #63	; 0x3f
 80073f8:	2101      	movs	r1, #1
 80073fa:	5499      	strb	r1, [r3, r2]
 80073fc:	e020      	b.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d10b      	bne.n	8007420 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2204      	movs	r2, #4
 800740c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d114      	bne.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2240      	movs	r2, #64	; 0x40
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]
 800741e:	e00f      	b.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	429a      	cmp	r2, r3
 8007428:	d10a      	bne.n	8007440 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2208      	movs	r2, #8
 800742e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2241      	movs	r2, #65	; 0x41
 800743c:	2101      	movs	r1, #1
 800743e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	0018      	movs	r0, r3
 8007444:	f7fc fc84 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	771a      	strb	r2, [r3, #28]
}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	b004      	add	sp, #16
 8007454:	bd80      	pop	{r7, pc}

08007456 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d103      	bne.n	8007476 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	771a      	strb	r2, [r3, #28]
 8007474:	e019      	b.n	80074aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d103      	bne.n	8007488 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2202      	movs	r2, #2
 8007484:	771a      	strb	r2, [r3, #28]
 8007486:	e010      	b.n	80074aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d103      	bne.n	800749a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2204      	movs	r2, #4
 8007496:	771a      	strb	r2, [r3, #28]
 8007498:	e007      	b.n	80074aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d102      	bne.n	80074aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2208      	movs	r2, #8
 80074a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7ff ff1b 	bl	80072e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
}
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b004      	add	sp, #16
 80074be:	bd80      	pop	{r7, pc}

080074c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a38      	ldr	r2, [pc, #224]	; (80075b4 <TIM_Base_SetConfig+0xf4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00c      	beq.n	80074f2 <TIM_Base_SetConfig+0x32>
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	05db      	lsls	r3, r3, #23
 80074de:	429a      	cmp	r2, r3
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x32>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a34      	ldr	r2, [pc, #208]	; (80075b8 <TIM_Base_SetConfig+0xf8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x32>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a33      	ldr	r2, [pc, #204]	; (80075bc <TIM_Base_SetConfig+0xfc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2270      	movs	r2, #112	; 0x70
 80074f6:	4393      	bics	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a2b      	ldr	r2, [pc, #172]	; (80075b4 <TIM_Base_SetConfig+0xf4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d01c      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	2380      	movs	r3, #128	; 0x80
 8007510:	05db      	lsls	r3, r3, #23
 8007512:	429a      	cmp	r2, r3
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <TIM_Base_SetConfig+0xf8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <TIM_Base_SetConfig+0xfc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <TIM_Base_SetConfig+0x100>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <TIM_Base_SetConfig+0x104>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a23      	ldr	r2, [pc, #140]	; (80075c8 <TIM_Base_SetConfig+0x108>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0x86>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a22      	ldr	r2, [pc, #136]	; (80075cc <TIM_Base_SetConfig+0x10c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4a21      	ldr	r2, [pc, #132]	; (80075d0 <TIM_Base_SetConfig+0x110>)
 800754a:	4013      	ands	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2280      	movs	r2, #128	; 0x80
 800755c:	4393      	bics	r3, r2
 800755e:	001a      	movs	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a0c      	ldr	r2, [pc, #48]	; (80075b4 <TIM_Base_SetConfig+0xf4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0xde>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a0e      	ldr	r2, [pc, #56]	; (80075c4 <TIM_Base_SetConfig+0x104>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0xde>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a0d      	ldr	r2, [pc, #52]	; (80075c8 <TIM_Base_SetConfig+0x108>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0xde>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a0c      	ldr	r2, [pc, #48]	; (80075cc <TIM_Base_SetConfig+0x10c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d103      	bne.n	80075a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	615a      	str	r2, [r3, #20]
}
 80075ac:	46c0      	nop			; (mov r8, r8)
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b004      	add	sp, #16
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40002000 	.word	0x40002000
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800
 80075d0:	fffffcff 	.word	0xfffffcff

080075d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	2201      	movs	r2, #1
 80075e4:	4393      	bics	r3, r2
 80075e6:	001a      	movs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a32      	ldr	r2, [pc, #200]	; (80076cc <TIM_OC1_SetConfig+0xf8>)
 8007602:	4013      	ands	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2203      	movs	r2, #3
 800760a:	4393      	bics	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2202      	movs	r2, #2
 800761c:	4393      	bics	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a28      	ldr	r2, [pc, #160]	; (80076d0 <TIM_OC1_SetConfig+0xfc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00b      	beq.n	800764a <TIM_OC1_SetConfig+0x76>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a27      	ldr	r2, [pc, #156]	; (80076d4 <TIM_OC1_SetConfig+0x100>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d007      	beq.n	800764a <TIM_OC1_SetConfig+0x76>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a26      	ldr	r2, [pc, #152]	; (80076d8 <TIM_OC1_SetConfig+0x104>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d003      	beq.n	800764a <TIM_OC1_SetConfig+0x76>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a25      	ldr	r2, [pc, #148]	; (80076dc <TIM_OC1_SetConfig+0x108>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d10c      	bne.n	8007664 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2208      	movs	r2, #8
 800764e:	4393      	bics	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2204      	movs	r2, #4
 8007660:	4393      	bics	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a1a      	ldr	r2, [pc, #104]	; (80076d0 <TIM_OC1_SetConfig+0xfc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00b      	beq.n	8007684 <TIM_OC1_SetConfig+0xb0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <TIM_OC1_SetConfig+0x100>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <TIM_OC1_SetConfig+0xb0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <TIM_OC1_SetConfig+0x104>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC1_SetConfig+0xb0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a17      	ldr	r2, [pc, #92]	; (80076dc <TIM_OC1_SetConfig+0x108>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d111      	bne.n	80076a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <TIM_OC1_SetConfig+0x10c>)
 8007688:	4013      	ands	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <TIM_OC1_SetConfig+0x110>)
 8007690:	4013      	ands	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b006      	add	sp, #24
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	fffeff8f 	.word	0xfffeff8f
 80076d0:	40012c00 	.word	0x40012c00
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800
 80076e0:	fffffeff 	.word	0xfffffeff
 80076e4:	fffffdff 	.word	0xfffffdff

080076e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	2210      	movs	r2, #16
 80076f8:	4393      	bics	r3, r2
 80076fa:	001a      	movs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a2e      	ldr	r2, [pc, #184]	; (80077d0 <TIM_OC2_SetConfig+0xe8>)
 8007716:	4013      	ands	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <TIM_OC2_SetConfig+0xec>)
 800771e:	4013      	ands	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2220      	movs	r2, #32
 8007732:	4393      	bics	r3, r2
 8007734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a24      	ldr	r2, [pc, #144]	; (80077d8 <TIM_OC2_SetConfig+0xf0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d10d      	bne.n	8007766 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2280      	movs	r2, #128	; 0x80
 800774e:	4393      	bics	r3, r2
 8007750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	4393      	bics	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <TIM_OC2_SetConfig+0xf0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_OC2_SetConfig+0x9e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <TIM_OC2_SetConfig+0xf4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_OC2_SetConfig+0x9e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <TIM_OC2_SetConfig+0xf8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC2_SetConfig+0x9e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <TIM_OC2_SetConfig+0xfc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d113      	bne.n	80077ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <TIM_OC2_SetConfig+0x100>)
 800778a:	4013      	ands	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	4a16      	ldr	r2, [pc, #88]	; (80077ec <TIM_OC2_SetConfig+0x104>)
 8007792:	4013      	ands	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	621a      	str	r2, [r3, #32]
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b006      	add	sp, #24
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	feff8fff 	.word	0xfeff8fff
 80077d4:	fffffcff 	.word	0xfffffcff
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800
 80077e8:	fffffbff 	.word	0xfffffbff
 80077ec:	fffff7ff 	.word	0xfffff7ff

080077f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	4a35      	ldr	r2, [pc, #212]	; (80078d4 <TIM_OC3_SetConfig+0xe4>)
 8007800:	401a      	ands	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <TIM_OC3_SetConfig+0xe8>)
 800781c:	4013      	ands	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2203      	movs	r2, #3
 8007824:	4393      	bics	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4a29      	ldr	r2, [pc, #164]	; (80078dc <TIM_OC3_SetConfig+0xec>)
 8007836:	4013      	ands	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <TIM_OC3_SetConfig+0xf0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d10d      	bne.n	800786a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4a24      	ldr	r2, [pc, #144]	; (80078e4 <TIM_OC3_SetConfig+0xf4>)
 8007852:	4013      	ands	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <TIM_OC3_SetConfig+0xf8>)
 8007866:	4013      	ands	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a1c      	ldr	r2, [pc, #112]	; (80078e0 <TIM_OC3_SetConfig+0xf0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00b      	beq.n	800788a <TIM_OC3_SetConfig+0x9a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <TIM_OC3_SetConfig+0xfc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_OC3_SetConfig+0x9a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <TIM_OC3_SetConfig+0x100>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC3_SetConfig+0x9a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <TIM_OC3_SetConfig+0x104>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d113      	bne.n	80078b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <TIM_OC3_SetConfig+0x108>)
 800788e:	4013      	ands	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4a19      	ldr	r2, [pc, #100]	; (80078fc <TIM_OC3_SetConfig+0x10c>)
 8007896:	4013      	ands	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	621a      	str	r2, [r3, #32]
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b006      	add	sp, #24
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	fffffeff 	.word	0xfffffeff
 80078d8:	fffeff8f 	.word	0xfffeff8f
 80078dc:	fffffdff 	.word	0xfffffdff
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	fffff7ff 	.word	0xfffff7ff
 80078e8:	fffffbff 	.word	0xfffffbff
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800
 80078f8:	ffffefff 	.word	0xffffefff
 80078fc:	ffffdfff 	.word	0xffffdfff

08007900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <TIM_OC4_SetConfig+0xb0>)
 8007910:	401a      	ands	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a22      	ldr	r2, [pc, #136]	; (80079b4 <TIM_OC4_SetConfig+0xb4>)
 800792c:	4013      	ands	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a21      	ldr	r2, [pc, #132]	; (80079b8 <TIM_OC4_SetConfig+0xb8>)
 8007934:	4013      	ands	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4a1d      	ldr	r2, [pc, #116]	; (80079bc <TIM_OC4_SetConfig+0xbc>)
 8007948:	4013      	ands	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	031b      	lsls	r3, r3, #12
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a19      	ldr	r2, [pc, #100]	; (80079c0 <TIM_OC4_SetConfig+0xc0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_OC4_SetConfig+0x78>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <TIM_OC4_SetConfig+0xc4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d007      	beq.n	8007978 <TIM_OC4_SetConfig+0x78>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <TIM_OC4_SetConfig+0xc8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_OC4_SetConfig+0x78>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a16      	ldr	r2, [pc, #88]	; (80079cc <TIM_OC4_SetConfig+0xcc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d109      	bne.n	800798c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <TIM_OC4_SetConfig+0xd0>)
 800797c:	4013      	ands	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	019b      	lsls	r3, r3, #6
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b006      	add	sp, #24
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	ffffefff 	.word	0xffffefff
 80079b4:	feff8fff 	.word	0xfeff8fff
 80079b8:	fffffcff 	.word	0xfffffcff
 80079bc:	ffffdfff 	.word	0xffffdfff
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800
 80079d0:	ffffbfff 	.word	0xffffbfff

080079d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	4a25      	ldr	r2, [pc, #148]	; (8007a78 <TIM_OC5_SetConfig+0xa4>)
 80079e4:	401a      	ands	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <TIM_OC5_SetConfig+0xa8>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <TIM_OC5_SetConfig+0xac>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	041b      	lsls	r3, r3, #16
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a17      	ldr	r2, [pc, #92]	; (8007a84 <TIM_OC5_SetConfig+0xb0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00b      	beq.n	8007a42 <TIM_OC5_SetConfig+0x6e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a16      	ldr	r2, [pc, #88]	; (8007a88 <TIM_OC5_SetConfig+0xb4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d007      	beq.n	8007a42 <TIM_OC5_SetConfig+0x6e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a15      	ldr	r2, [pc, #84]	; (8007a8c <TIM_OC5_SetConfig+0xb8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d003      	beq.n	8007a42 <TIM_OC5_SetConfig+0x6e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a14      	ldr	r2, [pc, #80]	; (8007a90 <TIM_OC5_SetConfig+0xbc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d109      	bne.n	8007a56 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	4a0c      	ldr	r2, [pc, #48]	; (8007a78 <TIM_OC5_SetConfig+0xa4>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b006      	add	sp, #24
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	fffeffff 	.word	0xfffeffff
 8007a7c:	fffeff8f 	.word	0xfffeff8f
 8007a80:	fffdffff 	.word	0xfffdffff
 8007a84:	40012c00 	.word	0x40012c00
 8007a88:	40014000 	.word	0x40014000
 8007a8c:	40014400 	.word	0x40014400
 8007a90:	40014800 	.word	0x40014800

08007a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <TIM_OC6_SetConfig+0xa8>)
 8007aa4:	401a      	ands	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <TIM_OC6_SetConfig+0xac>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <TIM_OC6_SetConfig+0xb0>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	051b      	lsls	r3, r3, #20
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <TIM_OC6_SetConfig+0xb4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <TIM_OC6_SetConfig+0x70>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a17      	ldr	r2, [pc, #92]	; (8007b4c <TIM_OC6_SetConfig+0xb8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_OC6_SetConfig+0x70>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a16      	ldr	r2, [pc, #88]	; (8007b50 <TIM_OC6_SetConfig+0xbc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC6_SetConfig+0x70>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <TIM_OC6_SetConfig+0xc0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d109      	bne.n	8007b18 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <TIM_OC6_SetConfig+0xc4>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	029b      	lsls	r3, r3, #10
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b006      	add	sp, #24
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	ffefffff 	.word	0xffefffff
 8007b40:	feff8fff 	.word	0xfeff8fff
 8007b44:	ffdfffff 	.word	0xffdfffff
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800
 8007b58:	fffbffff 	.word	0xfffbffff

08007b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	2201      	movs	r2, #1
 8007b74:	4393      	bics	r3, r2
 8007b76:	001a      	movs	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	22f0      	movs	r2, #240	; 0xf0
 8007b86:	4393      	bics	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	220a      	movs	r2, #10
 8007b98:	4393      	bics	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	621a      	str	r2, [r3, #32]
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b006      	add	sp, #24
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	2210      	movs	r2, #16
 8007bca:	4393      	bics	r3, r2
 8007bcc:	001a      	movs	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4a0d      	ldr	r2, [pc, #52]	; (8007c18 <TIM_TI2_ConfigInputStage+0x60>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	031b      	lsls	r3, r3, #12
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	22a0      	movs	r2, #160	; 0xa0
 8007bf4:	4393      	bics	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b006      	add	sp, #24
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	ffff0fff 	.word	0xffff0fff

08007c1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a08      	ldr	r2, [pc, #32]	; (8007c50 <TIM_ITRx_SetConfig+0x34>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	2207      	movs	r2, #7
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	609a      	str	r2, [r3, #8]
}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b004      	add	sp, #16
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	ffcfff8f 	.word	0xffcfff8f

08007c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <TIM_ETR_SetConfig+0x3c>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	021a      	lsls	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	609a      	str	r2, [r3, #8]
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b006      	add	sp, #24
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	ffff00ff 	.word	0xffff00ff

08007c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	221f      	movs	r2, #31
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	409a      	lsls	r2, r3
 8007caa:	0013      	movs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	43d2      	mvns	r2, r2
 8007cb6:	401a      	ands	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	211f      	movs	r1, #31
 8007cc4:	400b      	ands	r3, r1
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4099      	lsls	r1, r3
 8007cca:	000b      	movs	r3, r1
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b006      	add	sp, #24
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	223c      	movs	r2, #60	; 0x3c
 8007cea:	5c9b      	ldrb	r3, [r3, r2]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e05a      	b.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	223c      	movs	r2, #60	; 0x3c
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	223d      	movs	r2, #61	; 0x3d
 8007d00:	2102      	movs	r1, #2
 8007d02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a26      	ldr	r2, [pc, #152]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d108      	bne.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4a25      	ldr	r2, [pc, #148]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2270      	movs	r2, #112	; 0x70
 8007d34:	4393      	bics	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a19      	ldr	r2, [pc, #100]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d014      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	05db      	lsls	r3, r3, #23
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d00e      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d10c      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2280      	movs	r2, #128	; 0x80
 8007d82:	4393      	bics	r3, r2
 8007d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	223d      	movs	r2, #61	; 0x3d
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	223c      	movs	r2, #60	; 0x3c
 8007da4:	2100      	movs	r1, #0
 8007da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b004      	add	sp, #16
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	ff0fffff 	.word	0xff0fffff
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40014000 	.word	0x40014000

08007dc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	223c      	movs	r2, #60	; 0x3c
 8007dda:	5c9b      	ldrb	r3, [r3, r2]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e079      	b.n	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	223c      	movs	r2, #60	; 0x3c
 8007de8:	2101      	movs	r1, #1
 8007dea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	22ff      	movs	r2, #255	; 0xff
 8007df0:	4393      	bics	r3, r2
 8007df2:	001a      	movs	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a38      	ldr	r2, [pc, #224]	; (8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007e00:	401a      	ands	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a35      	ldr	r2, [pc, #212]	; (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e0e:	401a      	ands	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007e1c:	401a      	ands	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4a30      	ldr	r2, [pc, #192]	; (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007e2a:	401a      	ands	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4a2e      	ldr	r2, [pc, #184]	; (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007e38:	401a      	ands	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a2b      	ldr	r2, [pc, #172]	; (8007ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007e46:	401a      	ands	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a29      	ldr	r2, [pc, #164]	; (8007ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007e54:	401a      	ands	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a25      	ldr	r2, [pc, #148]	; (8007efc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d106      	bne.n	8007e78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4a24      	ldr	r2, [pc, #144]	; (8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007e6e:	401a      	ands	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	; (8007efc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d121      	bne.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007e86:	401a      	ands	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007e96:	401a      	ands	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007ea4:	401a      	ands	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a12      	ldr	r2, [pc, #72]	; (8007efc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d106      	bne.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007ebc:	401a      	ands	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	223c      	movs	r2, #60	; 0x3c
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	0018      	movs	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b004      	add	sp, #16
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	fffffcff 	.word	0xfffffcff
 8007ee4:	fffffbff 	.word	0xfffffbff
 8007ee8:	fffff7ff 	.word	0xfffff7ff
 8007eec:	ffffefff 	.word	0xffffefff
 8007ef0:	ffffdfff 	.word	0xffffdfff
 8007ef4:	ffffbfff 	.word	0xffffbfff
 8007ef8:	fff0ffff 	.word	0xfff0ffff
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	efffffff 	.word	0xefffffff
 8007f04:	ff0fffff 	.word	0xff0fffff
 8007f08:	feffffff 	.word	0xfeffffff
 8007f0c:	fdffffff 	.word	0xfdffffff
 8007f10:	dfffffff 	.word	0xdfffffff

08007f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f1c:	46c0      	nop			; (mov r8, r8)
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b002      	add	sp, #8
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f2c:	46c0      	nop			; (mov r8, r8)
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e046      	b.n	8007fe4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2288      	movs	r2, #136	; 0x88
 8007f5a:	589b      	ldr	r3, [r3, r2]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d107      	bne.n	8007f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2284      	movs	r2, #132	; 0x84
 8007f64:	2100      	movs	r1, #0
 8007f66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f7fb fbda 	bl	8003724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2288      	movs	r2, #136	; 0x88
 8007f74:	2124      	movs	r1, #36	; 0x24
 8007f76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2101      	movs	r1, #1
 8007f84:	438a      	bics	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f000 fb72 	bl	8008674 <UART_SetConfig>
 8007f90:	0003      	movs	r3, r0
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e024      	b.n	8007fe4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f000 febb 	bl	8008d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	490d      	ldr	r1, [pc, #52]	; (8007fec <HAL_UART_Init+0xa8>)
 8007fb6:	400a      	ands	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	212a      	movs	r1, #42	; 0x2a
 8007fc6:	438a      	bics	r2, r1
 8007fc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f000 ff53 	bl	8008e88 <UART_CheckIdleState>
 8007fe2:	0003      	movs	r3, r0
}
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	ffffb7ff 	.word	0xffffb7ff

08007ff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ff0:	b5b0      	push	{r4, r5, r7, lr}
 8007ff2:	b0aa      	sub	sp, #168	; 0xa8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	22a4      	movs	r2, #164	; 0xa4
 8008000:	18b9      	adds	r1, r7, r2
 8008002:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	20a0      	movs	r0, #160	; 0xa0
 800800c:	1839      	adds	r1, r7, r0
 800800e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	249c      	movs	r4, #156	; 0x9c
 8008018:	1939      	adds	r1, r7, r4
 800801a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800801c:	0011      	movs	r1, r2
 800801e:	18bb      	adds	r3, r7, r2
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4aa2      	ldr	r2, [pc, #648]	; (80082ac <HAL_UART_IRQHandler+0x2bc>)
 8008024:	4013      	ands	r3, r2
 8008026:	2298      	movs	r2, #152	; 0x98
 8008028:	18bd      	adds	r5, r7, r2
 800802a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800802c:	18bb      	adds	r3, r7, r2
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d11a      	bne.n	800806a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008034:	187b      	adds	r3, r7, r1
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2220      	movs	r2, #32
 800803a:	4013      	ands	r3, r2
 800803c:	d015      	beq.n	800806a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800803e:	183b      	adds	r3, r7, r0
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2220      	movs	r2, #32
 8008044:	4013      	ands	r3, r2
 8008046:	d105      	bne.n	8008054 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008048:	193b      	adds	r3, r7, r4
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	055b      	lsls	r3, r3, #21
 8008050:	4013      	ands	r3, r2
 8008052:	d00a      	beq.n	800806a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008058:	2b00      	cmp	r3, #0
 800805a:	d100      	bne.n	800805e <HAL_UART_IRQHandler+0x6e>
 800805c:	e2dc      	b.n	8008618 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	0010      	movs	r0, r2
 8008066:	4798      	blx	r3
      }
      return;
 8008068:	e2d6      	b.n	8008618 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800806a:	2398      	movs	r3, #152	; 0x98
 800806c:	18fb      	adds	r3, r7, r3
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d100      	bne.n	8008076 <HAL_UART_IRQHandler+0x86>
 8008074:	e122      	b.n	80082bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008076:	239c      	movs	r3, #156	; 0x9c
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a8c      	ldr	r2, [pc, #560]	; (80082b0 <HAL_UART_IRQHandler+0x2c0>)
 800807e:	4013      	ands	r3, r2
 8008080:	d106      	bne.n	8008090 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008082:	23a0      	movs	r3, #160	; 0xa0
 8008084:	18fb      	adds	r3, r7, r3
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a8a      	ldr	r2, [pc, #552]	; (80082b4 <HAL_UART_IRQHandler+0x2c4>)
 800808a:	4013      	ands	r3, r2
 800808c:	d100      	bne.n	8008090 <HAL_UART_IRQHandler+0xa0>
 800808e:	e115      	b.n	80082bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008090:	23a4      	movs	r3, #164	; 0xa4
 8008092:	18fb      	adds	r3, r7, r3
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	4013      	ands	r3, r2
 800809a:	d012      	beq.n	80080c2 <HAL_UART_IRQHandler+0xd2>
 800809c:	23a0      	movs	r3, #160	; 0xa0
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4013      	ands	r3, r2
 80080a8:	d00b      	beq.n	80080c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2201      	movs	r2, #1
 80080b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2290      	movs	r2, #144	; 0x90
 80080b6:	589b      	ldr	r3, [r3, r2]
 80080b8:	2201      	movs	r2, #1
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2190      	movs	r1, #144	; 0x90
 80080c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080c2:	23a4      	movs	r3, #164	; 0xa4
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2202      	movs	r2, #2
 80080ca:	4013      	ands	r3, r2
 80080cc:	d011      	beq.n	80080f2 <HAL_UART_IRQHandler+0x102>
 80080ce:	239c      	movs	r3, #156	; 0x9c
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	4013      	ands	r3, r2
 80080d8:	d00b      	beq.n	80080f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2202      	movs	r2, #2
 80080e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2290      	movs	r2, #144	; 0x90
 80080e6:	589b      	ldr	r3, [r3, r2]
 80080e8:	2204      	movs	r2, #4
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2190      	movs	r1, #144	; 0x90
 80080f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f2:	23a4      	movs	r3, #164	; 0xa4
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2204      	movs	r2, #4
 80080fa:	4013      	ands	r3, r2
 80080fc:	d011      	beq.n	8008122 <HAL_UART_IRQHandler+0x132>
 80080fe:	239c      	movs	r3, #156	; 0x9c
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2204      	movs	r2, #4
 8008110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2290      	movs	r2, #144	; 0x90
 8008116:	589b      	ldr	r3, [r3, r2]
 8008118:	2202      	movs	r2, #2
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2190      	movs	r1, #144	; 0x90
 8008120:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008122:	23a4      	movs	r3, #164	; 0xa4
 8008124:	18fb      	adds	r3, r7, r3
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2208      	movs	r2, #8
 800812a:	4013      	ands	r3, r2
 800812c:	d017      	beq.n	800815e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800812e:	23a0      	movs	r3, #160	; 0xa0
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2220      	movs	r2, #32
 8008136:	4013      	ands	r3, r2
 8008138:	d105      	bne.n	8008146 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800813a:	239c      	movs	r3, #156	; 0x9c
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5b      	ldr	r2, [pc, #364]	; (80082b0 <HAL_UART_IRQHandler+0x2c0>)
 8008142:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008144:	d00b      	beq.n	800815e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2208      	movs	r2, #8
 800814c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2290      	movs	r2, #144	; 0x90
 8008152:	589b      	ldr	r3, [r3, r2]
 8008154:	2208      	movs	r2, #8
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2190      	movs	r1, #144	; 0x90
 800815c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800815e:	23a4      	movs	r3, #164	; 0xa4
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	2380      	movs	r3, #128	; 0x80
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	4013      	ands	r3, r2
 800816a:	d013      	beq.n	8008194 <HAL_UART_IRQHandler+0x1a4>
 800816c:	23a0      	movs	r3, #160	; 0xa0
 800816e:	18fb      	adds	r3, r7, r3
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	04db      	lsls	r3, r3, #19
 8008176:	4013      	ands	r3, r2
 8008178:	d00c      	beq.n	8008194 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2280      	movs	r2, #128	; 0x80
 8008180:	0112      	lsls	r2, r2, #4
 8008182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2290      	movs	r2, #144	; 0x90
 8008188:	589b      	ldr	r3, [r3, r2]
 800818a:	2220      	movs	r2, #32
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2190      	movs	r1, #144	; 0x90
 8008192:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2290      	movs	r2, #144	; 0x90
 8008198:	589b      	ldr	r3, [r3, r2]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d100      	bne.n	80081a0 <HAL_UART_IRQHandler+0x1b0>
 800819e:	e23d      	b.n	800861c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081a0:	23a4      	movs	r3, #164	; 0xa4
 80081a2:	18fb      	adds	r3, r7, r3
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2220      	movs	r2, #32
 80081a8:	4013      	ands	r3, r2
 80081aa:	d015      	beq.n	80081d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081ac:	23a0      	movs	r3, #160	; 0xa0
 80081ae:	18fb      	adds	r3, r7, r3
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2220      	movs	r2, #32
 80081b4:	4013      	ands	r3, r2
 80081b6:	d106      	bne.n	80081c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081b8:	239c      	movs	r3, #156	; 0x9c
 80081ba:	18fb      	adds	r3, r7, r3
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	2380      	movs	r3, #128	; 0x80
 80081c0:	055b      	lsls	r3, r3, #21
 80081c2:	4013      	ands	r3, r2
 80081c4:	d008      	beq.n	80081d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	0010      	movs	r0, r2
 80081d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2290      	movs	r2, #144	; 0x90
 80081dc:	589b      	ldr	r3, [r3, r2]
 80081de:	2194      	movs	r1, #148	; 0x94
 80081e0:	187a      	adds	r2, r7, r1
 80081e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	4013      	ands	r3, r2
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d004      	beq.n	80081fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2228      	movs	r2, #40	; 0x28
 80081f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081fa:	d04c      	beq.n	8008296 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	0018      	movs	r0, r3
 8008200:	f000 ff58 	bl	80090b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	4013      	ands	r3, r2
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d13c      	bne.n	800828c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008212:	f3ef 8310 	mrs	r3, PRIMASK
 8008216:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800821a:	2090      	movs	r0, #144	; 0x90
 800821c:	183a      	adds	r2, r7, r0
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	2301      	movs	r3, #1
 8008222:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	f383 8810 	msr	PRIMASK, r3
}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2140      	movs	r1, #64	; 0x40
 8008238:	438a      	bics	r2, r1
 800823a:	609a      	str	r2, [r3, #8]
 800823c:	183b      	adds	r3, r7, r0
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008244:	f383 8810 	msr	PRIMASK, r3
}
 8008248:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	589b      	ldr	r3, [r3, r2]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d016      	beq.n	8008282 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2280      	movs	r2, #128	; 0x80
 8008258:	589b      	ldr	r3, [r3, r2]
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_UART_IRQHandler+0x2c8>)
 800825c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	589b      	ldr	r3, [r3, r2]
 8008264:	0018      	movs	r0, r3
 8008266:	f7fc f8bb 	bl	80043e0 <HAL_DMA_Abort_IT>
 800826a:	1e03      	subs	r3, r0, #0
 800826c:	d01c      	beq.n	80082a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2280      	movs	r2, #128	; 0x80
 8008272:	589b      	ldr	r3, [r3, r2]
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	5852      	ldr	r2, [r2, r1]
 800827c:	0010      	movs	r0, r2
 800827e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	e012      	b.n	80082a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0018      	movs	r0, r3
 8008286:	f000 f9e1 	bl	800864c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828a:	e00d      	b.n	80082a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0018      	movs	r0, r3
 8008290:	f000 f9dc 	bl	800864c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	e008      	b.n	80082a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	f000 f9d7 	bl	800864c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2290      	movs	r2, #144	; 0x90
 80082a2:	2100      	movs	r1, #0
 80082a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80082a6:	e1b9      	b.n	800861c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a8:	46c0      	nop			; (mov r8, r8)
    return;
 80082aa:	e1b7      	b.n	800861c <HAL_UART_IRQHandler+0x62c>
 80082ac:	0000080f 	.word	0x0000080f
 80082b0:	10000001 	.word	0x10000001
 80082b4:	04000120 	.word	0x04000120
 80082b8:	08009181 	.word	0x08009181

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d000      	beq.n	80082c6 <HAL_UART_IRQHandler+0x2d6>
 80082c4:	e13e      	b.n	8008544 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082c6:	23a4      	movs	r3, #164	; 0xa4
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2210      	movs	r2, #16
 80082ce:	4013      	ands	r3, r2
 80082d0:	d100      	bne.n	80082d4 <HAL_UART_IRQHandler+0x2e4>
 80082d2:	e137      	b.n	8008544 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082d4:	23a0      	movs	r3, #160	; 0xa0
 80082d6:	18fb      	adds	r3, r7, r3
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2210      	movs	r2, #16
 80082dc:	4013      	ands	r3, r2
 80082de:	d100      	bne.n	80082e2 <HAL_UART_IRQHandler+0x2f2>
 80082e0:	e130      	b.n	8008544 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d000      	beq.n	80082fa <HAL_UART_IRQHandler+0x30a>
 80082f8:	e0a4      	b.n	8008444 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2280      	movs	r2, #128	; 0x80
 80082fe:	589b      	ldr	r3, [r3, r2]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	217e      	movs	r1, #126	; 0x7e
 8008306:	187b      	adds	r3, r7, r1
 8008308:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800830a:	187b      	adds	r3, r7, r1
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d100      	bne.n	8008314 <HAL_UART_IRQHandler+0x324>
 8008312:	e185      	b.n	8008620 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	225c      	movs	r2, #92	; 0x5c
 8008318:	5a9b      	ldrh	r3, [r3, r2]
 800831a:	187a      	adds	r2, r7, r1
 800831c:	8812      	ldrh	r2, [r2, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d300      	bcc.n	8008324 <HAL_UART_IRQHandler+0x334>
 8008322:	e17d      	b.n	8008620 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	187a      	adds	r2, r7, r1
 8008328:	215e      	movs	r1, #94	; 0x5e
 800832a:	8812      	ldrh	r2, [r2, #0]
 800832c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2280      	movs	r2, #128	; 0x80
 8008332:	589b      	ldr	r3, [r3, r2]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2220      	movs	r2, #32
 800833a:	4013      	ands	r3, r2
 800833c:	d170      	bne.n	8008420 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833e:	f3ef 8310 	mrs	r3, PRIMASK
 8008342:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008346:	67bb      	str	r3, [r7, #120]	; 0x78
 8008348:	2301      	movs	r3, #1
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	f383 8810 	msr	PRIMASK, r3
}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	49b4      	ldr	r1, [pc, #720]	; (8008630 <HAL_UART_IRQHandler+0x640>)
 8008360:	400a      	ands	r2, r1
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008366:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	f383 8810 	msr	PRIMASK, r3
}
 800836e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008370:	f3ef 8310 	mrs	r3, PRIMASK
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	677b      	str	r3, [r7, #116]	; 0x74
 800837a:	2301      	movs	r3, #1
 800837c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008380:	f383 8810 	msr	PRIMASK, r3
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2101      	movs	r1, #1
 8008392:	438a      	bics	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
 8008396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008398:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800839a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839c:	f383 8810 	msr	PRIMASK, r3
}
 80083a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a2:	f3ef 8310 	mrs	r3, PRIMASK
 80083a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80083a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	673b      	str	r3, [r7, #112]	; 0x70
 80083ac:	2301      	movs	r3, #1
 80083ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b2:	f383 8810 	msr	PRIMASK, r3
}
 80083b6:	46c0      	nop			; (mov r8, r8)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2140      	movs	r1, #64	; 0x40
 80083c4:	438a      	bics	r2, r1
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ce:	f383 8810 	msr	PRIMASK, r3
}
 80083d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	228c      	movs	r2, #140	; 0x8c
 80083d8:	2120      	movs	r1, #32
 80083da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e2:	f3ef 8310 	mrs	r3, PRIMASK
 80083e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80083e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083ec:	2301      	movs	r3, #1
 80083ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2110      	movs	r1, #16
 8008404:	438a      	bics	r2, r1
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840e:	f383 8810 	msr	PRIMASK, r3
}
 8008412:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	589b      	ldr	r3, [r3, r2]
 800841a:	0018      	movs	r0, r3
 800841c:	f7fb ff80 	bl	8004320 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	225c      	movs	r2, #92	; 0x5c
 800842a:	5a9a      	ldrh	r2, [r3, r2]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	215e      	movs	r1, #94	; 0x5e
 8008430:	5a5b      	ldrh	r3, [r3, r1]
 8008432:	b29b      	uxth	r3, r3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f000 f90d 	bl	800865c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008442:	e0ed      	b.n	8008620 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	225c      	movs	r2, #92	; 0x5c
 8008448:	5a99      	ldrh	r1, [r3, r2]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	225e      	movs	r2, #94	; 0x5e
 800844e:	5a9b      	ldrh	r3, [r3, r2]
 8008450:	b29a      	uxth	r2, r3
 8008452:	208e      	movs	r0, #142	; 0x8e
 8008454:	183b      	adds	r3, r7, r0
 8008456:	1a8a      	subs	r2, r1, r2
 8008458:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	225e      	movs	r2, #94	; 0x5e
 800845e:	5a9b      	ldrh	r3, [r3, r2]
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d100      	bne.n	8008468 <HAL_UART_IRQHandler+0x478>
 8008466:	e0dd      	b.n	8008624 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008468:	183b      	adds	r3, r7, r0
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d100      	bne.n	8008472 <HAL_UART_IRQHandler+0x482>
 8008470:	e0d8      	b.n	8008624 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008472:	f3ef 8310 	mrs	r3, PRIMASK
 8008476:	60fb      	str	r3, [r7, #12]
  return(result);
 8008478:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800847a:	2488      	movs	r4, #136	; 0x88
 800847c:	193a      	adds	r2, r7, r4
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	2301      	movs	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f383 8810 	msr	PRIMASK, r3
}
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4967      	ldr	r1, [pc, #412]	; (8008634 <HAL_UART_IRQHandler+0x644>)
 8008498:	400a      	ands	r2, r1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	193b      	adds	r3, r7, r4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f383 8810 	msr	PRIMASK, r3
}
 80084a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084aa:	f3ef 8310 	mrs	r3, PRIMASK
 80084ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80084b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084b2:	2484      	movs	r4, #132	; 0x84
 80084b4:	193a      	adds	r2, r7, r4
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	2301      	movs	r3, #1
 80084ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f383 8810 	msr	PRIMASK, r3
}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	495a      	ldr	r1, [pc, #360]	; (8008638 <HAL_UART_IRQHandler+0x648>)
 80084d0:	400a      	ands	r2, r1
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	193b      	adds	r3, r7, r4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	f383 8810 	msr	PRIMASK, r3
}
 80084e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	228c      	movs	r2, #140	; 0x8c
 80084e6:	2120      	movs	r1, #32
 80084e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f6:	f3ef 8310 	mrs	r3, PRIMASK
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fe:	2480      	movs	r4, #128	; 0x80
 8008500:	193a      	adds	r2, r7, r4
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	2301      	movs	r3, #1
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	f383 8810 	msr	PRIMASK, r3
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2110      	movs	r1, #16
 800851c:	438a      	bics	r2, r1
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	193b      	adds	r3, r7, r4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	f383 8810 	msr	PRIMASK, r3
}
 800852c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008534:	183b      	adds	r3, r7, r0
 8008536:	881a      	ldrh	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	0011      	movs	r1, r2
 800853c:	0018      	movs	r0, r3
 800853e:	f000 f88d 	bl	800865c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008542:	e06f      	b.n	8008624 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008544:	23a4      	movs	r3, #164	; 0xa4
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	2380      	movs	r3, #128	; 0x80
 800854c:	035b      	lsls	r3, r3, #13
 800854e:	4013      	ands	r3, r2
 8008550:	d010      	beq.n	8008574 <HAL_UART_IRQHandler+0x584>
 8008552:	239c      	movs	r3, #156	; 0x9c
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	03db      	lsls	r3, r3, #15
 800855c:	4013      	ands	r3, r2
 800855e:	d009      	beq.n	8008574 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	0352      	lsls	r2, r2, #13
 8008568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	0018      	movs	r0, r3
 800856e:	f000 fe4a 	bl	8009206 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008572:	e05a      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008574:	23a4      	movs	r3, #164	; 0xa4
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2280      	movs	r2, #128	; 0x80
 800857c:	4013      	ands	r3, r2
 800857e:	d016      	beq.n	80085ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008580:	23a0      	movs	r3, #160	; 0xa0
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	4013      	ands	r3, r2
 800858a:	d106      	bne.n	800859a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800858c:	239c      	movs	r3, #156	; 0x9c
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	4013      	ands	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d042      	beq.n	8008628 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	0010      	movs	r0, r2
 80085aa:	4798      	blx	r3
    }
    return;
 80085ac:	e03c      	b.n	8008628 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ae:	23a4      	movs	r3, #164	; 0xa4
 80085b0:	18fb      	adds	r3, r7, r3
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2240      	movs	r2, #64	; 0x40
 80085b6:	4013      	ands	r3, r2
 80085b8:	d00a      	beq.n	80085d0 <HAL_UART_IRQHandler+0x5e0>
 80085ba:	23a0      	movs	r3, #160	; 0xa0
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	4013      	ands	r3, r2
 80085c4:	d004      	beq.n	80085d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fdf0 	bl	80091ae <UART_EndTransmit_IT>
    return;
 80085ce:	e02c      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085d0:	23a4      	movs	r3, #164	; 0xa4
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	041b      	lsls	r3, r3, #16
 80085da:	4013      	ands	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <HAL_UART_IRQHandler+0x606>
 80085de:	23a0      	movs	r3, #160	; 0xa0
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	2380      	movs	r3, #128	; 0x80
 80085e6:	05db      	lsls	r3, r3, #23
 80085e8:	4013      	ands	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	0018      	movs	r0, r3
 80085f0:	f000 fe19 	bl	8009226 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f4:	e019      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085f6:	23a4      	movs	r3, #164	; 0xa4
 80085f8:	18fb      	adds	r3, r7, r3
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	2380      	movs	r3, #128	; 0x80
 80085fe:	045b      	lsls	r3, r3, #17
 8008600:	4013      	ands	r3, r2
 8008602:	d012      	beq.n	800862a <HAL_UART_IRQHandler+0x63a>
 8008604:	23a0      	movs	r3, #160	; 0xa0
 8008606:	18fb      	adds	r3, r7, r3
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	da0d      	bge.n	800862a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	0018      	movs	r0, r3
 8008612:	f000 fe00 	bl	8009216 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008616:	e008      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
      return;
 8008618:	46c0      	nop			; (mov r8, r8)
 800861a:	e006      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
    return;
 800861c:	46c0      	nop			; (mov r8, r8)
 800861e:	e004      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
      return;
 8008620:	46c0      	nop			; (mov r8, r8)
 8008622:	e002      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
      return;
 8008624:	46c0      	nop			; (mov r8, r8)
 8008626:	e000      	b.n	800862a <HAL_UART_IRQHandler+0x63a>
    return;
 8008628:	46c0      	nop			; (mov r8, r8)
  }
}
 800862a:	46bd      	mov	sp, r7
 800862c:	b02a      	add	sp, #168	; 0xa8
 800862e:	bdb0      	pop	{r4, r5, r7, pc}
 8008630:	fffffeff 	.word	0xfffffeff
 8008634:	fffffedf 	.word	0xfffffedf
 8008638:	effffffe 	.word	0xeffffffe

0800863c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008644:	46c0      	nop			; (mov r8, r8)
 8008646:	46bd      	mov	sp, r7
 8008648:	b002      	add	sp, #8
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008654:	46c0      	nop			; (mov r8, r8)
 8008656:	46bd      	mov	sp, r7
 8008658:	b002      	add	sp, #8
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	000a      	movs	r2, r1
 8008666:	1cbb      	adds	r3, r7, #2
 8008668:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	46bd      	mov	sp, r7
 800866e:	b002      	add	sp, #8
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008674:	b5b0      	push	{r4, r5, r7, lr}
 8008676:	b090      	sub	sp, #64	; 0x40
 8008678:	af00      	add	r7, sp, #0
 800867a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867c:	231a      	movs	r3, #26
 800867e:	2220      	movs	r2, #32
 8008680:	189b      	adds	r3, r3, r2
 8008682:	19db      	adds	r3, r3, r7
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	431a      	orrs	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	4313      	orrs	r3, r2
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4ac1      	ldr	r2, [pc, #772]	; (80089ac <UART_SetConfig+0x338>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	0019      	movs	r1, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	430b      	orrs	r3, r1
 80086b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4abc      	ldr	r2, [pc, #752]	; (80089b0 <UART_SetConfig+0x33c>)
 80086be:	4013      	ands	r3, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	68d9      	ldr	r1, [r3, #12]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	0003      	movs	r3, r0
 80086cc:	430b      	orrs	r3, r1
 80086ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4ab6      	ldr	r2, [pc, #728]	; (80089b4 <UART_SetConfig+0x340>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0x80>
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4ab4      	ldr	r2, [pc, #720]	; (80089b8 <UART_SetConfig+0x344>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d004      	beq.n	80086f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086f0:	4313      	orrs	r3, r2
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	4ab0      	ldr	r2, [pc, #704]	; (80089bc <UART_SetConfig+0x348>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	0019      	movs	r1, r3
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	430b      	orrs	r3, r1
 8008708:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	220f      	movs	r2, #15
 8008712:	4393      	bics	r3, r2
 8008714:	0018      	movs	r0, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	0003      	movs	r3, r0
 8008720:	430b      	orrs	r3, r1
 8008722:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4aa5      	ldr	r2, [pc, #660]	; (80089c0 <UART_SetConfig+0x34c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d131      	bne.n	8008792 <UART_SetConfig+0x11e>
 800872e:	4ba5      	ldr	r3, [pc, #660]	; (80089c4 <UART_SetConfig+0x350>)
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	2203      	movs	r2, #3
 8008734:	4013      	ands	r3, r2
 8008736:	2b03      	cmp	r3, #3
 8008738:	d01d      	beq.n	8008776 <UART_SetConfig+0x102>
 800873a:	d823      	bhi.n	8008784 <UART_SetConfig+0x110>
 800873c:	2b02      	cmp	r3, #2
 800873e:	d00c      	beq.n	800875a <UART_SetConfig+0xe6>
 8008740:	d820      	bhi.n	8008784 <UART_SetConfig+0x110>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <UART_SetConfig+0xd8>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d00e      	beq.n	8008768 <UART_SetConfig+0xf4>
 800874a:	e01b      	b.n	8008784 <UART_SetConfig+0x110>
 800874c:	231b      	movs	r3, #27
 800874e:	2220      	movs	r2, #32
 8008750:	189b      	adds	r3, r3, r2
 8008752:	19db      	adds	r3, r3, r7
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e154      	b.n	8008a04 <UART_SetConfig+0x390>
 800875a:	231b      	movs	r3, #27
 800875c:	2220      	movs	r2, #32
 800875e:	189b      	adds	r3, r3, r2
 8008760:	19db      	adds	r3, r3, r7
 8008762:	2202      	movs	r2, #2
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e14d      	b.n	8008a04 <UART_SetConfig+0x390>
 8008768:	231b      	movs	r3, #27
 800876a:	2220      	movs	r2, #32
 800876c:	189b      	adds	r3, r3, r2
 800876e:	19db      	adds	r3, r3, r7
 8008770:	2204      	movs	r2, #4
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e146      	b.n	8008a04 <UART_SetConfig+0x390>
 8008776:	231b      	movs	r3, #27
 8008778:	2220      	movs	r2, #32
 800877a:	189b      	adds	r3, r3, r2
 800877c:	19db      	adds	r3, r3, r7
 800877e:	2208      	movs	r2, #8
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e13f      	b.n	8008a04 <UART_SetConfig+0x390>
 8008784:	231b      	movs	r3, #27
 8008786:	2220      	movs	r2, #32
 8008788:	189b      	adds	r3, r3, r2
 800878a:	19db      	adds	r3, r3, r7
 800878c:	2210      	movs	r2, #16
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e138      	b.n	8008a04 <UART_SetConfig+0x390>
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a8c      	ldr	r2, [pc, #560]	; (80089c8 <UART_SetConfig+0x354>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d131      	bne.n	8008800 <UART_SetConfig+0x18c>
 800879c:	4b89      	ldr	r3, [pc, #548]	; (80089c4 <UART_SetConfig+0x350>)
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	220c      	movs	r2, #12
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b0c      	cmp	r3, #12
 80087a6:	d01d      	beq.n	80087e4 <UART_SetConfig+0x170>
 80087a8:	d823      	bhi.n	80087f2 <UART_SetConfig+0x17e>
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d00c      	beq.n	80087c8 <UART_SetConfig+0x154>
 80087ae:	d820      	bhi.n	80087f2 <UART_SetConfig+0x17e>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <UART_SetConfig+0x146>
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d00e      	beq.n	80087d6 <UART_SetConfig+0x162>
 80087b8:	e01b      	b.n	80087f2 <UART_SetConfig+0x17e>
 80087ba:	231b      	movs	r3, #27
 80087bc:	2220      	movs	r2, #32
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	19db      	adds	r3, r3, r7
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e11d      	b.n	8008a04 <UART_SetConfig+0x390>
 80087c8:	231b      	movs	r3, #27
 80087ca:	2220      	movs	r2, #32
 80087cc:	189b      	adds	r3, r3, r2
 80087ce:	19db      	adds	r3, r3, r7
 80087d0:	2202      	movs	r2, #2
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	e116      	b.n	8008a04 <UART_SetConfig+0x390>
 80087d6:	231b      	movs	r3, #27
 80087d8:	2220      	movs	r2, #32
 80087da:	189b      	adds	r3, r3, r2
 80087dc:	19db      	adds	r3, r3, r7
 80087de:	2204      	movs	r2, #4
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e10f      	b.n	8008a04 <UART_SetConfig+0x390>
 80087e4:	231b      	movs	r3, #27
 80087e6:	2220      	movs	r2, #32
 80087e8:	189b      	adds	r3, r3, r2
 80087ea:	19db      	adds	r3, r3, r7
 80087ec:	2208      	movs	r2, #8
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e108      	b.n	8008a04 <UART_SetConfig+0x390>
 80087f2:	231b      	movs	r3, #27
 80087f4:	2220      	movs	r2, #32
 80087f6:	189b      	adds	r3, r3, r2
 80087f8:	19db      	adds	r3, r3, r7
 80087fa:	2210      	movs	r2, #16
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	e101      	b.n	8008a04 <UART_SetConfig+0x390>
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a71      	ldr	r2, [pc, #452]	; (80089cc <UART_SetConfig+0x358>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d131      	bne.n	800886e <UART_SetConfig+0x1fa>
 800880a:	4b6e      	ldr	r3, [pc, #440]	; (80089c4 <UART_SetConfig+0x350>)
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	2230      	movs	r2, #48	; 0x30
 8008810:	4013      	ands	r3, r2
 8008812:	2b30      	cmp	r3, #48	; 0x30
 8008814:	d01d      	beq.n	8008852 <UART_SetConfig+0x1de>
 8008816:	d823      	bhi.n	8008860 <UART_SetConfig+0x1ec>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d00c      	beq.n	8008836 <UART_SetConfig+0x1c2>
 800881c:	d820      	bhi.n	8008860 <UART_SetConfig+0x1ec>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <UART_SetConfig+0x1b4>
 8008822:	2b10      	cmp	r3, #16
 8008824:	d00e      	beq.n	8008844 <UART_SetConfig+0x1d0>
 8008826:	e01b      	b.n	8008860 <UART_SetConfig+0x1ec>
 8008828:	231b      	movs	r3, #27
 800882a:	2220      	movs	r2, #32
 800882c:	189b      	adds	r3, r3, r2
 800882e:	19db      	adds	r3, r3, r7
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e0e6      	b.n	8008a04 <UART_SetConfig+0x390>
 8008836:	231b      	movs	r3, #27
 8008838:	2220      	movs	r2, #32
 800883a:	189b      	adds	r3, r3, r2
 800883c:	19db      	adds	r3, r3, r7
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e0df      	b.n	8008a04 <UART_SetConfig+0x390>
 8008844:	231b      	movs	r3, #27
 8008846:	2220      	movs	r2, #32
 8008848:	189b      	adds	r3, r3, r2
 800884a:	19db      	adds	r3, r3, r7
 800884c:	2204      	movs	r2, #4
 800884e:	701a      	strb	r2, [r3, #0]
 8008850:	e0d8      	b.n	8008a04 <UART_SetConfig+0x390>
 8008852:	231b      	movs	r3, #27
 8008854:	2220      	movs	r2, #32
 8008856:	189b      	adds	r3, r3, r2
 8008858:	19db      	adds	r3, r3, r7
 800885a:	2208      	movs	r2, #8
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	e0d1      	b.n	8008a04 <UART_SetConfig+0x390>
 8008860:	231b      	movs	r3, #27
 8008862:	2220      	movs	r2, #32
 8008864:	189b      	adds	r3, r3, r2
 8008866:	19db      	adds	r3, r3, r7
 8008868:	2210      	movs	r2, #16
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e0ca      	b.n	8008a04 <UART_SetConfig+0x390>
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a57      	ldr	r2, [pc, #348]	; (80089d0 <UART_SetConfig+0x35c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d106      	bne.n	8008886 <UART_SetConfig+0x212>
 8008878:	231b      	movs	r3, #27
 800887a:	2220      	movs	r2, #32
 800887c:	189b      	adds	r3, r3, r2
 800887e:	19db      	adds	r3, r3, r7
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	e0be      	b.n	8008a04 <UART_SetConfig+0x390>
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a52      	ldr	r2, [pc, #328]	; (80089d4 <UART_SetConfig+0x360>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d106      	bne.n	800889e <UART_SetConfig+0x22a>
 8008890:	231b      	movs	r3, #27
 8008892:	2220      	movs	r2, #32
 8008894:	189b      	adds	r3, r3, r2
 8008896:	19db      	adds	r3, r3, r7
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e0b2      	b.n	8008a04 <UART_SetConfig+0x390>
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a4d      	ldr	r2, [pc, #308]	; (80089d8 <UART_SetConfig+0x364>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d106      	bne.n	80088b6 <UART_SetConfig+0x242>
 80088a8:	231b      	movs	r3, #27
 80088aa:	2220      	movs	r2, #32
 80088ac:	189b      	adds	r3, r3, r2
 80088ae:	19db      	adds	r3, r3, r7
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e0a6      	b.n	8008a04 <UART_SetConfig+0x390>
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a3e      	ldr	r2, [pc, #248]	; (80089b4 <UART_SetConfig+0x340>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d13e      	bne.n	800893e <UART_SetConfig+0x2ca>
 80088c0:	4b40      	ldr	r3, [pc, #256]	; (80089c4 <UART_SetConfig+0x350>)
 80088c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088c4:	23c0      	movs	r3, #192	; 0xc0
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	4013      	ands	r3, r2
 80088ca:	22c0      	movs	r2, #192	; 0xc0
 80088cc:	0112      	lsls	r2, r2, #4
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d027      	beq.n	8008922 <UART_SetConfig+0x2ae>
 80088d2:	22c0      	movs	r2, #192	; 0xc0
 80088d4:	0112      	lsls	r2, r2, #4
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d82a      	bhi.n	8008930 <UART_SetConfig+0x2bc>
 80088da:	2280      	movs	r2, #128	; 0x80
 80088dc:	0112      	lsls	r2, r2, #4
 80088de:	4293      	cmp	r3, r2
 80088e0:	d011      	beq.n	8008906 <UART_SetConfig+0x292>
 80088e2:	2280      	movs	r2, #128	; 0x80
 80088e4:	0112      	lsls	r2, r2, #4
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d822      	bhi.n	8008930 <UART_SetConfig+0x2bc>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <UART_SetConfig+0x284>
 80088ee:	2280      	movs	r2, #128	; 0x80
 80088f0:	00d2      	lsls	r2, r2, #3
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00e      	beq.n	8008914 <UART_SetConfig+0x2a0>
 80088f6:	e01b      	b.n	8008930 <UART_SetConfig+0x2bc>
 80088f8:	231b      	movs	r3, #27
 80088fa:	2220      	movs	r2, #32
 80088fc:	189b      	adds	r3, r3, r2
 80088fe:	19db      	adds	r3, r3, r7
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e07e      	b.n	8008a04 <UART_SetConfig+0x390>
 8008906:	231b      	movs	r3, #27
 8008908:	2220      	movs	r2, #32
 800890a:	189b      	adds	r3, r3, r2
 800890c:	19db      	adds	r3, r3, r7
 800890e:	2202      	movs	r2, #2
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e077      	b.n	8008a04 <UART_SetConfig+0x390>
 8008914:	231b      	movs	r3, #27
 8008916:	2220      	movs	r2, #32
 8008918:	189b      	adds	r3, r3, r2
 800891a:	19db      	adds	r3, r3, r7
 800891c:	2204      	movs	r2, #4
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	e070      	b.n	8008a04 <UART_SetConfig+0x390>
 8008922:	231b      	movs	r3, #27
 8008924:	2220      	movs	r2, #32
 8008926:	189b      	adds	r3, r3, r2
 8008928:	19db      	adds	r3, r3, r7
 800892a:	2208      	movs	r2, #8
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	e069      	b.n	8008a04 <UART_SetConfig+0x390>
 8008930:	231b      	movs	r3, #27
 8008932:	2220      	movs	r2, #32
 8008934:	189b      	adds	r3, r3, r2
 8008936:	19db      	adds	r3, r3, r7
 8008938:	2210      	movs	r2, #16
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e062      	b.n	8008a04 <UART_SetConfig+0x390>
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <UART_SetConfig+0x344>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d157      	bne.n	80089f8 <UART_SetConfig+0x384>
 8008948:	4b1e      	ldr	r3, [pc, #120]	; (80089c4 <UART_SetConfig+0x350>)
 800894a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894c:	23c0      	movs	r3, #192	; 0xc0
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4013      	ands	r3, r2
 8008952:	22c0      	movs	r2, #192	; 0xc0
 8008954:	0092      	lsls	r2, r2, #2
 8008956:	4293      	cmp	r3, r2
 8008958:	d040      	beq.n	80089dc <UART_SetConfig+0x368>
 800895a:	22c0      	movs	r2, #192	; 0xc0
 800895c:	0092      	lsls	r2, r2, #2
 800895e:	4293      	cmp	r3, r2
 8008960:	d843      	bhi.n	80089ea <UART_SetConfig+0x376>
 8008962:	2280      	movs	r2, #128	; 0x80
 8008964:	0092      	lsls	r2, r2, #2
 8008966:	4293      	cmp	r3, r2
 8008968:	d011      	beq.n	800898e <UART_SetConfig+0x31a>
 800896a:	2280      	movs	r2, #128	; 0x80
 800896c:	0092      	lsls	r2, r2, #2
 800896e:	4293      	cmp	r3, r2
 8008970:	d83b      	bhi.n	80089ea <UART_SetConfig+0x376>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <UART_SetConfig+0x30c>
 8008976:	2280      	movs	r2, #128	; 0x80
 8008978:	0052      	lsls	r2, r2, #1
 800897a:	4293      	cmp	r3, r2
 800897c:	d00e      	beq.n	800899c <UART_SetConfig+0x328>
 800897e:	e034      	b.n	80089ea <UART_SetConfig+0x376>
 8008980:	231b      	movs	r3, #27
 8008982:	2220      	movs	r2, #32
 8008984:	189b      	adds	r3, r3, r2
 8008986:	19db      	adds	r3, r3, r7
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e03a      	b.n	8008a04 <UART_SetConfig+0x390>
 800898e:	231b      	movs	r3, #27
 8008990:	2220      	movs	r2, #32
 8008992:	189b      	adds	r3, r3, r2
 8008994:	19db      	adds	r3, r3, r7
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	e033      	b.n	8008a04 <UART_SetConfig+0x390>
 800899c:	231b      	movs	r3, #27
 800899e:	2220      	movs	r2, #32
 80089a0:	189b      	adds	r3, r3, r2
 80089a2:	19db      	adds	r3, r3, r7
 80089a4:	2204      	movs	r2, #4
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	e02c      	b.n	8008a04 <UART_SetConfig+0x390>
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	cfff69f3 	.word	0xcfff69f3
 80089b0:	ffffcfff 	.word	0xffffcfff
 80089b4:	40008000 	.word	0x40008000
 80089b8:	40008400 	.word	0x40008400
 80089bc:	11fff4ff 	.word	0x11fff4ff
 80089c0:	40013800 	.word	0x40013800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40004400 	.word	0x40004400
 80089cc:	40004800 	.word	0x40004800
 80089d0:	40004c00 	.word	0x40004c00
 80089d4:	40005000 	.word	0x40005000
 80089d8:	40013c00 	.word	0x40013c00
 80089dc:	231b      	movs	r3, #27
 80089de:	2220      	movs	r2, #32
 80089e0:	189b      	adds	r3, r3, r2
 80089e2:	19db      	adds	r3, r3, r7
 80089e4:	2208      	movs	r2, #8
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e00c      	b.n	8008a04 <UART_SetConfig+0x390>
 80089ea:	231b      	movs	r3, #27
 80089ec:	2220      	movs	r2, #32
 80089ee:	189b      	adds	r3, r3, r2
 80089f0:	19db      	adds	r3, r3, r7
 80089f2:	2210      	movs	r2, #16
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	e005      	b.n	8008a04 <UART_SetConfig+0x390>
 80089f8:	231b      	movs	r3, #27
 80089fa:	2220      	movs	r2, #32
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	19db      	adds	r3, r3, r7
 8008a00:	2210      	movs	r2, #16
 8008a02:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4ac1      	ldr	r2, [pc, #772]	; (8008d10 <UART_SetConfig+0x69c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d005      	beq.n	8008a1a <UART_SetConfig+0x3a6>
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4ac0      	ldr	r2, [pc, #768]	; (8008d14 <UART_SetConfig+0x6a0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d000      	beq.n	8008a1a <UART_SetConfig+0x3a6>
 8008a18:	e093      	b.n	8008b42 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a1a:	231b      	movs	r3, #27
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	19db      	adds	r3, r3, r7
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d015      	beq.n	8008a54 <UART_SetConfig+0x3e0>
 8008a28:	dc18      	bgt.n	8008a5c <UART_SetConfig+0x3e8>
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d00d      	beq.n	8008a4a <UART_SetConfig+0x3d6>
 8008a2e:	dc15      	bgt.n	8008a5c <UART_SetConfig+0x3e8>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <UART_SetConfig+0x3c6>
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d005      	beq.n	8008a44 <UART_SetConfig+0x3d0>
 8008a38:	e010      	b.n	8008a5c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a3a:	f7fd fb35 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8008a3e:	0003      	movs	r3, r0
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a42:	e014      	b.n	8008a6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a44:	4bb4      	ldr	r3, [pc, #720]	; (8008d18 <UART_SetConfig+0x6a4>)
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a48:	e011      	b.n	8008a6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4a:	f7fd faa1 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a52:	e00c      	b.n	8008a6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a5a:	e008      	b.n	8008a6e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008a60:	231a      	movs	r3, #26
 8008a62:	2220      	movs	r2, #32
 8008a64:	189b      	adds	r3, r3, r2
 8008a66:	19db      	adds	r3, r3, r7
 8008a68:	2201      	movs	r2, #1
 8008a6a:	701a      	strb	r2, [r3, #0]
        break;
 8008a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d100      	bne.n	8008a76 <UART_SetConfig+0x402>
 8008a74:	e135      	b.n	8008ce2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7a:	4ba8      	ldr	r3, [pc, #672]	; (8008d1c <UART_SetConfig+0x6a8>)
 8008a7c:	0052      	lsls	r2, r2, #1
 8008a7e:	5ad3      	ldrh	r3, [r2, r3]
 8008a80:	0019      	movs	r1, r3
 8008a82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a84:	f7f7 fb3e 	bl	8000104 <__udivsi3>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	0013      	movs	r3, r2
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d305      	bcc.n	8008aa8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d906      	bls.n	8008ab6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008aa8:	231a      	movs	r3, #26
 8008aaa:	2220      	movs	r2, #32
 8008aac:	189b      	adds	r3, r3, r2
 8008aae:	19db      	adds	r3, r3, r7
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	e044      	b.n	8008b40 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ac2:	4b96      	ldr	r3, [pc, #600]	; (8008d1c <UART_SetConfig+0x6a8>)
 8008ac4:	0052      	lsls	r2, r2, #1
 8008ac6:	5ad3      	ldrh	r3, [r2, r3]
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	69b8      	ldr	r0, [r7, #24]
 8008ad4:	69f9      	ldr	r1, [r7, #28]
 8008ad6:	f7f7 fcc9 	bl	800046c <__aeabi_uldivmod>
 8008ada:	0002      	movs	r2, r0
 8008adc:	000b      	movs	r3, r1
 8008ade:	0e11      	lsrs	r1, r2, #24
 8008ae0:	021d      	lsls	r5, r3, #8
 8008ae2:	430d      	orrs	r5, r1
 8008ae4:	0214      	lsls	r4, r2, #8
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	68b8      	ldr	r0, [r7, #8]
 8008af4:	68f9      	ldr	r1, [r7, #12]
 8008af6:	1900      	adds	r0, r0, r4
 8008af8:	4169      	adcs	r1, r5
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	607b      	str	r3, [r7, #4]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f7f7 fcb0 	bl	800046c <__aeabi_uldivmod>
 8008b0c:	0002      	movs	r2, r0
 8008b0e:	000b      	movs	r3, r1
 8008b10:	0013      	movs	r3, r2
 8008b12:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b16:	23c0      	movs	r3, #192	; 0xc0
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d309      	bcc.n	8008b32 <UART_SetConfig+0x4be>
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b20:	2380      	movs	r3, #128	; 0x80
 8008b22:	035b      	lsls	r3, r3, #13
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d204      	bcs.n	8008b32 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	60da      	str	r2, [r3, #12]
 8008b30:	e006      	b.n	8008b40 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008b32:	231a      	movs	r3, #26
 8008b34:	2220      	movs	r2, #32
 8008b36:	189b      	adds	r3, r3, r2
 8008b38:	19db      	adds	r3, r3, r7
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008b3e:	e0d0      	b.n	8008ce2 <UART_SetConfig+0x66e>
 8008b40:	e0cf      	b.n	8008ce2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	69da      	ldr	r2, [r3, #28]
 8008b46:	2380      	movs	r3, #128	; 0x80
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d000      	beq.n	8008b50 <UART_SetConfig+0x4dc>
 8008b4e:	e070      	b.n	8008c32 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008b50:	231b      	movs	r3, #27
 8008b52:	2220      	movs	r2, #32
 8008b54:	189b      	adds	r3, r3, r2
 8008b56:	19db      	adds	r3, r3, r7
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d015      	beq.n	8008b8a <UART_SetConfig+0x516>
 8008b5e:	dc18      	bgt.n	8008b92 <UART_SetConfig+0x51e>
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d00d      	beq.n	8008b80 <UART_SetConfig+0x50c>
 8008b64:	dc15      	bgt.n	8008b92 <UART_SetConfig+0x51e>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <UART_SetConfig+0x4fc>
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d005      	beq.n	8008b7a <UART_SetConfig+0x506>
 8008b6e:	e010      	b.n	8008b92 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b70:	f7fd fa9a 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8008b74:	0003      	movs	r3, r0
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b78:	e014      	b.n	8008ba4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b7a:	4b67      	ldr	r3, [pc, #412]	; (8008d18 <UART_SetConfig+0x6a4>)
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b7e:	e011      	b.n	8008ba4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b80:	f7fd fa06 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8008b84:	0003      	movs	r3, r0
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b88:	e00c      	b.n	8008ba4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8a:	2380      	movs	r3, #128	; 0x80
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b90:	e008      	b.n	8008ba4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008b96:	231a      	movs	r3, #26
 8008b98:	2220      	movs	r2, #32
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	19db      	adds	r3, r3, r7
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	701a      	strb	r2, [r3, #0]
        break;
 8008ba2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d100      	bne.n	8008bac <UART_SetConfig+0x538>
 8008baa:	e09a      	b.n	8008ce2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb0:	4b5a      	ldr	r3, [pc, #360]	; (8008d1c <UART_SetConfig+0x6a8>)
 8008bb2:	0052      	lsls	r2, r2, #1
 8008bb4:	5ad3      	ldrh	r3, [r2, r3]
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008bba:	f7f7 faa3 	bl	8000104 <__udivsi3>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	005a      	lsls	r2, r3, #1
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	18d2      	adds	r2, r2, r3
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	0019      	movs	r1, r3
 8008bd0:	0010      	movs	r0, r2
 8008bd2:	f7f7 fa97 	bl	8000104 <__udivsi3>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	2b0f      	cmp	r3, #15
 8008bde:	d921      	bls.n	8008c24 <UART_SetConfig+0x5b0>
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	2380      	movs	r3, #128	; 0x80
 8008be4:	025b      	lsls	r3, r3, #9
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d21c      	bcs.n	8008c24 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	200e      	movs	r0, #14
 8008bf0:	2420      	movs	r4, #32
 8008bf2:	1903      	adds	r3, r0, r4
 8008bf4:	19db      	adds	r3, r3, r7
 8008bf6:	210f      	movs	r1, #15
 8008bf8:	438a      	bics	r2, r1
 8008bfa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2207      	movs	r2, #7
 8008c04:	4013      	ands	r3, r2
 8008c06:	b299      	uxth	r1, r3
 8008c08:	1903      	adds	r3, r0, r4
 8008c0a:	19db      	adds	r3, r3, r7
 8008c0c:	1902      	adds	r2, r0, r4
 8008c0e:	19d2      	adds	r2, r2, r7
 8008c10:	8812      	ldrh	r2, [r2, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	1902      	adds	r2, r0, r4
 8008c1c:	19d2      	adds	r2, r2, r7
 8008c1e:	8812      	ldrh	r2, [r2, #0]
 8008c20:	60da      	str	r2, [r3, #12]
 8008c22:	e05e      	b.n	8008ce2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008c24:	231a      	movs	r3, #26
 8008c26:	2220      	movs	r2, #32
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	19db      	adds	r3, r3, r7
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e057      	b.n	8008ce2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c32:	231b      	movs	r3, #27
 8008c34:	2220      	movs	r2, #32
 8008c36:	189b      	adds	r3, r3, r2
 8008c38:	19db      	adds	r3, r3, r7
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d015      	beq.n	8008c6c <UART_SetConfig+0x5f8>
 8008c40:	dc18      	bgt.n	8008c74 <UART_SetConfig+0x600>
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d00d      	beq.n	8008c62 <UART_SetConfig+0x5ee>
 8008c46:	dc15      	bgt.n	8008c74 <UART_SetConfig+0x600>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <UART_SetConfig+0x5de>
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d005      	beq.n	8008c5c <UART_SetConfig+0x5e8>
 8008c50:	e010      	b.n	8008c74 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c52:	f7fd fa29 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8008c56:	0003      	movs	r3, r0
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c5a:	e014      	b.n	8008c86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c5c:	4b2e      	ldr	r3, [pc, #184]	; (8008d18 <UART_SetConfig+0x6a4>)
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c60:	e011      	b.n	8008c86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c62:	f7fd f995 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8008c66:	0003      	movs	r3, r0
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c6a:	e00c      	b.n	8008c86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c72:	e008      	b.n	8008c86 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008c78:	231a      	movs	r3, #26
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	189b      	adds	r3, r3, r2
 8008c7e:	19db      	adds	r3, r3, r7
 8008c80:	2201      	movs	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
        break;
 8008c84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d02a      	beq.n	8008ce2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c90:	4b22      	ldr	r3, [pc, #136]	; (8008d1c <UART_SetConfig+0x6a8>)
 8008c92:	0052      	lsls	r2, r2, #1
 8008c94:	5ad3      	ldrh	r3, [r2, r3]
 8008c96:	0019      	movs	r1, r3
 8008c98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c9a:	f7f7 fa33 	bl	8000104 <__udivsi3>
 8008c9e:	0003      	movs	r3, r0
 8008ca0:	001a      	movs	r2, r3
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	18d2      	adds	r2, r2, r3
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	0019      	movs	r1, r3
 8008cb0:	0010      	movs	r0, r2
 8008cb2:	f7f7 fa27 	bl	8000104 <__udivsi3>
 8008cb6:	0003      	movs	r3, r0
 8008cb8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b0f      	cmp	r3, #15
 8008cbe:	d90a      	bls.n	8008cd6 <UART_SetConfig+0x662>
 8008cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc2:	2380      	movs	r3, #128	; 0x80
 8008cc4:	025b      	lsls	r3, r3, #9
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d205      	bcs.n	8008cd6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	e005      	b.n	8008ce2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd6:	231a      	movs	r3, #26
 8008cd8:	2220      	movs	r2, #32
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	19db      	adds	r3, r3, r7
 8008cde:	2201      	movs	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	226a      	movs	r2, #106	; 0x6a
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	2268      	movs	r2, #104	; 0x68
 8008cee:	2101      	movs	r1, #1
 8008cf0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008cfe:	231a      	movs	r3, #26
 8008d00:	2220      	movs	r2, #32
 8008d02:	189b      	adds	r3, r3, r2
 8008d04:	19db      	adds	r3, r3, r7
 8008d06:	781b      	ldrb	r3, [r3, #0]
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b010      	add	sp, #64	; 0x40
 8008d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d10:	40008000 	.word	0x40008000
 8008d14:	40008400 	.word	0x40008400
 8008d18:	00f42400 	.word	0x00f42400
 8008d1c:	0800a71c 	.word	0x0800a71c

08008d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	4013      	ands	r3, r2
 8008d30:	d00b      	beq.n	8008d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a4a      	ldr	r2, [pc, #296]	; (8008e64 <UART_AdvFeatureConfig+0x144>)
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	0019      	movs	r1, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	2202      	movs	r2, #2
 8008d50:	4013      	ands	r3, r2
 8008d52:	d00b      	beq.n	8008d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	4a43      	ldr	r2, [pc, #268]	; (8008e68 <UART_AdvFeatureConfig+0x148>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	0019      	movs	r1, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	2204      	movs	r2, #4
 8008d72:	4013      	ands	r3, r2
 8008d74:	d00b      	beq.n	8008d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	4a3b      	ldr	r2, [pc, #236]	; (8008e6c <UART_AdvFeatureConfig+0x14c>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	0019      	movs	r1, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	2208      	movs	r2, #8
 8008d94:	4013      	ands	r3, r2
 8008d96:	d00b      	beq.n	8008db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4a34      	ldr	r2, [pc, #208]	; (8008e70 <UART_AdvFeatureConfig+0x150>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	0019      	movs	r1, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	2210      	movs	r2, #16
 8008db6:	4013      	ands	r3, r2
 8008db8:	d00b      	beq.n	8008dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4a2c      	ldr	r2, [pc, #176]	; (8008e74 <UART_AdvFeatureConfig+0x154>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	0019      	movs	r1, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d00b      	beq.n	8008df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	4a25      	ldr	r2, [pc, #148]	; (8008e78 <UART_AdvFeatureConfig+0x158>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	0019      	movs	r1, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	2240      	movs	r2, #64	; 0x40
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	d01d      	beq.n	8008e3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4a1d      	ldr	r2, [pc, #116]	; (8008e7c <UART_AdvFeatureConfig+0x15c>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	0019      	movs	r1, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	035b      	lsls	r3, r3, #13
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d10b      	bne.n	8008e3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <UART_AdvFeatureConfig+0x160>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	0019      	movs	r1, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	2280      	movs	r2, #128	; 0x80
 8008e40:	4013      	ands	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4a0e      	ldr	r2, [pc, #56]	; (8008e84 <UART_AdvFeatureConfig+0x164>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	0019      	movs	r1, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }
}
 8008e5c:	46c0      	nop			; (mov r8, r8)
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	b002      	add	sp, #8
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	fffdffff 	.word	0xfffdffff
 8008e68:	fffeffff 	.word	0xfffeffff
 8008e6c:	fffbffff 	.word	0xfffbffff
 8008e70:	ffff7fff 	.word	0xffff7fff
 8008e74:	ffffefff 	.word	0xffffefff
 8008e78:	ffffdfff 	.word	0xffffdfff
 8008e7c:	ffefffff 	.word	0xffefffff
 8008e80:	ff9fffff 	.word	0xff9fffff
 8008e84:	fff7ffff 	.word	0xfff7ffff

08008e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2290      	movs	r2, #144	; 0x90
 8008e94:	2100      	movs	r1, #0
 8008e96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e98:	f7fb f828 	bl	8003eec <HAL_GetTick>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d10c      	bne.n	8008ec8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2280      	movs	r2, #128	; 0x80
 8008eb2:	0391      	lsls	r1, r2, #14
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4a1a      	ldr	r2, [pc, #104]	; (8008f20 <UART_CheckIdleState+0x98>)
 8008eb8:	9200      	str	r2, [sp, #0]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f000 f832 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 8008ec0:	1e03      	subs	r3, r0, #0
 8008ec2:	d001      	beq.n	8008ec8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e026      	b.n	8008f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2204      	movs	r2, #4
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d10c      	bne.n	8008ef0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2280      	movs	r2, #128	; 0x80
 8008eda:	03d1      	lsls	r1, r2, #15
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <UART_CheckIdleState+0x98>)
 8008ee0:	9200      	str	r2, [sp, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f000 f81e 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 8008ee8:	1e03      	subs	r3, r0, #0
 8008eea:	d001      	beq.n	8008ef0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e012      	b.n	8008f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2288      	movs	r2, #136	; 0x88
 8008ef4:	2120      	movs	r1, #32
 8008ef6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	228c      	movs	r2, #140	; 0x8c
 8008efc:	2120      	movs	r1, #32
 8008efe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2284      	movs	r2, #132	; 0x84
 8008f10:	2100      	movs	r1, #0
 8008f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	0018      	movs	r0, r3
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	b004      	add	sp, #16
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	01ffffff 	.word	0x01ffffff

08008f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b094      	sub	sp, #80	; 0x50
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	1dfb      	adds	r3, r7, #7
 8008f32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f34:	e0a7      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f38:	3301      	adds	r3, #1
 8008f3a:	d100      	bne.n	8008f3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8008f3c:	e0a3      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3e:	f7fa ffd5 	bl	8003eec <HAL_GetTick>
 8008f42:	0002      	movs	r2, r0
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d302      	bcc.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d13f      	bne.n	8008fd4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f54:	f3ef 8310 	mrs	r3, PRIMASK
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f5e:	2301      	movs	r3, #1
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	f383 8810 	msr	PRIMASK, r3
}
 8008f68:	46c0      	nop			; (mov r8, r8)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	494e      	ldr	r1, [pc, #312]	; (80090b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008f76:	400a      	ands	r2, r1
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	f383 8810 	msr	PRIMASK, r3
}
 8008f84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f86:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f90:	2301      	movs	r3, #1
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	f383 8810 	msr	PRIMASK, r3
}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	438a      	bics	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb2:	f383 8810 	msr	PRIMASK, r3
}
 8008fb6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2288      	movs	r2, #136	; 0x88
 8008fbc:	2120      	movs	r1, #32
 8008fbe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	228c      	movs	r2, #140	; 0x8c
 8008fc4:	2120      	movs	r1, #32
 8008fc6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2284      	movs	r2, #132	; 0x84
 8008fcc:	2100      	movs	r1, #0
 8008fce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e069      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	4013      	ands	r3, r2
 8008fde:	d052      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	2380      	movs	r3, #128	; 0x80
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	401a      	ands	r2, r3
 8008fec:	2380      	movs	r3, #128	; 0x80
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d148      	bne.n	8009086 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2280      	movs	r2, #128	; 0x80
 8008ffa:	0112      	lsls	r2, r2, #4
 8008ffc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8009002:	613b      	str	r3, [r7, #16]
  return(result);
 8009004:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009008:	2301      	movs	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f383 8810 	msr	PRIMASK, r3
}
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4924      	ldr	r1, [pc, #144]	; (80090b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009020:	400a      	ands	r2, r1
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	f383 8810 	msr	PRIMASK, r3
}
 800902e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009030:	f3ef 8310 	mrs	r3, PRIMASK
 8009034:	61fb      	str	r3, [r7, #28]
  return(result);
 8009036:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
 800903a:	2301      	movs	r3, #1
 800903c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f383 8810 	msr	PRIMASK, r3
}
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2101      	movs	r1, #1
 8009052:	438a      	bics	r2, r1
 8009054:	609a      	str	r2, [r3, #8]
 8009056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	f383 8810 	msr	PRIMASK, r3
}
 8009060:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2288      	movs	r2, #136	; 0x88
 8009066:	2120      	movs	r1, #32
 8009068:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	228c      	movs	r2, #140	; 0x8c
 800906e:	2120      	movs	r1, #32
 8009070:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2290      	movs	r2, #144	; 0x90
 8009076:	2120      	movs	r1, #32
 8009078:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2284      	movs	r2, #132	; 0x84
 800907e:	2100      	movs	r1, #0
 8009080:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e010      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	4013      	ands	r3, r2
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	425a      	negs	r2, r3
 8009096:	4153      	adcs	r3, r2
 8009098:	b2db      	uxtb	r3, r3
 800909a:	001a      	movs	r2, r3
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d100      	bne.n	80090a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80090a4:	e747      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b014      	add	sp, #80	; 0x50
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	fffffe5f 	.word	0xfffffe5f

080090b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	; 0x38
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090bc:	f3ef 8310 	mrs	r3, PRIMASK
 80090c0:	617b      	str	r3, [r7, #20]
  return(result);
 80090c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
 80090c6:	2301      	movs	r3, #1
 80090c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f383 8810 	msr	PRIMASK, r3
}
 80090d0:	46c0      	nop			; (mov r8, r8)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4926      	ldr	r1, [pc, #152]	; (8009178 <UART_EndRxTransfer+0xc4>)
 80090de:	400a      	ands	r2, r1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f383 8810 	msr	PRIMASK, r3
}
 80090ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ee:	f3ef 8310 	mrs	r3, PRIMASK
 80090f2:	623b      	str	r3, [r7, #32]
  return(result);
 80090f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f6:	633b      	str	r3, [r7, #48]	; 0x30
 80090f8:	2301      	movs	r3, #1
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	f383 8810 	msr	PRIMASK, r3
}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689a      	ldr	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	491b      	ldr	r1, [pc, #108]	; (800917c <UART_EndRxTransfer+0xc8>)
 8009110:	400a      	ands	r2, r1
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d118      	bne.n	800915a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009128:	f3ef 8310 	mrs	r3, PRIMASK
 800912c:	60bb      	str	r3, [r7, #8]
  return(result);
 800912e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009132:	2301      	movs	r3, #1
 8009134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f383 8810 	msr	PRIMASK, r3
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2110      	movs	r1, #16
 800914a:	438a      	bics	r2, r1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f383 8810 	msr	PRIMASK, r3
}
 8009158:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	228c      	movs	r2, #140	; 0x8c
 800915e:	2120      	movs	r1, #32
 8009160:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b00e      	add	sp, #56	; 0x38
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	fffffedf 	.word	0xfffffedf
 800917c:	effffffe 	.word	0xeffffffe

08009180 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	225e      	movs	r2, #94	; 0x5e
 8009192:	2100      	movs	r1, #0
 8009194:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2256      	movs	r2, #86	; 0x56
 800919a:	2100      	movs	r1, #0
 800919c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff fa53 	bl	800864c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	46bd      	mov	sp, r7
 80091aa:	b004      	add	sp, #16
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80091bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	2301      	movs	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f383 8810 	msr	PRIMASK, r3
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2140      	movs	r1, #64	; 0x40
 80091d8:	438a      	bics	r2, r1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2288      	movs	r2, #136	; 0x88
 80091ec:	2120      	movs	r1, #32
 80091ee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7ff fa1f 	bl	800863c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	46bd      	mov	sp, r7
 8009202:	b006      	add	sp, #24
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	46bd      	mov	sp, r7
 8009212:	b002      	add	sp, #8
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	46bd      	mov	sp, r7
 8009222:	b002      	add	sp, #8
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	46bd      	mov	sp, r7
 8009232:	b002      	add	sp, #8
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2284      	movs	r2, #132	; 0x84
 8009244:	5c9b      	ldrb	r3, [r3, r2]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_UARTEx_DisableFifoMode+0x16>
 800924a:	2302      	movs	r3, #2
 800924c:	e027      	b.n	800929e <HAL_UARTEx_DisableFifoMode+0x66>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2284      	movs	r2, #132	; 0x84
 8009252:	2101      	movs	r1, #1
 8009254:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2288      	movs	r2, #136	; 0x88
 800925a:	2124      	movs	r1, #36	; 0x24
 800925c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2101      	movs	r1, #1
 8009272:	438a      	bics	r2, r1
 8009274:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a0b      	ldr	r2, [pc, #44]	; (80092a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800927a:	4013      	ands	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2288      	movs	r2, #136	; 0x88
 8009290:	2120      	movs	r1, #32
 8009292:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2284      	movs	r2, #132	; 0x84
 8009298:	2100      	movs	r1, #0
 800929a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	0018      	movs	r0, r3
 80092a0:	46bd      	mov	sp, r7
 80092a2:	b004      	add	sp, #16
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	46c0      	nop			; (mov r8, r8)
 80092a8:	dfffffff 	.word	0xdfffffff

080092ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2284      	movs	r2, #132	; 0x84
 80092ba:	5c9b      	ldrb	r3, [r3, r2]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e02e      	b.n	8009322 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2284      	movs	r2, #132	; 0x84
 80092c8:	2101      	movs	r1, #1
 80092ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2288      	movs	r2, #136	; 0x88
 80092d0:	2124      	movs	r1, #36	; 0x24
 80092d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2101      	movs	r1, #1
 80092e8:	438a      	bics	r2, r1
 80092ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	08d9      	lsrs	r1, r3, #3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	0018      	movs	r0, r3
 8009304:	f000 f854 	bl	80093b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2288      	movs	r2, #136	; 0x88
 8009314:	2120      	movs	r1, #32
 8009316:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2284      	movs	r2, #132	; 0x84
 800931c:	2100      	movs	r1, #0
 800931e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	0018      	movs	r0, r3
 8009324:	46bd      	mov	sp, r7
 8009326:	b004      	add	sp, #16
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2284      	movs	r2, #132	; 0x84
 800933a:	5c9b      	ldrb	r3, [r3, r2]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009340:	2302      	movs	r3, #2
 8009342:	e02f      	b.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2284      	movs	r2, #132	; 0x84
 8009348:	2101      	movs	r1, #1
 800934a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2288      	movs	r2, #136	; 0x88
 8009350:	2124      	movs	r1, #36	; 0x24
 8009352:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2101      	movs	r1, #1
 8009368:	438a      	bics	r2, r1
 800936a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	4a0e      	ldr	r2, [pc, #56]	; (80093ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009374:	4013      	ands	r3, r2
 8009376:	0019      	movs	r1, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0018      	movs	r0, r3
 8009386:	f000 f813 	bl	80093b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2288      	movs	r2, #136	; 0x88
 8009396:	2120      	movs	r1, #32
 8009398:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2284      	movs	r2, #132	; 0x84
 800939e:	2100      	movs	r1, #0
 80093a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	0018      	movs	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	b004      	add	sp, #16
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	f1ffffff 	.word	0xf1ffffff

080093b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d108      	bne.n	80093d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	226a      	movs	r2, #106	; 0x6a
 80093c4:	2101      	movs	r1, #1
 80093c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2268      	movs	r2, #104	; 0x68
 80093cc:	2101      	movs	r1, #1
 80093ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093d0:	e043      	b.n	800945a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093d2:	260f      	movs	r6, #15
 80093d4:	19bb      	adds	r3, r7, r6
 80093d6:	2208      	movs	r2, #8
 80093d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093da:	200e      	movs	r0, #14
 80093dc:	183b      	adds	r3, r7, r0
 80093de:	2208      	movs	r2, #8
 80093e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	0e5b      	lsrs	r3, r3, #25
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	240d      	movs	r4, #13
 80093ee:	193b      	adds	r3, r7, r4
 80093f0:	2107      	movs	r1, #7
 80093f2:	400a      	ands	r2, r1
 80093f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	0f5b      	lsrs	r3, r3, #29
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	250c      	movs	r5, #12
 8009402:	197b      	adds	r3, r7, r5
 8009404:	2107      	movs	r1, #7
 8009406:	400a      	ands	r2, r1
 8009408:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800940a:	183b      	adds	r3, r7, r0
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	197a      	adds	r2, r7, r5
 8009410:	7812      	ldrb	r2, [r2, #0]
 8009412:	4914      	ldr	r1, [pc, #80]	; (8009464 <UARTEx_SetNbDataToProcess+0xb4>)
 8009414:	5c8a      	ldrb	r2, [r1, r2]
 8009416:	435a      	muls	r2, r3
 8009418:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800941a:	197b      	adds	r3, r7, r5
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	4a12      	ldr	r2, [pc, #72]	; (8009468 <UARTEx_SetNbDataToProcess+0xb8>)
 8009420:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009422:	0019      	movs	r1, r3
 8009424:	f7f6 fef8 	bl	8000218 <__divsi3>
 8009428:	0003      	movs	r3, r0
 800942a:	b299      	uxth	r1, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	226a      	movs	r2, #106	; 0x6a
 8009430:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009432:	19bb      	adds	r3, r7, r6
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	193a      	adds	r2, r7, r4
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	490a      	ldr	r1, [pc, #40]	; (8009464 <UARTEx_SetNbDataToProcess+0xb4>)
 800943c:	5c8a      	ldrb	r2, [r1, r2]
 800943e:	435a      	muls	r2, r3
 8009440:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009442:	193b      	adds	r3, r7, r4
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	4a08      	ldr	r2, [pc, #32]	; (8009468 <UARTEx_SetNbDataToProcess+0xb8>)
 8009448:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800944a:	0019      	movs	r1, r3
 800944c:	f7f6 fee4 	bl	8000218 <__divsi3>
 8009450:	0003      	movs	r3, r0
 8009452:	b299      	uxth	r1, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2268      	movs	r2, #104	; 0x68
 8009458:	5299      	strh	r1, [r3, r2]
}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	46bd      	mov	sp, r7
 800945e:	b005      	add	sp, #20
 8009460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	0800a734 	.word	0x0800a734
 8009468:	0800a73c 	.word	0x0800a73c

0800946c <__libc_init_array>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	2600      	movs	r6, #0
 8009470:	4d0c      	ldr	r5, [pc, #48]	; (80094a4 <__libc_init_array+0x38>)
 8009472:	4c0d      	ldr	r4, [pc, #52]	; (80094a8 <__libc_init_array+0x3c>)
 8009474:	1b64      	subs	r4, r4, r5
 8009476:	10a4      	asrs	r4, r4, #2
 8009478:	42a6      	cmp	r6, r4
 800947a:	d109      	bne.n	8009490 <__libc_init_array+0x24>
 800947c:	2600      	movs	r6, #0
 800947e:	f001 f89d 	bl	800a5bc <_init>
 8009482:	4d0a      	ldr	r5, [pc, #40]	; (80094ac <__libc_init_array+0x40>)
 8009484:	4c0a      	ldr	r4, [pc, #40]	; (80094b0 <__libc_init_array+0x44>)
 8009486:	1b64      	subs	r4, r4, r5
 8009488:	10a4      	asrs	r4, r4, #2
 800948a:	42a6      	cmp	r6, r4
 800948c:	d105      	bne.n	800949a <__libc_init_array+0x2e>
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	00b3      	lsls	r3, r6, #2
 8009492:	58eb      	ldr	r3, [r5, r3]
 8009494:	4798      	blx	r3
 8009496:	3601      	adds	r6, #1
 8009498:	e7ee      	b.n	8009478 <__libc_init_array+0xc>
 800949a:	00b3      	lsls	r3, r6, #2
 800949c:	58eb      	ldr	r3, [r5, r3]
 800949e:	4798      	blx	r3
 80094a0:	3601      	adds	r6, #1
 80094a2:	e7f2      	b.n	800948a <__libc_init_array+0x1e>
 80094a4:	0800a928 	.word	0x0800a928
 80094a8:	0800a928 	.word	0x0800a928
 80094ac:	0800a928 	.word	0x0800a928
 80094b0:	0800a92c 	.word	0x0800a92c

080094b4 <memset>:
 80094b4:	0003      	movs	r3, r0
 80094b6:	1882      	adds	r2, r0, r2
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d100      	bne.n	80094be <memset+0xa>
 80094bc:	4770      	bx	lr
 80094be:	7019      	strb	r1, [r3, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	e7f9      	b.n	80094b8 <memset+0x4>

080094c4 <tan>:
 80094c4:	b5d0      	push	{r4, r6, r7, lr}
 80094c6:	4a12      	ldr	r2, [pc, #72]	; (8009510 <tan+0x4c>)
 80094c8:	004b      	lsls	r3, r1, #1
 80094ca:	b086      	sub	sp, #24
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	4293      	cmp	r3, r2
 80094d0:	dc06      	bgt.n	80094e0 <tan+0x1c>
 80094d2:	2301      	movs	r3, #1
 80094d4:	2200      	movs	r2, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	f000 fd77 	bl	8009fcc <__kernel_tan>
 80094de:	e006      	b.n	80094ee <tan+0x2a>
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <tan+0x50>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	dd05      	ble.n	80094f2 <tan+0x2e>
 80094e6:	0002      	movs	r2, r0
 80094e8:	000b      	movs	r3, r1
 80094ea:	f7f8 fac1 	bl	8001a70 <__aeabi_dsub>
 80094ee:	b006      	add	sp, #24
 80094f0:	bdd0      	pop	{r4, r6, r7, pc}
 80094f2:	aa02      	add	r2, sp, #8
 80094f4:	f000 f810 	bl	8009518 <__ieee754_rem_pio2>
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	2102      	movs	r1, #2
 80094fe:	0040      	lsls	r0, r0, #1
 8009500:	4008      	ands	r0, r1
 8009502:	3901      	subs	r1, #1
 8009504:	1a08      	subs	r0, r1, r0
 8009506:	9000      	str	r0, [sp, #0]
 8009508:	9802      	ldr	r0, [sp, #8]
 800950a:	9903      	ldr	r1, [sp, #12]
 800950c:	e7e5      	b.n	80094da <tan+0x16>
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	3fe921fb 	.word	0x3fe921fb
 8009514:	7fefffff 	.word	0x7fefffff

08009518 <__ieee754_rem_pio2>:
 8009518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800951a:	004b      	lsls	r3, r1, #1
 800951c:	b091      	sub	sp, #68	; 0x44
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	9302      	str	r3, [sp, #8]
 8009522:	0017      	movs	r7, r2
 8009524:	4bb6      	ldr	r3, [pc, #728]	; (8009800 <__ieee754_rem_pio2+0x2e8>)
 8009526:	9a02      	ldr	r2, [sp, #8]
 8009528:	0004      	movs	r4, r0
 800952a:	000d      	movs	r5, r1
 800952c:	9109      	str	r1, [sp, #36]	; 0x24
 800952e:	429a      	cmp	r2, r3
 8009530:	dc09      	bgt.n	8009546 <__ieee754_rem_pio2+0x2e>
 8009532:	0002      	movs	r2, r0
 8009534:	000b      	movs	r3, r1
 8009536:	603a      	str	r2, [r7, #0]
 8009538:	607b      	str	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	2300      	movs	r3, #0
 800953e:	60ba      	str	r2, [r7, #8]
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	2600      	movs	r6, #0
 8009544:	e025      	b.n	8009592 <__ieee754_rem_pio2+0x7a>
 8009546:	4baf      	ldr	r3, [pc, #700]	; (8009804 <__ieee754_rem_pio2+0x2ec>)
 8009548:	9a02      	ldr	r2, [sp, #8]
 800954a:	429a      	cmp	r2, r3
 800954c:	dd00      	ble.n	8009550 <__ieee754_rem_pio2+0x38>
 800954e:	e06e      	b.n	800962e <__ieee754_rem_pio2+0x116>
 8009550:	4ead      	ldr	r6, [pc, #692]	; (8009808 <__ieee754_rem_pio2+0x2f0>)
 8009552:	4aae      	ldr	r2, [pc, #696]	; (800980c <__ieee754_rem_pio2+0x2f4>)
 8009554:	2d00      	cmp	r5, #0
 8009556:	dd35      	ble.n	80095c4 <__ieee754_rem_pio2+0xac>
 8009558:	0020      	movs	r0, r4
 800955a:	0029      	movs	r1, r5
 800955c:	4baa      	ldr	r3, [pc, #680]	; (8009808 <__ieee754_rem_pio2+0x2f0>)
 800955e:	f7f8 fa87 	bl	8001a70 <__aeabi_dsub>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	0004      	movs	r4, r0
 8009566:	000d      	movs	r5, r1
 8009568:	42b3      	cmp	r3, r6
 800956a:	d015      	beq.n	8009598 <__ieee754_rem_pio2+0x80>
 800956c:	4aa8      	ldr	r2, [pc, #672]	; (8009810 <__ieee754_rem_pio2+0x2f8>)
 800956e:	4ba9      	ldr	r3, [pc, #676]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 8009570:	f7f8 fa7e 	bl	8001a70 <__aeabi_dsub>
 8009574:	0002      	movs	r2, r0
 8009576:	000b      	movs	r3, r1
 8009578:	0020      	movs	r0, r4
 800957a:	603a      	str	r2, [r7, #0]
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	0029      	movs	r1, r5
 8009580:	f7f8 fa76 	bl	8001a70 <__aeabi_dsub>
 8009584:	4aa2      	ldr	r2, [pc, #648]	; (8009810 <__ieee754_rem_pio2+0x2f8>)
 8009586:	4ba3      	ldr	r3, [pc, #652]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 8009588:	f7f8 fa72 	bl	8001a70 <__aeabi_dsub>
 800958c:	2601      	movs	r6, #1
 800958e:	60b8      	str	r0, [r7, #8]
 8009590:	60f9      	str	r1, [r7, #12]
 8009592:	0030      	movs	r0, r6
 8009594:	b011      	add	sp, #68	; 0x44
 8009596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009598:	22d3      	movs	r2, #211	; 0xd3
 800959a:	4b9e      	ldr	r3, [pc, #632]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 800959c:	0552      	lsls	r2, r2, #21
 800959e:	f7f8 fa67 	bl	8001a70 <__aeabi_dsub>
 80095a2:	4a9d      	ldr	r2, [pc, #628]	; (8009818 <__ieee754_rem_pio2+0x300>)
 80095a4:	4b9d      	ldr	r3, [pc, #628]	; (800981c <__ieee754_rem_pio2+0x304>)
 80095a6:	0004      	movs	r4, r0
 80095a8:	000d      	movs	r5, r1
 80095aa:	f7f8 fa61 	bl	8001a70 <__aeabi_dsub>
 80095ae:	0002      	movs	r2, r0
 80095b0:	000b      	movs	r3, r1
 80095b2:	0020      	movs	r0, r4
 80095b4:	603a      	str	r2, [r7, #0]
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	0029      	movs	r1, r5
 80095ba:	f7f8 fa59 	bl	8001a70 <__aeabi_dsub>
 80095be:	4a96      	ldr	r2, [pc, #600]	; (8009818 <__ieee754_rem_pio2+0x300>)
 80095c0:	4b96      	ldr	r3, [pc, #600]	; (800981c <__ieee754_rem_pio2+0x304>)
 80095c2:	e7e1      	b.n	8009588 <__ieee754_rem_pio2+0x70>
 80095c4:	0020      	movs	r0, r4
 80095c6:	0029      	movs	r1, r5
 80095c8:	4b8f      	ldr	r3, [pc, #572]	; (8009808 <__ieee754_rem_pio2+0x2f0>)
 80095ca:	f7f7 f8a7 	bl	800071c <__aeabi_dadd>
 80095ce:	9b02      	ldr	r3, [sp, #8]
 80095d0:	0004      	movs	r4, r0
 80095d2:	000d      	movs	r5, r1
 80095d4:	42b3      	cmp	r3, r6
 80095d6:	d014      	beq.n	8009602 <__ieee754_rem_pio2+0xea>
 80095d8:	4a8d      	ldr	r2, [pc, #564]	; (8009810 <__ieee754_rem_pio2+0x2f8>)
 80095da:	4b8e      	ldr	r3, [pc, #568]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 80095dc:	f7f7 f89e 	bl	800071c <__aeabi_dadd>
 80095e0:	0002      	movs	r2, r0
 80095e2:	000b      	movs	r3, r1
 80095e4:	0020      	movs	r0, r4
 80095e6:	603a      	str	r2, [r7, #0]
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	0029      	movs	r1, r5
 80095ec:	f7f8 fa40 	bl	8001a70 <__aeabi_dsub>
 80095f0:	4a87      	ldr	r2, [pc, #540]	; (8009810 <__ieee754_rem_pio2+0x2f8>)
 80095f2:	4b88      	ldr	r3, [pc, #544]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 80095f4:	f7f7 f892 	bl	800071c <__aeabi_dadd>
 80095f8:	2601      	movs	r6, #1
 80095fa:	60b8      	str	r0, [r7, #8]
 80095fc:	60f9      	str	r1, [r7, #12]
 80095fe:	4276      	negs	r6, r6
 8009600:	e7c7      	b.n	8009592 <__ieee754_rem_pio2+0x7a>
 8009602:	22d3      	movs	r2, #211	; 0xd3
 8009604:	4b83      	ldr	r3, [pc, #524]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 8009606:	0552      	lsls	r2, r2, #21
 8009608:	f7f7 f888 	bl	800071c <__aeabi_dadd>
 800960c:	4a82      	ldr	r2, [pc, #520]	; (8009818 <__ieee754_rem_pio2+0x300>)
 800960e:	4b83      	ldr	r3, [pc, #524]	; (800981c <__ieee754_rem_pio2+0x304>)
 8009610:	0004      	movs	r4, r0
 8009612:	000d      	movs	r5, r1
 8009614:	f7f7 f882 	bl	800071c <__aeabi_dadd>
 8009618:	0002      	movs	r2, r0
 800961a:	000b      	movs	r3, r1
 800961c:	0020      	movs	r0, r4
 800961e:	603a      	str	r2, [r7, #0]
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	0029      	movs	r1, r5
 8009624:	f7f8 fa24 	bl	8001a70 <__aeabi_dsub>
 8009628:	4a7b      	ldr	r2, [pc, #492]	; (8009818 <__ieee754_rem_pio2+0x300>)
 800962a:	4b7c      	ldr	r3, [pc, #496]	; (800981c <__ieee754_rem_pio2+0x304>)
 800962c:	e7e2      	b.n	80095f4 <__ieee754_rem_pio2+0xdc>
 800962e:	4b7c      	ldr	r3, [pc, #496]	; (8009820 <__ieee754_rem_pio2+0x308>)
 8009630:	9a02      	ldr	r2, [sp, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	dd00      	ble.n	8009638 <__ieee754_rem_pio2+0x120>
 8009636:	e0d3      	b.n	80097e0 <__ieee754_rem_pio2+0x2c8>
 8009638:	0020      	movs	r0, r4
 800963a:	0029      	movs	r1, r5
 800963c:	f000 febc 	bl	800a3b8 <fabs>
 8009640:	4a78      	ldr	r2, [pc, #480]	; (8009824 <__ieee754_rem_pio2+0x30c>)
 8009642:	4b79      	ldr	r3, [pc, #484]	; (8009828 <__ieee754_rem_pio2+0x310>)
 8009644:	0004      	movs	r4, r0
 8009646:	000d      	movs	r5, r1
 8009648:	f7f7 ffa6 	bl	8001598 <__aeabi_dmul>
 800964c:	2200      	movs	r2, #0
 800964e:	4b77      	ldr	r3, [pc, #476]	; (800982c <__ieee754_rem_pio2+0x314>)
 8009650:	f7f7 f864 	bl	800071c <__aeabi_dadd>
 8009654:	f7f8 fd9e 	bl	8002194 <__aeabi_d2iz>
 8009658:	0006      	movs	r6, r0
 800965a:	f7f8 fdd1 	bl	8002200 <__aeabi_i2d>
 800965e:	4a6b      	ldr	r2, [pc, #428]	; (800980c <__ieee754_rem_pio2+0x2f4>)
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <__ieee754_rem_pio2+0x2f0>)
 8009662:	9006      	str	r0, [sp, #24]
 8009664:	9107      	str	r1, [sp, #28]
 8009666:	f7f7 ff97 	bl	8001598 <__aeabi_dmul>
 800966a:	0002      	movs	r2, r0
 800966c:	000b      	movs	r3, r1
 800966e:	0020      	movs	r0, r4
 8009670:	0029      	movs	r1, r5
 8009672:	f7f8 f9fd 	bl	8001a70 <__aeabi_dsub>
 8009676:	4a66      	ldr	r2, [pc, #408]	; (8009810 <__ieee754_rem_pio2+0x2f8>)
 8009678:	9004      	str	r0, [sp, #16]
 800967a:	9105      	str	r1, [sp, #20]
 800967c:	9806      	ldr	r0, [sp, #24]
 800967e:	9907      	ldr	r1, [sp, #28]
 8009680:	4b64      	ldr	r3, [pc, #400]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 8009682:	f7f7 ff89 	bl	8001598 <__aeabi_dmul>
 8009686:	0004      	movs	r4, r0
 8009688:	000d      	movs	r5, r1
 800968a:	2e1f      	cmp	r6, #31
 800968c:	dc0f      	bgt.n	80096ae <__ieee754_rem_pio2+0x196>
 800968e:	4a68      	ldr	r2, [pc, #416]	; (8009830 <__ieee754_rem_pio2+0x318>)
 8009690:	1e73      	subs	r3, r6, #1
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	589b      	ldr	r3, [r3, r2]
 8009696:	9a02      	ldr	r2, [sp, #8]
 8009698:	4293      	cmp	r3, r2
 800969a:	d008      	beq.n	80096ae <__ieee754_rem_pio2+0x196>
 800969c:	9804      	ldr	r0, [sp, #16]
 800969e:	9905      	ldr	r1, [sp, #20]
 80096a0:	0022      	movs	r2, r4
 80096a2:	002b      	movs	r3, r5
 80096a4:	f7f8 f9e4 	bl	8001a70 <__aeabi_dsub>
 80096a8:	6038      	str	r0, [r7, #0]
 80096aa:	6079      	str	r1, [r7, #4]
 80096ac:	e012      	b.n	80096d4 <__ieee754_rem_pio2+0x1bc>
 80096ae:	0022      	movs	r2, r4
 80096b0:	9804      	ldr	r0, [sp, #16]
 80096b2:	9905      	ldr	r1, [sp, #20]
 80096b4:	002b      	movs	r3, r5
 80096b6:	f7f8 f9db 	bl	8001a70 <__aeabi_dsub>
 80096ba:	9b02      	ldr	r3, [sp, #8]
 80096bc:	151b      	asrs	r3, r3, #20
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	9a08      	ldr	r2, [sp, #32]
 80096c2:	004b      	lsls	r3, r1, #1
 80096c4:	0d5b      	lsrs	r3, r3, #21
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	dc21      	bgt.n	8009710 <__ieee754_rem_pio2+0x1f8>
 80096cc:	0002      	movs	r2, r0
 80096ce:	000b      	movs	r3, r1
 80096d0:	603a      	str	r2, [r7, #0]
 80096d2:	607b      	str	r3, [r7, #4]
 80096d4:	9804      	ldr	r0, [sp, #16]
 80096d6:	9905      	ldr	r1, [sp, #20]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	9302      	str	r3, [sp, #8]
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	f7f8 f9c6 	bl	8001a70 <__aeabi_dsub>
 80096e4:	0022      	movs	r2, r4
 80096e6:	002b      	movs	r3, r5
 80096e8:	f7f8 f9c2 	bl	8001a70 <__aeabi_dsub>
 80096ec:	000b      	movs	r3, r1
 80096ee:	0002      	movs	r2, r0
 80096f0:	60ba      	str	r2, [r7, #8]
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	db00      	blt.n	80096fc <__ieee754_rem_pio2+0x1e4>
 80096fa:	e74a      	b.n	8009592 <__ieee754_rem_pio2+0x7a>
 80096fc:	2380      	movs	r3, #128	; 0x80
 80096fe:	061b      	lsls	r3, r3, #24
 8009700:	469c      	mov	ip, r3
 8009702:	9c02      	ldr	r4, [sp, #8]
 8009704:	18c9      	adds	r1, r1, r3
 8009706:	4464      	add	r4, ip
 8009708:	607c      	str	r4, [r7, #4]
 800970a:	60b8      	str	r0, [r7, #8]
 800970c:	60f9      	str	r1, [r7, #12]
 800970e:	e776      	b.n	80095fe <__ieee754_rem_pio2+0xe6>
 8009710:	22d3      	movs	r2, #211	; 0xd3
 8009712:	9806      	ldr	r0, [sp, #24]
 8009714:	9907      	ldr	r1, [sp, #28]
 8009716:	4b3f      	ldr	r3, [pc, #252]	; (8009814 <__ieee754_rem_pio2+0x2fc>)
 8009718:	0552      	lsls	r2, r2, #21
 800971a:	f7f7 ff3d 	bl	8001598 <__aeabi_dmul>
 800971e:	0004      	movs	r4, r0
 8009720:	000d      	movs	r5, r1
 8009722:	0002      	movs	r2, r0
 8009724:	000b      	movs	r3, r1
 8009726:	9804      	ldr	r0, [sp, #16]
 8009728:	9905      	ldr	r1, [sp, #20]
 800972a:	f7f8 f9a1 	bl	8001a70 <__aeabi_dsub>
 800972e:	0002      	movs	r2, r0
 8009730:	000b      	movs	r3, r1
 8009732:	9002      	str	r0, [sp, #8]
 8009734:	9103      	str	r1, [sp, #12]
 8009736:	9804      	ldr	r0, [sp, #16]
 8009738:	9905      	ldr	r1, [sp, #20]
 800973a:	f7f8 f999 	bl	8001a70 <__aeabi_dsub>
 800973e:	0022      	movs	r2, r4
 8009740:	002b      	movs	r3, r5
 8009742:	f7f8 f995 	bl	8001a70 <__aeabi_dsub>
 8009746:	0004      	movs	r4, r0
 8009748:	000d      	movs	r5, r1
 800974a:	9806      	ldr	r0, [sp, #24]
 800974c:	9907      	ldr	r1, [sp, #28]
 800974e:	4a32      	ldr	r2, [pc, #200]	; (8009818 <__ieee754_rem_pio2+0x300>)
 8009750:	4b32      	ldr	r3, [pc, #200]	; (800981c <__ieee754_rem_pio2+0x304>)
 8009752:	f7f7 ff21 	bl	8001598 <__aeabi_dmul>
 8009756:	0022      	movs	r2, r4
 8009758:	002b      	movs	r3, r5
 800975a:	f7f8 f989 	bl	8001a70 <__aeabi_dsub>
 800975e:	0002      	movs	r2, r0
 8009760:	000b      	movs	r3, r1
 8009762:	0004      	movs	r4, r0
 8009764:	000d      	movs	r5, r1
 8009766:	9802      	ldr	r0, [sp, #8]
 8009768:	9903      	ldr	r1, [sp, #12]
 800976a:	f7f8 f981 	bl	8001a70 <__aeabi_dsub>
 800976e:	9a08      	ldr	r2, [sp, #32]
 8009770:	004b      	lsls	r3, r1, #1
 8009772:	0d5b      	lsrs	r3, r3, #21
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b31      	cmp	r3, #49	; 0x31
 8009778:	dc08      	bgt.n	800978c <__ieee754_rem_pio2+0x274>
 800977a:	0002      	movs	r2, r0
 800977c:	000b      	movs	r3, r1
 800977e:	603a      	str	r2, [r7, #0]
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	9a02      	ldr	r2, [sp, #8]
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	9204      	str	r2, [sp, #16]
 8009788:	9305      	str	r3, [sp, #20]
 800978a:	e7a3      	b.n	80096d4 <__ieee754_rem_pio2+0x1bc>
 800978c:	22b8      	movs	r2, #184	; 0xb8
 800978e:	9806      	ldr	r0, [sp, #24]
 8009790:	9907      	ldr	r1, [sp, #28]
 8009792:	4b22      	ldr	r3, [pc, #136]	; (800981c <__ieee754_rem_pio2+0x304>)
 8009794:	0592      	lsls	r2, r2, #22
 8009796:	f7f7 feff 	bl	8001598 <__aeabi_dmul>
 800979a:	0004      	movs	r4, r0
 800979c:	000d      	movs	r5, r1
 800979e:	0002      	movs	r2, r0
 80097a0:	000b      	movs	r3, r1
 80097a2:	9802      	ldr	r0, [sp, #8]
 80097a4:	9903      	ldr	r1, [sp, #12]
 80097a6:	f7f8 f963 	bl	8001a70 <__aeabi_dsub>
 80097aa:	0002      	movs	r2, r0
 80097ac:	000b      	movs	r3, r1
 80097ae:	9004      	str	r0, [sp, #16]
 80097b0:	9105      	str	r1, [sp, #20]
 80097b2:	9802      	ldr	r0, [sp, #8]
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	f7f8 f95b 	bl	8001a70 <__aeabi_dsub>
 80097ba:	0022      	movs	r2, r4
 80097bc:	002b      	movs	r3, r5
 80097be:	f7f8 f957 	bl	8001a70 <__aeabi_dsub>
 80097c2:	0004      	movs	r4, r0
 80097c4:	000d      	movs	r5, r1
 80097c6:	9806      	ldr	r0, [sp, #24]
 80097c8:	9907      	ldr	r1, [sp, #28]
 80097ca:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <__ieee754_rem_pio2+0x31c>)
 80097cc:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <__ieee754_rem_pio2+0x320>)
 80097ce:	f7f7 fee3 	bl	8001598 <__aeabi_dmul>
 80097d2:	0022      	movs	r2, r4
 80097d4:	002b      	movs	r3, r5
 80097d6:	f7f8 f94b 	bl	8001a70 <__aeabi_dsub>
 80097da:	0004      	movs	r4, r0
 80097dc:	000d      	movs	r5, r1
 80097de:	e75d      	b.n	800969c <__ieee754_rem_pio2+0x184>
 80097e0:	4b16      	ldr	r3, [pc, #88]	; (800983c <__ieee754_rem_pio2+0x324>)
 80097e2:	9a02      	ldr	r2, [sp, #8]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	dd2b      	ble.n	8009840 <__ieee754_rem_pio2+0x328>
 80097e8:	0022      	movs	r2, r4
 80097ea:	002b      	movs	r3, r5
 80097ec:	0020      	movs	r0, r4
 80097ee:	0029      	movs	r1, r5
 80097f0:	f7f8 f93e 	bl	8001a70 <__aeabi_dsub>
 80097f4:	60b8      	str	r0, [r7, #8]
 80097f6:	60f9      	str	r1, [r7, #12]
 80097f8:	6038      	str	r0, [r7, #0]
 80097fa:	6079      	str	r1, [r7, #4]
 80097fc:	e6a1      	b.n	8009542 <__ieee754_rem_pio2+0x2a>
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	3fe921fb 	.word	0x3fe921fb
 8009804:	4002d97b 	.word	0x4002d97b
 8009808:	3ff921fb 	.word	0x3ff921fb
 800980c:	54400000 	.word	0x54400000
 8009810:	1a626331 	.word	0x1a626331
 8009814:	3dd0b461 	.word	0x3dd0b461
 8009818:	2e037073 	.word	0x2e037073
 800981c:	3ba3198a 	.word	0x3ba3198a
 8009820:	413921fb 	.word	0x413921fb
 8009824:	6dc9c883 	.word	0x6dc9c883
 8009828:	3fe45f30 	.word	0x3fe45f30
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	0800a744 	.word	0x0800a744
 8009834:	252049c1 	.word	0x252049c1
 8009838:	397b839a 	.word	0x397b839a
 800983c:	7fefffff 	.word	0x7fefffff
 8009840:	9a02      	ldr	r2, [sp, #8]
 8009842:	0020      	movs	r0, r4
 8009844:	1516      	asrs	r6, r2, #20
 8009846:	4a29      	ldr	r2, [pc, #164]	; (80098ec <__ieee754_rem_pio2+0x3d4>)
 8009848:	18b6      	adds	r6, r6, r2
 800984a:	9a02      	ldr	r2, [sp, #8]
 800984c:	0533      	lsls	r3, r6, #20
 800984e:	1ad5      	subs	r5, r2, r3
 8009850:	0029      	movs	r1, r5
 8009852:	f7f8 fc9f 	bl	8002194 <__aeabi_d2iz>
 8009856:	f7f8 fcd3 	bl	8002200 <__aeabi_i2d>
 800985a:	0002      	movs	r2, r0
 800985c:	000b      	movs	r3, r1
 800985e:	0020      	movs	r0, r4
 8009860:	0029      	movs	r1, r5
 8009862:	920a      	str	r2, [sp, #40]	; 0x28
 8009864:	930b      	str	r3, [sp, #44]	; 0x2c
 8009866:	f7f8 f903 	bl	8001a70 <__aeabi_dsub>
 800986a:	2200      	movs	r2, #0
 800986c:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <__ieee754_rem_pio2+0x3d8>)
 800986e:	f7f7 fe93 	bl	8001598 <__aeabi_dmul>
 8009872:	000d      	movs	r5, r1
 8009874:	0004      	movs	r4, r0
 8009876:	f7f8 fc8d 	bl	8002194 <__aeabi_d2iz>
 800987a:	f7f8 fcc1 	bl	8002200 <__aeabi_i2d>
 800987e:	0002      	movs	r2, r0
 8009880:	000b      	movs	r3, r1
 8009882:	0020      	movs	r0, r4
 8009884:	0029      	movs	r1, r5
 8009886:	920c      	str	r2, [sp, #48]	; 0x30
 8009888:	930d      	str	r3, [sp, #52]	; 0x34
 800988a:	f7f8 f8f1 	bl	8001a70 <__aeabi_dsub>
 800988e:	2200      	movs	r2, #0
 8009890:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <__ieee754_rem_pio2+0x3d8>)
 8009892:	f7f7 fe81 	bl	8001598 <__aeabi_dmul>
 8009896:	2503      	movs	r5, #3
 8009898:	900e      	str	r0, [sp, #56]	; 0x38
 800989a:	910f      	str	r1, [sp, #60]	; 0x3c
 800989c:	ac0a      	add	r4, sp, #40	; 0x28
 800989e:	2200      	movs	r2, #0
 80098a0:	6920      	ldr	r0, [r4, #16]
 80098a2:	6961      	ldr	r1, [r4, #20]
 80098a4:	2300      	movs	r3, #0
 80098a6:	9502      	str	r5, [sp, #8]
 80098a8:	3c08      	subs	r4, #8
 80098aa:	3d01      	subs	r5, #1
 80098ac:	f7f6 fdb0 	bl	8000410 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1f4      	bne.n	800989e <__ieee754_rem_pio2+0x386>
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <__ieee754_rem_pio2+0x3dc>)
 80098b6:	0032      	movs	r2, r6
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	2302      	movs	r3, #2
 80098bc:	0039      	movs	r1, r7
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	a80a      	add	r0, sp, #40	; 0x28
 80098c2:	9b02      	ldr	r3, [sp, #8]
 80098c4:	f000 f818 	bl	80098f8 <__kernel_rem_pio2>
 80098c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ca:	0006      	movs	r6, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db00      	blt.n	80098d2 <__ieee754_rem_pio2+0x3ba>
 80098d0:	e65f      	b.n	8009592 <__ieee754_rem_pio2+0x7a>
 80098d2:	2180      	movs	r1, #128	; 0x80
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	0609      	lsls	r1, r1, #24
 80098da:	1843      	adds	r3, r0, r1
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	603a      	str	r2, [r7, #0]
 80098e0:	607b      	str	r3, [r7, #4]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	1843      	adds	r3, r0, r1
 80098e6:	60ba      	str	r2, [r7, #8]
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e688      	b.n	80095fe <__ieee754_rem_pio2+0xe6>
 80098ec:	fffffbea 	.word	0xfffffbea
 80098f0:	41700000 	.word	0x41700000
 80098f4:	0800a7c4 	.word	0x0800a7c4

080098f8 <__kernel_rem_pio2>:
 80098f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fa:	4ccb      	ldr	r4, [pc, #812]	; (8009c28 <__kernel_rem_pio2+0x330>)
 80098fc:	44a5      	add	sp, r4
 80098fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009900:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009902:	0014      	movs	r4, r2
 8009904:	009a      	lsls	r2, r3, #2
 8009906:	4bc9      	ldr	r3, [pc, #804]	; (8009c2c <__kernel_rem_pio2+0x334>)
 8009908:	900e      	str	r0, [sp, #56]	; 0x38
 800990a:	58d3      	ldr	r3, [r2, r3]
 800990c:	9107      	str	r1, [sp, #28]
 800990e:	930a      	str	r3, [sp, #40]	; 0x28
 8009910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009912:	3b01      	subs	r3, #1
 8009914:	930c      	str	r3, [sp, #48]	; 0x30
 8009916:	2300      	movs	r3, #0
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	0023      	movs	r3, r4
 800991c:	3314      	adds	r3, #20
 800991e:	db04      	blt.n	800992a <__kernel_rem_pio2+0x32>
 8009920:	2118      	movs	r1, #24
 8009922:	1ee0      	subs	r0, r4, #3
 8009924:	f7f6 fc78 	bl	8000218 <__divsi3>
 8009928:	9000      	str	r0, [sp, #0]
 800992a:	2218      	movs	r2, #24
 800992c:	9b00      	ldr	r3, [sp, #0]
 800992e:	4252      	negs	r2, r2
 8009930:	3301      	adds	r3, #1
 8009932:	435a      	muls	r2, r3
 8009934:	1913      	adds	r3, r2, r4
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	ae26      	add	r6, sp, #152	; 0x98
 800993e:	1a9d      	subs	r5, r3, r2
 8009940:	002c      	movs	r4, r5
 8009942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009944:	189f      	adds	r7, r3, r2
 8009946:	1b63      	subs	r3, r4, r5
 8009948:	429f      	cmp	r7, r3
 800994a:	da0f      	bge.n	800996c <__kernel_rem_pio2+0x74>
 800994c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800994e:	af76      	add	r7, sp, #472	; 0x1d8
 8009950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009954:	1af3      	subs	r3, r6, r3
 8009956:	429a      	cmp	r2, r3
 8009958:	db30      	blt.n	80099bc <__kernel_rem_pio2+0xc4>
 800995a:	ab26      	add	r3, sp, #152	; 0x98
 800995c:	00f4      	lsls	r4, r6, #3
 800995e:	2200      	movs	r2, #0
 8009960:	18e4      	adds	r4, r4, r3
 8009962:	2300      	movs	r3, #0
 8009964:	2500      	movs	r5, #0
 8009966:	9204      	str	r2, [sp, #16]
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	e01e      	b.n	80099aa <__kernel_rem_pio2+0xb2>
 800996c:	2c00      	cmp	r4, #0
 800996e:	db07      	blt.n	8009980 <__kernel_rem_pio2+0x88>
 8009970:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8009972:	00a3      	lsls	r3, r4, #2
 8009974:	58d0      	ldr	r0, [r2, r3]
 8009976:	f7f8 fc43 	bl	8002200 <__aeabi_i2d>
 800997a:	c603      	stmia	r6!, {r0, r1}
 800997c:	3401      	adds	r4, #1
 800997e:	e7e2      	b.n	8009946 <__kernel_rem_pio2+0x4e>
 8009980:	2000      	movs	r0, #0
 8009982:	2100      	movs	r1, #0
 8009984:	e7f9      	b.n	800997a <__kernel_rem_pio2+0x82>
 8009986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009988:	00e9      	lsls	r1, r5, #3
 800998a:	1859      	adds	r1, r3, r1
 800998c:	6808      	ldr	r0, [r1, #0]
 800998e:	6849      	ldr	r1, [r1, #4]
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	6863      	ldr	r3, [r4, #4]
 8009994:	f7f7 fe00 	bl	8001598 <__aeabi_dmul>
 8009998:	0002      	movs	r2, r0
 800999a:	000b      	movs	r3, r1
 800999c:	9804      	ldr	r0, [sp, #16]
 800999e:	9905      	ldr	r1, [sp, #20]
 80099a0:	f7f6 febc 	bl	800071c <__aeabi_dadd>
 80099a4:	9004      	str	r0, [sp, #16]
 80099a6:	9105      	str	r1, [sp, #20]
 80099a8:	3501      	adds	r5, #1
 80099aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099ac:	3c08      	subs	r4, #8
 80099ae:	429d      	cmp	r5, r3
 80099b0:	dde9      	ble.n	8009986 <__kernel_rem_pio2+0x8e>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	9c05      	ldr	r4, [sp, #20]
 80099b6:	3601      	adds	r6, #1
 80099b8:	c718      	stmia	r7!, {r3, r4}
 80099ba:	e7c9      	b.n	8009950 <__kernel_rem_pio2+0x58>
 80099bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099be:	aa12      	add	r2, sp, #72	; 0x48
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	9310      	str	r3, [sp, #64]	; 0x40
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	0098      	lsls	r0, r3, #2
 80099ca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80099cc:	181b      	adds	r3, r3, r0
 80099ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	aa76      	add	r2, sp, #472	; 0x1d8
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	18d3      	adds	r3, r2, r3
 80099dc:	681c      	ldr	r4, [r3, #0]
 80099de:	685d      	ldr	r5, [r3, #4]
 80099e0:	ab12      	add	r3, sp, #72	; 0x48
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	9309      	str	r3, [sp, #36]	; 0x24
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	9211      	str	r2, [sp, #68]	; 0x44
 80099ea:	9308      	str	r3, [sp, #32]
 80099ec:	9b08      	ldr	r3, [sp, #32]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dc74      	bgt.n	8009adc <__kernel_rem_pio2+0x1e4>
 80099f2:	0020      	movs	r0, r4
 80099f4:	0029      	movs	r1, r5
 80099f6:	9a02      	ldr	r2, [sp, #8]
 80099f8:	f000 fd6c 	bl	800a4d4 <scalbn>
 80099fc:	23ff      	movs	r3, #255	; 0xff
 80099fe:	2200      	movs	r2, #0
 8009a00:	059b      	lsls	r3, r3, #22
 8009a02:	0004      	movs	r4, r0
 8009a04:	000d      	movs	r5, r1
 8009a06:	f7f7 fdc7 	bl	8001598 <__aeabi_dmul>
 8009a0a:	f000 fcd9 	bl	800a3c0 <floor>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4b87      	ldr	r3, [pc, #540]	; (8009c30 <__kernel_rem_pio2+0x338>)
 8009a12:	f7f7 fdc1 	bl	8001598 <__aeabi_dmul>
 8009a16:	0002      	movs	r2, r0
 8009a18:	000b      	movs	r3, r1
 8009a1a:	0020      	movs	r0, r4
 8009a1c:	0029      	movs	r1, r5
 8009a1e:	f7f8 f827 	bl	8001a70 <__aeabi_dsub>
 8009a22:	000d      	movs	r5, r1
 8009a24:	0004      	movs	r4, r0
 8009a26:	f7f8 fbb5 	bl	8002194 <__aeabi_d2iz>
 8009a2a:	9009      	str	r0, [sp, #36]	; 0x24
 8009a2c:	f7f8 fbe8 	bl	8002200 <__aeabi_i2d>
 8009a30:	000b      	movs	r3, r1
 8009a32:	0002      	movs	r2, r0
 8009a34:	0029      	movs	r1, r5
 8009a36:	0020      	movs	r0, r4
 8009a38:	f7f8 f81a 	bl	8001a70 <__aeabi_dsub>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	0006      	movs	r6, r0
 8009a40:	000f      	movs	r7, r1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dd74      	ble.n	8009b30 <__kernel_rem_pio2+0x238>
 8009a46:	2118      	movs	r1, #24
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	aa12      	add	r2, sp, #72	; 0x48
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	589a      	ldr	r2, [r3, r2]
 8009a52:	9802      	ldr	r0, [sp, #8]
 8009a54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009a56:	1a09      	subs	r1, r1, r0
 8009a58:	0010      	movs	r0, r2
 8009a5a:	4108      	asrs	r0, r1
 8009a5c:	1824      	adds	r4, r4, r0
 8009a5e:	4088      	lsls	r0, r1
 8009a60:	a912      	add	r1, sp, #72	; 0x48
 8009a62:	1a12      	subs	r2, r2, r0
 8009a64:	505a      	str	r2, [r3, r1]
 8009a66:	2317      	movs	r3, #23
 8009a68:	9902      	ldr	r1, [sp, #8]
 8009a6a:	9409      	str	r4, [sp, #36]	; 0x24
 8009a6c:	1a5b      	subs	r3, r3, r1
 8009a6e:	411a      	asrs	r2, r3
 8009a70:	9208      	str	r2, [sp, #32]
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dd6d      	ble.n	8009b54 <__kernel_rem_pio2+0x25c>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7c:	2080      	movs	r0, #128	; 0x80
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9309      	str	r3, [sp, #36]	; 0x24
 8009a82:	4b6c      	ldr	r3, [pc, #432]	; (8009c34 <__kernel_rem_pio2+0x33c>)
 8009a84:	0014      	movs	r4, r2
 8009a86:	469c      	mov	ip, r3
 8009a88:	2501      	movs	r5, #1
 8009a8a:	0440      	lsls	r0, r0, #17
 8009a8c:	9b04      	ldr	r3, [sp, #16]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	dd00      	ble.n	8009a94 <__kernel_rem_pio2+0x19c>
 8009a92:	e099      	b.n	8009bc8 <__kernel_rem_pio2+0x2d0>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dd05      	ble.n	8009aa6 <__kernel_rem_pio2+0x1ae>
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d100      	bne.n	8009aa0 <__kernel_rem_pio2+0x1a8>
 8009a9e:	e0a9      	b.n	8009bf4 <__kernel_rem_pio2+0x2fc>
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d100      	bne.n	8009aa6 <__kernel_rem_pio2+0x1ae>
 8009aa4:	e0b1      	b.n	8009c0a <__kernel_rem_pio2+0x312>
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d153      	bne.n	8009b54 <__kernel_rem_pio2+0x25c>
 8009aac:	0032      	movs	r2, r6
 8009aae:	003b      	movs	r3, r7
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	4961      	ldr	r1, [pc, #388]	; (8009c38 <__kernel_rem_pio2+0x340>)
 8009ab4:	f7f7 ffdc 	bl	8001a70 <__aeabi_dsub>
 8009ab8:	0006      	movs	r6, r0
 8009aba:	000f      	movs	r7, r1
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d049      	beq.n	8009b54 <__kernel_rem_pio2+0x25c>
 8009ac0:	9a02      	ldr	r2, [sp, #8]
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	495c      	ldr	r1, [pc, #368]	; (8009c38 <__kernel_rem_pio2+0x340>)
 8009ac6:	f000 fd05 	bl	800a4d4 <scalbn>
 8009aca:	0002      	movs	r2, r0
 8009acc:	000b      	movs	r3, r1
 8009ace:	0030      	movs	r0, r6
 8009ad0:	0039      	movs	r1, r7
 8009ad2:	f7f7 ffcd 	bl	8001a70 <__aeabi_dsub>
 8009ad6:	0006      	movs	r6, r0
 8009ad8:	000f      	movs	r7, r1
 8009ada:	e03b      	b.n	8009b54 <__kernel_rem_pio2+0x25c>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4b57      	ldr	r3, [pc, #348]	; (8009c3c <__kernel_rem_pio2+0x344>)
 8009ae0:	0020      	movs	r0, r4
 8009ae2:	0029      	movs	r1, r5
 8009ae4:	f7f7 fd58 	bl	8001598 <__aeabi_dmul>
 8009ae8:	f7f8 fb54 	bl	8002194 <__aeabi_d2iz>
 8009aec:	f7f8 fb88 	bl	8002200 <__aeabi_i2d>
 8009af0:	2200      	movs	r2, #0
 8009af2:	4b53      	ldr	r3, [pc, #332]	; (8009c40 <__kernel_rem_pio2+0x348>)
 8009af4:	0006      	movs	r6, r0
 8009af6:	000f      	movs	r7, r1
 8009af8:	f7f7 fd4e 	bl	8001598 <__aeabi_dmul>
 8009afc:	0002      	movs	r2, r0
 8009afe:	000b      	movs	r3, r1
 8009b00:	0020      	movs	r0, r4
 8009b02:	0029      	movs	r1, r5
 8009b04:	f7f7 ffb4 	bl	8001a70 <__aeabi_dsub>
 8009b08:	f7f8 fb44 	bl	8002194 <__aeabi_d2iz>
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b10:	c301      	stmia	r3!, {r0}
 8009b12:	9309      	str	r3, [sp, #36]	; 0x24
 8009b14:	9b08      	ldr	r3, [sp, #32]
 8009b16:	0030      	movs	r0, r6
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	9308      	str	r3, [sp, #32]
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	18d3      	adds	r3, r2, r3
 8009b20:	0039      	movs	r1, r7
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f7f6 fdf9 	bl	800071c <__aeabi_dadd>
 8009b2a:	0004      	movs	r4, r0
 8009b2c:	000d      	movs	r5, r1
 8009b2e:	e75d      	b.n	80099ec <__kernel_rem_pio2+0xf4>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d107      	bne.n	8009b46 <__kernel_rem_pio2+0x24e>
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	aa12      	add	r2, sp, #72	; 0x48
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	5898      	ldr	r0, [r3, r2]
 8009b40:	15c3      	asrs	r3, r0, #23
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	e795      	b.n	8009a72 <__kernel_rem_pio2+0x17a>
 8009b46:	2200      	movs	r2, #0
 8009b48:	4b3e      	ldr	r3, [pc, #248]	; (8009c44 <__kernel_rem_pio2+0x34c>)
 8009b4a:	f7f6 fc85 	bl	8000458 <__aeabi_dcmpge>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d137      	bne.n	8009bc2 <__kernel_rem_pio2+0x2ca>
 8009b52:	9008      	str	r0, [sp, #32]
 8009b54:	2200      	movs	r2, #0
 8009b56:	2300      	movs	r3, #0
 8009b58:	0030      	movs	r0, r6
 8009b5a:	0039      	movs	r1, r7
 8009b5c:	f7f6 fc58 	bl	8000410 <__aeabi_dcmpeq>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d100      	bne.n	8009b66 <__kernel_rem_pio2+0x26e>
 8009b64:	e0b9      	b.n	8009cda <__kernel_rem_pio2+0x3e2>
 8009b66:	2200      	movs	r2, #0
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b70:	428b      	cmp	r3, r1
 8009b72:	da53      	bge.n	8009c1c <__kernel_rem_pio2+0x324>
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	d100      	bne.n	8009b7a <__kernel_rem_pio2+0x282>
 8009b78:	e095      	b.n	8009ca6 <__kernel_rem_pio2+0x3ae>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	aa12      	add	r2, sp, #72	; 0x48
 8009b7e:	3b18      	subs	r3, #24
 8009b80:	9302      	str	r3, [sp, #8]
 8009b82:	9b00      	ldr	r3, [sp, #0]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	589b      	ldr	r3, [r3, r2]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d100      	bne.n	8009b8e <__kernel_rem_pio2+0x296>
 8009b8c:	e0a1      	b.n	8009cd2 <__kernel_rem_pio2+0x3da>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	9a02      	ldr	r2, [sp, #8]
 8009b92:	4929      	ldr	r1, [pc, #164]	; (8009c38 <__kernel_rem_pio2+0x340>)
 8009b94:	f000 fc9e 	bl	800a4d4 <scalbn>
 8009b98:	0006      	movs	r6, r0
 8009b9a:	000f      	movs	r7, r1
 8009b9c:	9c00      	ldr	r4, [sp, #0]
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	db00      	blt.n	8009ba4 <__kernel_rem_pio2+0x2ac>
 8009ba2:	e0d9      	b.n	8009d58 <__kernel_rem_pio2+0x460>
 8009ba4:	9c00      	ldr	r4, [sp, #0]
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	da00      	bge.n	8009bac <__kernel_rem_pio2+0x2b4>
 8009baa:	e10c      	b.n	8009dc6 <__kernel_rem_pio2+0x4ce>
 8009bac:	ab76      	add	r3, sp, #472	; 0x1d8
 8009bae:	00e6      	lsls	r6, r4, #3
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	18f6      	adds	r6, r6, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9202      	str	r2, [sp, #8]
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	1b1f      	subs	r7, r3, r4
 8009bc0:	e0f3      	b.n	8009daa <__kernel_rem_pio2+0x4b2>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	9308      	str	r3, [sp, #32]
 8009bc6:	e757      	b.n	8009a78 <__kernel_rem_pio2+0x180>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	d10b      	bne.n	8009be8 <__kernel_rem_pio2+0x2f0>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <__kernel_rem_pio2+0x2e4>
 8009bd4:	9c00      	ldr	r4, [sp, #0]
 8009bd6:	1ac3      	subs	r3, r0, r3
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	002b      	movs	r3, r5
 8009bdc:	9c00      	ldr	r4, [sp, #0]
 8009bde:	3201      	adds	r2, #1
 8009be0:	3404      	adds	r4, #4
 8009be2:	9400      	str	r4, [sp, #0]
 8009be4:	001c      	movs	r4, r3
 8009be6:	e751      	b.n	8009a8c <__kernel_rem_pio2+0x194>
 8009be8:	4661      	mov	r1, ip
 8009bea:	1acb      	subs	r3, r1, r3
 8009bec:	9900      	ldr	r1, [sp, #0]
 8009bee:	600b      	str	r3, [r1, #0]
 8009bf0:	0023      	movs	r3, r4
 8009bf2:	e7f3      	b.n	8009bdc <__kernel_rem_pio2+0x2e4>
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	aa12      	add	r2, sp, #72	; 0x48
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	589a      	ldr	r2, [r3, r2]
 8009bfe:	9200      	str	r2, [sp, #0]
 8009c00:	0252      	lsls	r2, r2, #9
 8009c02:	0a52      	lsrs	r2, r2, #9
 8009c04:	a912      	add	r1, sp, #72	; 0x48
 8009c06:	505a      	str	r2, [r3, r1]
 8009c08:	e74d      	b.n	8009aa6 <__kernel_rem_pio2+0x1ae>
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	aa12      	add	r2, sp, #72	; 0x48
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	589a      	ldr	r2, [r3, r2]
 8009c14:	9200      	str	r2, [sp, #0]
 8009c16:	0292      	lsls	r2, r2, #10
 8009c18:	0a92      	lsrs	r2, r2, #10
 8009c1a:	e7f3      	b.n	8009c04 <__kernel_rem_pio2+0x30c>
 8009c1c:	0099      	lsls	r1, r3, #2
 8009c1e:	a812      	add	r0, sp, #72	; 0x48
 8009c20:	5809      	ldr	r1, [r1, r0]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	430a      	orrs	r2, r1
 8009c26:	e7a2      	b.n	8009b6e <__kernel_rem_pio2+0x276>
 8009c28:	fffffd84 	.word	0xfffffd84
 8009c2c:	0800a910 	.word	0x0800a910
 8009c30:	40200000 	.word	0x40200000
 8009c34:	00ffffff 	.word	0x00ffffff
 8009c38:	3ff00000 	.word	0x3ff00000
 8009c3c:	3e700000 	.word	0x3e700000
 8009c40:	41700000 	.word	0x41700000
 8009c44:	3fe00000 	.word	0x3fe00000
 8009c48:	3301      	adds	r3, #1
 8009c4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009c4c:	009a      	lsls	r2, r3, #2
 8009c4e:	4252      	negs	r2, r2
 8009c50:	588a      	ldr	r2, [r1, r2]
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	d0f8      	beq.n	8009c48 <__kernel_rem_pio2+0x350>
 8009c56:	9a04      	ldr	r2, [sp, #16]
 8009c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c5a:	1c57      	adds	r7, r2, #1
 8009c5c:	1854      	adds	r4, r2, r1
 8009c5e:	00e4      	lsls	r4, r4, #3
 8009c60:	aa26      	add	r2, sp, #152	; 0x98
 8009c62:	1914      	adds	r4, r2, r4
 8009c64:	9a04      	ldr	r2, [sp, #16]
 8009c66:	18d3      	adds	r3, r2, r3
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	42bb      	cmp	r3, r7
 8009c6e:	da00      	bge.n	8009c72 <__kernel_rem_pio2+0x37a>
 8009c70:	e6b0      	b.n	80099d4 <__kernel_rem_pio2+0xdc>
 8009c72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c74:	00bb      	lsls	r3, r7, #2
 8009c76:	58d0      	ldr	r0, [r2, r3]
 8009c78:	f7f8 fac2 	bl	8002200 <__aeabi_i2d>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	0026      	movs	r6, r4
 8009c82:	2500      	movs	r5, #0
 8009c84:	6020      	str	r0, [r4, #0]
 8009c86:	6061      	str	r1, [r4, #4]
 8009c88:	9200      	str	r2, [sp, #0]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	dd0b      	ble.n	8009caa <__kernel_rem_pio2+0x3b2>
 8009c92:	00fb      	lsls	r3, r7, #3
 8009c94:	aa76      	add	r2, sp, #472	; 0x1d8
 8009c96:	18d3      	adds	r3, r2, r3
 8009c98:	3701      	adds	r7, #1
 8009c9a:	9900      	ldr	r1, [sp, #0]
 8009c9c:	9a01      	ldr	r2, [sp, #4]
 8009c9e:	3408      	adds	r4, #8
 8009ca0:	6019      	str	r1, [r3, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
 8009ca4:	e7e1      	b.n	8009c6a <__kernel_rem_pio2+0x372>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7cf      	b.n	8009c4a <__kernel_rem_pio2+0x352>
 8009caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cac:	00e9      	lsls	r1, r5, #3
 8009cae:	1859      	adds	r1, r3, r1
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	6849      	ldr	r1, [r1, #4]
 8009cb4:	6832      	ldr	r2, [r6, #0]
 8009cb6:	6873      	ldr	r3, [r6, #4]
 8009cb8:	f7f7 fc6e 	bl	8001598 <__aeabi_dmul>
 8009cbc:	0002      	movs	r2, r0
 8009cbe:	000b      	movs	r3, r1
 8009cc0:	9800      	ldr	r0, [sp, #0]
 8009cc2:	9901      	ldr	r1, [sp, #4]
 8009cc4:	f7f6 fd2a 	bl	800071c <__aeabi_dadd>
 8009cc8:	3501      	adds	r5, #1
 8009cca:	9000      	str	r0, [sp, #0]
 8009ccc:	9101      	str	r1, [sp, #4]
 8009cce:	3e08      	subs	r6, #8
 8009cd0:	e7dc      	b.n	8009c8c <__kernel_rem_pio2+0x394>
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	e74f      	b.n	8009b7a <__kernel_rem_pio2+0x282>
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	0030      	movs	r0, r6
 8009cde:	425a      	negs	r2, r3
 8009ce0:	0039      	movs	r1, r7
 8009ce2:	f000 fbf7 	bl	800a4d4 <scalbn>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4bb5      	ldr	r3, [pc, #724]	; (8009fc0 <__kernel_rem_pio2+0x6c8>)
 8009cea:	0004      	movs	r4, r0
 8009cec:	000d      	movs	r5, r1
 8009cee:	f7f6 fbb3 	bl	8000458 <__aeabi_dcmpge>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d025      	beq.n	8009d42 <__kernel_rem_pio2+0x44a>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4bb2      	ldr	r3, [pc, #712]	; (8009fc4 <__kernel_rem_pio2+0x6cc>)
 8009cfa:	0020      	movs	r0, r4
 8009cfc:	0029      	movs	r1, r5
 8009cfe:	f7f7 fc4b 	bl	8001598 <__aeabi_dmul>
 8009d02:	f7f8 fa47 	bl	8002194 <__aeabi_d2iz>
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	0006      	movs	r6, r0
 8009d0a:	009f      	lsls	r7, r3, #2
 8009d0c:	f7f8 fa78 	bl	8002200 <__aeabi_i2d>
 8009d10:	2200      	movs	r2, #0
 8009d12:	4bab      	ldr	r3, [pc, #684]	; (8009fc0 <__kernel_rem_pio2+0x6c8>)
 8009d14:	f7f7 fc40 	bl	8001598 <__aeabi_dmul>
 8009d18:	0002      	movs	r2, r0
 8009d1a:	000b      	movs	r3, r1
 8009d1c:	0020      	movs	r0, r4
 8009d1e:	0029      	movs	r1, r5
 8009d20:	f7f7 fea6 	bl	8001a70 <__aeabi_dsub>
 8009d24:	f7f8 fa36 	bl	8002194 <__aeabi_d2iz>
 8009d28:	ab12      	add	r3, sp, #72	; 0x48
 8009d2a:	51d8      	str	r0, [r3, r7]
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	aa12      	add	r2, sp, #72	; 0x48
 8009d30:	3301      	adds	r3, #1
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	3318      	adds	r3, #24
 8009d38:	9302      	str	r3, [sp, #8]
 8009d3a:	9b00      	ldr	r3, [sp, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	509e      	str	r6, [r3, r2]
 8009d40:	e725      	b.n	8009b8e <__kernel_rem_pio2+0x296>
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	0020      	movs	r0, r4
 8009d46:	0029      	movs	r1, r5
 8009d48:	009e      	lsls	r6, r3, #2
 8009d4a:	f7f8 fa23 	bl	8002194 <__aeabi_d2iz>
 8009d4e:	ab12      	add	r3, sp, #72	; 0x48
 8009d50:	5198      	str	r0, [r3, r6]
 8009d52:	9b04      	ldr	r3, [sp, #16]
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	e71a      	b.n	8009b8e <__kernel_rem_pio2+0x296>
 8009d58:	00e5      	lsls	r5, r4, #3
 8009d5a:	ab76      	add	r3, sp, #472	; 0x1d8
 8009d5c:	aa12      	add	r2, sp, #72	; 0x48
 8009d5e:	195d      	adds	r5, r3, r5
 8009d60:	00a3      	lsls	r3, r4, #2
 8009d62:	5898      	ldr	r0, [r3, r2]
 8009d64:	f7f8 fa4c 	bl	8002200 <__aeabi_i2d>
 8009d68:	0032      	movs	r2, r6
 8009d6a:	003b      	movs	r3, r7
 8009d6c:	f7f7 fc14 	bl	8001598 <__aeabi_dmul>
 8009d70:	2200      	movs	r2, #0
 8009d72:	6028      	str	r0, [r5, #0]
 8009d74:	6069      	str	r1, [r5, #4]
 8009d76:	4b93      	ldr	r3, [pc, #588]	; (8009fc4 <__kernel_rem_pio2+0x6cc>)
 8009d78:	0030      	movs	r0, r6
 8009d7a:	0039      	movs	r1, r7
 8009d7c:	f7f7 fc0c 	bl	8001598 <__aeabi_dmul>
 8009d80:	3c01      	subs	r4, #1
 8009d82:	0006      	movs	r6, r0
 8009d84:	000f      	movs	r7, r1
 8009d86:	e70a      	b.n	8009b9e <__kernel_rem_pio2+0x2a6>
 8009d88:	4b8f      	ldr	r3, [pc, #572]	; (8009fc8 <__kernel_rem_pio2+0x6d0>)
 8009d8a:	00e9      	lsls	r1, r5, #3
 8009d8c:	1859      	adds	r1, r3, r1
 8009d8e:	6808      	ldr	r0, [r1, #0]
 8009d90:	6849      	ldr	r1, [r1, #4]
 8009d92:	ce0c      	ldmia	r6!, {r2, r3}
 8009d94:	f7f7 fc00 	bl	8001598 <__aeabi_dmul>
 8009d98:	0002      	movs	r2, r0
 8009d9a:	000b      	movs	r3, r1
 8009d9c:	9802      	ldr	r0, [sp, #8]
 8009d9e:	9903      	ldr	r1, [sp, #12]
 8009da0:	f7f6 fcbc 	bl	800071c <__aeabi_dadd>
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	9103      	str	r1, [sp, #12]
 8009da8:	3501      	adds	r5, #1
 8009daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dac:	429d      	cmp	r5, r3
 8009dae:	dc01      	bgt.n	8009db4 <__kernel_rem_pio2+0x4bc>
 8009db0:	42bd      	cmp	r5, r7
 8009db2:	dde9      	ble.n	8009d88 <__kernel_rem_pio2+0x490>
 8009db4:	ab4e      	add	r3, sp, #312	; 0x138
 8009db6:	00ff      	lsls	r7, r7, #3
 8009db8:	19df      	adds	r7, r3, r7
 8009dba:	3c01      	subs	r4, #1
 8009dbc:	9a02      	ldr	r2, [sp, #8]
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	603a      	str	r2, [r7, #0]
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	e6ef      	b.n	8009ba6 <__kernel_rem_pio2+0x2ae>
 8009dc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	dc0e      	bgt.n	8009dea <__kernel_rem_pio2+0x4f2>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dd00      	ble.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009dd0:	e08c      	b.n	8009eec <__kernel_rem_pio2+0x5f4>
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	002c      	movs	r4, r5
 8009dd6:	42ab      	cmp	r3, r5
 8009dd8:	d046      	beq.n	8009e68 <__kernel_rem_pio2+0x570>
 8009dda:	2007      	movs	r0, #7
 8009ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dde:	4003      	ands	r3, r0
 8009de0:	0018      	movs	r0, r3
 8009de2:	239f      	movs	r3, #159	; 0x9f
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	449d      	add	sp, r3
 8009de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dea:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d1f4      	bne.n	8009dda <__kernel_rem_pio2+0x4e2>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	00dc      	lsls	r4, r3, #3
 8009df4:	ab4e      	add	r3, sp, #312	; 0x138
 8009df6:	191c      	adds	r4, r3, r4
 8009df8:	0025      	movs	r5, r4
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	9302      	str	r3, [sp, #8]
 8009dfe:	9b02      	ldr	r3, [sp, #8]
 8009e00:	3d08      	subs	r5, #8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dd00      	ble.n	8009e08 <__kernel_rem_pio2+0x510>
 8009e06:	e07f      	b.n	8009f08 <__kernel_rem_pio2+0x610>
 8009e08:	9d00      	ldr	r5, [sp, #0]
 8009e0a:	3c08      	subs	r4, #8
 8009e0c:	2d01      	cmp	r5, #1
 8009e0e:	dd00      	ble.n	8009e12 <__kernel_rem_pio2+0x51a>
 8009e10:	e09c      	b.n	8009f4c <__kernel_rem_pio2+0x654>
 8009e12:	2400      	movs	r4, #0
 8009e14:	0021      	movs	r1, r4
 8009e16:	9b00      	ldr	r3, [sp, #0]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	dd00      	ble.n	8009e1e <__kernel_rem_pio2+0x526>
 8009e1c:	e0b4      	b.n	8009f88 <__kernel_rem_pio2+0x690>
 8009e1e:	9b08      	ldr	r3, [sp, #32]
 8009e20:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8009e22:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8009e24:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8009e26:	9851      	ldr	r0, [sp, #324]	; 0x144
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d000      	beq.n	8009e2e <__kernel_rem_pio2+0x536>
 8009e2c:	e0ba      	b.n	8009fa4 <__kernel_rem_pio2+0x6ac>
 8009e2e:	0033      	movs	r3, r6
 8009e30:	003a      	movs	r2, r7
 8009e32:	9e07      	ldr	r6, [sp, #28]
 8009e34:	6032      	str	r2, [r6, #0]
 8009e36:	6073      	str	r3, [r6, #4]
 8009e38:	002a      	movs	r2, r5
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	60b2      	str	r2, [r6, #8]
 8009e3e:	60f3      	str	r3, [r6, #12]
 8009e40:	0022      	movs	r2, r4
 8009e42:	000b      	movs	r3, r1
 8009e44:	6132      	str	r2, [r6, #16]
 8009e46:	6173      	str	r3, [r6, #20]
 8009e48:	e7c7      	b.n	8009dda <__kernel_rem_pio2+0x4e2>
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	aa4e      	add	r2, sp, #312	; 0x138
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	18d3      	adds	r3, r2, r3
 8009e52:	0028      	movs	r0, r5
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	0021      	movs	r1, r4
 8009e5a:	f7f6 fc5f 	bl	800071c <__aeabi_dadd>
 8009e5e:	0005      	movs	r5, r0
 8009e60:	000c      	movs	r4, r1
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	9b00      	ldr	r3, [sp, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	daed      	bge.n	8009e4a <__kernel_rem_pio2+0x552>
 8009e6e:	9b08      	ldr	r3, [sp, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <__kernel_rem_pio2+0x582>
 8009e74:	2380      	movs	r3, #128	; 0x80
 8009e76:	061b      	lsls	r3, r3, #24
 8009e78:	18e4      	adds	r4, r4, r3
 8009e7a:	002a      	movs	r2, r5
 8009e7c:	0023      	movs	r3, r4
 8009e7e:	9907      	ldr	r1, [sp, #28]
 8009e80:	600a      	str	r2, [r1, #0]
 8009e82:	604b      	str	r3, [r1, #4]
 8009e84:	e7a9      	b.n	8009dda <__kernel_rem_pio2+0x4e2>
 8009e86:	00e3      	lsls	r3, r4, #3
 8009e88:	aa4e      	add	r2, sp, #312	; 0x138
 8009e8a:	18d3      	adds	r3, r2, r3
 8009e8c:	0030      	movs	r0, r6
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	0029      	movs	r1, r5
 8009e94:	f7f6 fc42 	bl	800071c <__aeabi_dadd>
 8009e98:	0006      	movs	r6, r0
 8009e9a:	000d      	movs	r5, r1
 8009e9c:	3c01      	subs	r4, #1
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	daf1      	bge.n	8009e86 <__kernel_rem_pio2+0x58e>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	0029      	movs	r1, r5
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <__kernel_rem_pio2+0x5b8>
 8009eaa:	2380      	movs	r3, #128	; 0x80
 8009eac:	061b      	lsls	r3, r3, #24
 8009eae:	18e9      	adds	r1, r5, r3
 8009eb0:	0032      	movs	r2, r6
 8009eb2:	000b      	movs	r3, r1
 8009eb4:	9907      	ldr	r1, [sp, #28]
 8009eb6:	2401      	movs	r4, #1
 8009eb8:	600a      	str	r2, [r1, #0]
 8009eba:	604b      	str	r3, [r1, #4]
 8009ebc:	984e      	ldr	r0, [sp, #312]	; 0x138
 8009ebe:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8009ec0:	002b      	movs	r3, r5
 8009ec2:	f7f7 fdd5 	bl	8001a70 <__aeabi_dsub>
 8009ec6:	0007      	movs	r7, r0
 8009ec8:	000e      	movs	r6, r1
 8009eca:	ad4e      	add	r5, sp, #312	; 0x138
 8009ecc:	9b00      	ldr	r3, [sp, #0]
 8009ece:	3508      	adds	r5, #8
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	da0f      	bge.n	8009ef4 <__kernel_rem_pio2+0x5fc>
 8009ed4:	9b08      	ldr	r3, [sp, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <__kernel_rem_pio2+0x5e8>
 8009eda:	2380      	movs	r3, #128	; 0x80
 8009edc:	061b      	lsls	r3, r3, #24
 8009ede:	18f6      	adds	r6, r6, r3
 8009ee0:	003a      	movs	r2, r7
 8009ee2:	0033      	movs	r3, r6
 8009ee4:	9907      	ldr	r1, [sp, #28]
 8009ee6:	608a      	str	r2, [r1, #8]
 8009ee8:	60cb      	str	r3, [r1, #12]
 8009eea:	e776      	b.n	8009dda <__kernel_rem_pio2+0x4e2>
 8009eec:	2600      	movs	r6, #0
 8009eee:	9c00      	ldr	r4, [sp, #0]
 8009ef0:	0035      	movs	r5, r6
 8009ef2:	e7d4      	b.n	8009e9e <__kernel_rem_pio2+0x5a6>
 8009ef4:	0038      	movs	r0, r7
 8009ef6:	682a      	ldr	r2, [r5, #0]
 8009ef8:	686b      	ldr	r3, [r5, #4]
 8009efa:	0031      	movs	r1, r6
 8009efc:	f7f6 fc0e 	bl	800071c <__aeabi_dadd>
 8009f00:	3401      	adds	r4, #1
 8009f02:	0007      	movs	r7, r0
 8009f04:	000e      	movs	r6, r1
 8009f06:	e7e1      	b.n	8009ecc <__kernel_rem_pio2+0x5d4>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	68ae      	ldr	r6, [r5, #8]
 8009f0c:	68ef      	ldr	r7, [r5, #12]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	9302      	str	r3, [sp, #8]
 8009f12:	682a      	ldr	r2, [r5, #0]
 8009f14:	686b      	ldr	r3, [r5, #4]
 8009f16:	9204      	str	r2, [sp, #16]
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	9804      	ldr	r0, [sp, #16]
 8009f1c:	9905      	ldr	r1, [sp, #20]
 8009f1e:	0032      	movs	r2, r6
 8009f20:	003b      	movs	r3, r7
 8009f22:	f7f6 fbfb 	bl	800071c <__aeabi_dadd>
 8009f26:	0002      	movs	r2, r0
 8009f28:	000b      	movs	r3, r1
 8009f2a:	900a      	str	r0, [sp, #40]	; 0x28
 8009f2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f2e:	9804      	ldr	r0, [sp, #16]
 8009f30:	9905      	ldr	r1, [sp, #20]
 8009f32:	f7f7 fd9d 	bl	8001a70 <__aeabi_dsub>
 8009f36:	0032      	movs	r2, r6
 8009f38:	003b      	movs	r3, r7
 8009f3a:	f7f6 fbef 	bl	800071c <__aeabi_dadd>
 8009f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f42:	60a8      	str	r0, [r5, #8]
 8009f44:	60e9      	str	r1, [r5, #12]
 8009f46:	602a      	str	r2, [r5, #0]
 8009f48:	606b      	str	r3, [r5, #4]
 8009f4a:	e758      	b.n	8009dfe <__kernel_rem_pio2+0x506>
 8009f4c:	6826      	ldr	r6, [r4, #0]
 8009f4e:	6867      	ldr	r7, [r4, #4]
 8009f50:	68a2      	ldr	r2, [r4, #8]
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	0030      	movs	r0, r6
 8009f56:	0039      	movs	r1, r7
 8009f58:	9202      	str	r2, [sp, #8]
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	f7f6 fbde 	bl	800071c <__aeabi_dadd>
 8009f60:	0002      	movs	r2, r0
 8009f62:	000b      	movs	r3, r1
 8009f64:	9004      	str	r0, [sp, #16]
 8009f66:	9105      	str	r1, [sp, #20]
 8009f68:	0030      	movs	r0, r6
 8009f6a:	0039      	movs	r1, r7
 8009f6c:	f7f7 fd80 	bl	8001a70 <__aeabi_dsub>
 8009f70:	9a02      	ldr	r2, [sp, #8]
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	f7f6 fbd2 	bl	800071c <__aeabi_dadd>
 8009f78:	9a04      	ldr	r2, [sp, #16]
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	60a0      	str	r0, [r4, #8]
 8009f7e:	60e1      	str	r1, [r4, #12]
 8009f80:	6022      	str	r2, [r4, #0]
 8009f82:	6063      	str	r3, [r4, #4]
 8009f84:	3d01      	subs	r5, #1
 8009f86:	e740      	b.n	8009e0a <__kernel_rem_pio2+0x512>
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	aa4e      	add	r2, sp, #312	; 0x138
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	18d3      	adds	r3, r2, r3
 8009f90:	0020      	movs	r0, r4
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f7f6 fbc1 	bl	800071c <__aeabi_dadd>
 8009f9a:	9b00      	ldr	r3, [sp, #0]
 8009f9c:	0004      	movs	r4, r0
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	e738      	b.n	8009e16 <__kernel_rem_pio2+0x51e>
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	9a07      	ldr	r2, [sp, #28]
 8009fa8:	601f      	str	r7, [r3, #0]
 8009faa:	2380      	movs	r3, #128	; 0x80
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	18f6      	adds	r6, r6, r3
 8009fb0:	18c0      	adds	r0, r0, r3
 8009fb2:	18c9      	adds	r1, r1, r3
 8009fb4:	6056      	str	r6, [r2, #4]
 8009fb6:	6095      	str	r5, [r2, #8]
 8009fb8:	60d0      	str	r0, [r2, #12]
 8009fba:	6114      	str	r4, [r2, #16]
 8009fbc:	6151      	str	r1, [r2, #20]
 8009fbe:	e70c      	b.n	8009dda <__kernel_rem_pio2+0x4e2>
 8009fc0:	41700000 	.word	0x41700000
 8009fc4:	3e700000 	.word	0x3e700000
 8009fc8:	0800a8d0 	.word	0x0800a8d0

08009fcc <__kernel_tan>:
 8009fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fce:	b08f      	sub	sp, #60	; 0x3c
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	004b      	lsls	r3, r1, #1
 8009fd4:	085b      	lsrs	r3, r3, #1
 8009fd6:	9306      	str	r3, [sp, #24]
 8009fd8:	9204      	str	r2, [sp, #16]
 8009fda:	4bd5      	ldr	r3, [pc, #852]	; (800a330 <__kernel_tan+0x364>)
 8009fdc:	9a06      	ldr	r2, [sp, #24]
 8009fde:	9001      	str	r0, [sp, #4]
 8009fe0:	9100      	str	r1, [sp, #0]
 8009fe2:	9108      	str	r1, [sp, #32]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	dc5f      	bgt.n	800a0a8 <__kernel_tan+0xdc>
 8009fe8:	9801      	ldr	r0, [sp, #4]
 8009fea:	9900      	ldr	r1, [sp, #0]
 8009fec:	f7f8 f8d2 	bl	8002194 <__aeabi_d2iz>
 8009ff0:	1e04      	subs	r4, r0, #0
 8009ff2:	d000      	beq.n	8009ff6 <__kernel_tan+0x2a>
 8009ff4:	e07f      	b.n	800a0f6 <__kernel_tan+0x12a>
 8009ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ff8:	9a01      	ldr	r2, [sp, #4]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	9a06      	ldr	r2, [sp, #24]
 800a000:	4313      	orrs	r3, r2
 800a002:	d10f      	bne.n	800a024 <__kernel_tan+0x58>
 800a004:	9801      	ldr	r0, [sp, #4]
 800a006:	9900      	ldr	r1, [sp, #0]
 800a008:	f000 f9d6 	bl	800a3b8 <fabs>
 800a00c:	0002      	movs	r2, r0
 800a00e:	000b      	movs	r3, r1
 800a010:	2000      	movs	r0, #0
 800a012:	49c8      	ldr	r1, [pc, #800]	; (800a334 <__kernel_tan+0x368>)
 800a014:	f7f6 febe 	bl	8000d94 <__aeabi_ddiv>
 800a018:	9001      	str	r0, [sp, #4]
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	9801      	ldr	r0, [sp, #4]
 800a01e:	9900      	ldr	r1, [sp, #0]
 800a020:	b00f      	add	sp, #60	; 0x3c
 800a022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a024:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a026:	2b01      	cmp	r3, #1
 800a028:	d0f8      	beq.n	800a01c <__kernel_tan+0x50>
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	9801      	ldr	r0, [sp, #4]
 800a030:	9900      	ldr	r1, [sp, #0]
 800a032:	f7f6 fb73 	bl	800071c <__aeabi_dadd>
 800a036:	0002      	movs	r2, r0
 800a038:	0020      	movs	r0, r4
 800a03a:	000b      	movs	r3, r1
 800a03c:	9006      	str	r0, [sp, #24]
 800a03e:	9107      	str	r1, [sp, #28]
 800a040:	2000      	movs	r0, #0
 800a042:	49bd      	ldr	r1, [pc, #756]	; (800a338 <__kernel_tan+0x36c>)
 800a044:	f7f6 fea6 	bl	8000d94 <__aeabi_ddiv>
 800a048:	9a01      	ldr	r2, [sp, #4]
 800a04a:	9008      	str	r0, [sp, #32]
 800a04c:	9109      	str	r1, [sp, #36]	; 0x24
 800a04e:	9806      	ldr	r0, [sp, #24]
 800a050:	9907      	ldr	r1, [sp, #28]
 800a052:	9e08      	ldr	r6, [sp, #32]
 800a054:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	f7f7 fd0a 	bl	8001a70 <__aeabi_dsub>
 800a05c:	0002      	movs	r2, r0
 800a05e:	000b      	movs	r3, r1
 800a060:	9804      	ldr	r0, [sp, #16]
 800a062:	9902      	ldr	r1, [sp, #8]
 800a064:	f7f7 fd04 	bl	8001a70 <__aeabi_dsub>
 800a068:	0022      	movs	r2, r4
 800a06a:	003b      	movs	r3, r7
 800a06c:	f7f7 fa94 	bl	8001598 <__aeabi_dmul>
 800a070:	0026      	movs	r6, r4
 800a072:	000d      	movs	r5, r1
 800a074:	0004      	movs	r4, r0
 800a076:	9806      	ldr	r0, [sp, #24]
 800a078:	9907      	ldr	r1, [sp, #28]
 800a07a:	0032      	movs	r2, r6
 800a07c:	003b      	movs	r3, r7
 800a07e:	f7f7 fa8b 	bl	8001598 <__aeabi_dmul>
 800a082:	2200      	movs	r2, #0
 800a084:	4bab      	ldr	r3, [pc, #684]	; (800a334 <__kernel_tan+0x368>)
 800a086:	f7f6 fb49 	bl	800071c <__aeabi_dadd>
 800a08a:	0002      	movs	r2, r0
 800a08c:	000b      	movs	r3, r1
 800a08e:	0020      	movs	r0, r4
 800a090:	0029      	movs	r1, r5
 800a092:	f7f6 fb43 	bl	800071c <__aeabi_dadd>
 800a096:	9a08      	ldr	r2, [sp, #32]
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	f7f7 fa7d 	bl	8001598 <__aeabi_dmul>
 800a09e:	0032      	movs	r2, r6
 800a0a0:	003b      	movs	r3, r7
 800a0a2:	f7f6 fb3b 	bl	800071c <__aeabi_dadd>
 800a0a6:	e7b7      	b.n	800a018 <__kernel_tan+0x4c>
 800a0a8:	4ba4      	ldr	r3, [pc, #656]	; (800a33c <__kernel_tan+0x370>)
 800a0aa:	9a06      	ldr	r2, [sp, #24]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	dd22      	ble.n	800a0f6 <__kernel_tan+0x12a>
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da08      	bge.n	800a0c8 <__kernel_tan+0xfc>
 800a0b6:	2080      	movs	r0, #128	; 0x80
 800a0b8:	0600      	lsls	r0, r0, #24
 800a0ba:	4684      	mov	ip, r0
 800a0bc:	9900      	ldr	r1, [sp, #0]
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	4461      	add	r1, ip
 800a0c2:	4463      	add	r3, ip
 800a0c4:	9100      	str	r1, [sp, #0]
 800a0c6:	9302      	str	r3, [sp, #8]
 800a0c8:	9a01      	ldr	r2, [sp, #4]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	489c      	ldr	r0, [pc, #624]	; (800a340 <__kernel_tan+0x374>)
 800a0ce:	499d      	ldr	r1, [pc, #628]	; (800a344 <__kernel_tan+0x378>)
 800a0d0:	f7f7 fcce 	bl	8001a70 <__aeabi_dsub>
 800a0d4:	0004      	movs	r4, r0
 800a0d6:	000d      	movs	r5, r1
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	9b02      	ldr	r3, [sp, #8]
 800a0dc:	489a      	ldr	r0, [pc, #616]	; (800a348 <__kernel_tan+0x37c>)
 800a0de:	499b      	ldr	r1, [pc, #620]	; (800a34c <__kernel_tan+0x380>)
 800a0e0:	f7f7 fcc6 	bl	8001a70 <__aeabi_dsub>
 800a0e4:	002b      	movs	r3, r5
 800a0e6:	0022      	movs	r2, r4
 800a0e8:	f7f6 fb18 	bl	800071c <__aeabi_dadd>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	9100      	str	r1, [sp, #0]
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	9302      	str	r3, [sp, #8]
 800a0f6:	9a01      	ldr	r2, [sp, #4]
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	0010      	movs	r0, r2
 800a0fc:	0019      	movs	r1, r3
 800a0fe:	f7f7 fa4b 	bl	8001598 <__aeabi_dmul>
 800a102:	0002      	movs	r2, r0
 800a104:	000b      	movs	r3, r1
 800a106:	0006      	movs	r6, r0
 800a108:	000f      	movs	r7, r1
 800a10a:	f7f7 fa45 	bl	8001598 <__aeabi_dmul>
 800a10e:	0032      	movs	r2, r6
 800a110:	0004      	movs	r4, r0
 800a112:	000d      	movs	r5, r1
 800a114:	003b      	movs	r3, r7
 800a116:	9801      	ldr	r0, [sp, #4]
 800a118:	9900      	ldr	r1, [sp, #0]
 800a11a:	f7f7 fa3d 	bl	8001598 <__aeabi_dmul>
 800a11e:	4a8c      	ldr	r2, [pc, #560]	; (800a350 <__kernel_tan+0x384>)
 800a120:	900a      	str	r0, [sp, #40]	; 0x28
 800a122:	910b      	str	r1, [sp, #44]	; 0x2c
 800a124:	4b8b      	ldr	r3, [pc, #556]	; (800a354 <__kernel_tan+0x388>)
 800a126:	0020      	movs	r0, r4
 800a128:	0029      	movs	r1, r5
 800a12a:	f7f7 fa35 	bl	8001598 <__aeabi_dmul>
 800a12e:	4a8a      	ldr	r2, [pc, #552]	; (800a358 <__kernel_tan+0x38c>)
 800a130:	4b8a      	ldr	r3, [pc, #552]	; (800a35c <__kernel_tan+0x390>)
 800a132:	f7f6 faf3 	bl	800071c <__aeabi_dadd>
 800a136:	0022      	movs	r2, r4
 800a138:	002b      	movs	r3, r5
 800a13a:	f7f7 fa2d 	bl	8001598 <__aeabi_dmul>
 800a13e:	4a88      	ldr	r2, [pc, #544]	; (800a360 <__kernel_tan+0x394>)
 800a140:	4b88      	ldr	r3, [pc, #544]	; (800a364 <__kernel_tan+0x398>)
 800a142:	f7f6 faeb 	bl	800071c <__aeabi_dadd>
 800a146:	0022      	movs	r2, r4
 800a148:	002b      	movs	r3, r5
 800a14a:	f7f7 fa25 	bl	8001598 <__aeabi_dmul>
 800a14e:	4a86      	ldr	r2, [pc, #536]	; (800a368 <__kernel_tan+0x39c>)
 800a150:	4b86      	ldr	r3, [pc, #536]	; (800a36c <__kernel_tan+0x3a0>)
 800a152:	f7f6 fae3 	bl	800071c <__aeabi_dadd>
 800a156:	0022      	movs	r2, r4
 800a158:	002b      	movs	r3, r5
 800a15a:	f7f7 fa1d 	bl	8001598 <__aeabi_dmul>
 800a15e:	4a84      	ldr	r2, [pc, #528]	; (800a370 <__kernel_tan+0x3a4>)
 800a160:	4b84      	ldr	r3, [pc, #528]	; (800a374 <__kernel_tan+0x3a8>)
 800a162:	f7f6 fadb 	bl	800071c <__aeabi_dadd>
 800a166:	0022      	movs	r2, r4
 800a168:	002b      	movs	r3, r5
 800a16a:	f7f7 fa15 	bl	8001598 <__aeabi_dmul>
 800a16e:	4a82      	ldr	r2, [pc, #520]	; (800a378 <__kernel_tan+0x3ac>)
 800a170:	4b82      	ldr	r3, [pc, #520]	; (800a37c <__kernel_tan+0x3b0>)
 800a172:	f7f6 fad3 	bl	800071c <__aeabi_dadd>
 800a176:	0032      	movs	r2, r6
 800a178:	003b      	movs	r3, r7
 800a17a:	f7f7 fa0d 	bl	8001598 <__aeabi_dmul>
 800a17e:	4a80      	ldr	r2, [pc, #512]	; (800a380 <__kernel_tan+0x3b4>)
 800a180:	900c      	str	r0, [sp, #48]	; 0x30
 800a182:	910d      	str	r1, [sp, #52]	; 0x34
 800a184:	4b7f      	ldr	r3, [pc, #508]	; (800a384 <__kernel_tan+0x3b8>)
 800a186:	0020      	movs	r0, r4
 800a188:	0029      	movs	r1, r5
 800a18a:	f7f7 fa05 	bl	8001598 <__aeabi_dmul>
 800a18e:	4a7e      	ldr	r2, [pc, #504]	; (800a388 <__kernel_tan+0x3bc>)
 800a190:	4b7e      	ldr	r3, [pc, #504]	; (800a38c <__kernel_tan+0x3c0>)
 800a192:	f7f6 fac3 	bl	800071c <__aeabi_dadd>
 800a196:	0022      	movs	r2, r4
 800a198:	002b      	movs	r3, r5
 800a19a:	f7f7 f9fd 	bl	8001598 <__aeabi_dmul>
 800a19e:	4a7c      	ldr	r2, [pc, #496]	; (800a390 <__kernel_tan+0x3c4>)
 800a1a0:	4b7c      	ldr	r3, [pc, #496]	; (800a394 <__kernel_tan+0x3c8>)
 800a1a2:	f7f6 fabb 	bl	800071c <__aeabi_dadd>
 800a1a6:	0022      	movs	r2, r4
 800a1a8:	002b      	movs	r3, r5
 800a1aa:	f7f7 f9f5 	bl	8001598 <__aeabi_dmul>
 800a1ae:	4a7a      	ldr	r2, [pc, #488]	; (800a398 <__kernel_tan+0x3cc>)
 800a1b0:	4b7a      	ldr	r3, [pc, #488]	; (800a39c <__kernel_tan+0x3d0>)
 800a1b2:	f7f6 fab3 	bl	800071c <__aeabi_dadd>
 800a1b6:	0022      	movs	r2, r4
 800a1b8:	002b      	movs	r3, r5
 800a1ba:	f7f7 f9ed 	bl	8001598 <__aeabi_dmul>
 800a1be:	4a78      	ldr	r2, [pc, #480]	; (800a3a0 <__kernel_tan+0x3d4>)
 800a1c0:	4b78      	ldr	r3, [pc, #480]	; (800a3a4 <__kernel_tan+0x3d8>)
 800a1c2:	f7f6 faab 	bl	800071c <__aeabi_dadd>
 800a1c6:	0022      	movs	r2, r4
 800a1c8:	002b      	movs	r3, r5
 800a1ca:	f7f7 f9e5 	bl	8001598 <__aeabi_dmul>
 800a1ce:	4a76      	ldr	r2, [pc, #472]	; (800a3a8 <__kernel_tan+0x3dc>)
 800a1d0:	4b76      	ldr	r3, [pc, #472]	; (800a3ac <__kernel_tan+0x3e0>)
 800a1d2:	f7f6 faa3 	bl	800071c <__aeabi_dadd>
 800a1d6:	0002      	movs	r2, r0
 800a1d8:	000b      	movs	r3, r1
 800a1da:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1de:	f7f6 fa9d 	bl	800071c <__aeabi_dadd>
 800a1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e6:	f7f7 f9d7 	bl	8001598 <__aeabi_dmul>
 800a1ea:	9a04      	ldr	r2, [sp, #16]
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	f7f6 fa95 	bl	800071c <__aeabi_dadd>
 800a1f2:	0032      	movs	r2, r6
 800a1f4:	003b      	movs	r3, r7
 800a1f6:	f7f7 f9cf 	bl	8001598 <__aeabi_dmul>
 800a1fa:	9a04      	ldr	r2, [sp, #16]
 800a1fc:	9b02      	ldr	r3, [sp, #8]
 800a1fe:	f7f6 fa8d 	bl	800071c <__aeabi_dadd>
 800a202:	0004      	movs	r4, r0
 800a204:	000d      	movs	r5, r1
 800a206:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a20a:	4a69      	ldr	r2, [pc, #420]	; (800a3b0 <__kernel_tan+0x3e4>)
 800a20c:	4b69      	ldr	r3, [pc, #420]	; (800a3b4 <__kernel_tan+0x3e8>)
 800a20e:	f7f7 f9c3 	bl	8001598 <__aeabi_dmul>
 800a212:	0022      	movs	r2, r4
 800a214:	002b      	movs	r3, r5
 800a216:	f7f6 fa81 	bl	800071c <__aeabi_dadd>
 800a21a:	0002      	movs	r2, r0
 800a21c:	000b      	movs	r3, r1
 800a21e:	0004      	movs	r4, r0
 800a220:	000d      	movs	r5, r1
 800a222:	9801      	ldr	r0, [sp, #4]
 800a224:	9900      	ldr	r1, [sp, #0]
 800a226:	f7f6 fa79 	bl	800071c <__aeabi_dadd>
 800a22a:	4b44      	ldr	r3, [pc, #272]	; (800a33c <__kernel_tan+0x370>)
 800a22c:	9a06      	ldr	r2, [sp, #24]
 800a22e:	0006      	movs	r6, r0
 800a230:	000f      	movs	r7, r1
 800a232:	429a      	cmp	r2, r3
 800a234:	dd3d      	ble.n	800a2b2 <__kernel_tan+0x2e6>
 800a236:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a238:	f7f7 ffe2 	bl	8002200 <__aeabi_i2d>
 800a23c:	0032      	movs	r2, r6
 800a23e:	9002      	str	r0, [sp, #8]
 800a240:	9103      	str	r1, [sp, #12]
 800a242:	003b      	movs	r3, r7
 800a244:	0030      	movs	r0, r6
 800a246:	0039      	movs	r1, r7
 800a248:	f7f7 f9a6 	bl	8001598 <__aeabi_dmul>
 800a24c:	9a02      	ldr	r2, [sp, #8]
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	9004      	str	r0, [sp, #16]
 800a252:	9105      	str	r1, [sp, #20]
 800a254:	0030      	movs	r0, r6
 800a256:	0039      	movs	r1, r7
 800a258:	f7f6 fa60 	bl	800071c <__aeabi_dadd>
 800a25c:	0002      	movs	r2, r0
 800a25e:	000b      	movs	r3, r1
 800a260:	9804      	ldr	r0, [sp, #16]
 800a262:	9905      	ldr	r1, [sp, #20]
 800a264:	f7f6 fd96 	bl	8000d94 <__aeabi_ddiv>
 800a268:	0022      	movs	r2, r4
 800a26a:	002b      	movs	r3, r5
 800a26c:	f7f7 fc00 	bl	8001a70 <__aeabi_dsub>
 800a270:	0002      	movs	r2, r0
 800a272:	000b      	movs	r3, r1
 800a274:	9801      	ldr	r0, [sp, #4]
 800a276:	9900      	ldr	r1, [sp, #0]
 800a278:	f7f7 fbfa 	bl	8001a70 <__aeabi_dsub>
 800a27c:	0002      	movs	r2, r0
 800a27e:	000b      	movs	r3, r1
 800a280:	f7f6 fa4c 	bl	800071c <__aeabi_dadd>
 800a284:	0002      	movs	r2, r0
 800a286:	000b      	movs	r3, r1
 800a288:	9802      	ldr	r0, [sp, #8]
 800a28a:	9903      	ldr	r1, [sp, #12]
 800a28c:	f7f7 fbf0 	bl	8001a70 <__aeabi_dsub>
 800a290:	9b08      	ldr	r3, [sp, #32]
 800a292:	0004      	movs	r4, r0
 800a294:	1798      	asrs	r0, r3, #30
 800a296:	2302      	movs	r3, #2
 800a298:	4018      	ands	r0, r3
 800a29a:	3b01      	subs	r3, #1
 800a29c:	1a18      	subs	r0, r3, r0
 800a29e:	000d      	movs	r5, r1
 800a2a0:	f7f7 ffae 	bl	8002200 <__aeabi_i2d>
 800a2a4:	0002      	movs	r2, r0
 800a2a6:	000b      	movs	r3, r1
 800a2a8:	0020      	movs	r0, r4
 800a2aa:	0029      	movs	r1, r5
 800a2ac:	f7f7 f974 	bl	8001598 <__aeabi_dmul>
 800a2b0:	e6b2      	b.n	800a018 <__kernel_tan+0x4c>
 800a2b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d037      	beq.n	800a328 <__kernel_tan+0x35c>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9602      	str	r6, [sp, #8]
 800a2bc:	9703      	str	r7, [sp, #12]
 800a2be:	9302      	str	r3, [sp, #8]
 800a2c0:	9a02      	ldr	r2, [sp, #8]
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	9204      	str	r2, [sp, #16]
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	0002      	movs	r2, r0
 800a2ca:	000b      	movs	r3, r1
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	491a      	ldr	r1, [pc, #104]	; (800a338 <__kernel_tan+0x36c>)
 800a2d0:	f7f6 fd60 	bl	8000d94 <__aeabi_ddiv>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	9006      	str	r0, [sp, #24]
 800a2d8:	9107      	str	r1, [sp, #28]
 800a2da:	9804      	ldr	r0, [sp, #16]
 800a2dc:	9905      	ldr	r1, [sp, #20]
 800a2de:	9e06      	ldr	r6, [sp, #24]
 800a2e0:	9f07      	ldr	r7, [sp, #28]
 800a2e2:	9b00      	ldr	r3, [sp, #0]
 800a2e4:	f7f7 fbc4 	bl	8001a70 <__aeabi_dsub>
 800a2e8:	2600      	movs	r6, #0
 800a2ea:	0002      	movs	r2, r0
 800a2ec:	000b      	movs	r3, r1
 800a2ee:	0020      	movs	r0, r4
 800a2f0:	0029      	movs	r1, r5
 800a2f2:	f7f7 fbbd 	bl	8001a70 <__aeabi_dsub>
 800a2f6:	0032      	movs	r2, r6
 800a2f8:	003b      	movs	r3, r7
 800a2fa:	f7f7 f94d 	bl	8001598 <__aeabi_dmul>
 800a2fe:	0032      	movs	r2, r6
 800a300:	0004      	movs	r4, r0
 800a302:	000d      	movs	r5, r1
 800a304:	9804      	ldr	r0, [sp, #16]
 800a306:	9905      	ldr	r1, [sp, #20]
 800a308:	003b      	movs	r3, r7
 800a30a:	f7f7 f945 	bl	8001598 <__aeabi_dmul>
 800a30e:	2200      	movs	r2, #0
 800a310:	4b08      	ldr	r3, [pc, #32]	; (800a334 <__kernel_tan+0x368>)
 800a312:	f7f6 fa03 	bl	800071c <__aeabi_dadd>
 800a316:	0002      	movs	r2, r0
 800a318:	000b      	movs	r3, r1
 800a31a:	0020      	movs	r0, r4
 800a31c:	0029      	movs	r1, r5
 800a31e:	f7f6 f9fd 	bl	800071c <__aeabi_dadd>
 800a322:	9a06      	ldr	r2, [sp, #24]
 800a324:	9b07      	ldr	r3, [sp, #28]
 800a326:	e6b8      	b.n	800a09a <__kernel_tan+0xce>
 800a328:	9001      	str	r0, [sp, #4]
 800a32a:	9100      	str	r1, [sp, #0]
 800a32c:	e676      	b.n	800a01c <__kernel_tan+0x50>
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	3e2fffff 	.word	0x3e2fffff
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	bff00000 	.word	0xbff00000
 800a33c:	3fe59427 	.word	0x3fe59427
 800a340:	54442d18 	.word	0x54442d18
 800a344:	3fe921fb 	.word	0x3fe921fb
 800a348:	33145c07 	.word	0x33145c07
 800a34c:	3c81a626 	.word	0x3c81a626
 800a350:	74bf7ad4 	.word	0x74bf7ad4
 800a354:	3efb2a70 	.word	0x3efb2a70
 800a358:	32f0a7e9 	.word	0x32f0a7e9
 800a35c:	3f12b80f 	.word	0x3f12b80f
 800a360:	1a8d1068 	.word	0x1a8d1068
 800a364:	3f3026f7 	.word	0x3f3026f7
 800a368:	fee08315 	.word	0xfee08315
 800a36c:	3f57dbc8 	.word	0x3f57dbc8
 800a370:	e96e8493 	.word	0xe96e8493
 800a374:	3f8226e3 	.word	0x3f8226e3
 800a378:	1bb341fe 	.word	0x1bb341fe
 800a37c:	3faba1ba 	.word	0x3faba1ba
 800a380:	db605373 	.word	0xdb605373
 800a384:	bef375cb 	.word	0xbef375cb
 800a388:	a03792a6 	.word	0xa03792a6
 800a38c:	3f147e88 	.word	0x3f147e88
 800a390:	f2f26501 	.word	0xf2f26501
 800a394:	3f4344d8 	.word	0x3f4344d8
 800a398:	c9560328 	.word	0xc9560328
 800a39c:	3f6d6d22 	.word	0x3f6d6d22
 800a3a0:	8406d637 	.word	0x8406d637
 800a3a4:	3f9664f4 	.word	0x3f9664f4
 800a3a8:	1110fe7a 	.word	0x1110fe7a
 800a3ac:	3fc11111 	.word	0x3fc11111
 800a3b0:	55555563 	.word	0x55555563
 800a3b4:	3fd55555 	.word	0x3fd55555

0800a3b8 <fabs>:
 800a3b8:	004b      	lsls	r3, r1, #1
 800a3ba:	0859      	lsrs	r1, r3, #1
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <floor>:
 800a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c2:	004b      	lsls	r3, r1, #1
 800a3c4:	4a3d      	ldr	r2, [pc, #244]	; (800a4bc <floor+0xfc>)
 800a3c6:	0d5b      	lsrs	r3, r3, #21
 800a3c8:	189f      	adds	r7, r3, r2
 800a3ca:	4684      	mov	ip, r0
 800a3cc:	000e      	movs	r6, r1
 800a3ce:	000d      	movs	r5, r1
 800a3d0:	0004      	movs	r4, r0
 800a3d2:	9001      	str	r0, [sp, #4]
 800a3d4:	2f13      	cmp	r7, #19
 800a3d6:	dc34      	bgt.n	800a442 <floor+0x82>
 800a3d8:	2f00      	cmp	r7, #0
 800a3da:	da16      	bge.n	800a40a <floor+0x4a>
 800a3dc:	4a38      	ldr	r2, [pc, #224]	; (800a4c0 <floor+0x100>)
 800a3de:	4b39      	ldr	r3, [pc, #228]	; (800a4c4 <floor+0x104>)
 800a3e0:	4660      	mov	r0, ip
 800a3e2:	0031      	movs	r1, r6
 800a3e4:	f7f6 f99a 	bl	800071c <__aeabi_dadd>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f7f6 f82a 	bl	8000444 <__aeabi_dcmpgt>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d007      	beq.n	800a404 <floor+0x44>
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	da5d      	bge.n	800a4b4 <floor+0xf4>
 800a3f8:	0073      	lsls	r3, r6, #1
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	431c      	orrs	r4, r3
 800a3fe:	d001      	beq.n	800a404 <floor+0x44>
 800a400:	2400      	movs	r4, #0
 800a402:	4d31      	ldr	r5, [pc, #196]	; (800a4c8 <floor+0x108>)
 800a404:	46a4      	mov	ip, r4
 800a406:	002e      	movs	r6, r5
 800a408:	e029      	b.n	800a45e <floor+0x9e>
 800a40a:	4b30      	ldr	r3, [pc, #192]	; (800a4cc <floor+0x10c>)
 800a40c:	413b      	asrs	r3, r7
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	400b      	ands	r3, r1
 800a412:	4303      	orrs	r3, r0
 800a414:	d023      	beq.n	800a45e <floor+0x9e>
 800a416:	4a2a      	ldr	r2, [pc, #168]	; (800a4c0 <floor+0x100>)
 800a418:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <floor+0x104>)
 800a41a:	4660      	mov	r0, ip
 800a41c:	0031      	movs	r1, r6
 800a41e:	f7f6 f97d 	bl	800071c <__aeabi_dadd>
 800a422:	2200      	movs	r2, #0
 800a424:	2300      	movs	r3, #0
 800a426:	f7f6 f80d 	bl	8000444 <__aeabi_dcmpgt>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0ea      	beq.n	800a404 <floor+0x44>
 800a42e:	2e00      	cmp	r6, #0
 800a430:	da03      	bge.n	800a43a <floor+0x7a>
 800a432:	2380      	movs	r3, #128	; 0x80
 800a434:	035b      	lsls	r3, r3, #13
 800a436:	413b      	asrs	r3, r7
 800a438:	18f5      	adds	r5, r6, r3
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	2400      	movs	r4, #0
 800a43e:	439d      	bics	r5, r3
 800a440:	e7e0      	b.n	800a404 <floor+0x44>
 800a442:	2f33      	cmp	r7, #51	; 0x33
 800a444:	dd0f      	ble.n	800a466 <floor+0xa6>
 800a446:	2380      	movs	r3, #128	; 0x80
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	429f      	cmp	r7, r3
 800a44c:	d107      	bne.n	800a45e <floor+0x9e>
 800a44e:	0002      	movs	r2, r0
 800a450:	000b      	movs	r3, r1
 800a452:	4660      	mov	r0, ip
 800a454:	0031      	movs	r1, r6
 800a456:	f7f6 f961 	bl	800071c <__aeabi_dadd>
 800a45a:	4684      	mov	ip, r0
 800a45c:	000e      	movs	r6, r1
 800a45e:	4660      	mov	r0, ip
 800a460:	0031      	movs	r1, r6
 800a462:	b003      	add	sp, #12
 800a464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a466:	4a1a      	ldr	r2, [pc, #104]	; (800a4d0 <floor+0x110>)
 800a468:	189b      	adds	r3, r3, r2
 800a46a:	2201      	movs	r2, #1
 800a46c:	4252      	negs	r2, r2
 800a46e:	40da      	lsrs	r2, r3
 800a470:	9200      	str	r2, [sp, #0]
 800a472:	4210      	tst	r0, r2
 800a474:	d0f3      	beq.n	800a45e <floor+0x9e>
 800a476:	4a12      	ldr	r2, [pc, #72]	; (800a4c0 <floor+0x100>)
 800a478:	4b12      	ldr	r3, [pc, #72]	; (800a4c4 <floor+0x104>)
 800a47a:	4660      	mov	r0, ip
 800a47c:	0031      	movs	r1, r6
 800a47e:	f7f6 f94d 	bl	800071c <__aeabi_dadd>
 800a482:	2200      	movs	r2, #0
 800a484:	2300      	movs	r3, #0
 800a486:	f7f5 ffdd 	bl	8000444 <__aeabi_dcmpgt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d0ba      	beq.n	800a404 <floor+0x44>
 800a48e:	2e00      	cmp	r6, #0
 800a490:	da02      	bge.n	800a498 <floor+0xd8>
 800a492:	2f14      	cmp	r7, #20
 800a494:	d103      	bne.n	800a49e <floor+0xde>
 800a496:	3501      	adds	r5, #1
 800a498:	9b00      	ldr	r3, [sp, #0]
 800a49a:	439c      	bics	r4, r3
 800a49c:	e7b2      	b.n	800a404 <floor+0x44>
 800a49e:	2334      	movs	r3, #52	; 0x34
 800a4a0:	1bdf      	subs	r7, r3, r7
 800a4a2:	3b33      	subs	r3, #51	; 0x33
 800a4a4:	40bb      	lsls	r3, r7
 800a4a6:	18e4      	adds	r4, r4, r3
 800a4a8:	9b01      	ldr	r3, [sp, #4]
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	419b      	sbcs	r3, r3
 800a4ae:	425b      	negs	r3, r3
 800a4b0:	18f5      	adds	r5, r6, r3
 800a4b2:	e7f1      	b.n	800a498 <floor+0xd8>
 800a4b4:	2400      	movs	r4, #0
 800a4b6:	0025      	movs	r5, r4
 800a4b8:	e7a4      	b.n	800a404 <floor+0x44>
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	fffffc01 	.word	0xfffffc01
 800a4c0:	8800759c 	.word	0x8800759c
 800a4c4:	7e37e43c 	.word	0x7e37e43c
 800a4c8:	bff00000 	.word	0xbff00000
 800a4cc:	000fffff 	.word	0x000fffff
 800a4d0:	fffffbed 	.word	0xfffffbed

0800a4d4 <scalbn>:
 800a4d4:	004b      	lsls	r3, r1, #1
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	0d5b      	lsrs	r3, r3, #21
 800a4da:	0014      	movs	r4, r2
 800a4dc:	000a      	movs	r2, r1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <scalbn+0x2a>
 800a4e2:	004b      	lsls	r3, r1, #1
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	4303      	orrs	r3, r0
 800a4e8:	d010      	beq.n	800a50c <scalbn+0x38>
 800a4ea:	4b27      	ldr	r3, [pc, #156]	; (800a588 <scalbn+0xb4>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f7f7 f853 	bl	8001598 <__aeabi_dmul>
 800a4f2:	4b26      	ldr	r3, [pc, #152]	; (800a58c <scalbn+0xb8>)
 800a4f4:	429c      	cmp	r4, r3
 800a4f6:	da0a      	bge.n	800a50e <scalbn+0x3a>
 800a4f8:	4a25      	ldr	r2, [pc, #148]	; (800a590 <scalbn+0xbc>)
 800a4fa:	4b26      	ldr	r3, [pc, #152]	; (800a594 <scalbn+0xc0>)
 800a4fc:	e019      	b.n	800a532 <scalbn+0x5e>
 800a4fe:	4d26      	ldr	r5, [pc, #152]	; (800a598 <scalbn+0xc4>)
 800a500:	42ab      	cmp	r3, r5
 800a502:	d108      	bne.n	800a516 <scalbn+0x42>
 800a504:	0002      	movs	r2, r0
 800a506:	000b      	movs	r3, r1
 800a508:	f7f6 f908 	bl	800071c <__aeabi_dadd>
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	000a      	movs	r2, r1
 800a510:	004b      	lsls	r3, r1, #1
 800a512:	0d5b      	lsrs	r3, r3, #21
 800a514:	3b36      	subs	r3, #54	; 0x36
 800a516:	4d21      	ldr	r5, [pc, #132]	; (800a59c <scalbn+0xc8>)
 800a518:	18e3      	adds	r3, r4, r3
 800a51a:	42ab      	cmp	r3, r5
 800a51c:	dd0c      	ble.n	800a538 <scalbn+0x64>
 800a51e:	4c20      	ldr	r4, [pc, #128]	; (800a5a0 <scalbn+0xcc>)
 800a520:	4d20      	ldr	r5, [pc, #128]	; (800a5a4 <scalbn+0xd0>)
 800a522:	2900      	cmp	r1, #0
 800a524:	da01      	bge.n	800a52a <scalbn+0x56>
 800a526:	4c1e      	ldr	r4, [pc, #120]	; (800a5a0 <scalbn+0xcc>)
 800a528:	4d1f      	ldr	r5, [pc, #124]	; (800a5a8 <scalbn+0xd4>)
 800a52a:	0020      	movs	r0, r4
 800a52c:	0029      	movs	r1, r5
 800a52e:	4a1c      	ldr	r2, [pc, #112]	; (800a5a0 <scalbn+0xcc>)
 800a530:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <scalbn+0xd0>)
 800a532:	f7f7 f831 	bl	8001598 <__aeabi_dmul>
 800a536:	e7e9      	b.n	800a50c <scalbn+0x38>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	dd05      	ble.n	800a548 <scalbn+0x74>
 800a53c:	4c1b      	ldr	r4, [pc, #108]	; (800a5ac <scalbn+0xd8>)
 800a53e:	051b      	lsls	r3, r3, #20
 800a540:	4022      	ands	r2, r4
 800a542:	431a      	orrs	r2, r3
 800a544:	0011      	movs	r1, r2
 800a546:	e7e1      	b.n	800a50c <scalbn+0x38>
 800a548:	001d      	movs	r5, r3
 800a54a:	3535      	adds	r5, #53	; 0x35
 800a54c:	da13      	bge.n	800a576 <scalbn+0xa2>
 800a54e:	4a18      	ldr	r2, [pc, #96]	; (800a5b0 <scalbn+0xdc>)
 800a550:	0fcb      	lsrs	r3, r1, #31
 800a552:	4294      	cmp	r4, r2
 800a554:	dd08      	ble.n	800a568 <scalbn+0x94>
 800a556:	4812      	ldr	r0, [pc, #72]	; (800a5a0 <scalbn+0xcc>)
 800a558:	4912      	ldr	r1, [pc, #72]	; (800a5a4 <scalbn+0xd0>)
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <scalbn+0x8e>
 800a55e:	4810      	ldr	r0, [pc, #64]	; (800a5a0 <scalbn+0xcc>)
 800a560:	4911      	ldr	r1, [pc, #68]	; (800a5a8 <scalbn+0xd4>)
 800a562:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <scalbn+0xcc>)
 800a564:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <scalbn+0xd0>)
 800a566:	e7e4      	b.n	800a532 <scalbn+0x5e>
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <scalbn+0xbc>)
 800a56a:	490a      	ldr	r1, [pc, #40]	; (800a594 <scalbn+0xc0>)
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0c3      	beq.n	800a4f8 <scalbn+0x24>
 800a570:	4807      	ldr	r0, [pc, #28]	; (800a590 <scalbn+0xbc>)
 800a572:	4910      	ldr	r1, [pc, #64]	; (800a5b4 <scalbn+0xe0>)
 800a574:	e7c0      	b.n	800a4f8 <scalbn+0x24>
 800a576:	4c0d      	ldr	r4, [pc, #52]	; (800a5ac <scalbn+0xd8>)
 800a578:	3336      	adds	r3, #54	; 0x36
 800a57a:	4022      	ands	r2, r4
 800a57c:	051b      	lsls	r3, r3, #20
 800a57e:	4313      	orrs	r3, r2
 800a580:	0019      	movs	r1, r3
 800a582:	2200      	movs	r2, #0
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <scalbn+0xe4>)
 800a586:	e7d4      	b.n	800a532 <scalbn+0x5e>
 800a588:	43500000 	.word	0x43500000
 800a58c:	ffff3cb0 	.word	0xffff3cb0
 800a590:	c2f8f359 	.word	0xc2f8f359
 800a594:	01a56e1f 	.word	0x01a56e1f
 800a598:	000007ff 	.word	0x000007ff
 800a59c:	000007fe 	.word	0x000007fe
 800a5a0:	8800759c 	.word	0x8800759c
 800a5a4:	7e37e43c 	.word	0x7e37e43c
 800a5a8:	fe37e43c 	.word	0xfe37e43c
 800a5ac:	800fffff 	.word	0x800fffff
 800a5b0:	0000c350 	.word	0x0000c350
 800a5b4:	81a56e1f 	.word	0x81a56e1f
 800a5b8:	3c900000 	.word	0x3c900000

0800a5bc <_init>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5c2:	bc08      	pop	{r3}
 800a5c4:	469e      	mov	lr, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <_fini>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	469e      	mov	lr, r3
 800a5d2:	4770      	bx	lr
