
data_collector_integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009770  08009770  00019770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b60  08009b60  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08009b60  08009b60  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b60  08009b60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000014  08009b7c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  08009b7c  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010758  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250b  00000000  00000000  00030794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00032ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00033ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d454  00000000  00000000  00034988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011691  00000000  00000000  00051ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb6c9  00000000  00000000  0006346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eb36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  0011eb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009758 	.word	0x08009758

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08009758 	.word	0x08009758

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fc87 	bl	8001d14 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fbd7 	bl	8001bc4 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fc79 	bl	8001d14 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fc6f 	bl	8001d14 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fbff 	bl	8001c48 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fbf5 	bl	8001c48 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 f9ed 	bl	8000854 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 f979 	bl	800077c <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 f9df 	bl	8000854 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 f9d5 	bl	8000854 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f985 	bl	80007c8 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f97b 	bl	80007c8 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_f2uiz>:
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	b510      	push	{r4, lr}
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	1c04      	adds	r4, r0, #0
 80004e8:	f7ff fff0 	bl	80004cc <__aeabi_fcmpge>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d103      	bne.n	80004f8 <__aeabi_f2uiz+0x18>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	f000 fcc7 	bl	8000e84 <__aeabi_f2iz>
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	219e      	movs	r1, #158	; 0x9e
 80004fa:	1c20      	adds	r0, r4, #0
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	f000 fb13 	bl	8000b28 <__aeabi_fsub>
 8000502:	f000 fcbf 	bl	8000e84 <__aeabi_f2iz>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	4460      	add	r0, ip
 800050e:	e7f2      	b.n	80004f6 <__aeabi_f2uiz+0x16>

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ff9d 	bl	8000458 <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f002 fa57 	bl	80029d8 <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 febe 	bl	80022b4 <__aeabi_dsub>
 8000538:	f002 fa4e 	bl	80029d8 <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__aeabi_fdiv>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	464f      	mov	r7, r9
 8000550:	4646      	mov	r6, r8
 8000552:	46d6      	mov	lr, sl
 8000554:	0245      	lsls	r5, r0, #9
 8000556:	b5c0      	push	{r6, r7, lr}
 8000558:	0047      	lsls	r7, r0, #1
 800055a:	1c0c      	adds	r4, r1, #0
 800055c:	0a6d      	lsrs	r5, r5, #9
 800055e:	0e3f      	lsrs	r7, r7, #24
 8000560:	0fc6      	lsrs	r6, r0, #31
 8000562:	2f00      	cmp	r7, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fdiv+0x1c>
 8000566:	e070      	b.n	800064a <__aeabi_fdiv+0xfe>
 8000568:	2fff      	cmp	r7, #255	; 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fdiv+0x22>
 800056c:	e075      	b.n	800065a <__aeabi_fdiv+0x10e>
 800056e:	00eb      	lsls	r3, r5, #3
 8000570:	2580      	movs	r5, #128	; 0x80
 8000572:	04ed      	lsls	r5, r5, #19
 8000574:	431d      	orrs	r5, r3
 8000576:	2300      	movs	r3, #0
 8000578:	4699      	mov	r9, r3
 800057a:	469a      	mov	sl, r3
 800057c:	3f7f      	subs	r7, #127	; 0x7f
 800057e:	0260      	lsls	r0, r4, #9
 8000580:	0a43      	lsrs	r3, r0, #9
 8000582:	4698      	mov	r8, r3
 8000584:	0063      	lsls	r3, r4, #1
 8000586:	0e1b      	lsrs	r3, r3, #24
 8000588:	0fe4      	lsrs	r4, r4, #31
 800058a:	2b00      	cmp	r3, #0
 800058c:	d04e      	beq.n	800062c <__aeabi_fdiv+0xe0>
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d046      	beq.n	8000620 <__aeabi_fdiv+0xd4>
 8000592:	4642      	mov	r2, r8
 8000594:	00d0      	lsls	r0, r2, #3
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4302      	orrs	r2, r0
 800059c:	4690      	mov	r8, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	3b7f      	subs	r3, #127	; 0x7f
 80005a2:	0031      	movs	r1, r6
 80005a4:	1aff      	subs	r7, r7, r3
 80005a6:	464b      	mov	r3, r9
 80005a8:	4061      	eors	r1, r4
 80005aa:	b2c9      	uxtb	r1, r1
 80005ac:	4313      	orrs	r3, r2
 80005ae:	2b0f      	cmp	r3, #15
 80005b0:	d900      	bls.n	80005b4 <__aeabi_fdiv+0x68>
 80005b2:	e0b5      	b.n	8000720 <__aeabi_fdiv+0x1d4>
 80005b4:	486e      	ldr	r0, [pc, #440]	; (8000770 <__aeabi_fdiv+0x224>)
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	58c3      	ldr	r3, [r0, r3]
 80005ba:	469f      	mov	pc, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	4698      	mov	r8, r3
 80005c0:	0026      	movs	r6, r4
 80005c2:	4645      	mov	r5, r8
 80005c4:	4692      	mov	sl, r2
 80005c6:	4653      	mov	r3, sl
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d100      	bne.n	80005ce <__aeabi_fdiv+0x82>
 80005cc:	e089      	b.n	80006e2 <__aeabi_fdiv+0x196>
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fdiv+0x88>
 80005d2:	e09e      	b.n	8000712 <__aeabi_fdiv+0x1c6>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d018      	beq.n	800060a <__aeabi_fdiv+0xbe>
 80005d8:	003b      	movs	r3, r7
 80005da:	337f      	adds	r3, #127	; 0x7f
 80005dc:	2b00      	cmp	r3, #0
 80005de:	dd69      	ble.n	80006b4 <__aeabi_fdiv+0x168>
 80005e0:	076a      	lsls	r2, r5, #29
 80005e2:	d004      	beq.n	80005ee <__aeabi_fdiv+0xa2>
 80005e4:	220f      	movs	r2, #15
 80005e6:	402a      	ands	r2, r5
 80005e8:	2a04      	cmp	r2, #4
 80005ea:	d000      	beq.n	80005ee <__aeabi_fdiv+0xa2>
 80005ec:	3504      	adds	r5, #4
 80005ee:	012a      	lsls	r2, r5, #4
 80005f0:	d503      	bpl.n	80005fa <__aeabi_fdiv+0xae>
 80005f2:	4b60      	ldr	r3, [pc, #384]	; (8000774 <__aeabi_fdiv+0x228>)
 80005f4:	401d      	ands	r5, r3
 80005f6:	003b      	movs	r3, r7
 80005f8:	3380      	adds	r3, #128	; 0x80
 80005fa:	2bfe      	cmp	r3, #254	; 0xfe
 80005fc:	dd00      	ble.n	8000600 <__aeabi_fdiv+0xb4>
 80005fe:	e070      	b.n	80006e2 <__aeabi_fdiv+0x196>
 8000600:	01ad      	lsls	r5, r5, #6
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	b2d8      	uxtb	r0, r3
 8000606:	e002      	b.n	800060e <__aeabi_fdiv+0xc2>
 8000608:	000e      	movs	r6, r1
 800060a:	2000      	movs	r0, #0
 800060c:	2500      	movs	r5, #0
 800060e:	05c0      	lsls	r0, r0, #23
 8000610:	4328      	orrs	r0, r5
 8000612:	07f6      	lsls	r6, r6, #31
 8000614:	4330      	orrs	r0, r6
 8000616:	bce0      	pop	{r5, r6, r7}
 8000618:	46ba      	mov	sl, r7
 800061a:	46b1      	mov	r9, r6
 800061c:	46a8      	mov	r8, r5
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	4643      	mov	r3, r8
 8000622:	2b00      	cmp	r3, #0
 8000624:	d13f      	bne.n	80006a6 <__aeabi_fdiv+0x15a>
 8000626:	2202      	movs	r2, #2
 8000628:	3fff      	subs	r7, #255	; 0xff
 800062a:	e003      	b.n	8000634 <__aeabi_fdiv+0xe8>
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d12d      	bne.n	800068e <__aeabi_fdiv+0x142>
 8000632:	2201      	movs	r2, #1
 8000634:	0031      	movs	r1, r6
 8000636:	464b      	mov	r3, r9
 8000638:	4061      	eors	r1, r4
 800063a:	b2c9      	uxtb	r1, r1
 800063c:	4313      	orrs	r3, r2
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d834      	bhi.n	80006ac <__aeabi_fdiv+0x160>
 8000642:	484d      	ldr	r0, [pc, #308]	; (8000778 <__aeabi_fdiv+0x22c>)
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	58c3      	ldr	r3, [r0, r3]
 8000648:	469f      	mov	pc, r3
 800064a:	2d00      	cmp	r5, #0
 800064c:	d113      	bne.n	8000676 <__aeabi_fdiv+0x12a>
 800064e:	2304      	movs	r3, #4
 8000650:	4699      	mov	r9, r3
 8000652:	3b03      	subs	r3, #3
 8000654:	2700      	movs	r7, #0
 8000656:	469a      	mov	sl, r3
 8000658:	e791      	b.n	800057e <__aeabi_fdiv+0x32>
 800065a:	2d00      	cmp	r5, #0
 800065c:	d105      	bne.n	800066a <__aeabi_fdiv+0x11e>
 800065e:	2308      	movs	r3, #8
 8000660:	4699      	mov	r9, r3
 8000662:	3b06      	subs	r3, #6
 8000664:	27ff      	movs	r7, #255	; 0xff
 8000666:	469a      	mov	sl, r3
 8000668:	e789      	b.n	800057e <__aeabi_fdiv+0x32>
 800066a:	230c      	movs	r3, #12
 800066c:	4699      	mov	r9, r3
 800066e:	3b09      	subs	r3, #9
 8000670:	27ff      	movs	r7, #255	; 0xff
 8000672:	469a      	mov	sl, r3
 8000674:	e783      	b.n	800057e <__aeabi_fdiv+0x32>
 8000676:	0028      	movs	r0, r5
 8000678:	f002 fae4 	bl	8002c44 <__clzsi2>
 800067c:	2776      	movs	r7, #118	; 0x76
 800067e:	1f43      	subs	r3, r0, #5
 8000680:	409d      	lsls	r5, r3
 8000682:	2300      	movs	r3, #0
 8000684:	427f      	negs	r7, r7
 8000686:	4699      	mov	r9, r3
 8000688:	469a      	mov	sl, r3
 800068a:	1a3f      	subs	r7, r7, r0
 800068c:	e777      	b.n	800057e <__aeabi_fdiv+0x32>
 800068e:	4640      	mov	r0, r8
 8000690:	f002 fad8 	bl	8002c44 <__clzsi2>
 8000694:	4642      	mov	r2, r8
 8000696:	1f43      	subs	r3, r0, #5
 8000698:	409a      	lsls	r2, r3
 800069a:	2376      	movs	r3, #118	; 0x76
 800069c:	425b      	negs	r3, r3
 800069e:	4690      	mov	r8, r2
 80006a0:	1a1b      	subs	r3, r3, r0
 80006a2:	2200      	movs	r2, #0
 80006a4:	e77d      	b.n	80005a2 <__aeabi_fdiv+0x56>
 80006a6:	23ff      	movs	r3, #255	; 0xff
 80006a8:	2203      	movs	r2, #3
 80006aa:	e77a      	b.n	80005a2 <__aeabi_fdiv+0x56>
 80006ac:	000e      	movs	r6, r1
 80006ae:	20ff      	movs	r0, #255	; 0xff
 80006b0:	2500      	movs	r5, #0
 80006b2:	e7ac      	b.n	800060e <__aeabi_fdiv+0xc2>
 80006b4:	2001      	movs	r0, #1
 80006b6:	1ac0      	subs	r0, r0, r3
 80006b8:	281b      	cmp	r0, #27
 80006ba:	dca6      	bgt.n	800060a <__aeabi_fdiv+0xbe>
 80006bc:	379e      	adds	r7, #158	; 0x9e
 80006be:	002a      	movs	r2, r5
 80006c0:	40bd      	lsls	r5, r7
 80006c2:	40c2      	lsrs	r2, r0
 80006c4:	1e6b      	subs	r3, r5, #1
 80006c6:	419d      	sbcs	r5, r3
 80006c8:	4315      	orrs	r5, r2
 80006ca:	076b      	lsls	r3, r5, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fdiv+0x18c>
 80006ce:	230f      	movs	r3, #15
 80006d0:	402b      	ands	r3, r5
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fdiv+0x18c>
 80006d6:	3504      	adds	r5, #4
 80006d8:	016b      	lsls	r3, r5, #5
 80006da:	d544      	bpl.n	8000766 <__aeabi_fdiv+0x21a>
 80006dc:	2001      	movs	r0, #1
 80006de:	2500      	movs	r5, #0
 80006e0:	e795      	b.n	800060e <__aeabi_fdiv+0xc2>
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	2500      	movs	r5, #0
 80006e6:	e792      	b.n	800060e <__aeabi_fdiv+0xc2>
 80006e8:	2580      	movs	r5, #128	; 0x80
 80006ea:	2600      	movs	r6, #0
 80006ec:	20ff      	movs	r0, #255	; 0xff
 80006ee:	03ed      	lsls	r5, r5, #15
 80006f0:	e78d      	b.n	800060e <__aeabi_fdiv+0xc2>
 80006f2:	2300      	movs	r3, #0
 80006f4:	4698      	mov	r8, r3
 80006f6:	2080      	movs	r0, #128	; 0x80
 80006f8:	03c0      	lsls	r0, r0, #15
 80006fa:	4205      	tst	r5, r0
 80006fc:	d009      	beq.n	8000712 <__aeabi_fdiv+0x1c6>
 80006fe:	4643      	mov	r3, r8
 8000700:	4203      	tst	r3, r0
 8000702:	d106      	bne.n	8000712 <__aeabi_fdiv+0x1c6>
 8000704:	4645      	mov	r5, r8
 8000706:	4305      	orrs	r5, r0
 8000708:	026d      	lsls	r5, r5, #9
 800070a:	0026      	movs	r6, r4
 800070c:	20ff      	movs	r0, #255	; 0xff
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	e77d      	b.n	800060e <__aeabi_fdiv+0xc2>
 8000712:	2080      	movs	r0, #128	; 0x80
 8000714:	03c0      	lsls	r0, r0, #15
 8000716:	4305      	orrs	r5, r0
 8000718:	026d      	lsls	r5, r5, #9
 800071a:	20ff      	movs	r0, #255	; 0xff
 800071c:	0a6d      	lsrs	r5, r5, #9
 800071e:	e776      	b.n	800060e <__aeabi_fdiv+0xc2>
 8000720:	4642      	mov	r2, r8
 8000722:	016b      	lsls	r3, r5, #5
 8000724:	0150      	lsls	r0, r2, #5
 8000726:	4283      	cmp	r3, r0
 8000728:	d219      	bcs.n	800075e <__aeabi_fdiv+0x212>
 800072a:	221b      	movs	r2, #27
 800072c:	2500      	movs	r5, #0
 800072e:	3f01      	subs	r7, #1
 8000730:	2601      	movs	r6, #1
 8000732:	001c      	movs	r4, r3
 8000734:	006d      	lsls	r5, r5, #1
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	2c00      	cmp	r4, #0
 800073a:	db01      	blt.n	8000740 <__aeabi_fdiv+0x1f4>
 800073c:	4298      	cmp	r0, r3
 800073e:	d801      	bhi.n	8000744 <__aeabi_fdiv+0x1f8>
 8000740:	1a1b      	subs	r3, r3, r0
 8000742:	4335      	orrs	r5, r6
 8000744:	3a01      	subs	r2, #1
 8000746:	2a00      	cmp	r2, #0
 8000748:	d1f3      	bne.n	8000732 <__aeabi_fdiv+0x1e6>
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	4193      	sbcs	r3, r2
 800074e:	431d      	orrs	r5, r3
 8000750:	003b      	movs	r3, r7
 8000752:	337f      	adds	r3, #127	; 0x7f
 8000754:	000e      	movs	r6, r1
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd00      	ble.n	800075c <__aeabi_fdiv+0x210>
 800075a:	e741      	b.n	80005e0 <__aeabi_fdiv+0x94>
 800075c:	e7aa      	b.n	80006b4 <__aeabi_fdiv+0x168>
 800075e:	221a      	movs	r2, #26
 8000760:	2501      	movs	r5, #1
 8000762:	1a1b      	subs	r3, r3, r0
 8000764:	e7e4      	b.n	8000730 <__aeabi_fdiv+0x1e4>
 8000766:	01ad      	lsls	r5, r5, #6
 8000768:	2000      	movs	r0, #0
 800076a:	0a6d      	lsrs	r5, r5, #9
 800076c:	e74f      	b.n	800060e <__aeabi_fdiv+0xc2>
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	08009770 	.word	0x08009770
 8000774:	f7ffffff 	.word	0xf7ffffff
 8000778:	080097b0 	.word	0x080097b0

0800077c <__eqsf2>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	0042      	lsls	r2, r0, #1
 8000780:	0245      	lsls	r5, r0, #9
 8000782:	024e      	lsls	r6, r1, #9
 8000784:	004c      	lsls	r4, r1, #1
 8000786:	0fc3      	lsrs	r3, r0, #31
 8000788:	0a6d      	lsrs	r5, r5, #9
 800078a:	2001      	movs	r0, #1
 800078c:	0e12      	lsrs	r2, r2, #24
 800078e:	0a76      	lsrs	r6, r6, #9
 8000790:	0e24      	lsrs	r4, r4, #24
 8000792:	0fc9      	lsrs	r1, r1, #31
 8000794:	2aff      	cmp	r2, #255	; 0xff
 8000796:	d006      	beq.n	80007a6 <__eqsf2+0x2a>
 8000798:	2cff      	cmp	r4, #255	; 0xff
 800079a:	d003      	beq.n	80007a4 <__eqsf2+0x28>
 800079c:	42a2      	cmp	r2, r4
 800079e:	d101      	bne.n	80007a4 <__eqsf2+0x28>
 80007a0:	42b5      	cmp	r5, r6
 80007a2:	d006      	beq.n	80007b2 <__eqsf2+0x36>
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d1fc      	bne.n	80007a4 <__eqsf2+0x28>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d1fa      	bne.n	80007a4 <__eqsf2+0x28>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d1f8      	bne.n	80007a4 <__eqsf2+0x28>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d006      	beq.n	80007c4 <__eqsf2+0x48>
 80007b6:	2001      	movs	r0, #1
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	d1f3      	bne.n	80007a4 <__eqsf2+0x28>
 80007bc:	0028      	movs	r0, r5
 80007be:	1e43      	subs	r3, r0, #1
 80007c0:	4198      	sbcs	r0, r3
 80007c2:	e7ef      	b.n	80007a4 <__eqsf2+0x28>
 80007c4:	2000      	movs	r0, #0
 80007c6:	e7ed      	b.n	80007a4 <__eqsf2+0x28>

080007c8 <__gesf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	024e      	lsls	r6, r1, #9
 80007d0:	004c      	lsls	r4, r1, #1
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0a6d      	lsrs	r5, r5, #9
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	0a76      	lsrs	r6, r6, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0fc8      	lsrs	r0, r1, #31
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d01b      	beq.n	800081a <__gesf2+0x52>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d00e      	beq.n	8000804 <__gesf2+0x3c>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d11b      	bne.n	8000822 <__gesf2+0x5a>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d101      	bne.n	80007f2 <__gesf2+0x2a>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d01c      	beq.n	800082c <__gesf2+0x64>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d00c      	beq.n	8000810 <__gesf2+0x48>
 80007f6:	4283      	cmp	r3, r0
 80007f8:	d01c      	beq.n	8000834 <__gesf2+0x6c>
 80007fa:	2102      	movs	r1, #2
 80007fc:	1e58      	subs	r0, r3, #1
 80007fe:	4008      	ands	r0, r1
 8000800:	3801      	subs	r0, #1
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	2e00      	cmp	r6, #0
 8000806:	d122      	bne.n	800084e <__gesf2+0x86>
 8000808:	2a00      	cmp	r2, #0
 800080a:	d1f4      	bne.n	80007f6 <__gesf2+0x2e>
 800080c:	2d00      	cmp	r5, #0
 800080e:	d1f2      	bne.n	80007f6 <__gesf2+0x2e>
 8000810:	2800      	cmp	r0, #0
 8000812:	d1f6      	bne.n	8000802 <__gesf2+0x3a>
 8000814:	2001      	movs	r0, #1
 8000816:	4240      	negs	r0, r0
 8000818:	e7f3      	b.n	8000802 <__gesf2+0x3a>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d117      	bne.n	800084e <__gesf2+0x86>
 800081e:	2cff      	cmp	r4, #255	; 0xff
 8000820:	d0f0      	beq.n	8000804 <__gesf2+0x3c>
 8000822:	2c00      	cmp	r4, #0
 8000824:	d1e7      	bne.n	80007f6 <__gesf2+0x2e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d1e5      	bne.n	80007f6 <__gesf2+0x2e>
 800082a:	e7e6      	b.n	80007fa <__gesf2+0x32>
 800082c:	2000      	movs	r0, #0
 800082e:	2d00      	cmp	r5, #0
 8000830:	d0e7      	beq.n	8000802 <__gesf2+0x3a>
 8000832:	e7e2      	b.n	80007fa <__gesf2+0x32>
 8000834:	42a2      	cmp	r2, r4
 8000836:	dc05      	bgt.n	8000844 <__gesf2+0x7c>
 8000838:	dbea      	blt.n	8000810 <__gesf2+0x48>
 800083a:	42b5      	cmp	r5, r6
 800083c:	d802      	bhi.n	8000844 <__gesf2+0x7c>
 800083e:	d3e7      	bcc.n	8000810 <__gesf2+0x48>
 8000840:	2000      	movs	r0, #0
 8000842:	e7de      	b.n	8000802 <__gesf2+0x3a>
 8000844:	4243      	negs	r3, r0
 8000846:	4158      	adcs	r0, r3
 8000848:	0040      	lsls	r0, r0, #1
 800084a:	3801      	subs	r0, #1
 800084c:	e7d9      	b.n	8000802 <__gesf2+0x3a>
 800084e:	2002      	movs	r0, #2
 8000850:	4240      	negs	r0, r0
 8000852:	e7d6      	b.n	8000802 <__gesf2+0x3a>

08000854 <__lesf2>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	0042      	lsls	r2, r0, #1
 8000858:	0245      	lsls	r5, r0, #9
 800085a:	024e      	lsls	r6, r1, #9
 800085c:	004c      	lsls	r4, r1, #1
 800085e:	0fc3      	lsrs	r3, r0, #31
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e12      	lsrs	r2, r2, #24
 8000864:	0a76      	lsrs	r6, r6, #9
 8000866:	0e24      	lsrs	r4, r4, #24
 8000868:	0fc8      	lsrs	r0, r1, #31
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d00b      	beq.n	8000886 <__lesf2+0x32>
 800086e:	2cff      	cmp	r4, #255	; 0xff
 8000870:	d00d      	beq.n	800088e <__lesf2+0x3a>
 8000872:	2a00      	cmp	r2, #0
 8000874:	d11f      	bne.n	80008b6 <__lesf2+0x62>
 8000876:	2c00      	cmp	r4, #0
 8000878:	d116      	bne.n	80008a8 <__lesf2+0x54>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d114      	bne.n	80008a8 <__lesf2+0x54>
 800087e:	2000      	movs	r0, #0
 8000880:	2d00      	cmp	r5, #0
 8000882:	d010      	beq.n	80008a6 <__lesf2+0x52>
 8000884:	e009      	b.n	800089a <__lesf2+0x46>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d10c      	bne.n	80008a4 <__lesf2+0x50>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d113      	bne.n	80008b6 <__lesf2+0x62>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d108      	bne.n	80008a4 <__lesf2+0x50>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d008      	beq.n	80008a8 <__lesf2+0x54>
 8000896:	4283      	cmp	r3, r0
 8000898:	d012      	beq.n	80008c0 <__lesf2+0x6c>
 800089a:	2102      	movs	r1, #2
 800089c:	1e58      	subs	r0, r3, #1
 800089e:	4008      	ands	r0, r1
 80008a0:	3801      	subs	r0, #1
 80008a2:	e000      	b.n	80008a6 <__lesf2+0x52>
 80008a4:	2002      	movs	r0, #2
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	2d00      	cmp	r5, #0
 80008aa:	d1f4      	bne.n	8000896 <__lesf2+0x42>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d1fa      	bne.n	80008a6 <__lesf2+0x52>
 80008b0:	2001      	movs	r0, #1
 80008b2:	4240      	negs	r0, r0
 80008b4:	e7f7      	b.n	80008a6 <__lesf2+0x52>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d1ed      	bne.n	8000896 <__lesf2+0x42>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d1eb      	bne.n	8000896 <__lesf2+0x42>
 80008be:	e7ec      	b.n	800089a <__lesf2+0x46>
 80008c0:	42a2      	cmp	r2, r4
 80008c2:	dc05      	bgt.n	80008d0 <__lesf2+0x7c>
 80008c4:	dbf2      	blt.n	80008ac <__lesf2+0x58>
 80008c6:	42b5      	cmp	r5, r6
 80008c8:	d802      	bhi.n	80008d0 <__lesf2+0x7c>
 80008ca:	d3ef      	bcc.n	80008ac <__lesf2+0x58>
 80008cc:	2000      	movs	r0, #0
 80008ce:	e7ea      	b.n	80008a6 <__lesf2+0x52>
 80008d0:	4243      	negs	r3, r0
 80008d2:	4158      	adcs	r0, r3
 80008d4:	0040      	lsls	r0, r0, #1
 80008d6:	3801      	subs	r0, #1
 80008d8:	e7e5      	b.n	80008a6 <__lesf2+0x52>
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <__aeabi_fmul>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	464f      	mov	r7, r9
 80008e0:	4646      	mov	r6, r8
 80008e2:	46d6      	mov	lr, sl
 80008e4:	0244      	lsls	r4, r0, #9
 80008e6:	0045      	lsls	r5, r0, #1
 80008e8:	b5c0      	push	{r6, r7, lr}
 80008ea:	0a64      	lsrs	r4, r4, #9
 80008ec:	1c0f      	adds	r7, r1, #0
 80008ee:	0e2d      	lsrs	r5, r5, #24
 80008f0:	0fc6      	lsrs	r6, r0, #31
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fmul+0x1c>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fmul+0x138>
 80008f8:	2dff      	cmp	r5, #255	; 0xff
 80008fa:	d100      	bne.n	80008fe <__aeabi_fmul+0x22>
 80008fc:	e092      	b.n	8000a24 <__aeabi_fmul+0x148>
 80008fe:	2300      	movs	r3, #0
 8000900:	2080      	movs	r0, #128	; 0x80
 8000902:	4699      	mov	r9, r3
 8000904:	469a      	mov	sl, r3
 8000906:	00e4      	lsls	r4, r4, #3
 8000908:	04c0      	lsls	r0, r0, #19
 800090a:	4304      	orrs	r4, r0
 800090c:	3d7f      	subs	r5, #127	; 0x7f
 800090e:	0278      	lsls	r0, r7, #9
 8000910:	0a43      	lsrs	r3, r0, #9
 8000912:	4698      	mov	r8, r3
 8000914:	007b      	lsls	r3, r7, #1
 8000916:	0e1b      	lsrs	r3, r3, #24
 8000918:	0fff      	lsrs	r7, r7, #31
 800091a:	2b00      	cmp	r3, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_fmul+0x44>
 800091e:	e070      	b.n	8000a02 <__aeabi_fmul+0x126>
 8000920:	2bff      	cmp	r3, #255	; 0xff
 8000922:	d100      	bne.n	8000926 <__aeabi_fmul+0x4a>
 8000924:	e086      	b.n	8000a34 <__aeabi_fmul+0x158>
 8000926:	4642      	mov	r2, r8
 8000928:	00d0      	lsls	r0, r2, #3
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	3b7f      	subs	r3, #127	; 0x7f
 800092e:	18ed      	adds	r5, r5, r3
 8000930:	2300      	movs	r3, #0
 8000932:	04d2      	lsls	r2, r2, #19
 8000934:	4302      	orrs	r2, r0
 8000936:	4690      	mov	r8, r2
 8000938:	469c      	mov	ip, r3
 800093a:	0031      	movs	r1, r6
 800093c:	464b      	mov	r3, r9
 800093e:	4079      	eors	r1, r7
 8000940:	1c68      	adds	r0, r5, #1
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d81c      	bhi.n	8000980 <__aeabi_fmul+0xa4>
 8000946:	4a76      	ldr	r2, [pc, #472]	; (8000b20 <__aeabi_fmul+0x244>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	58d3      	ldr	r3, [r2, r3]
 800094c:	469f      	mov	pc, r3
 800094e:	0039      	movs	r1, r7
 8000950:	4644      	mov	r4, r8
 8000952:	46e2      	mov	sl, ip
 8000954:	4653      	mov	r3, sl
 8000956:	2b02      	cmp	r3, #2
 8000958:	d00f      	beq.n	800097a <__aeabi_fmul+0x9e>
 800095a:	2b03      	cmp	r3, #3
 800095c:	d100      	bne.n	8000960 <__aeabi_fmul+0x84>
 800095e:	e0d7      	b.n	8000b10 <__aeabi_fmul+0x234>
 8000960:	2b01      	cmp	r3, #1
 8000962:	d137      	bne.n	80009d4 <__aeabi_fmul+0xf8>
 8000964:	2000      	movs	r0, #0
 8000966:	2400      	movs	r4, #0
 8000968:	05c0      	lsls	r0, r0, #23
 800096a:	4320      	orrs	r0, r4
 800096c:	07c9      	lsls	r1, r1, #31
 800096e:	4308      	orrs	r0, r1
 8000970:	bce0      	pop	{r5, r6, r7}
 8000972:	46ba      	mov	sl, r7
 8000974:	46b1      	mov	r9, r6
 8000976:	46a8      	mov	r8, r5
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	2400      	movs	r4, #0
 800097e:	e7f3      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000980:	0c26      	lsrs	r6, r4, #16
 8000982:	0424      	lsls	r4, r4, #16
 8000984:	0c22      	lsrs	r2, r4, #16
 8000986:	4644      	mov	r4, r8
 8000988:	0424      	lsls	r4, r4, #16
 800098a:	0c24      	lsrs	r4, r4, #16
 800098c:	4643      	mov	r3, r8
 800098e:	0027      	movs	r7, r4
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	4357      	muls	r7, r2
 8000994:	4374      	muls	r4, r6
 8000996:	435a      	muls	r2, r3
 8000998:	435e      	muls	r6, r3
 800099a:	1912      	adds	r2, r2, r4
 800099c:	0c3b      	lsrs	r3, r7, #16
 800099e:	189b      	adds	r3, r3, r2
 80009a0:	429c      	cmp	r4, r3
 80009a2:	d903      	bls.n	80009ac <__aeabi_fmul+0xd0>
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	4694      	mov	ip, r2
 80009aa:	4466      	add	r6, ip
 80009ac:	043f      	lsls	r7, r7, #16
 80009ae:	041a      	lsls	r2, r3, #16
 80009b0:	0c3f      	lsrs	r7, r7, #16
 80009b2:	19d2      	adds	r2, r2, r7
 80009b4:	0194      	lsls	r4, r2, #6
 80009b6:	1e67      	subs	r7, r4, #1
 80009b8:	41bc      	sbcs	r4, r7
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	0e92      	lsrs	r2, r2, #26
 80009be:	199b      	adds	r3, r3, r6
 80009c0:	4314      	orrs	r4, r2
 80009c2:	019b      	lsls	r3, r3, #6
 80009c4:	431c      	orrs	r4, r3
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	d400      	bmi.n	80009cc <__aeabi_fmul+0xf0>
 80009ca:	e09b      	b.n	8000b04 <__aeabi_fmul+0x228>
 80009cc:	2301      	movs	r3, #1
 80009ce:	0862      	lsrs	r2, r4, #1
 80009d0:	401c      	ands	r4, r3
 80009d2:	4314      	orrs	r4, r2
 80009d4:	0002      	movs	r2, r0
 80009d6:	327f      	adds	r2, #127	; 0x7f
 80009d8:	2a00      	cmp	r2, #0
 80009da:	dd64      	ble.n	8000aa6 <__aeabi_fmul+0x1ca>
 80009dc:	0763      	lsls	r3, r4, #29
 80009de:	d004      	beq.n	80009ea <__aeabi_fmul+0x10e>
 80009e0:	230f      	movs	r3, #15
 80009e2:	4023      	ands	r3, r4
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d000      	beq.n	80009ea <__aeabi_fmul+0x10e>
 80009e8:	3404      	adds	r4, #4
 80009ea:	0123      	lsls	r3, r4, #4
 80009ec:	d503      	bpl.n	80009f6 <__aeabi_fmul+0x11a>
 80009ee:	0002      	movs	r2, r0
 80009f0:	4b4c      	ldr	r3, [pc, #304]	; (8000b24 <__aeabi_fmul+0x248>)
 80009f2:	3280      	adds	r2, #128	; 0x80
 80009f4:	401c      	ands	r4, r3
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	dcbf      	bgt.n	800097a <__aeabi_fmul+0x9e>
 80009fa:	01a4      	lsls	r4, r4, #6
 80009fc:	0a64      	lsrs	r4, r4, #9
 80009fe:	b2d0      	uxtb	r0, r2
 8000a00:	e7b2      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000a02:	4643      	mov	r3, r8
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d13d      	bne.n	8000a84 <__aeabi_fmul+0x1a8>
 8000a08:	464a      	mov	r2, r9
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	4691      	mov	r9, r2
 8000a10:	469c      	mov	ip, r3
 8000a12:	e792      	b.n	800093a <__aeabi_fmul+0x5e>
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d129      	bne.n	8000a6c <__aeabi_fmul+0x190>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	2500      	movs	r5, #0
 8000a20:	469a      	mov	sl, r3
 8000a22:	e774      	b.n	800090e <__aeabi_fmul+0x32>
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d11b      	bne.n	8000a60 <__aeabi_fmul+0x184>
 8000a28:	2308      	movs	r3, #8
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	3b06      	subs	r3, #6
 8000a2e:	25ff      	movs	r5, #255	; 0xff
 8000a30:	469a      	mov	sl, r3
 8000a32:	e76c      	b.n	800090e <__aeabi_fmul+0x32>
 8000a34:	4643      	mov	r3, r8
 8000a36:	35ff      	adds	r5, #255	; 0xff
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10b      	bne.n	8000a54 <__aeabi_fmul+0x178>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	464a      	mov	r2, r9
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4691      	mov	r9, r2
 8000a44:	469c      	mov	ip, r3
 8000a46:	e778      	b.n	800093a <__aeabi_fmul+0x5e>
 8000a48:	4653      	mov	r3, sl
 8000a4a:	0031      	movs	r1, r6
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fmul+0x176>
 8000a50:	e783      	b.n	800095a <__aeabi_fmul+0x7e>
 8000a52:	e792      	b.n	800097a <__aeabi_fmul+0x9e>
 8000a54:	2303      	movs	r3, #3
 8000a56:	464a      	mov	r2, r9
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	4691      	mov	r9, r2
 8000a5c:	469c      	mov	ip, r3
 8000a5e:	e76c      	b.n	800093a <__aeabi_fmul+0x5e>
 8000a60:	230c      	movs	r3, #12
 8000a62:	4699      	mov	r9, r3
 8000a64:	3b09      	subs	r3, #9
 8000a66:	25ff      	movs	r5, #255	; 0xff
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e750      	b.n	800090e <__aeabi_fmul+0x32>
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f002 f8e9 	bl	8002c44 <__clzsi2>
 8000a72:	2576      	movs	r5, #118	; 0x76
 8000a74:	1f43      	subs	r3, r0, #5
 8000a76:	409c      	lsls	r4, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	426d      	negs	r5, r5
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	469a      	mov	sl, r3
 8000a80:	1a2d      	subs	r5, r5, r0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0x32>
 8000a84:	4640      	mov	r0, r8
 8000a86:	f002 f8dd 	bl	8002c44 <__clzsi2>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	1f43      	subs	r3, r0, #5
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	1a2d      	subs	r5, r5, r0
 8000a94:	4690      	mov	r8, r2
 8000a96:	469c      	mov	ip, r3
 8000a98:	3d76      	subs	r5, #118	; 0x76
 8000a9a:	e74e      	b.n	800093a <__aeabi_fmul+0x5e>
 8000a9c:	2480      	movs	r4, #128	; 0x80
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	20ff      	movs	r0, #255	; 0xff
 8000aa2:	03e4      	lsls	r4, r4, #15
 8000aa4:	e760      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	2b1b      	cmp	r3, #27
 8000aac:	dd00      	ble.n	8000ab0 <__aeabi_fmul+0x1d4>
 8000aae:	e759      	b.n	8000964 <__aeabi_fmul+0x88>
 8000ab0:	0022      	movs	r2, r4
 8000ab2:	309e      	adds	r0, #158	; 0x9e
 8000ab4:	40da      	lsrs	r2, r3
 8000ab6:	4084      	lsls	r4, r0
 8000ab8:	0013      	movs	r3, r2
 8000aba:	1e62      	subs	r2, r4, #1
 8000abc:	4194      	sbcs	r4, r2
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	0763      	lsls	r3, r4, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fmul+0x1f2>
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	4023      	ands	r3, r4
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fmul+0x1f2>
 8000acc:	3404      	adds	r4, #4
 8000ace:	0163      	lsls	r3, r4, #5
 8000ad0:	d51a      	bpl.n	8000b08 <__aeabi_fmul+0x22c>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e747      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	03c0      	lsls	r0, r0, #15
 8000adc:	4204      	tst	r4, r0
 8000ade:	d009      	beq.n	8000af4 <__aeabi_fmul+0x218>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	4203      	tst	r3, r0
 8000ae4:	d106      	bne.n	8000af4 <__aeabi_fmul+0x218>
 8000ae6:	4644      	mov	r4, r8
 8000ae8:	4304      	orrs	r4, r0
 8000aea:	0264      	lsls	r4, r4, #9
 8000aec:	0039      	movs	r1, r7
 8000aee:	20ff      	movs	r0, #255	; 0xff
 8000af0:	0a64      	lsrs	r4, r4, #9
 8000af2:	e739      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	03c0      	lsls	r0, r0, #15
 8000af8:	4304      	orrs	r4, r0
 8000afa:	0264      	lsls	r4, r4, #9
 8000afc:	0031      	movs	r1, r6
 8000afe:	20ff      	movs	r0, #255	; 0xff
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	e731      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000b04:	0028      	movs	r0, r5
 8000b06:	e765      	b.n	80009d4 <__aeabi_fmul+0xf8>
 8000b08:	01a4      	lsls	r4, r4, #6
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	0a64      	lsrs	r4, r4, #9
 8000b0e:	e72b      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	03c0      	lsls	r0, r0, #15
 8000b14:	4304      	orrs	r4, r0
 8000b16:	0264      	lsls	r4, r4, #9
 8000b18:	20ff      	movs	r0, #255	; 0xff
 8000b1a:	0a64      	lsrs	r4, r4, #9
 8000b1c:	e724      	b.n	8000968 <__aeabi_fmul+0x8c>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	080097f0 	.word	0x080097f0
 8000b24:	f7ffffff 	.word	0xf7ffffff

08000b28 <__aeabi_fsub>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	46ce      	mov	lr, r9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	0243      	lsls	r3, r0, #9
 8000b30:	0a5b      	lsrs	r3, r3, #9
 8000b32:	024e      	lsls	r6, r1, #9
 8000b34:	00da      	lsls	r2, r3, #3
 8000b36:	4694      	mov	ip, r2
 8000b38:	0a72      	lsrs	r2, r6, #9
 8000b3a:	4691      	mov	r9, r2
 8000b3c:	0045      	lsls	r5, r0, #1
 8000b3e:	004a      	lsls	r2, r1, #1
 8000b40:	b580      	push	{r7, lr}
 8000b42:	0e2d      	lsrs	r5, r5, #24
 8000b44:	001f      	movs	r7, r3
 8000b46:	0fc4      	lsrs	r4, r0, #31
 8000b48:	0e12      	lsrs	r2, r2, #24
 8000b4a:	0fc9      	lsrs	r1, r1, #31
 8000b4c:	09b6      	lsrs	r6, r6, #6
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d05b      	beq.n	8000c0a <__aeabi_fsub+0xe2>
 8000b52:	2001      	movs	r0, #1
 8000b54:	4041      	eors	r1, r0
 8000b56:	428c      	cmp	r4, r1
 8000b58:	d039      	beq.n	8000bce <__aeabi_fsub+0xa6>
 8000b5a:	1aa8      	subs	r0, r5, r2
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dd5a      	ble.n	8000c16 <__aeabi_fsub+0xee>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d06a      	beq.n	8000c3a <__aeabi_fsub+0x112>
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x42>
 8000b68:	e0d9      	b.n	8000d1e <__aeabi_fsub+0x1f6>
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	04d2      	lsls	r2, r2, #19
 8000b6e:	4316      	orrs	r6, r2
 8000b70:	281b      	cmp	r0, #27
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_fsub+0x4e>
 8000b74:	e0e9      	b.n	8000d4a <__aeabi_fsub+0x222>
 8000b76:	2001      	movs	r0, #1
 8000b78:	4663      	mov	r3, ip
 8000b7a:	1a18      	subs	r0, r3, r0
 8000b7c:	0143      	lsls	r3, r0, #5
 8000b7e:	d400      	bmi.n	8000b82 <__aeabi_fsub+0x5a>
 8000b80:	e0b4      	b.n	8000cec <__aeabi_fsub+0x1c4>
 8000b82:	0180      	lsls	r0, r0, #6
 8000b84:	0987      	lsrs	r7, r0, #6
 8000b86:	0038      	movs	r0, r7
 8000b88:	f002 f85c 	bl	8002c44 <__clzsi2>
 8000b8c:	3805      	subs	r0, #5
 8000b8e:	4087      	lsls	r7, r0
 8000b90:	4285      	cmp	r5, r0
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_fsub+0x6e>
 8000b94:	e0cc      	b.n	8000d30 <__aeabi_fsub+0x208>
 8000b96:	1a2d      	subs	r5, r5, r0
 8000b98:	48b5      	ldr	r0, [pc, #724]	; (8000e70 <__aeabi_fsub+0x348>)
 8000b9a:	4038      	ands	r0, r7
 8000b9c:	0743      	lsls	r3, r0, #29
 8000b9e:	d004      	beq.n	8000baa <__aeabi_fsub+0x82>
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	4003      	ands	r3, r0
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d000      	beq.n	8000baa <__aeabi_fsub+0x82>
 8000ba8:	3004      	adds	r0, #4
 8000baa:	0143      	lsls	r3, r0, #5
 8000bac:	d400      	bmi.n	8000bb0 <__aeabi_fsub+0x88>
 8000bae:	e0a0      	b.n	8000cf2 <__aeabi_fsub+0x1ca>
 8000bb0:	1c6a      	adds	r2, r5, #1
 8000bb2:	2dfe      	cmp	r5, #254	; 0xfe
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x90>
 8000bb6:	e08d      	b.n	8000cd4 <__aeabi_fsub+0x1ac>
 8000bb8:	0180      	lsls	r0, r0, #6
 8000bba:	0a47      	lsrs	r7, r0, #9
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	05d0      	lsls	r0, r2, #23
 8000bc0:	4338      	orrs	r0, r7
 8000bc2:	07e4      	lsls	r4, r4, #31
 8000bc4:	4320      	orrs	r0, r4
 8000bc6:	bcc0      	pop	{r6, r7}
 8000bc8:	46b9      	mov	r9, r7
 8000bca:	46b0      	mov	r8, r6
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bce:	1aa8      	subs	r0, r5, r2
 8000bd0:	4680      	mov	r8, r0
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	dd45      	ble.n	8000c62 <__aeabi_fsub+0x13a>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d070      	beq.n	8000cbc <__aeabi_fsub+0x194>
 8000bda:	2dff      	cmp	r5, #255	; 0xff
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0xb8>
 8000bde:	e09e      	b.n	8000d1e <__aeabi_fsub+0x1f6>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	04db      	lsls	r3, r3, #19
 8000be4:	431e      	orrs	r6, r3
 8000be6:	4643      	mov	r3, r8
 8000be8:	2b1b      	cmp	r3, #27
 8000bea:	dc00      	bgt.n	8000bee <__aeabi_fsub+0xc6>
 8000bec:	e0d2      	b.n	8000d94 <__aeabi_fsub+0x26c>
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4460      	add	r0, ip
 8000bf2:	0143      	lsls	r3, r0, #5
 8000bf4:	d57a      	bpl.n	8000cec <__aeabi_fsub+0x1c4>
 8000bf6:	3501      	adds	r5, #1
 8000bf8:	2dff      	cmp	r5, #255	; 0xff
 8000bfa:	d06b      	beq.n	8000cd4 <__aeabi_fsub+0x1ac>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	4a9d      	ldr	r2, [pc, #628]	; (8000e74 <__aeabi_fsub+0x34c>)
 8000c00:	4003      	ands	r3, r0
 8000c02:	0840      	lsrs	r0, r0, #1
 8000c04:	4010      	ands	r0, r2
 8000c06:	4318      	orrs	r0, r3
 8000c08:	e7c8      	b.n	8000b9c <__aeabi_fsub+0x74>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d020      	beq.n	8000c50 <__aeabi_fsub+0x128>
 8000c0e:	428c      	cmp	r4, r1
 8000c10:	d023      	beq.n	8000c5a <__aeabi_fsub+0x132>
 8000c12:	0028      	movs	r0, r5
 8000c14:	38ff      	subs	r0, #255	; 0xff
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d039      	beq.n	8000c8e <__aeabi_fsub+0x166>
 8000c1a:	1b57      	subs	r7, r2, r5
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fsub+0xfa>
 8000c20:	e09d      	b.n	8000d5e <__aeabi_fsub+0x236>
 8000c22:	4663      	mov	r3, ip
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x102>
 8000c28:	e0db      	b.n	8000de2 <__aeabi_fsub+0x2ba>
 8000c2a:	1e7b      	subs	r3, r7, #1
 8000c2c:	2f01      	cmp	r7, #1
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fsub+0x10a>
 8000c30:	e10d      	b.n	8000e4e <__aeabi_fsub+0x326>
 8000c32:	2fff      	cmp	r7, #255	; 0xff
 8000c34:	d071      	beq.n	8000d1a <__aeabi_fsub+0x1f2>
 8000c36:	001f      	movs	r7, r3
 8000c38:	e098      	b.n	8000d6c <__aeabi_fsub+0x244>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x118>
 8000c3e:	e0a7      	b.n	8000d90 <__aeabi_fsub+0x268>
 8000c40:	1e42      	subs	r2, r0, #1
 8000c42:	2801      	cmp	r0, #1
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x120>
 8000c46:	e0e6      	b.n	8000e16 <__aeabi_fsub+0x2ee>
 8000c48:	28ff      	cmp	r0, #255	; 0xff
 8000c4a:	d068      	beq.n	8000d1e <__aeabi_fsub+0x1f6>
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fsub+0x48>
 8000c50:	2001      	movs	r0, #1
 8000c52:	4041      	eors	r1, r0
 8000c54:	42a1      	cmp	r1, r4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x132>
 8000c58:	e77f      	b.n	8000b5a <__aeabi_fsub+0x32>
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	4680      	mov	r8, r0
 8000c60:	44a8      	add	r8, r5
 8000c62:	4640      	mov	r0, r8
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d038      	beq.n	8000cda <__aeabi_fsub+0x1b2>
 8000c68:	1b51      	subs	r1, r2, r5
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x148>
 8000c6e:	e0ae      	b.n	8000dce <__aeabi_fsub+0x2a6>
 8000c70:	2aff      	cmp	r2, #255	; 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x14e>
 8000c74:	e0df      	b.n	8000e36 <__aeabi_fsub+0x30e>
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	4660      	mov	r0, ip
 8000c7a:	04db      	lsls	r3, r3, #19
 8000c7c:	4318      	orrs	r0, r3
 8000c7e:	4684      	mov	ip, r0
 8000c80:	291b      	cmp	r1, #27
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_fsub+0x15e>
 8000c84:	e0d9      	b.n	8000e3a <__aeabi_fsub+0x312>
 8000c86:	2001      	movs	r0, #1
 8000c88:	0015      	movs	r5, r2
 8000c8a:	1980      	adds	r0, r0, r6
 8000c8c:	e7b1      	b.n	8000bf2 <__aeabi_fsub+0xca>
 8000c8e:	20fe      	movs	r0, #254	; 0xfe
 8000c90:	1c6a      	adds	r2, r5, #1
 8000c92:	4210      	tst	r0, r2
 8000c94:	d171      	bne.n	8000d7a <__aeabi_fsub+0x252>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fsub+0x174>
 8000c9a:	e0a6      	b.n	8000dea <__aeabi_fsub+0x2c2>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x17c>
 8000ca2:	e0d9      	b.n	8000e58 <__aeabi_fsub+0x330>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x184>
 8000caa:	e788      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000cac:	1b98      	subs	r0, r3, r6
 8000cae:	0143      	lsls	r3, r0, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fsub+0x18c>
 8000cb2:	e0e1      	b.n	8000e78 <__aeabi_fsub+0x350>
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	000c      	movs	r4, r1
 8000cb8:	1af0      	subs	r0, r6, r3
 8000cba:	e76f      	b.n	8000b9c <__aeabi_fsub+0x74>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fsub+0x19a>
 8000cc0:	e0b7      	b.n	8000e32 <__aeabi_fsub+0x30a>
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	3a01      	subs	r2, #1
 8000cc6:	2801      	cmp	r0, #1
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x1a4>
 8000cca:	e09c      	b.n	8000e06 <__aeabi_fsub+0x2de>
 8000ccc:	28ff      	cmp	r0, #255	; 0xff
 8000cce:	d026      	beq.n	8000d1e <__aeabi_fsub+0x1f6>
 8000cd0:	4690      	mov	r8, r2
 8000cd2:	e788      	b.n	8000be6 <__aeabi_fsub+0xbe>
 8000cd4:	22ff      	movs	r2, #255	; 0xff
 8000cd6:	2700      	movs	r7, #0
 8000cd8:	e771      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000cda:	20fe      	movs	r0, #254	; 0xfe
 8000cdc:	1c6a      	adds	r2, r5, #1
 8000cde:	4210      	tst	r0, r2
 8000ce0:	d064      	beq.n	8000dac <__aeabi_fsub+0x284>
 8000ce2:	2aff      	cmp	r2, #255	; 0xff
 8000ce4:	d0f6      	beq.n	8000cd4 <__aeabi_fsub+0x1ac>
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	4466      	add	r6, ip
 8000cea:	0870      	lsrs	r0, r6, #1
 8000cec:	0743      	lsls	r3, r0, #29
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fsub+0x1ca>
 8000cf0:	e756      	b.n	8000ba0 <__aeabi_fsub+0x78>
 8000cf2:	08c3      	lsrs	r3, r0, #3
 8000cf4:	2dff      	cmp	r5, #255	; 0xff
 8000cf6:	d012      	beq.n	8000d1e <__aeabi_fsub+0x1f6>
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	0a5f      	lsrs	r7, r3, #9
 8000cfc:	b2ea      	uxtb	r2, r5
 8000cfe:	e75e      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000d00:	4662      	mov	r2, ip
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0x1e0>
 8000d06:	e096      	b.n	8000e36 <__aeabi_fsub+0x30e>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d008      	beq.n	8000d1e <__aeabi_fsub+0x1f6>
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	03d2      	lsls	r2, r2, #15
 8000d10:	4213      	tst	r3, r2
 8000d12:	d004      	beq.n	8000d1e <__aeabi_fsub+0x1f6>
 8000d14:	4648      	mov	r0, r9
 8000d16:	4210      	tst	r0, r2
 8000d18:	d101      	bne.n	8000d1e <__aeabi_fsub+0x1f6>
 8000d1a:	000c      	movs	r4, r1
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0d8      	beq.n	8000cd4 <__aeabi_fsub+0x1ac>
 8000d22:	2780      	movs	r7, #128	; 0x80
 8000d24:	03ff      	lsls	r7, r7, #15
 8000d26:	431f      	orrs	r7, r3
 8000d28:	027f      	lsls	r7, r7, #9
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	0a7f      	lsrs	r7, r7, #9
 8000d2e:	e746      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000d30:	2320      	movs	r3, #32
 8000d32:	003a      	movs	r2, r7
 8000d34:	1b45      	subs	r5, r0, r5
 8000d36:	0038      	movs	r0, r7
 8000d38:	3501      	adds	r5, #1
 8000d3a:	40ea      	lsrs	r2, r5
 8000d3c:	1b5d      	subs	r5, r3, r5
 8000d3e:	40a8      	lsls	r0, r5
 8000d40:	1e43      	subs	r3, r0, #1
 8000d42:	4198      	sbcs	r0, r3
 8000d44:	2500      	movs	r5, #0
 8000d46:	4310      	orrs	r0, r2
 8000d48:	e728      	b.n	8000b9c <__aeabi_fsub+0x74>
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	1a1b      	subs	r3, r3, r0
 8000d4e:	0032      	movs	r2, r6
 8000d50:	409e      	lsls	r6, r3
 8000d52:	40c2      	lsrs	r2, r0
 8000d54:	0030      	movs	r0, r6
 8000d56:	1e43      	subs	r3, r0, #1
 8000d58:	4198      	sbcs	r0, r3
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	e70c      	b.n	8000b78 <__aeabi_fsub+0x50>
 8000d5e:	2aff      	cmp	r2, #255	; 0xff
 8000d60:	d0db      	beq.n	8000d1a <__aeabi_fsub+0x1f2>
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	4660      	mov	r0, ip
 8000d66:	04db      	lsls	r3, r3, #19
 8000d68:	4318      	orrs	r0, r3
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	2f1b      	cmp	r7, #27
 8000d6e:	dd56      	ble.n	8000e1e <__aeabi_fsub+0x2f6>
 8000d70:	2001      	movs	r0, #1
 8000d72:	000c      	movs	r4, r1
 8000d74:	0015      	movs	r5, r2
 8000d76:	1a30      	subs	r0, r6, r0
 8000d78:	e700      	b.n	8000b7c <__aeabi_fsub+0x54>
 8000d7a:	4663      	mov	r3, ip
 8000d7c:	1b9f      	subs	r7, r3, r6
 8000d7e:	017b      	lsls	r3, r7, #5
 8000d80:	d43d      	bmi.n	8000dfe <__aeabi_fsub+0x2d6>
 8000d82:	2f00      	cmp	r7, #0
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fsub+0x260>
 8000d86:	e6fe      	b.n	8000b86 <__aeabi_fsub+0x5e>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e716      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000d90:	0005      	movs	r5, r0
 8000d92:	e7af      	b.n	8000cf4 <__aeabi_fsub+0x1cc>
 8000d94:	0032      	movs	r2, r6
 8000d96:	4643      	mov	r3, r8
 8000d98:	4641      	mov	r1, r8
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	1a5b      	subs	r3, r3, r1
 8000da0:	409e      	lsls	r6, r3
 8000da2:	0030      	movs	r0, r6
 8000da4:	1e43      	subs	r3, r0, #1
 8000da6:	4198      	sbcs	r0, r3
 8000da8:	4310      	orrs	r0, r2
 8000daa:	e721      	b.n	8000bf0 <__aeabi_fsub+0xc8>
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d1a7      	bne.n	8000d00 <__aeabi_fsub+0x1d8>
 8000db0:	4663      	mov	r3, ip
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d059      	beq.n	8000e6a <__aeabi_fsub+0x342>
 8000db6:	2200      	movs	r2, #0
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x296>
 8000dbc:	e6ff      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000dbe:	0030      	movs	r0, r6
 8000dc0:	4460      	add	r0, ip
 8000dc2:	0143      	lsls	r3, r0, #5
 8000dc4:	d592      	bpl.n	8000cec <__aeabi_fsub+0x1c4>
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <__aeabi_fsub+0x348>)
 8000dc8:	3501      	adds	r5, #1
 8000dca:	4018      	ands	r0, r3
 8000dcc:	e78e      	b.n	8000cec <__aeabi_fsub+0x1c4>
 8000dce:	4663      	mov	r3, ip
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d047      	beq.n	8000e64 <__aeabi_fsub+0x33c>
 8000dd4:	1e4b      	subs	r3, r1, #1
 8000dd6:	2901      	cmp	r1, #1
 8000dd8:	d015      	beq.n	8000e06 <__aeabi_fsub+0x2de>
 8000dda:	29ff      	cmp	r1, #255	; 0xff
 8000ddc:	d02b      	beq.n	8000e36 <__aeabi_fsub+0x30e>
 8000dde:	0019      	movs	r1, r3
 8000de0:	e74e      	b.n	8000c80 <__aeabi_fsub+0x158>
 8000de2:	000c      	movs	r4, r1
 8000de4:	464b      	mov	r3, r9
 8000de6:	003d      	movs	r5, r7
 8000de8:	e784      	b.n	8000cf4 <__aeabi_fsub+0x1cc>
 8000dea:	4662      	mov	r2, ip
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d18b      	bne.n	8000d08 <__aeabi_fsub+0x1e0>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d192      	bne.n	8000d1a <__aeabi_fsub+0x1f2>
 8000df4:	2780      	movs	r7, #128	; 0x80
 8000df6:	2400      	movs	r4, #0
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	03ff      	lsls	r7, r7, #15
 8000dfc:	e6df      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	000c      	movs	r4, r1
 8000e02:	1af7      	subs	r7, r6, r3
 8000e04:	e6bf      	b.n	8000b86 <__aeabi_fsub+0x5e>
 8000e06:	0030      	movs	r0, r6
 8000e08:	4460      	add	r0, ip
 8000e0a:	2501      	movs	r5, #1
 8000e0c:	0143      	lsls	r3, r0, #5
 8000e0e:	d400      	bmi.n	8000e12 <__aeabi_fsub+0x2ea>
 8000e10:	e76c      	b.n	8000cec <__aeabi_fsub+0x1c4>
 8000e12:	2502      	movs	r5, #2
 8000e14:	e6f2      	b.n	8000bfc <__aeabi_fsub+0xd4>
 8000e16:	4663      	mov	r3, ip
 8000e18:	2501      	movs	r5, #1
 8000e1a:	1b98      	subs	r0, r3, r6
 8000e1c:	e6ae      	b.n	8000b7c <__aeabi_fsub+0x54>
 8000e1e:	2320      	movs	r3, #32
 8000e20:	4664      	mov	r4, ip
 8000e22:	4660      	mov	r0, ip
 8000e24:	40fc      	lsrs	r4, r7
 8000e26:	1bdf      	subs	r7, r3, r7
 8000e28:	40b8      	lsls	r0, r7
 8000e2a:	1e43      	subs	r3, r0, #1
 8000e2c:	4198      	sbcs	r0, r3
 8000e2e:	4320      	orrs	r0, r4
 8000e30:	e79f      	b.n	8000d72 <__aeabi_fsub+0x24a>
 8000e32:	0005      	movs	r5, r0
 8000e34:	e75e      	b.n	8000cf4 <__aeabi_fsub+0x1cc>
 8000e36:	464b      	mov	r3, r9
 8000e38:	e771      	b.n	8000d1e <__aeabi_fsub+0x1f6>
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	4665      	mov	r5, ip
 8000e3e:	4660      	mov	r0, ip
 8000e40:	40cd      	lsrs	r5, r1
 8000e42:	1a59      	subs	r1, r3, r1
 8000e44:	4088      	lsls	r0, r1
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	4328      	orrs	r0, r5
 8000e4c:	e71c      	b.n	8000c88 <__aeabi_fsub+0x160>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	000c      	movs	r4, r1
 8000e52:	2501      	movs	r5, #1
 8000e54:	1af0      	subs	r0, r6, r3
 8000e56:	e691      	b.n	8000b7c <__aeabi_fsub+0x54>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d095      	beq.n	8000d88 <__aeabi_fsub+0x260>
 8000e5c:	000c      	movs	r4, r1
 8000e5e:	464f      	mov	r7, r9
 8000e60:	2200      	movs	r2, #0
 8000e62:	e6ac      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000e64:	464b      	mov	r3, r9
 8000e66:	000d      	movs	r5, r1
 8000e68:	e744      	b.n	8000cf4 <__aeabi_fsub+0x1cc>
 8000e6a:	464f      	mov	r7, r9
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	e6a6      	b.n	8000bbe <__aeabi_fsub+0x96>
 8000e70:	fbffffff 	.word	0xfbffffff
 8000e74:	7dffffff 	.word	0x7dffffff
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_fsub+0x356>
 8000e7c:	e736      	b.n	8000cec <__aeabi_fsub+0x1c4>
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2700      	movs	r7, #0
 8000e82:	e69c      	b.n	8000bbe <__aeabi_fsub+0x96>

08000e84 <__aeabi_f2iz>:
 8000e84:	0241      	lsls	r1, r0, #9
 8000e86:	0042      	lsls	r2, r0, #1
 8000e88:	0fc3      	lsrs	r3, r0, #31
 8000e8a:	0a49      	lsrs	r1, r1, #9
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	0e12      	lsrs	r2, r2, #24
 8000e90:	2a7e      	cmp	r2, #126	; 0x7e
 8000e92:	dd03      	ble.n	8000e9c <__aeabi_f2iz+0x18>
 8000e94:	2a9d      	cmp	r2, #157	; 0x9d
 8000e96:	dd02      	ble.n	8000e9e <__aeabi_f2iz+0x1a>
 8000e98:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <__aeabi_f2iz+0x3c>)
 8000e9a:	1898      	adds	r0, r3, r2
 8000e9c:	4770      	bx	lr
 8000e9e:	2080      	movs	r0, #128	; 0x80
 8000ea0:	0400      	lsls	r0, r0, #16
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	2a95      	cmp	r2, #149	; 0x95
 8000ea6:	dc07      	bgt.n	8000eb8 <__aeabi_f2iz+0x34>
 8000ea8:	2096      	movs	r0, #150	; 0x96
 8000eaa:	1a82      	subs	r2, r0, r2
 8000eac:	40d1      	lsrs	r1, r2
 8000eae:	4248      	negs	r0, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f3      	bne.n	8000e9c <__aeabi_f2iz+0x18>
 8000eb4:	0008      	movs	r0, r1
 8000eb6:	e7f1      	b.n	8000e9c <__aeabi_f2iz+0x18>
 8000eb8:	3a96      	subs	r2, #150	; 0x96
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	e7f7      	b.n	8000eae <__aeabi_f2iz+0x2a>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	7fffffff 	.word	0x7fffffff

08000ec4 <__aeabi_i2f>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d013      	beq.n	8000ef2 <__aeabi_i2f+0x2e>
 8000eca:	17c3      	asrs	r3, r0, #31
 8000ecc:	18c6      	adds	r6, r0, r3
 8000ece:	405e      	eors	r6, r3
 8000ed0:	0fc4      	lsrs	r4, r0, #31
 8000ed2:	0030      	movs	r0, r6
 8000ed4:	f001 feb6 	bl	8002c44 <__clzsi2>
 8000ed8:	239e      	movs	r3, #158	; 0x9e
 8000eda:	0005      	movs	r5, r0
 8000edc:	1a1b      	subs	r3, r3, r0
 8000ede:	2b96      	cmp	r3, #150	; 0x96
 8000ee0:	dc0f      	bgt.n	8000f02 <__aeabi_i2f+0x3e>
 8000ee2:	2808      	cmp	r0, #8
 8000ee4:	dd01      	ble.n	8000eea <__aeabi_i2f+0x26>
 8000ee6:	3d08      	subs	r5, #8
 8000ee8:	40ae      	lsls	r6, r5
 8000eea:	0276      	lsls	r6, r6, #9
 8000eec:	0a76      	lsrs	r6, r6, #9
 8000eee:	b2d8      	uxtb	r0, r3
 8000ef0:	e002      	b.n	8000ef8 <__aeabi_i2f+0x34>
 8000ef2:	2400      	movs	r4, #0
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	05c0      	lsls	r0, r0, #23
 8000efa:	4330      	orrs	r0, r6
 8000efc:	07e4      	lsls	r4, r4, #31
 8000efe:	4320      	orrs	r0, r4
 8000f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f02:	2b99      	cmp	r3, #153	; 0x99
 8000f04:	dd0c      	ble.n	8000f20 <__aeabi_i2f+0x5c>
 8000f06:	2205      	movs	r2, #5
 8000f08:	0031      	movs	r1, r6
 8000f0a:	1a12      	subs	r2, r2, r0
 8000f0c:	40d1      	lsrs	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	0001      	movs	r1, r0
 8000f12:	0030      	movs	r0, r6
 8000f14:	311b      	adds	r1, #27
 8000f16:	4088      	lsls	r0, r1
 8000f18:	1e41      	subs	r1, r0, #1
 8000f1a:	4188      	sbcs	r0, r1
 8000f1c:	4302      	orrs	r2, r0
 8000f1e:	0016      	movs	r6, r2
 8000f20:	2d05      	cmp	r5, #5
 8000f22:	dc12      	bgt.n	8000f4a <__aeabi_i2f+0x86>
 8000f24:	0031      	movs	r1, r6
 8000f26:	4f0d      	ldr	r7, [pc, #52]	; (8000f5c <__aeabi_i2f+0x98>)
 8000f28:	4039      	ands	r1, r7
 8000f2a:	0772      	lsls	r2, r6, #29
 8000f2c:	d009      	beq.n	8000f42 <__aeabi_i2f+0x7e>
 8000f2e:	200f      	movs	r0, #15
 8000f30:	4030      	ands	r0, r6
 8000f32:	2804      	cmp	r0, #4
 8000f34:	d005      	beq.n	8000f42 <__aeabi_i2f+0x7e>
 8000f36:	3104      	adds	r1, #4
 8000f38:	014a      	lsls	r2, r1, #5
 8000f3a:	d502      	bpl.n	8000f42 <__aeabi_i2f+0x7e>
 8000f3c:	239f      	movs	r3, #159	; 0x9f
 8000f3e:	4039      	ands	r1, r7
 8000f40:	1b5b      	subs	r3, r3, r5
 8000f42:	0189      	lsls	r1, r1, #6
 8000f44:	0a4e      	lsrs	r6, r1, #9
 8000f46:	b2d8      	uxtb	r0, r3
 8000f48:	e7d6      	b.n	8000ef8 <__aeabi_i2f+0x34>
 8000f4a:	1f6a      	subs	r2, r5, #5
 8000f4c:	4096      	lsls	r6, r2
 8000f4e:	0031      	movs	r1, r6
 8000f50:	4f02      	ldr	r7, [pc, #8]	; (8000f5c <__aeabi_i2f+0x98>)
 8000f52:	4039      	ands	r1, r7
 8000f54:	0772      	lsls	r2, r6, #29
 8000f56:	d0f4      	beq.n	8000f42 <__aeabi_i2f+0x7e>
 8000f58:	e7e9      	b.n	8000f2e <__aeabi_i2f+0x6a>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	fbffffff 	.word	0xfbffffff

08000f60 <__aeabi_dadd>:
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	464f      	mov	r7, r9
 8000f64:	4646      	mov	r6, r8
 8000f66:	46d6      	mov	lr, sl
 8000f68:	000d      	movs	r5, r1
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	b5c0      	push	{r6, r7, lr}
 8000f6e:	001f      	movs	r7, r3
 8000f70:	0011      	movs	r1, r2
 8000f72:	0328      	lsls	r0, r5, #12
 8000f74:	0f62      	lsrs	r2, r4, #29
 8000f76:	0a40      	lsrs	r0, r0, #9
 8000f78:	4310      	orrs	r0, r2
 8000f7a:	007a      	lsls	r2, r7, #1
 8000f7c:	0d52      	lsrs	r2, r2, #21
 8000f7e:	00e3      	lsls	r3, r4, #3
 8000f80:	033c      	lsls	r4, r7, #12
 8000f82:	4691      	mov	r9, r2
 8000f84:	0a64      	lsrs	r4, r4, #9
 8000f86:	0ffa      	lsrs	r2, r7, #31
 8000f88:	0f4f      	lsrs	r7, r1, #29
 8000f8a:	006e      	lsls	r6, r5, #1
 8000f8c:	4327      	orrs	r7, r4
 8000f8e:	4692      	mov	sl, r2
 8000f90:	46b8      	mov	r8, r7
 8000f92:	0d76      	lsrs	r6, r6, #21
 8000f94:	0fed      	lsrs	r5, r5, #31
 8000f96:	00c9      	lsls	r1, r1, #3
 8000f98:	4295      	cmp	r5, r2
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x3e>
 8000f9c:	e099      	b.n	80010d2 <__aeabi_dadd+0x172>
 8000f9e:	464c      	mov	r4, r9
 8000fa0:	1b34      	subs	r4, r6, r4
 8000fa2:	46a4      	mov	ip, r4
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_dadd+0x4a>
 8000fa8:	e07c      	b.n	80010a4 <__aeabi_dadd+0x144>
 8000faa:	464a      	mov	r2, r9
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dadd+0x52>
 8000fb0:	e0b8      	b.n	8001124 <__aeabi_dadd+0x1c4>
 8000fb2:	4ac5      	ldr	r2, [pc, #788]	; (80012c8 <__aeabi_dadd+0x368>)
 8000fb4:	4296      	cmp	r6, r2
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x5a>
 8000fb8:	e11c      	b.n	80011f4 <__aeabi_dadd+0x294>
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	003c      	movs	r4, r7
 8000fbe:	0412      	lsls	r2, r2, #16
 8000fc0:	4314      	orrs	r4, r2
 8000fc2:	46a0      	mov	r8, r4
 8000fc4:	4662      	mov	r2, ip
 8000fc6:	2a38      	cmp	r2, #56	; 0x38
 8000fc8:	dd00      	ble.n	8000fcc <__aeabi_dadd+0x6c>
 8000fca:	e161      	b.n	8001290 <__aeabi_dadd+0x330>
 8000fcc:	2a1f      	cmp	r2, #31
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dadd+0x72>
 8000fd0:	e1cc      	b.n	800136c <__aeabi_dadd+0x40c>
 8000fd2:	4664      	mov	r4, ip
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	1b12      	subs	r2, r2, r4
 8000fd8:	4644      	mov	r4, r8
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	000f      	movs	r7, r1
 8000fde:	46a1      	mov	r9, r4
 8000fe0:	4664      	mov	r4, ip
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	40e7      	lsrs	r7, r4
 8000fe6:	464c      	mov	r4, r9
 8000fe8:	1e4a      	subs	r2, r1, #1
 8000fea:	4191      	sbcs	r1, r2
 8000fec:	433c      	orrs	r4, r7
 8000fee:	4642      	mov	r2, r8
 8000ff0:	4321      	orrs	r1, r4
 8000ff2:	4664      	mov	r4, ip
 8000ff4:	40e2      	lsrs	r2, r4
 8000ff6:	1a80      	subs	r0, r0, r2
 8000ff8:	1a5c      	subs	r4, r3, r1
 8000ffa:	42a3      	cmp	r3, r4
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425f      	negs	r7, r3
 8001000:	1bc7      	subs	r7, r0, r7
 8001002:	023b      	lsls	r3, r7, #8
 8001004:	d400      	bmi.n	8001008 <__aeabi_dadd+0xa8>
 8001006:	e0d0      	b.n	80011aa <__aeabi_dadd+0x24a>
 8001008:	027f      	lsls	r7, r7, #9
 800100a:	0a7f      	lsrs	r7, r7, #9
 800100c:	2f00      	cmp	r7, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0xb2>
 8001010:	e0ff      	b.n	8001212 <__aeabi_dadd+0x2b2>
 8001012:	0038      	movs	r0, r7
 8001014:	f001 fe16 	bl	8002c44 <__clzsi2>
 8001018:	0001      	movs	r1, r0
 800101a:	3908      	subs	r1, #8
 800101c:	2320      	movs	r3, #32
 800101e:	0022      	movs	r2, r4
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	408f      	lsls	r7, r1
 8001024:	40da      	lsrs	r2, r3
 8001026:	408c      	lsls	r4, r1
 8001028:	4317      	orrs	r7, r2
 800102a:	42b1      	cmp	r1, r6
 800102c:	da00      	bge.n	8001030 <__aeabi_dadd+0xd0>
 800102e:	e0ff      	b.n	8001230 <__aeabi_dadd+0x2d0>
 8001030:	1b89      	subs	r1, r1, r6
 8001032:	1c4b      	adds	r3, r1, #1
 8001034:	2b1f      	cmp	r3, #31
 8001036:	dd00      	ble.n	800103a <__aeabi_dadd+0xda>
 8001038:	e0a8      	b.n	800118c <__aeabi_dadd+0x22c>
 800103a:	2220      	movs	r2, #32
 800103c:	0039      	movs	r1, r7
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	0020      	movs	r0, r4
 8001042:	4094      	lsls	r4, r2
 8001044:	4091      	lsls	r1, r2
 8001046:	40d8      	lsrs	r0, r3
 8001048:	1e62      	subs	r2, r4, #1
 800104a:	4194      	sbcs	r4, r2
 800104c:	40df      	lsrs	r7, r3
 800104e:	2600      	movs	r6, #0
 8001050:	4301      	orrs	r1, r0
 8001052:	430c      	orrs	r4, r1
 8001054:	0763      	lsls	r3, r4, #29
 8001056:	d009      	beq.n	800106c <__aeabi_dadd+0x10c>
 8001058:	230f      	movs	r3, #15
 800105a:	4023      	ands	r3, r4
 800105c:	2b04      	cmp	r3, #4
 800105e:	d005      	beq.n	800106c <__aeabi_dadd+0x10c>
 8001060:	1d23      	adds	r3, r4, #4
 8001062:	42a3      	cmp	r3, r4
 8001064:	41a4      	sbcs	r4, r4
 8001066:	4264      	negs	r4, r4
 8001068:	193f      	adds	r7, r7, r4
 800106a:	001c      	movs	r4, r3
 800106c:	023b      	lsls	r3, r7, #8
 800106e:	d400      	bmi.n	8001072 <__aeabi_dadd+0x112>
 8001070:	e09e      	b.n	80011b0 <__aeabi_dadd+0x250>
 8001072:	4b95      	ldr	r3, [pc, #596]	; (80012c8 <__aeabi_dadd+0x368>)
 8001074:	3601      	adds	r6, #1
 8001076:	429e      	cmp	r6, r3
 8001078:	d100      	bne.n	800107c <__aeabi_dadd+0x11c>
 800107a:	e0b7      	b.n	80011ec <__aeabi_dadd+0x28c>
 800107c:	4a93      	ldr	r2, [pc, #588]	; (80012cc <__aeabi_dadd+0x36c>)
 800107e:	08e4      	lsrs	r4, r4, #3
 8001080:	4017      	ands	r7, r2
 8001082:	077b      	lsls	r3, r7, #29
 8001084:	0571      	lsls	r1, r6, #21
 8001086:	027f      	lsls	r7, r7, #9
 8001088:	4323      	orrs	r3, r4
 800108a:	0b3f      	lsrs	r7, r7, #12
 800108c:	0d4a      	lsrs	r2, r1, #21
 800108e:	0512      	lsls	r2, r2, #20
 8001090:	433a      	orrs	r2, r7
 8001092:	07ed      	lsls	r5, r5, #31
 8001094:	432a      	orrs	r2, r5
 8001096:	0018      	movs	r0, r3
 8001098:	0011      	movs	r1, r2
 800109a:	bce0      	pop	{r5, r6, r7}
 800109c:	46ba      	mov	sl, r7
 800109e:	46b1      	mov	r9, r6
 80010a0:	46a8      	mov	r8, r5
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a4:	2c00      	cmp	r4, #0
 80010a6:	d04b      	beq.n	8001140 <__aeabi_dadd+0x1e0>
 80010a8:	464c      	mov	r4, r9
 80010aa:	1ba4      	subs	r4, r4, r6
 80010ac:	46a4      	mov	ip, r4
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dadd+0x154>
 80010b2:	e123      	b.n	80012fc <__aeabi_dadd+0x39c>
 80010b4:	0004      	movs	r4, r0
 80010b6:	431c      	orrs	r4, r3
 80010b8:	d100      	bne.n	80010bc <__aeabi_dadd+0x15c>
 80010ba:	e1af      	b.n	800141c <__aeabi_dadd+0x4bc>
 80010bc:	4662      	mov	r2, ip
 80010be:	1e54      	subs	r4, r2, #1
 80010c0:	2a01      	cmp	r2, #1
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dadd+0x166>
 80010c4:	e215      	b.n	80014f2 <__aeabi_dadd+0x592>
 80010c6:	4d80      	ldr	r5, [pc, #512]	; (80012c8 <__aeabi_dadd+0x368>)
 80010c8:	45ac      	cmp	ip, r5
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x16e>
 80010cc:	e1c8      	b.n	8001460 <__aeabi_dadd+0x500>
 80010ce:	46a4      	mov	ip, r4
 80010d0:	e11b      	b.n	800130a <__aeabi_dadd+0x3aa>
 80010d2:	464a      	mov	r2, r9
 80010d4:	1ab2      	subs	r2, r6, r2
 80010d6:	4694      	mov	ip, r2
 80010d8:	2a00      	cmp	r2, #0
 80010da:	dc00      	bgt.n	80010de <__aeabi_dadd+0x17e>
 80010dc:	e0ac      	b.n	8001238 <__aeabi_dadd+0x2d8>
 80010de:	464a      	mov	r2, r9
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d043      	beq.n	800116c <__aeabi_dadd+0x20c>
 80010e4:	4a78      	ldr	r2, [pc, #480]	; (80012c8 <__aeabi_dadd+0x368>)
 80010e6:	4296      	cmp	r6, r2
 80010e8:	d100      	bne.n	80010ec <__aeabi_dadd+0x18c>
 80010ea:	e1af      	b.n	800144c <__aeabi_dadd+0x4ec>
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	003c      	movs	r4, r7
 80010f0:	0412      	lsls	r2, r2, #16
 80010f2:	4314      	orrs	r4, r2
 80010f4:	46a0      	mov	r8, r4
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a38      	cmp	r2, #56	; 0x38
 80010fa:	dc67      	bgt.n	80011cc <__aeabi_dadd+0x26c>
 80010fc:	2a1f      	cmp	r2, #31
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_dadd+0x1a2>
 8001100:	e15f      	b.n	80013c2 <__aeabi_dadd+0x462>
 8001102:	4647      	mov	r7, r8
 8001104:	3a20      	subs	r2, #32
 8001106:	40d7      	lsrs	r7, r2
 8001108:	4662      	mov	r2, ip
 800110a:	2a20      	cmp	r2, #32
 800110c:	d005      	beq.n	800111a <__aeabi_dadd+0x1ba>
 800110e:	4664      	mov	r4, ip
 8001110:	2240      	movs	r2, #64	; 0x40
 8001112:	1b12      	subs	r2, r2, r4
 8001114:	4644      	mov	r4, r8
 8001116:	4094      	lsls	r4, r2
 8001118:	4321      	orrs	r1, r4
 800111a:	1e4a      	subs	r2, r1, #1
 800111c:	4191      	sbcs	r1, r2
 800111e:	000c      	movs	r4, r1
 8001120:	433c      	orrs	r4, r7
 8001122:	e057      	b.n	80011d4 <__aeabi_dadd+0x274>
 8001124:	003a      	movs	r2, r7
 8001126:	430a      	orrs	r2, r1
 8001128:	d100      	bne.n	800112c <__aeabi_dadd+0x1cc>
 800112a:	e105      	b.n	8001338 <__aeabi_dadd+0x3d8>
 800112c:	0022      	movs	r2, r4
 800112e:	3a01      	subs	r2, #1
 8001130:	2c01      	cmp	r4, #1
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x1d6>
 8001134:	e182      	b.n	800143c <__aeabi_dadd+0x4dc>
 8001136:	4c64      	ldr	r4, [pc, #400]	; (80012c8 <__aeabi_dadd+0x368>)
 8001138:	45a4      	cmp	ip, r4
 800113a:	d05b      	beq.n	80011f4 <__aeabi_dadd+0x294>
 800113c:	4694      	mov	ip, r2
 800113e:	e741      	b.n	8000fc4 <__aeabi_dadd+0x64>
 8001140:	4c63      	ldr	r4, [pc, #396]	; (80012d0 <__aeabi_dadd+0x370>)
 8001142:	1c77      	adds	r7, r6, #1
 8001144:	4227      	tst	r7, r4
 8001146:	d000      	beq.n	800114a <__aeabi_dadd+0x1ea>
 8001148:	e0c4      	b.n	80012d4 <__aeabi_dadd+0x374>
 800114a:	0004      	movs	r4, r0
 800114c:	431c      	orrs	r4, r3
 800114e:	2e00      	cmp	r6, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_dadd+0x1f4>
 8001152:	e169      	b.n	8001428 <__aeabi_dadd+0x4c8>
 8001154:	2c00      	cmp	r4, #0
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0x1fa>
 8001158:	e1bf      	b.n	80014da <__aeabi_dadd+0x57a>
 800115a:	4644      	mov	r4, r8
 800115c:	430c      	orrs	r4, r1
 800115e:	d000      	beq.n	8001162 <__aeabi_dadd+0x202>
 8001160:	e1d0      	b.n	8001504 <__aeabi_dadd+0x5a4>
 8001162:	0742      	lsls	r2, r0, #29
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	4313      	orrs	r3, r2
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	e029      	b.n	80011c0 <__aeabi_dadd+0x260>
 800116c:	003a      	movs	r2, r7
 800116e:	430a      	orrs	r2, r1
 8001170:	d100      	bne.n	8001174 <__aeabi_dadd+0x214>
 8001172:	e170      	b.n	8001456 <__aeabi_dadd+0x4f6>
 8001174:	4662      	mov	r2, ip
 8001176:	4664      	mov	r4, ip
 8001178:	3a01      	subs	r2, #1
 800117a:	2c01      	cmp	r4, #1
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x220>
 800117e:	e0e0      	b.n	8001342 <__aeabi_dadd+0x3e2>
 8001180:	4c51      	ldr	r4, [pc, #324]	; (80012c8 <__aeabi_dadd+0x368>)
 8001182:	45a4      	cmp	ip, r4
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x228>
 8001186:	e161      	b.n	800144c <__aeabi_dadd+0x4ec>
 8001188:	4694      	mov	ip, r2
 800118a:	e7b4      	b.n	80010f6 <__aeabi_dadd+0x196>
 800118c:	003a      	movs	r2, r7
 800118e:	391f      	subs	r1, #31
 8001190:	40ca      	lsrs	r2, r1
 8001192:	0011      	movs	r1, r2
 8001194:	2b20      	cmp	r3, #32
 8001196:	d003      	beq.n	80011a0 <__aeabi_dadd+0x240>
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	409f      	lsls	r7, r3
 800119e:	433c      	orrs	r4, r7
 80011a0:	1e63      	subs	r3, r4, #1
 80011a2:	419c      	sbcs	r4, r3
 80011a4:	2700      	movs	r7, #0
 80011a6:	2600      	movs	r6, #0
 80011a8:	430c      	orrs	r4, r1
 80011aa:	0763      	lsls	r3, r4, #29
 80011ac:	d000      	beq.n	80011b0 <__aeabi_dadd+0x250>
 80011ae:	e753      	b.n	8001058 <__aeabi_dadd+0xf8>
 80011b0:	46b4      	mov	ip, r6
 80011b2:	08e4      	lsrs	r4, r4, #3
 80011b4:	077b      	lsls	r3, r7, #29
 80011b6:	4323      	orrs	r3, r4
 80011b8:	08f8      	lsrs	r0, r7, #3
 80011ba:	4a43      	ldr	r2, [pc, #268]	; (80012c8 <__aeabi_dadd+0x368>)
 80011bc:	4594      	cmp	ip, r2
 80011be:	d01d      	beq.n	80011fc <__aeabi_dadd+0x29c>
 80011c0:	4662      	mov	r2, ip
 80011c2:	0307      	lsls	r7, r0, #12
 80011c4:	0552      	lsls	r2, r2, #21
 80011c6:	0b3f      	lsrs	r7, r7, #12
 80011c8:	0d52      	lsrs	r2, r2, #21
 80011ca:	e760      	b.n	800108e <__aeabi_dadd+0x12e>
 80011cc:	4644      	mov	r4, r8
 80011ce:	430c      	orrs	r4, r1
 80011d0:	1e62      	subs	r2, r4, #1
 80011d2:	4194      	sbcs	r4, r2
 80011d4:	18e4      	adds	r4, r4, r3
 80011d6:	429c      	cmp	r4, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425f      	negs	r7, r3
 80011dc:	183f      	adds	r7, r7, r0
 80011de:	023b      	lsls	r3, r7, #8
 80011e0:	d5e3      	bpl.n	80011aa <__aeabi_dadd+0x24a>
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <__aeabi_dadd+0x368>)
 80011e4:	3601      	adds	r6, #1
 80011e6:	429e      	cmp	r6, r3
 80011e8:	d000      	beq.n	80011ec <__aeabi_dadd+0x28c>
 80011ea:	e0b5      	b.n	8001358 <__aeabi_dadd+0x3f8>
 80011ec:	0032      	movs	r2, r6
 80011ee:	2700      	movs	r7, #0
 80011f0:	2300      	movs	r3, #0
 80011f2:	e74c      	b.n	800108e <__aeabi_dadd+0x12e>
 80011f4:	0742      	lsls	r2, r0, #29
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	08c0      	lsrs	r0, r0, #3
 80011fc:	001a      	movs	r2, r3
 80011fe:	4302      	orrs	r2, r0
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x2a4>
 8001202:	e1e1      	b.n	80015c8 <__aeabi_dadd+0x668>
 8001204:	2780      	movs	r7, #128	; 0x80
 8001206:	033f      	lsls	r7, r7, #12
 8001208:	4307      	orrs	r7, r0
 800120a:	033f      	lsls	r7, r7, #12
 800120c:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <__aeabi_dadd+0x368>)
 800120e:	0b3f      	lsrs	r7, r7, #12
 8001210:	e73d      	b.n	800108e <__aeabi_dadd+0x12e>
 8001212:	0020      	movs	r0, r4
 8001214:	f001 fd16 	bl	8002c44 <__clzsi2>
 8001218:	0001      	movs	r1, r0
 800121a:	3118      	adds	r1, #24
 800121c:	291f      	cmp	r1, #31
 800121e:	dc00      	bgt.n	8001222 <__aeabi_dadd+0x2c2>
 8001220:	e6fc      	b.n	800101c <__aeabi_dadd+0xbc>
 8001222:	3808      	subs	r0, #8
 8001224:	4084      	lsls	r4, r0
 8001226:	0027      	movs	r7, r4
 8001228:	2400      	movs	r4, #0
 800122a:	42b1      	cmp	r1, r6
 800122c:	db00      	blt.n	8001230 <__aeabi_dadd+0x2d0>
 800122e:	e6ff      	b.n	8001030 <__aeabi_dadd+0xd0>
 8001230:	4a26      	ldr	r2, [pc, #152]	; (80012cc <__aeabi_dadd+0x36c>)
 8001232:	1a76      	subs	r6, r6, r1
 8001234:	4017      	ands	r7, r2
 8001236:	e70d      	b.n	8001054 <__aeabi_dadd+0xf4>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d02f      	beq.n	800129c <__aeabi_dadd+0x33c>
 800123c:	464a      	mov	r2, r9
 800123e:	1b92      	subs	r2, r2, r6
 8001240:	4694      	mov	ip, r2
 8001242:	2e00      	cmp	r6, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x2e8>
 8001246:	e0ad      	b.n	80013a4 <__aeabi_dadd+0x444>
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <__aeabi_dadd+0x368>)
 800124a:	4591      	cmp	r9, r2
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x2f0>
 800124e:	e10f      	b.n	8001470 <__aeabi_dadd+0x510>
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0412      	lsls	r2, r2, #16
 8001254:	4310      	orrs	r0, r2
 8001256:	4662      	mov	r2, ip
 8001258:	2a38      	cmp	r2, #56	; 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dadd+0x2fe>
 800125c:	e10f      	b.n	800147e <__aeabi_dadd+0x51e>
 800125e:	2a1f      	cmp	r2, #31
 8001260:	dd00      	ble.n	8001264 <__aeabi_dadd+0x304>
 8001262:	e180      	b.n	8001566 <__aeabi_dadd+0x606>
 8001264:	4664      	mov	r4, ip
 8001266:	2220      	movs	r2, #32
 8001268:	001e      	movs	r6, r3
 800126a:	1b12      	subs	r2, r2, r4
 800126c:	4667      	mov	r7, ip
 800126e:	0004      	movs	r4, r0
 8001270:	4093      	lsls	r3, r2
 8001272:	4094      	lsls	r4, r2
 8001274:	40fe      	lsrs	r6, r7
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	4193      	sbcs	r3, r2
 800127a:	40f8      	lsrs	r0, r7
 800127c:	4334      	orrs	r4, r6
 800127e:	431c      	orrs	r4, r3
 8001280:	4480      	add	r8, r0
 8001282:	1864      	adds	r4, r4, r1
 8001284:	428c      	cmp	r4, r1
 8001286:	41bf      	sbcs	r7, r7
 8001288:	427f      	negs	r7, r7
 800128a:	464e      	mov	r6, r9
 800128c:	4447      	add	r7, r8
 800128e:	e7a6      	b.n	80011de <__aeabi_dadd+0x27e>
 8001290:	4642      	mov	r2, r8
 8001292:	430a      	orrs	r2, r1
 8001294:	0011      	movs	r1, r2
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	e6ad      	b.n	8000ff8 <__aeabi_dadd+0x98>
 800129c:	4c0c      	ldr	r4, [pc, #48]	; (80012d0 <__aeabi_dadd+0x370>)
 800129e:	1c72      	adds	r2, r6, #1
 80012a0:	4222      	tst	r2, r4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dadd+0x346>
 80012a4:	e0a1      	b.n	80013ea <__aeabi_dadd+0x48a>
 80012a6:	0002      	movs	r2, r0
 80012a8:	431a      	orrs	r2, r3
 80012aa:	2e00      	cmp	r6, #0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_dadd+0x350>
 80012ae:	e0fa      	b.n	80014a6 <__aeabi_dadd+0x546>
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dadd+0x356>
 80012b4:	e145      	b.n	8001542 <__aeabi_dadd+0x5e2>
 80012b6:	003a      	movs	r2, r7
 80012b8:	430a      	orrs	r2, r1
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x35e>
 80012bc:	e146      	b.n	800154c <__aeabi_dadd+0x5ec>
 80012be:	0742      	lsls	r2, r0, #29
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	08c0      	lsrs	r0, r0, #3
 80012c6:	e77b      	b.n	80011c0 <__aeabi_dadd+0x260>
 80012c8:	000007ff 	.word	0x000007ff
 80012cc:	ff7fffff 	.word	0xff7fffff
 80012d0:	000007fe 	.word	0x000007fe
 80012d4:	4647      	mov	r7, r8
 80012d6:	1a5c      	subs	r4, r3, r1
 80012d8:	1bc2      	subs	r2, r0, r7
 80012da:	42a3      	cmp	r3, r4
 80012dc:	41bf      	sbcs	r7, r7
 80012de:	427f      	negs	r7, r7
 80012e0:	46b9      	mov	r9, r7
 80012e2:	0017      	movs	r7, r2
 80012e4:	464a      	mov	r2, r9
 80012e6:	1abf      	subs	r7, r7, r2
 80012e8:	023a      	lsls	r2, r7, #8
 80012ea:	d500      	bpl.n	80012ee <__aeabi_dadd+0x38e>
 80012ec:	e08d      	b.n	800140a <__aeabi_dadd+0x4aa>
 80012ee:	0023      	movs	r3, r4
 80012f0:	433b      	orrs	r3, r7
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x396>
 80012f4:	e68a      	b.n	800100c <__aeabi_dadd+0xac>
 80012f6:	2000      	movs	r0, #0
 80012f8:	2500      	movs	r5, #0
 80012fa:	e761      	b.n	80011c0 <__aeabi_dadd+0x260>
 80012fc:	4cb4      	ldr	r4, [pc, #720]	; (80015d0 <__aeabi_dadd+0x670>)
 80012fe:	45a1      	cmp	r9, r4
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x3a4>
 8001302:	e0ad      	b.n	8001460 <__aeabi_dadd+0x500>
 8001304:	2480      	movs	r4, #128	; 0x80
 8001306:	0424      	lsls	r4, r4, #16
 8001308:	4320      	orrs	r0, r4
 800130a:	4664      	mov	r4, ip
 800130c:	2c38      	cmp	r4, #56	; 0x38
 800130e:	dc3d      	bgt.n	800138c <__aeabi_dadd+0x42c>
 8001310:	4662      	mov	r2, ip
 8001312:	2c1f      	cmp	r4, #31
 8001314:	dd00      	ble.n	8001318 <__aeabi_dadd+0x3b8>
 8001316:	e0b7      	b.n	8001488 <__aeabi_dadd+0x528>
 8001318:	2520      	movs	r5, #32
 800131a:	001e      	movs	r6, r3
 800131c:	1b2d      	subs	r5, r5, r4
 800131e:	0004      	movs	r4, r0
 8001320:	40ab      	lsls	r3, r5
 8001322:	40ac      	lsls	r4, r5
 8001324:	40d6      	lsrs	r6, r2
 8001326:	40d0      	lsrs	r0, r2
 8001328:	4642      	mov	r2, r8
 800132a:	1e5d      	subs	r5, r3, #1
 800132c:	41ab      	sbcs	r3, r5
 800132e:	4334      	orrs	r4, r6
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	4690      	mov	r8, r2
 8001334:	4323      	orrs	r3, r4
 8001336:	e02c      	b.n	8001392 <__aeabi_dadd+0x432>
 8001338:	0742      	lsls	r2, r0, #29
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	4313      	orrs	r3, r2
 800133e:	08c0      	lsrs	r0, r0, #3
 8001340:	e73b      	b.n	80011ba <__aeabi_dadd+0x25a>
 8001342:	185c      	adds	r4, r3, r1
 8001344:	429c      	cmp	r4, r3
 8001346:	419b      	sbcs	r3, r3
 8001348:	4440      	add	r0, r8
 800134a:	425b      	negs	r3, r3
 800134c:	18c7      	adds	r7, r0, r3
 800134e:	2601      	movs	r6, #1
 8001350:	023b      	lsls	r3, r7, #8
 8001352:	d400      	bmi.n	8001356 <__aeabi_dadd+0x3f6>
 8001354:	e729      	b.n	80011aa <__aeabi_dadd+0x24a>
 8001356:	2602      	movs	r6, #2
 8001358:	4a9e      	ldr	r2, [pc, #632]	; (80015d4 <__aeabi_dadd+0x674>)
 800135a:	0863      	lsrs	r3, r4, #1
 800135c:	4017      	ands	r7, r2
 800135e:	2201      	movs	r2, #1
 8001360:	4014      	ands	r4, r2
 8001362:	431c      	orrs	r4, r3
 8001364:	07fb      	lsls	r3, r7, #31
 8001366:	431c      	orrs	r4, r3
 8001368:	087f      	lsrs	r7, r7, #1
 800136a:	e673      	b.n	8001054 <__aeabi_dadd+0xf4>
 800136c:	4644      	mov	r4, r8
 800136e:	3a20      	subs	r2, #32
 8001370:	40d4      	lsrs	r4, r2
 8001372:	4662      	mov	r2, ip
 8001374:	2a20      	cmp	r2, #32
 8001376:	d005      	beq.n	8001384 <__aeabi_dadd+0x424>
 8001378:	4667      	mov	r7, ip
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	1bd2      	subs	r2, r2, r7
 800137e:	4647      	mov	r7, r8
 8001380:	4097      	lsls	r7, r2
 8001382:	4339      	orrs	r1, r7
 8001384:	1e4a      	subs	r2, r1, #1
 8001386:	4191      	sbcs	r1, r2
 8001388:	4321      	orrs	r1, r4
 800138a:	e635      	b.n	8000ff8 <__aeabi_dadd+0x98>
 800138c:	4303      	orrs	r3, r0
 800138e:	1e58      	subs	r0, r3, #1
 8001390:	4183      	sbcs	r3, r0
 8001392:	1acc      	subs	r4, r1, r3
 8001394:	42a1      	cmp	r1, r4
 8001396:	41bf      	sbcs	r7, r7
 8001398:	4643      	mov	r3, r8
 800139a:	427f      	negs	r7, r7
 800139c:	4655      	mov	r5, sl
 800139e:	464e      	mov	r6, r9
 80013a0:	1bdf      	subs	r7, r3, r7
 80013a2:	e62e      	b.n	8001002 <__aeabi_dadd+0xa2>
 80013a4:	0002      	movs	r2, r0
 80013a6:	431a      	orrs	r2, r3
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x44c>
 80013aa:	e0bd      	b.n	8001528 <__aeabi_dadd+0x5c8>
 80013ac:	4662      	mov	r2, ip
 80013ae:	4664      	mov	r4, ip
 80013b0:	3a01      	subs	r2, #1
 80013b2:	2c01      	cmp	r4, #1
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dadd+0x458>
 80013b6:	e0e5      	b.n	8001584 <__aeabi_dadd+0x624>
 80013b8:	4c85      	ldr	r4, [pc, #532]	; (80015d0 <__aeabi_dadd+0x670>)
 80013ba:	45a4      	cmp	ip, r4
 80013bc:	d058      	beq.n	8001470 <__aeabi_dadd+0x510>
 80013be:	4694      	mov	ip, r2
 80013c0:	e749      	b.n	8001256 <__aeabi_dadd+0x2f6>
 80013c2:	4664      	mov	r4, ip
 80013c4:	2220      	movs	r2, #32
 80013c6:	1b12      	subs	r2, r2, r4
 80013c8:	4644      	mov	r4, r8
 80013ca:	4094      	lsls	r4, r2
 80013cc:	000f      	movs	r7, r1
 80013ce:	46a1      	mov	r9, r4
 80013d0:	4664      	mov	r4, ip
 80013d2:	4091      	lsls	r1, r2
 80013d4:	40e7      	lsrs	r7, r4
 80013d6:	464c      	mov	r4, r9
 80013d8:	1e4a      	subs	r2, r1, #1
 80013da:	4191      	sbcs	r1, r2
 80013dc:	433c      	orrs	r4, r7
 80013de:	4642      	mov	r2, r8
 80013e0:	430c      	orrs	r4, r1
 80013e2:	4661      	mov	r1, ip
 80013e4:	40ca      	lsrs	r2, r1
 80013e6:	1880      	adds	r0, r0, r2
 80013e8:	e6f4      	b.n	80011d4 <__aeabi_dadd+0x274>
 80013ea:	4c79      	ldr	r4, [pc, #484]	; (80015d0 <__aeabi_dadd+0x670>)
 80013ec:	42a2      	cmp	r2, r4
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x492>
 80013f0:	e6fd      	b.n	80011ee <__aeabi_dadd+0x28e>
 80013f2:	1859      	adds	r1, r3, r1
 80013f4:	4299      	cmp	r1, r3
 80013f6:	419b      	sbcs	r3, r3
 80013f8:	4440      	add	r0, r8
 80013fa:	425f      	negs	r7, r3
 80013fc:	19c7      	adds	r7, r0, r7
 80013fe:	07fc      	lsls	r4, r7, #31
 8001400:	0849      	lsrs	r1, r1, #1
 8001402:	0016      	movs	r6, r2
 8001404:	430c      	orrs	r4, r1
 8001406:	087f      	lsrs	r7, r7, #1
 8001408:	e6cf      	b.n	80011aa <__aeabi_dadd+0x24a>
 800140a:	1acc      	subs	r4, r1, r3
 800140c:	42a1      	cmp	r1, r4
 800140e:	41bf      	sbcs	r7, r7
 8001410:	4643      	mov	r3, r8
 8001412:	427f      	negs	r7, r7
 8001414:	1a18      	subs	r0, r3, r0
 8001416:	4655      	mov	r5, sl
 8001418:	1bc7      	subs	r7, r0, r7
 800141a:	e5f7      	b.n	800100c <__aeabi_dadd+0xac>
 800141c:	08c9      	lsrs	r1, r1, #3
 800141e:	077b      	lsls	r3, r7, #29
 8001420:	4655      	mov	r5, sl
 8001422:	430b      	orrs	r3, r1
 8001424:	08f8      	lsrs	r0, r7, #3
 8001426:	e6c8      	b.n	80011ba <__aeabi_dadd+0x25a>
 8001428:	2c00      	cmp	r4, #0
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x4ce>
 800142c:	e081      	b.n	8001532 <__aeabi_dadd+0x5d2>
 800142e:	4643      	mov	r3, r8
 8001430:	430b      	orrs	r3, r1
 8001432:	d115      	bne.n	8001460 <__aeabi_dadd+0x500>
 8001434:	2080      	movs	r0, #128	; 0x80
 8001436:	2500      	movs	r5, #0
 8001438:	0300      	lsls	r0, r0, #12
 800143a:	e6e3      	b.n	8001204 <__aeabi_dadd+0x2a4>
 800143c:	1a5c      	subs	r4, r3, r1
 800143e:	42a3      	cmp	r3, r4
 8001440:	419b      	sbcs	r3, r3
 8001442:	1bc7      	subs	r7, r0, r7
 8001444:	425b      	negs	r3, r3
 8001446:	2601      	movs	r6, #1
 8001448:	1aff      	subs	r7, r7, r3
 800144a:	e5da      	b.n	8001002 <__aeabi_dadd+0xa2>
 800144c:	0742      	lsls	r2, r0, #29
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	4313      	orrs	r3, r2
 8001452:	08c0      	lsrs	r0, r0, #3
 8001454:	e6d2      	b.n	80011fc <__aeabi_dadd+0x29c>
 8001456:	0742      	lsls	r2, r0, #29
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	4313      	orrs	r3, r2
 800145c:	08c0      	lsrs	r0, r0, #3
 800145e:	e6ac      	b.n	80011ba <__aeabi_dadd+0x25a>
 8001460:	4643      	mov	r3, r8
 8001462:	4642      	mov	r2, r8
 8001464:	08c9      	lsrs	r1, r1, #3
 8001466:	075b      	lsls	r3, r3, #29
 8001468:	4655      	mov	r5, sl
 800146a:	430b      	orrs	r3, r1
 800146c:	08d0      	lsrs	r0, r2, #3
 800146e:	e6c5      	b.n	80011fc <__aeabi_dadd+0x29c>
 8001470:	4643      	mov	r3, r8
 8001472:	4642      	mov	r2, r8
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	08c9      	lsrs	r1, r1, #3
 8001478:	430b      	orrs	r3, r1
 800147a:	08d0      	lsrs	r0, r2, #3
 800147c:	e6be      	b.n	80011fc <__aeabi_dadd+0x29c>
 800147e:	4303      	orrs	r3, r0
 8001480:	001c      	movs	r4, r3
 8001482:	1e63      	subs	r3, r4, #1
 8001484:	419c      	sbcs	r4, r3
 8001486:	e6fc      	b.n	8001282 <__aeabi_dadd+0x322>
 8001488:	0002      	movs	r2, r0
 800148a:	3c20      	subs	r4, #32
 800148c:	40e2      	lsrs	r2, r4
 800148e:	0014      	movs	r4, r2
 8001490:	4662      	mov	r2, ip
 8001492:	2a20      	cmp	r2, #32
 8001494:	d003      	beq.n	800149e <__aeabi_dadd+0x53e>
 8001496:	2540      	movs	r5, #64	; 0x40
 8001498:	1aad      	subs	r5, r5, r2
 800149a:	40a8      	lsls	r0, r5
 800149c:	4303      	orrs	r3, r0
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	4183      	sbcs	r3, r0
 80014a2:	4323      	orrs	r3, r4
 80014a4:	e775      	b.n	8001392 <__aeabi_dadd+0x432>
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d0e2      	beq.n	8001470 <__aeabi_dadd+0x510>
 80014aa:	003a      	movs	r2, r7
 80014ac:	430a      	orrs	r2, r1
 80014ae:	d0cd      	beq.n	800144c <__aeabi_dadd+0x4ec>
 80014b0:	0742      	lsls	r2, r0, #29
 80014b2:	08db      	lsrs	r3, r3, #3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	0312      	lsls	r2, r2, #12
 80014bc:	4210      	tst	r0, r2
 80014be:	d006      	beq.n	80014ce <__aeabi_dadd+0x56e>
 80014c0:	08fc      	lsrs	r4, r7, #3
 80014c2:	4214      	tst	r4, r2
 80014c4:	d103      	bne.n	80014ce <__aeabi_dadd+0x56e>
 80014c6:	0020      	movs	r0, r4
 80014c8:	08cb      	lsrs	r3, r1, #3
 80014ca:	077a      	lsls	r2, r7, #29
 80014cc:	4313      	orrs	r3, r2
 80014ce:	0f5a      	lsrs	r2, r3, #29
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	0752      	lsls	r2, r2, #29
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	e690      	b.n	80011fc <__aeabi_dadd+0x29c>
 80014da:	4643      	mov	r3, r8
 80014dc:	430b      	orrs	r3, r1
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x582>
 80014e0:	e709      	b.n	80012f6 <__aeabi_dadd+0x396>
 80014e2:	4643      	mov	r3, r8
 80014e4:	4642      	mov	r2, r8
 80014e6:	08c9      	lsrs	r1, r1, #3
 80014e8:	075b      	lsls	r3, r3, #29
 80014ea:	4655      	mov	r5, sl
 80014ec:	430b      	orrs	r3, r1
 80014ee:	08d0      	lsrs	r0, r2, #3
 80014f0:	e666      	b.n	80011c0 <__aeabi_dadd+0x260>
 80014f2:	1acc      	subs	r4, r1, r3
 80014f4:	42a1      	cmp	r1, r4
 80014f6:	4189      	sbcs	r1, r1
 80014f8:	1a3f      	subs	r7, r7, r0
 80014fa:	4249      	negs	r1, r1
 80014fc:	4655      	mov	r5, sl
 80014fe:	2601      	movs	r6, #1
 8001500:	1a7f      	subs	r7, r7, r1
 8001502:	e57e      	b.n	8001002 <__aeabi_dadd+0xa2>
 8001504:	4642      	mov	r2, r8
 8001506:	1a5c      	subs	r4, r3, r1
 8001508:	1a87      	subs	r7, r0, r2
 800150a:	42a3      	cmp	r3, r4
 800150c:	4192      	sbcs	r2, r2
 800150e:	4252      	negs	r2, r2
 8001510:	1abf      	subs	r7, r7, r2
 8001512:	023a      	lsls	r2, r7, #8
 8001514:	d53d      	bpl.n	8001592 <__aeabi_dadd+0x632>
 8001516:	1acc      	subs	r4, r1, r3
 8001518:	42a1      	cmp	r1, r4
 800151a:	4189      	sbcs	r1, r1
 800151c:	4643      	mov	r3, r8
 800151e:	4249      	negs	r1, r1
 8001520:	1a1f      	subs	r7, r3, r0
 8001522:	4655      	mov	r5, sl
 8001524:	1a7f      	subs	r7, r7, r1
 8001526:	e595      	b.n	8001054 <__aeabi_dadd+0xf4>
 8001528:	077b      	lsls	r3, r7, #29
 800152a:	08c9      	lsrs	r1, r1, #3
 800152c:	430b      	orrs	r3, r1
 800152e:	08f8      	lsrs	r0, r7, #3
 8001530:	e643      	b.n	80011ba <__aeabi_dadd+0x25a>
 8001532:	4644      	mov	r4, r8
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	430c      	orrs	r4, r1
 8001538:	d130      	bne.n	800159c <__aeabi_dadd+0x63c>
 800153a:	0742      	lsls	r2, r0, #29
 800153c:	4313      	orrs	r3, r2
 800153e:	08c0      	lsrs	r0, r0, #3
 8001540:	e65c      	b.n	80011fc <__aeabi_dadd+0x29c>
 8001542:	077b      	lsls	r3, r7, #29
 8001544:	08c9      	lsrs	r1, r1, #3
 8001546:	430b      	orrs	r3, r1
 8001548:	08f8      	lsrs	r0, r7, #3
 800154a:	e639      	b.n	80011c0 <__aeabi_dadd+0x260>
 800154c:	185c      	adds	r4, r3, r1
 800154e:	429c      	cmp	r4, r3
 8001550:	419b      	sbcs	r3, r3
 8001552:	4440      	add	r0, r8
 8001554:	425b      	negs	r3, r3
 8001556:	18c7      	adds	r7, r0, r3
 8001558:	023b      	lsls	r3, r7, #8
 800155a:	d400      	bmi.n	800155e <__aeabi_dadd+0x5fe>
 800155c:	e625      	b.n	80011aa <__aeabi_dadd+0x24a>
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <__aeabi_dadd+0x674>)
 8001560:	2601      	movs	r6, #1
 8001562:	401f      	ands	r7, r3
 8001564:	e621      	b.n	80011aa <__aeabi_dadd+0x24a>
 8001566:	0004      	movs	r4, r0
 8001568:	3a20      	subs	r2, #32
 800156a:	40d4      	lsrs	r4, r2
 800156c:	4662      	mov	r2, ip
 800156e:	2a20      	cmp	r2, #32
 8001570:	d004      	beq.n	800157c <__aeabi_dadd+0x61c>
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	4666      	mov	r6, ip
 8001576:	1b92      	subs	r2, r2, r6
 8001578:	4090      	lsls	r0, r2
 800157a:	4303      	orrs	r3, r0
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	4193      	sbcs	r3, r2
 8001580:	431c      	orrs	r4, r3
 8001582:	e67e      	b.n	8001282 <__aeabi_dadd+0x322>
 8001584:	185c      	adds	r4, r3, r1
 8001586:	428c      	cmp	r4, r1
 8001588:	4189      	sbcs	r1, r1
 800158a:	4440      	add	r0, r8
 800158c:	4249      	negs	r1, r1
 800158e:	1847      	adds	r7, r0, r1
 8001590:	e6dd      	b.n	800134e <__aeabi_dadd+0x3ee>
 8001592:	0023      	movs	r3, r4
 8001594:	433b      	orrs	r3, r7
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x63a>
 8001598:	e6ad      	b.n	80012f6 <__aeabi_dadd+0x396>
 800159a:	e606      	b.n	80011aa <__aeabi_dadd+0x24a>
 800159c:	0744      	lsls	r4, r0, #29
 800159e:	4323      	orrs	r3, r4
 80015a0:	2480      	movs	r4, #128	; 0x80
 80015a2:	08c0      	lsrs	r0, r0, #3
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	4220      	tst	r0, r4
 80015a8:	d008      	beq.n	80015bc <__aeabi_dadd+0x65c>
 80015aa:	4642      	mov	r2, r8
 80015ac:	08d6      	lsrs	r6, r2, #3
 80015ae:	4226      	tst	r6, r4
 80015b0:	d104      	bne.n	80015bc <__aeabi_dadd+0x65c>
 80015b2:	4655      	mov	r5, sl
 80015b4:	0030      	movs	r0, r6
 80015b6:	08cb      	lsrs	r3, r1, #3
 80015b8:	0751      	lsls	r1, r2, #29
 80015ba:	430b      	orrs	r3, r1
 80015bc:	0f5a      	lsrs	r2, r3, #29
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	0752      	lsls	r2, r2, #29
 80015c4:	4313      	orrs	r3, r2
 80015c6:	e619      	b.n	80011fc <__aeabi_dadd+0x29c>
 80015c8:	2300      	movs	r3, #0
 80015ca:	4a01      	ldr	r2, [pc, #4]	; (80015d0 <__aeabi_dadd+0x670>)
 80015cc:	001f      	movs	r7, r3
 80015ce:	e55e      	b.n	800108e <__aeabi_dadd+0x12e>
 80015d0:	000007ff 	.word	0x000007ff
 80015d4:	ff7fffff 	.word	0xff7fffff

080015d8 <__aeabi_ddiv>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	464e      	mov	r6, r9
 80015de:	4645      	mov	r5, r8
 80015e0:	46de      	mov	lr, fp
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	4681      	mov	r9, r0
 80015e6:	0005      	movs	r5, r0
 80015e8:	030c      	lsls	r4, r1, #12
 80015ea:	0048      	lsls	r0, r1, #1
 80015ec:	4692      	mov	sl, r2
 80015ee:	001f      	movs	r7, r3
 80015f0:	b085      	sub	sp, #20
 80015f2:	0b24      	lsrs	r4, r4, #12
 80015f4:	0d40      	lsrs	r0, r0, #21
 80015f6:	0fce      	lsrs	r6, r1, #31
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_ddiv+0x26>
 80015fc:	e156      	b.n	80018ac <__aeabi_ddiv+0x2d4>
 80015fe:	4bd4      	ldr	r3, [pc, #848]	; (8001950 <__aeabi_ddiv+0x378>)
 8001600:	4298      	cmp	r0, r3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x2e>
 8001604:	e172      	b.n	80018ec <__aeabi_ddiv+0x314>
 8001606:	0f6b      	lsrs	r3, r5, #29
 8001608:	00e4      	lsls	r4, r4, #3
 800160a:	431c      	orrs	r4, r3
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	4323      	orrs	r3, r4
 8001612:	4698      	mov	r8, r3
 8001614:	4bcf      	ldr	r3, [pc, #828]	; (8001954 <__aeabi_ddiv+0x37c>)
 8001616:	00ed      	lsls	r5, r5, #3
 8001618:	469b      	mov	fp, r3
 800161a:	2300      	movs	r3, #0
 800161c:	4699      	mov	r9, r3
 800161e:	4483      	add	fp, r0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	033c      	lsls	r4, r7, #12
 8001624:	007b      	lsls	r3, r7, #1
 8001626:	4650      	mov	r0, sl
 8001628:	0b24      	lsrs	r4, r4, #12
 800162a:	0d5b      	lsrs	r3, r3, #21
 800162c:	0fff      	lsrs	r7, r7, #31
 800162e:	2b00      	cmp	r3, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x5c>
 8001632:	e11f      	b.n	8001874 <__aeabi_ddiv+0x29c>
 8001634:	4ac6      	ldr	r2, [pc, #792]	; (8001950 <__aeabi_ddiv+0x378>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x64>
 800163a:	e162      	b.n	8001902 <__aeabi_ddiv+0x32a>
 800163c:	49c5      	ldr	r1, [pc, #788]	; (8001954 <__aeabi_ddiv+0x37c>)
 800163e:	0f42      	lsrs	r2, r0, #29
 8001640:	468c      	mov	ip, r1
 8001642:	00e4      	lsls	r4, r4, #3
 8001644:	4659      	mov	r1, fp
 8001646:	4314      	orrs	r4, r2
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	4463      	add	r3, ip
 800164c:	0412      	lsls	r2, r2, #16
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	4314      	orrs	r4, r2
 8001652:	469b      	mov	fp, r3
 8001654:	00c2      	lsls	r2, r0, #3
 8001656:	2000      	movs	r0, #0
 8001658:	0033      	movs	r3, r6
 800165a:	407b      	eors	r3, r7
 800165c:	469a      	mov	sl, r3
 800165e:	464b      	mov	r3, r9
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d827      	bhi.n	80016b4 <__aeabi_ddiv+0xdc>
 8001664:	49bc      	ldr	r1, [pc, #752]	; (8001958 <__aeabi_ddiv+0x380>)
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	58cb      	ldr	r3, [r1, r3]
 800166a:	469f      	mov	pc, r3
 800166c:	46b2      	mov	sl, r6
 800166e:	9b00      	ldr	r3, [sp, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d016      	beq.n	80016a2 <__aeabi_ddiv+0xca>
 8001674:	2b03      	cmp	r3, #3
 8001676:	d100      	bne.n	800167a <__aeabi_ddiv+0xa2>
 8001678:	e28e      	b.n	8001b98 <__aeabi_ddiv+0x5c0>
 800167a:	2b01      	cmp	r3, #1
 800167c:	d000      	beq.n	8001680 <__aeabi_ddiv+0xa8>
 800167e:	e0d9      	b.n	8001834 <__aeabi_ddiv+0x25c>
 8001680:	2300      	movs	r3, #0
 8001682:	2400      	movs	r4, #0
 8001684:	2500      	movs	r5, #0
 8001686:	4652      	mov	r2, sl
 8001688:	051b      	lsls	r3, r3, #20
 800168a:	4323      	orrs	r3, r4
 800168c:	07d2      	lsls	r2, r2, #31
 800168e:	4313      	orrs	r3, r2
 8001690:	0028      	movs	r0, r5
 8001692:	0019      	movs	r1, r3
 8001694:	b005      	add	sp, #20
 8001696:	bcf0      	pop	{r4, r5, r6, r7}
 8001698:	46bb      	mov	fp, r7
 800169a:	46b2      	mov	sl, r6
 800169c:	46a9      	mov	r9, r5
 800169e:	46a0      	mov	r8, r4
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4baa      	ldr	r3, [pc, #680]	; (8001950 <__aeabi_ddiv+0x378>)
 80016a8:	e7ed      	b.n	8001686 <__aeabi_ddiv+0xae>
 80016aa:	46ba      	mov	sl, r7
 80016ac:	46a0      	mov	r8, r4
 80016ae:	0015      	movs	r5, r2
 80016b0:	9000      	str	r0, [sp, #0]
 80016b2:	e7dc      	b.n	800166e <__aeabi_ddiv+0x96>
 80016b4:	4544      	cmp	r4, r8
 80016b6:	d200      	bcs.n	80016ba <__aeabi_ddiv+0xe2>
 80016b8:	e1c7      	b.n	8001a4a <__aeabi_ddiv+0x472>
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0xe6>
 80016bc:	e1c2      	b.n	8001a44 <__aeabi_ddiv+0x46c>
 80016be:	2301      	movs	r3, #1
 80016c0:	425b      	negs	r3, r3
 80016c2:	469c      	mov	ip, r3
 80016c4:	002e      	movs	r6, r5
 80016c6:	4640      	mov	r0, r8
 80016c8:	2500      	movs	r5, #0
 80016ca:	44e3      	add	fp, ip
 80016cc:	0223      	lsls	r3, r4, #8
 80016ce:	0e14      	lsrs	r4, r2, #24
 80016d0:	431c      	orrs	r4, r3
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	4699      	mov	r9, r3
 80016d6:	0423      	lsls	r3, r4, #16
 80016d8:	0c1f      	lsrs	r7, r3, #16
 80016da:	0212      	lsls	r2, r2, #8
 80016dc:	4649      	mov	r1, r9
 80016de:	9200      	str	r2, [sp, #0]
 80016e0:	9701      	str	r7, [sp, #4]
 80016e2:	f7fe fd95 	bl	8000210 <__aeabi_uidivmod>
 80016e6:	0002      	movs	r2, r0
 80016e8:	437a      	muls	r2, r7
 80016ea:	040b      	lsls	r3, r1, #16
 80016ec:	0c31      	lsrs	r1, r6, #16
 80016ee:	4680      	mov	r8, r0
 80016f0:	4319      	orrs	r1, r3
 80016f2:	428a      	cmp	r2, r1
 80016f4:	d907      	bls.n	8001706 <__aeabi_ddiv+0x12e>
 80016f6:	2301      	movs	r3, #1
 80016f8:	425b      	negs	r3, r3
 80016fa:	469c      	mov	ip, r3
 80016fc:	1909      	adds	r1, r1, r4
 80016fe:	44e0      	add	r8, ip
 8001700:	428c      	cmp	r4, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x12e>
 8001704:	e207      	b.n	8001b16 <__aeabi_ddiv+0x53e>
 8001706:	1a88      	subs	r0, r1, r2
 8001708:	4649      	mov	r1, r9
 800170a:	f7fe fd81 	bl	8000210 <__aeabi_uidivmod>
 800170e:	0409      	lsls	r1, r1, #16
 8001710:	468c      	mov	ip, r1
 8001712:	0431      	lsls	r1, r6, #16
 8001714:	4666      	mov	r6, ip
 8001716:	9a01      	ldr	r2, [sp, #4]
 8001718:	0c09      	lsrs	r1, r1, #16
 800171a:	4342      	muls	r2, r0
 800171c:	0003      	movs	r3, r0
 800171e:	4331      	orrs	r1, r6
 8001720:	428a      	cmp	r2, r1
 8001722:	d904      	bls.n	800172e <__aeabi_ddiv+0x156>
 8001724:	1909      	adds	r1, r1, r4
 8001726:	3b01      	subs	r3, #1
 8001728:	428c      	cmp	r4, r1
 800172a:	d800      	bhi.n	800172e <__aeabi_ddiv+0x156>
 800172c:	e1ed      	b.n	8001b0a <__aeabi_ddiv+0x532>
 800172e:	1a88      	subs	r0, r1, r2
 8001730:	4642      	mov	r2, r8
 8001732:	0412      	lsls	r2, r2, #16
 8001734:	431a      	orrs	r2, r3
 8001736:	4690      	mov	r8, r2
 8001738:	4641      	mov	r1, r8
 800173a:	9b00      	ldr	r3, [sp, #0]
 800173c:	040e      	lsls	r6, r1, #16
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	001f      	movs	r7, r3
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	9b00      	ldr	r3, [sp, #0]
 8001746:	0c36      	lsrs	r6, r6, #16
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	0c19      	lsrs	r1, r3, #16
 800174c:	000b      	movs	r3, r1
 800174e:	4373      	muls	r3, r6
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	437e      	muls	r6, r7
 8001754:	9103      	str	r1, [sp, #12]
 8001756:	4351      	muls	r1, r2
 8001758:	437a      	muls	r2, r7
 800175a:	0c1f      	lsrs	r7, r3, #16
 800175c:	46bc      	mov	ip, r7
 800175e:	1876      	adds	r6, r6, r1
 8001760:	4466      	add	r6, ip
 8001762:	42b1      	cmp	r1, r6
 8001764:	d903      	bls.n	800176e <__aeabi_ddiv+0x196>
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	0249      	lsls	r1, r1, #9
 800176a:	468c      	mov	ip, r1
 800176c:	4462      	add	r2, ip
 800176e:	0c31      	lsrs	r1, r6, #16
 8001770:	188a      	adds	r2, r1, r2
 8001772:	0431      	lsls	r1, r6, #16
 8001774:	041e      	lsls	r6, r3, #16
 8001776:	0c36      	lsrs	r6, r6, #16
 8001778:	198e      	adds	r6, r1, r6
 800177a:	4290      	cmp	r0, r2
 800177c:	d302      	bcc.n	8001784 <__aeabi_ddiv+0x1ac>
 800177e:	d112      	bne.n	80017a6 <__aeabi_ddiv+0x1ce>
 8001780:	42b5      	cmp	r5, r6
 8001782:	d210      	bcs.n	80017a6 <__aeabi_ddiv+0x1ce>
 8001784:	4643      	mov	r3, r8
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	9b00      	ldr	r3, [sp, #0]
 800178a:	469c      	mov	ip, r3
 800178c:	4465      	add	r5, ip
 800178e:	001f      	movs	r7, r3
 8001790:	429d      	cmp	r5, r3
 8001792:	419b      	sbcs	r3, r3
 8001794:	425b      	negs	r3, r3
 8001796:	191b      	adds	r3, r3, r4
 8001798:	18c0      	adds	r0, r0, r3
 800179a:	4284      	cmp	r4, r0
 800179c:	d200      	bcs.n	80017a0 <__aeabi_ddiv+0x1c8>
 800179e:	e1a0      	b.n	8001ae2 <__aeabi_ddiv+0x50a>
 80017a0:	d100      	bne.n	80017a4 <__aeabi_ddiv+0x1cc>
 80017a2:	e19b      	b.n	8001adc <__aeabi_ddiv+0x504>
 80017a4:	4688      	mov	r8, r1
 80017a6:	1bae      	subs	r6, r5, r6
 80017a8:	42b5      	cmp	r5, r6
 80017aa:	41ad      	sbcs	r5, r5
 80017ac:	1a80      	subs	r0, r0, r2
 80017ae:	426d      	negs	r5, r5
 80017b0:	1b40      	subs	r0, r0, r5
 80017b2:	4284      	cmp	r4, r0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_ddiv+0x1e0>
 80017b6:	e1d5      	b.n	8001b64 <__aeabi_ddiv+0x58c>
 80017b8:	4649      	mov	r1, r9
 80017ba:	f7fe fd29 	bl	8000210 <__aeabi_uidivmod>
 80017be:	9a01      	ldr	r2, [sp, #4]
 80017c0:	040b      	lsls	r3, r1, #16
 80017c2:	4342      	muls	r2, r0
 80017c4:	0c31      	lsrs	r1, r6, #16
 80017c6:	0005      	movs	r5, r0
 80017c8:	4319      	orrs	r1, r3
 80017ca:	428a      	cmp	r2, r1
 80017cc:	d900      	bls.n	80017d0 <__aeabi_ddiv+0x1f8>
 80017ce:	e16c      	b.n	8001aaa <__aeabi_ddiv+0x4d2>
 80017d0:	1a88      	subs	r0, r1, r2
 80017d2:	4649      	mov	r1, r9
 80017d4:	f7fe fd1c 	bl	8000210 <__aeabi_uidivmod>
 80017d8:	9a01      	ldr	r2, [sp, #4]
 80017da:	0436      	lsls	r6, r6, #16
 80017dc:	4342      	muls	r2, r0
 80017de:	0409      	lsls	r1, r1, #16
 80017e0:	0c36      	lsrs	r6, r6, #16
 80017e2:	0003      	movs	r3, r0
 80017e4:	430e      	orrs	r6, r1
 80017e6:	42b2      	cmp	r2, r6
 80017e8:	d900      	bls.n	80017ec <__aeabi_ddiv+0x214>
 80017ea:	e153      	b.n	8001a94 <__aeabi_ddiv+0x4bc>
 80017ec:	9803      	ldr	r0, [sp, #12]
 80017ee:	1ab6      	subs	r6, r6, r2
 80017f0:	0002      	movs	r2, r0
 80017f2:	042d      	lsls	r5, r5, #16
 80017f4:	431d      	orrs	r5, r3
 80017f6:	9f02      	ldr	r7, [sp, #8]
 80017f8:	042b      	lsls	r3, r5, #16
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	435a      	muls	r2, r3
 80017fe:	437b      	muls	r3, r7
 8001800:	469c      	mov	ip, r3
 8001802:	0c29      	lsrs	r1, r5, #16
 8001804:	4348      	muls	r0, r1
 8001806:	0c13      	lsrs	r3, r2, #16
 8001808:	4484      	add	ip, r0
 800180a:	4463      	add	r3, ip
 800180c:	4379      	muls	r1, r7
 800180e:	4298      	cmp	r0, r3
 8001810:	d903      	bls.n	800181a <__aeabi_ddiv+0x242>
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	0240      	lsls	r0, r0, #9
 8001816:	4684      	mov	ip, r0
 8001818:	4461      	add	r1, ip
 800181a:	0c18      	lsrs	r0, r3, #16
 800181c:	0412      	lsls	r2, r2, #16
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	0c12      	lsrs	r2, r2, #16
 8001822:	1841      	adds	r1, r0, r1
 8001824:	189b      	adds	r3, r3, r2
 8001826:	428e      	cmp	r6, r1
 8001828:	d200      	bcs.n	800182c <__aeabi_ddiv+0x254>
 800182a:	e0ff      	b.n	8001a2c <__aeabi_ddiv+0x454>
 800182c:	d100      	bne.n	8001830 <__aeabi_ddiv+0x258>
 800182e:	e0fa      	b.n	8001a26 <__aeabi_ddiv+0x44e>
 8001830:	2301      	movs	r3, #1
 8001832:	431d      	orrs	r5, r3
 8001834:	4a49      	ldr	r2, [pc, #292]	; (800195c <__aeabi_ddiv+0x384>)
 8001836:	445a      	add	r2, fp
 8001838:	2a00      	cmp	r2, #0
 800183a:	dc00      	bgt.n	800183e <__aeabi_ddiv+0x266>
 800183c:	e0aa      	b.n	8001994 <__aeabi_ddiv+0x3bc>
 800183e:	076b      	lsls	r3, r5, #29
 8001840:	d000      	beq.n	8001844 <__aeabi_ddiv+0x26c>
 8001842:	e13d      	b.n	8001ac0 <__aeabi_ddiv+0x4e8>
 8001844:	08ed      	lsrs	r5, r5, #3
 8001846:	4643      	mov	r3, r8
 8001848:	01db      	lsls	r3, r3, #7
 800184a:	d506      	bpl.n	800185a <__aeabi_ddiv+0x282>
 800184c:	4642      	mov	r2, r8
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <__aeabi_ddiv+0x388>)
 8001850:	401a      	ands	r2, r3
 8001852:	4690      	mov	r8, r2
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	00d2      	lsls	r2, r2, #3
 8001858:	445a      	add	r2, fp
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <__aeabi_ddiv+0x38c>)
 800185c:	429a      	cmp	r2, r3
 800185e:	dd00      	ble.n	8001862 <__aeabi_ddiv+0x28a>
 8001860:	e71f      	b.n	80016a2 <__aeabi_ddiv+0xca>
 8001862:	4643      	mov	r3, r8
 8001864:	075b      	lsls	r3, r3, #29
 8001866:	431d      	orrs	r5, r3
 8001868:	4643      	mov	r3, r8
 800186a:	0552      	lsls	r2, r2, #21
 800186c:	025c      	lsls	r4, r3, #9
 800186e:	0b24      	lsrs	r4, r4, #12
 8001870:	0d53      	lsrs	r3, r2, #21
 8001872:	e708      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001874:	4652      	mov	r2, sl
 8001876:	4322      	orrs	r2, r4
 8001878:	d100      	bne.n	800187c <__aeabi_ddiv+0x2a4>
 800187a:	e07b      	b.n	8001974 <__aeabi_ddiv+0x39c>
 800187c:	2c00      	cmp	r4, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_ddiv+0x2aa>
 8001880:	e0fa      	b.n	8001a78 <__aeabi_ddiv+0x4a0>
 8001882:	0020      	movs	r0, r4
 8001884:	f001 f9de 	bl	8002c44 <__clzsi2>
 8001888:	0002      	movs	r2, r0
 800188a:	3a0b      	subs	r2, #11
 800188c:	231d      	movs	r3, #29
 800188e:	0001      	movs	r1, r0
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	4652      	mov	r2, sl
 8001894:	3908      	subs	r1, #8
 8001896:	40da      	lsrs	r2, r3
 8001898:	408c      	lsls	r4, r1
 800189a:	4314      	orrs	r4, r2
 800189c:	4652      	mov	r2, sl
 800189e:	408a      	lsls	r2, r1
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <__aeabi_ddiv+0x390>)
 80018a2:	4458      	add	r0, fp
 80018a4:	469b      	mov	fp, r3
 80018a6:	4483      	add	fp, r0
 80018a8:	2000      	movs	r0, #0
 80018aa:	e6d5      	b.n	8001658 <__aeabi_ddiv+0x80>
 80018ac:	464b      	mov	r3, r9
 80018ae:	4323      	orrs	r3, r4
 80018b0:	4698      	mov	r8, r3
 80018b2:	d044      	beq.n	800193e <__aeabi_ddiv+0x366>
 80018b4:	2c00      	cmp	r4, #0
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x2e2>
 80018b8:	e0ce      	b.n	8001a58 <__aeabi_ddiv+0x480>
 80018ba:	0020      	movs	r0, r4
 80018bc:	f001 f9c2 	bl	8002c44 <__clzsi2>
 80018c0:	0001      	movs	r1, r0
 80018c2:	0002      	movs	r2, r0
 80018c4:	390b      	subs	r1, #11
 80018c6:	231d      	movs	r3, #29
 80018c8:	1a5b      	subs	r3, r3, r1
 80018ca:	4649      	mov	r1, r9
 80018cc:	0010      	movs	r0, r2
 80018ce:	40d9      	lsrs	r1, r3
 80018d0:	3808      	subs	r0, #8
 80018d2:	4084      	lsls	r4, r0
 80018d4:	000b      	movs	r3, r1
 80018d6:	464d      	mov	r5, r9
 80018d8:	4323      	orrs	r3, r4
 80018da:	4698      	mov	r8, r3
 80018dc:	4085      	lsls	r5, r0
 80018de:	4823      	ldr	r0, [pc, #140]	; (800196c <__aeabi_ddiv+0x394>)
 80018e0:	1a83      	subs	r3, r0, r2
 80018e2:	469b      	mov	fp, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	4699      	mov	r9, r3
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	e69a      	b.n	8001622 <__aeabi_ddiv+0x4a>
 80018ec:	464b      	mov	r3, r9
 80018ee:	4323      	orrs	r3, r4
 80018f0:	4698      	mov	r8, r3
 80018f2:	d11d      	bne.n	8001930 <__aeabi_ddiv+0x358>
 80018f4:	2308      	movs	r3, #8
 80018f6:	4699      	mov	r9, r3
 80018f8:	3b06      	subs	r3, #6
 80018fa:	2500      	movs	r5, #0
 80018fc:	4683      	mov	fp, r0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	e68f      	b.n	8001622 <__aeabi_ddiv+0x4a>
 8001902:	4652      	mov	r2, sl
 8001904:	4322      	orrs	r2, r4
 8001906:	d109      	bne.n	800191c <__aeabi_ddiv+0x344>
 8001908:	2302      	movs	r3, #2
 800190a:	4649      	mov	r1, r9
 800190c:	4319      	orrs	r1, r3
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <__aeabi_ddiv+0x398>)
 8001910:	4689      	mov	r9, r1
 8001912:	469c      	mov	ip, r3
 8001914:	2400      	movs	r4, #0
 8001916:	2002      	movs	r0, #2
 8001918:	44e3      	add	fp, ip
 800191a:	e69d      	b.n	8001658 <__aeabi_ddiv+0x80>
 800191c:	2303      	movs	r3, #3
 800191e:	464a      	mov	r2, r9
 8001920:	431a      	orrs	r2, r3
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <__aeabi_ddiv+0x398>)
 8001924:	4691      	mov	r9, r2
 8001926:	469c      	mov	ip, r3
 8001928:	4652      	mov	r2, sl
 800192a:	2003      	movs	r0, #3
 800192c:	44e3      	add	fp, ip
 800192e:	e693      	b.n	8001658 <__aeabi_ddiv+0x80>
 8001930:	230c      	movs	r3, #12
 8001932:	4699      	mov	r9, r3
 8001934:	3b09      	subs	r3, #9
 8001936:	46a0      	mov	r8, r4
 8001938:	4683      	mov	fp, r0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	e671      	b.n	8001622 <__aeabi_ddiv+0x4a>
 800193e:	2304      	movs	r3, #4
 8001940:	4699      	mov	r9, r3
 8001942:	2300      	movs	r3, #0
 8001944:	469b      	mov	fp, r3
 8001946:	3301      	adds	r3, #1
 8001948:	2500      	movs	r5, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	e669      	b.n	8001622 <__aeabi_ddiv+0x4a>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	000007ff 	.word	0x000007ff
 8001954:	fffffc01 	.word	0xfffffc01
 8001958:	08009830 	.word	0x08009830
 800195c:	000003ff 	.word	0x000003ff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	000007fe 	.word	0x000007fe
 8001968:	000003f3 	.word	0x000003f3
 800196c:	fffffc0d 	.word	0xfffffc0d
 8001970:	fffff801 	.word	0xfffff801
 8001974:	4649      	mov	r1, r9
 8001976:	2301      	movs	r3, #1
 8001978:	4319      	orrs	r1, r3
 800197a:	4689      	mov	r9, r1
 800197c:	2400      	movs	r4, #0
 800197e:	2001      	movs	r0, #1
 8001980:	e66a      	b.n	8001658 <__aeabi_ddiv+0x80>
 8001982:	2300      	movs	r3, #0
 8001984:	2480      	movs	r4, #128	; 0x80
 8001986:	469a      	mov	sl, r3
 8001988:	2500      	movs	r5, #0
 800198a:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <__aeabi_ddiv+0x5dc>)
 800198c:	0324      	lsls	r4, r4, #12
 800198e:	e67a      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001990:	2501      	movs	r5, #1
 8001992:	426d      	negs	r5, r5
 8001994:	2301      	movs	r3, #1
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	2b38      	cmp	r3, #56	; 0x38
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x3c6>
 800199c:	e670      	b.n	8001680 <__aeabi_ddiv+0xa8>
 800199e:	2b1f      	cmp	r3, #31
 80019a0:	dc00      	bgt.n	80019a4 <__aeabi_ddiv+0x3cc>
 80019a2:	e0bf      	b.n	8001b24 <__aeabi_ddiv+0x54c>
 80019a4:	211f      	movs	r1, #31
 80019a6:	4249      	negs	r1, r1
 80019a8:	1a8a      	subs	r2, r1, r2
 80019aa:	4641      	mov	r1, r8
 80019ac:	40d1      	lsrs	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d004      	beq.n	80019be <__aeabi_ddiv+0x3e6>
 80019b4:	4641      	mov	r1, r8
 80019b6:	4b80      	ldr	r3, [pc, #512]	; (8001bb8 <__aeabi_ddiv+0x5e0>)
 80019b8:	445b      	add	r3, fp
 80019ba:	4099      	lsls	r1, r3
 80019bc:	430d      	orrs	r5, r1
 80019be:	1e6b      	subs	r3, r5, #1
 80019c0:	419d      	sbcs	r5, r3
 80019c2:	2307      	movs	r3, #7
 80019c4:	432a      	orrs	r2, r5
 80019c6:	001d      	movs	r5, r3
 80019c8:	2400      	movs	r4, #0
 80019ca:	4015      	ands	r5, r2
 80019cc:	4213      	tst	r3, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x3fa>
 80019d0:	e0d4      	b.n	8001b7c <__aeabi_ddiv+0x5a4>
 80019d2:	210f      	movs	r1, #15
 80019d4:	2300      	movs	r3, #0
 80019d6:	4011      	ands	r1, r2
 80019d8:	2904      	cmp	r1, #4
 80019da:	d100      	bne.n	80019de <__aeabi_ddiv+0x406>
 80019dc:	e0cb      	b.n	8001b76 <__aeabi_ddiv+0x59e>
 80019de:	1d11      	adds	r1, r2, #4
 80019e0:	4291      	cmp	r1, r2
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	000a      	movs	r2, r1
 80019ea:	0219      	lsls	r1, r3, #8
 80019ec:	d400      	bmi.n	80019f0 <__aeabi_ddiv+0x418>
 80019ee:	e0c2      	b.n	8001b76 <__aeabi_ddiv+0x59e>
 80019f0:	2301      	movs	r3, #1
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	e646      	b.n	8001686 <__aeabi_ddiv+0xae>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	4641      	mov	r1, r8
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	4219      	tst	r1, r3
 8001a00:	d008      	beq.n	8001a14 <__aeabi_ddiv+0x43c>
 8001a02:	421c      	tst	r4, r3
 8001a04:	d106      	bne.n	8001a14 <__aeabi_ddiv+0x43c>
 8001a06:	431c      	orrs	r4, r3
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	46ba      	mov	sl, r7
 8001a0c:	0015      	movs	r5, r2
 8001a0e:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <__aeabi_ddiv+0x5dc>)
 8001a10:	0b24      	lsrs	r4, r4, #12
 8001a12:	e638      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001a14:	2480      	movs	r4, #128	; 0x80
 8001a16:	4643      	mov	r3, r8
 8001a18:	0324      	lsls	r4, r4, #12
 8001a1a:	431c      	orrs	r4, r3
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <__aeabi_ddiv+0x5dc>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e62f      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x454>
 8001a2a:	e703      	b.n	8001834 <__aeabi_ddiv+0x25c>
 8001a2c:	19a6      	adds	r6, r4, r6
 8001a2e:	1e68      	subs	r0, r5, #1
 8001a30:	42a6      	cmp	r6, r4
 8001a32:	d200      	bcs.n	8001a36 <__aeabi_ddiv+0x45e>
 8001a34:	e08d      	b.n	8001b52 <__aeabi_ddiv+0x57a>
 8001a36:	428e      	cmp	r6, r1
 8001a38:	d200      	bcs.n	8001a3c <__aeabi_ddiv+0x464>
 8001a3a:	e0a3      	b.n	8001b84 <__aeabi_ddiv+0x5ac>
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x468>
 8001a3e:	e0b3      	b.n	8001ba8 <__aeabi_ddiv+0x5d0>
 8001a40:	0005      	movs	r5, r0
 8001a42:	e6f5      	b.n	8001830 <__aeabi_ddiv+0x258>
 8001a44:	42aa      	cmp	r2, r5
 8001a46:	d900      	bls.n	8001a4a <__aeabi_ddiv+0x472>
 8001a48:	e639      	b.n	80016be <__aeabi_ddiv+0xe6>
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	07de      	lsls	r6, r3, #31
 8001a4e:	0858      	lsrs	r0, r3, #1
 8001a50:	086b      	lsrs	r3, r5, #1
 8001a52:	431e      	orrs	r6, r3
 8001a54:	07ed      	lsls	r5, r5, #31
 8001a56:	e639      	b.n	80016cc <__aeabi_ddiv+0xf4>
 8001a58:	4648      	mov	r0, r9
 8001a5a:	f001 f8f3 	bl	8002c44 <__clzsi2>
 8001a5e:	0001      	movs	r1, r0
 8001a60:	0002      	movs	r2, r0
 8001a62:	3115      	adds	r1, #21
 8001a64:	3220      	adds	r2, #32
 8001a66:	291c      	cmp	r1, #28
 8001a68:	dc00      	bgt.n	8001a6c <__aeabi_ddiv+0x494>
 8001a6a:	e72c      	b.n	80018c6 <__aeabi_ddiv+0x2ee>
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	3808      	subs	r0, #8
 8001a70:	4083      	lsls	r3, r0
 8001a72:	2500      	movs	r5, #0
 8001a74:	4698      	mov	r8, r3
 8001a76:	e732      	b.n	80018de <__aeabi_ddiv+0x306>
 8001a78:	f001 f8e4 	bl	8002c44 <__clzsi2>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	001a      	movs	r2, r3
 8001a80:	3215      	adds	r2, #21
 8001a82:	3020      	adds	r0, #32
 8001a84:	2a1c      	cmp	r2, #28
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_ddiv+0x4b2>
 8001a88:	e700      	b.n	800188c <__aeabi_ddiv+0x2b4>
 8001a8a:	4654      	mov	r4, sl
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	409c      	lsls	r4, r3
 8001a92:	e705      	b.n	80018a0 <__aeabi_ddiv+0x2c8>
 8001a94:	1936      	adds	r6, r6, r4
 8001a96:	3b01      	subs	r3, #1
 8001a98:	42b4      	cmp	r4, r6
 8001a9a:	d900      	bls.n	8001a9e <__aeabi_ddiv+0x4c6>
 8001a9c:	e6a6      	b.n	80017ec <__aeabi_ddiv+0x214>
 8001a9e:	42b2      	cmp	r2, r6
 8001aa0:	d800      	bhi.n	8001aa4 <__aeabi_ddiv+0x4cc>
 8001aa2:	e6a3      	b.n	80017ec <__aeabi_ddiv+0x214>
 8001aa4:	1e83      	subs	r3, r0, #2
 8001aa6:	1936      	adds	r6, r6, r4
 8001aa8:	e6a0      	b.n	80017ec <__aeabi_ddiv+0x214>
 8001aaa:	1909      	adds	r1, r1, r4
 8001aac:	3d01      	subs	r5, #1
 8001aae:	428c      	cmp	r4, r1
 8001ab0:	d900      	bls.n	8001ab4 <__aeabi_ddiv+0x4dc>
 8001ab2:	e68d      	b.n	80017d0 <__aeabi_ddiv+0x1f8>
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d800      	bhi.n	8001aba <__aeabi_ddiv+0x4e2>
 8001ab8:	e68a      	b.n	80017d0 <__aeabi_ddiv+0x1f8>
 8001aba:	1e85      	subs	r5, r0, #2
 8001abc:	1909      	adds	r1, r1, r4
 8001abe:	e687      	b.n	80017d0 <__aeabi_ddiv+0x1f8>
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	402b      	ands	r3, r5
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d100      	bne.n	8001aca <__aeabi_ddiv+0x4f2>
 8001ac8:	e6bc      	b.n	8001844 <__aeabi_ddiv+0x26c>
 8001aca:	2305      	movs	r3, #5
 8001acc:	425b      	negs	r3, r3
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	3504      	adds	r5, #4
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	08ed      	lsrs	r5, r5, #3
 8001ad8:	4498      	add	r8, r3
 8001ada:	e6b4      	b.n	8001846 <__aeabi_ddiv+0x26e>
 8001adc:	42af      	cmp	r7, r5
 8001ade:	d900      	bls.n	8001ae2 <__aeabi_ddiv+0x50a>
 8001ae0:	e660      	b.n	80017a4 <__aeabi_ddiv+0x1cc>
 8001ae2:	4282      	cmp	r2, r0
 8001ae4:	d804      	bhi.n	8001af0 <__aeabi_ddiv+0x518>
 8001ae6:	d000      	beq.n	8001aea <__aeabi_ddiv+0x512>
 8001ae8:	e65c      	b.n	80017a4 <__aeabi_ddiv+0x1cc>
 8001aea:	42ae      	cmp	r6, r5
 8001aec:	d800      	bhi.n	8001af0 <__aeabi_ddiv+0x518>
 8001aee:	e659      	b.n	80017a4 <__aeabi_ddiv+0x1cc>
 8001af0:	2302      	movs	r3, #2
 8001af2:	425b      	negs	r3, r3
 8001af4:	469c      	mov	ip, r3
 8001af6:	9b00      	ldr	r3, [sp, #0]
 8001af8:	44e0      	add	r8, ip
 8001afa:	469c      	mov	ip, r3
 8001afc:	4465      	add	r5, ip
 8001afe:	429d      	cmp	r5, r3
 8001b00:	419b      	sbcs	r3, r3
 8001b02:	425b      	negs	r3, r3
 8001b04:	191b      	adds	r3, r3, r4
 8001b06:	18c0      	adds	r0, r0, r3
 8001b08:	e64d      	b.n	80017a6 <__aeabi_ddiv+0x1ce>
 8001b0a:	428a      	cmp	r2, r1
 8001b0c:	d800      	bhi.n	8001b10 <__aeabi_ddiv+0x538>
 8001b0e:	e60e      	b.n	800172e <__aeabi_ddiv+0x156>
 8001b10:	1e83      	subs	r3, r0, #2
 8001b12:	1909      	adds	r1, r1, r4
 8001b14:	e60b      	b.n	800172e <__aeabi_ddiv+0x156>
 8001b16:	428a      	cmp	r2, r1
 8001b18:	d800      	bhi.n	8001b1c <__aeabi_ddiv+0x544>
 8001b1a:	e5f4      	b.n	8001706 <__aeabi_ddiv+0x12e>
 8001b1c:	1e83      	subs	r3, r0, #2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	1909      	adds	r1, r1, r4
 8001b22:	e5f0      	b.n	8001706 <__aeabi_ddiv+0x12e>
 8001b24:	4925      	ldr	r1, [pc, #148]	; (8001bbc <__aeabi_ddiv+0x5e4>)
 8001b26:	0028      	movs	r0, r5
 8001b28:	4459      	add	r1, fp
 8001b2a:	408d      	lsls	r5, r1
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	408a      	lsls	r2, r1
 8001b30:	1e69      	subs	r1, r5, #1
 8001b32:	418d      	sbcs	r5, r1
 8001b34:	4641      	mov	r1, r8
 8001b36:	40d8      	lsrs	r0, r3
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4302      	orrs	r2, r0
 8001b3c:	432a      	orrs	r2, r5
 8001b3e:	000b      	movs	r3, r1
 8001b40:	0751      	lsls	r1, r2, #29
 8001b42:	d100      	bne.n	8001b46 <__aeabi_ddiv+0x56e>
 8001b44:	e751      	b.n	80019ea <__aeabi_ddiv+0x412>
 8001b46:	210f      	movs	r1, #15
 8001b48:	4011      	ands	r1, r2
 8001b4a:	2904      	cmp	r1, #4
 8001b4c:	d000      	beq.n	8001b50 <__aeabi_ddiv+0x578>
 8001b4e:	e746      	b.n	80019de <__aeabi_ddiv+0x406>
 8001b50:	e74b      	b.n	80019ea <__aeabi_ddiv+0x412>
 8001b52:	0005      	movs	r5, r0
 8001b54:	428e      	cmp	r6, r1
 8001b56:	d000      	beq.n	8001b5a <__aeabi_ddiv+0x582>
 8001b58:	e66a      	b.n	8001830 <__aeabi_ddiv+0x258>
 8001b5a:	9a00      	ldr	r2, [sp, #0]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_ddiv+0x58a>
 8001b60:	e666      	b.n	8001830 <__aeabi_ddiv+0x258>
 8001b62:	e667      	b.n	8001834 <__aeabi_ddiv+0x25c>
 8001b64:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <__aeabi_ddiv+0x5e8>)
 8001b66:	445a      	add	r2, fp
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	dc00      	bgt.n	8001b6e <__aeabi_ddiv+0x596>
 8001b6c:	e710      	b.n	8001990 <__aeabi_ddiv+0x3b8>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2500      	movs	r5, #0
 8001b72:	4498      	add	r8, r3
 8001b74:	e667      	b.n	8001846 <__aeabi_ddiv+0x26e>
 8001b76:	075d      	lsls	r5, r3, #29
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	0b1c      	lsrs	r4, r3, #12
 8001b7c:	08d2      	lsrs	r2, r2, #3
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4315      	orrs	r5, r2
 8001b82:	e580      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001b84:	9800      	ldr	r0, [sp, #0]
 8001b86:	3d02      	subs	r5, #2
 8001b88:	0042      	lsls	r2, r0, #1
 8001b8a:	4282      	cmp	r2, r0
 8001b8c:	41bf      	sbcs	r7, r7
 8001b8e:	427f      	negs	r7, r7
 8001b90:	193c      	adds	r4, r7, r4
 8001b92:	1936      	adds	r6, r6, r4
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	e7dd      	b.n	8001b54 <__aeabi_ddiv+0x57c>
 8001b98:	2480      	movs	r4, #128	; 0x80
 8001b9a:	4643      	mov	r3, r8
 8001b9c:	0324      	lsls	r4, r4, #12
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__aeabi_ddiv+0x5dc>)
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	e56e      	b.n	8001686 <__aeabi_ddiv+0xae>
 8001ba8:	9a00      	ldr	r2, [sp, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3ea      	bcc.n	8001b84 <__aeabi_ddiv+0x5ac>
 8001bae:	0005      	movs	r5, r0
 8001bb0:	e7d3      	b.n	8001b5a <__aeabi_ddiv+0x582>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	000007ff 	.word	0x000007ff
 8001bb8:	0000043e 	.word	0x0000043e
 8001bbc:	0000041e 	.word	0x0000041e
 8001bc0:	000003ff 	.word	0x000003ff

08001bc4 <__eqdf2>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	464e      	mov	r6, r9
 8001bc8:	4645      	mov	r5, r8
 8001bca:	46de      	mov	lr, fp
 8001bcc:	4657      	mov	r7, sl
 8001bce:	4690      	mov	r8, r2
 8001bd0:	b5e0      	push	{r5, r6, r7, lr}
 8001bd2:	0017      	movs	r7, r2
 8001bd4:	031a      	lsls	r2, r3, #12
 8001bd6:	0b12      	lsrs	r2, r2, #12
 8001bd8:	0005      	movs	r5, r0
 8001bda:	4684      	mov	ip, r0
 8001bdc:	4819      	ldr	r0, [pc, #100]	; (8001c44 <__eqdf2+0x80>)
 8001bde:	030e      	lsls	r6, r1, #12
 8001be0:	004c      	lsls	r4, r1, #1
 8001be2:	4691      	mov	r9, r2
 8001be4:	005a      	lsls	r2, r3, #1
 8001be6:	0fdb      	lsrs	r3, r3, #31
 8001be8:	469b      	mov	fp, r3
 8001bea:	0b36      	lsrs	r6, r6, #12
 8001bec:	0d64      	lsrs	r4, r4, #21
 8001bee:	0fc9      	lsrs	r1, r1, #31
 8001bf0:	0d52      	lsrs	r2, r2, #21
 8001bf2:	4284      	cmp	r4, r0
 8001bf4:	d019      	beq.n	8001c2a <__eqdf2+0x66>
 8001bf6:	4282      	cmp	r2, r0
 8001bf8:	d010      	beq.n	8001c1c <__eqdf2+0x58>
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	4294      	cmp	r4, r2
 8001bfe:	d10e      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c00:	454e      	cmp	r6, r9
 8001c02:	d10c      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c04:	2001      	movs	r0, #1
 8001c06:	45c4      	cmp	ip, r8
 8001c08:	d109      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c0a:	4559      	cmp	r1, fp
 8001c0c:	d017      	beq.n	8001c3e <__eqdf2+0x7a>
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d105      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c12:	0030      	movs	r0, r6
 8001c14:	4328      	orrs	r0, r5
 8001c16:	1e43      	subs	r3, r0, #1
 8001c18:	4198      	sbcs	r0, r3
 8001c1a:	e000      	b.n	8001c1e <__eqdf2+0x5a>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c20:	46bb      	mov	fp, r7
 8001c22:	46b2      	mov	sl, r6
 8001c24:	46a9      	mov	r9, r5
 8001c26:	46a0      	mov	r8, r4
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	0033      	movs	r3, r6
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	432b      	orrs	r3, r5
 8001c30:	d1f5      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c32:	42a2      	cmp	r2, r4
 8001c34:	d1f3      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c36:	464b      	mov	r3, r9
 8001c38:	433b      	orrs	r3, r7
 8001c3a:	d1f0      	bne.n	8001c1e <__eqdf2+0x5a>
 8001c3c:	e7e2      	b.n	8001c04 <__eqdf2+0x40>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e7ed      	b.n	8001c1e <__eqdf2+0x5a>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	000007ff 	.word	0x000007ff

08001c48 <__gedf2>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	4647      	mov	r7, r8
 8001c4c:	46ce      	mov	lr, r9
 8001c4e:	0004      	movs	r4, r0
 8001c50:	0018      	movs	r0, r3
 8001c52:	0016      	movs	r6, r2
 8001c54:	031b      	lsls	r3, r3, #12
 8001c56:	0b1b      	lsrs	r3, r3, #12
 8001c58:	4d2d      	ldr	r5, [pc, #180]	; (8001d10 <__gedf2+0xc8>)
 8001c5a:	004a      	lsls	r2, r1, #1
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	0043      	lsls	r3, r0, #1
 8001c62:	030f      	lsls	r7, r1, #12
 8001c64:	46a4      	mov	ip, r4
 8001c66:	46b0      	mov	r8, r6
 8001c68:	0b3f      	lsrs	r7, r7, #12
 8001c6a:	0d52      	lsrs	r2, r2, #21
 8001c6c:	0fc9      	lsrs	r1, r1, #31
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	0fc0      	lsrs	r0, r0, #31
 8001c72:	42aa      	cmp	r2, r5
 8001c74:	d021      	beq.n	8001cba <__gedf2+0x72>
 8001c76:	42ab      	cmp	r3, r5
 8001c78:	d013      	beq.n	8001ca2 <__gedf2+0x5a>
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d122      	bne.n	8001cc4 <__gedf2+0x7c>
 8001c7e:	433c      	orrs	r4, r7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <__gedf2+0x42>
 8001c84:	464d      	mov	r5, r9
 8001c86:	432e      	orrs	r6, r5
 8001c88:	d022      	beq.n	8001cd0 <__gedf2+0x88>
 8001c8a:	2c00      	cmp	r4, #0
 8001c8c:	d010      	beq.n	8001cb0 <__gedf2+0x68>
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	d022      	beq.n	8001cd8 <__gedf2+0x90>
 8001c92:	2002      	movs	r0, #2
 8001c94:	3901      	subs	r1, #1
 8001c96:	4008      	ands	r0, r1
 8001c98:	3801      	subs	r0, #1
 8001c9a:	bcc0      	pop	{r6, r7}
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	46b0      	mov	r8, r6
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca2:	464d      	mov	r5, r9
 8001ca4:	432e      	orrs	r6, r5
 8001ca6:	d129      	bne.n	8001cfc <__gedf2+0xb4>
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d1f0      	bne.n	8001c8e <__gedf2+0x46>
 8001cac:	433c      	orrs	r4, r7
 8001cae:	d1ee      	bne.n	8001c8e <__gedf2+0x46>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d1f2      	bne.n	8001c9a <__gedf2+0x52>
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	4240      	negs	r0, r0
 8001cb8:	e7ef      	b.n	8001c9a <__gedf2+0x52>
 8001cba:	003d      	movs	r5, r7
 8001cbc:	4325      	orrs	r5, r4
 8001cbe:	d11d      	bne.n	8001cfc <__gedf2+0xb4>
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d0ee      	beq.n	8001ca2 <__gedf2+0x5a>
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e2      	bne.n	8001c8e <__gedf2+0x46>
 8001cc8:	464c      	mov	r4, r9
 8001cca:	4326      	orrs	r6, r4
 8001ccc:	d1df      	bne.n	8001c8e <__gedf2+0x46>
 8001cce:	e7e0      	b.n	8001c92 <__gedf2+0x4a>
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d0e1      	beq.n	8001c9a <__gedf2+0x52>
 8001cd6:	e7dc      	b.n	8001c92 <__gedf2+0x4a>
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dc0a      	bgt.n	8001cf2 <__gedf2+0xaa>
 8001cdc:	dbe8      	blt.n	8001cb0 <__gedf2+0x68>
 8001cde:	454f      	cmp	r7, r9
 8001ce0:	d8d7      	bhi.n	8001c92 <__gedf2+0x4a>
 8001ce2:	d00e      	beq.n	8001d02 <__gedf2+0xba>
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	454f      	cmp	r7, r9
 8001ce8:	d2d7      	bcs.n	8001c9a <__gedf2+0x52>
 8001cea:	2900      	cmp	r1, #0
 8001cec:	d0e2      	beq.n	8001cb4 <__gedf2+0x6c>
 8001cee:	0008      	movs	r0, r1
 8001cf0:	e7d3      	b.n	8001c9a <__gedf2+0x52>
 8001cf2:	4243      	negs	r3, r0
 8001cf4:	4158      	adcs	r0, r3
 8001cf6:	0040      	lsls	r0, r0, #1
 8001cf8:	3801      	subs	r0, #1
 8001cfa:	e7ce      	b.n	8001c9a <__gedf2+0x52>
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	4240      	negs	r0, r0
 8001d00:	e7cb      	b.n	8001c9a <__gedf2+0x52>
 8001d02:	45c4      	cmp	ip, r8
 8001d04:	d8c5      	bhi.n	8001c92 <__gedf2+0x4a>
 8001d06:	2000      	movs	r0, #0
 8001d08:	45c4      	cmp	ip, r8
 8001d0a:	d2c6      	bcs.n	8001c9a <__gedf2+0x52>
 8001d0c:	e7ed      	b.n	8001cea <__gedf2+0xa2>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	000007ff 	.word	0x000007ff

08001d14 <__ledf2>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	4647      	mov	r7, r8
 8001d18:	46ce      	mov	lr, r9
 8001d1a:	0004      	movs	r4, r0
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	0016      	movs	r6, r2
 8001d20:	031b      	lsls	r3, r3, #12
 8001d22:	0b1b      	lsrs	r3, r3, #12
 8001d24:	4d2c      	ldr	r5, [pc, #176]	; (8001dd8 <__ledf2+0xc4>)
 8001d26:	004a      	lsls	r2, r1, #1
 8001d28:	4699      	mov	r9, r3
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	0043      	lsls	r3, r0, #1
 8001d2e:	030f      	lsls	r7, r1, #12
 8001d30:	46a4      	mov	ip, r4
 8001d32:	46b0      	mov	r8, r6
 8001d34:	0b3f      	lsrs	r7, r7, #12
 8001d36:	0d52      	lsrs	r2, r2, #21
 8001d38:	0fc9      	lsrs	r1, r1, #31
 8001d3a:	0d5b      	lsrs	r3, r3, #21
 8001d3c:	0fc0      	lsrs	r0, r0, #31
 8001d3e:	42aa      	cmp	r2, r5
 8001d40:	d00d      	beq.n	8001d5e <__ledf2+0x4a>
 8001d42:	42ab      	cmp	r3, r5
 8001d44:	d010      	beq.n	8001d68 <__ledf2+0x54>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d127      	bne.n	8001d9a <__ledf2+0x86>
 8001d4a:	433c      	orrs	r4, r7
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <__ledf2+0x60>
 8001d50:	464d      	mov	r5, r9
 8001d52:	432e      	orrs	r6, r5
 8001d54:	d10e      	bne.n	8001d74 <__ledf2+0x60>
 8001d56:	2000      	movs	r0, #0
 8001d58:	2c00      	cmp	r4, #0
 8001d5a:	d015      	beq.n	8001d88 <__ledf2+0x74>
 8001d5c:	e00e      	b.n	8001d7c <__ledf2+0x68>
 8001d5e:	003d      	movs	r5, r7
 8001d60:	4325      	orrs	r5, r4
 8001d62:	d110      	bne.n	8001d86 <__ledf2+0x72>
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d118      	bne.n	8001d9a <__ledf2+0x86>
 8001d68:	464d      	mov	r5, r9
 8001d6a:	432e      	orrs	r6, r5
 8001d6c:	d10b      	bne.n	8001d86 <__ledf2+0x72>
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	d102      	bne.n	8001d78 <__ledf2+0x64>
 8001d72:	433c      	orrs	r4, r7
 8001d74:	2c00      	cmp	r4, #0
 8001d76:	d00b      	beq.n	8001d90 <__ledf2+0x7c>
 8001d78:	4281      	cmp	r1, r0
 8001d7a:	d014      	beq.n	8001da6 <__ledf2+0x92>
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	3901      	subs	r1, #1
 8001d80:	4008      	ands	r0, r1
 8001d82:	3801      	subs	r0, #1
 8001d84:	e000      	b.n	8001d88 <__ledf2+0x74>
 8001d86:	2002      	movs	r0, #2
 8001d88:	bcc0      	pop	{r6, r7}
 8001d8a:	46b9      	mov	r9, r7
 8001d8c:	46b0      	mov	r8, r6
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d1f9      	bne.n	8001d88 <__ledf2+0x74>
 8001d94:	2001      	movs	r0, #1
 8001d96:	4240      	negs	r0, r0
 8001d98:	e7f6      	b.n	8001d88 <__ledf2+0x74>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ec      	bne.n	8001d78 <__ledf2+0x64>
 8001d9e:	464c      	mov	r4, r9
 8001da0:	4326      	orrs	r6, r4
 8001da2:	d1e9      	bne.n	8001d78 <__ledf2+0x64>
 8001da4:	e7ea      	b.n	8001d7c <__ledf2+0x68>
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dd04      	ble.n	8001db4 <__ledf2+0xa0>
 8001daa:	4243      	negs	r3, r0
 8001dac:	4158      	adcs	r0, r3
 8001dae:	0040      	lsls	r0, r0, #1
 8001db0:	3801      	subs	r0, #1
 8001db2:	e7e9      	b.n	8001d88 <__ledf2+0x74>
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbeb      	blt.n	8001d90 <__ledf2+0x7c>
 8001db8:	454f      	cmp	r7, r9
 8001dba:	d8df      	bhi.n	8001d7c <__ledf2+0x68>
 8001dbc:	d006      	beq.n	8001dcc <__ledf2+0xb8>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	454f      	cmp	r7, r9
 8001dc2:	d2e1      	bcs.n	8001d88 <__ledf2+0x74>
 8001dc4:	2900      	cmp	r1, #0
 8001dc6:	d0e5      	beq.n	8001d94 <__ledf2+0x80>
 8001dc8:	0008      	movs	r0, r1
 8001dca:	e7dd      	b.n	8001d88 <__ledf2+0x74>
 8001dcc:	45c4      	cmp	ip, r8
 8001dce:	d8d5      	bhi.n	8001d7c <__ledf2+0x68>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	45c4      	cmp	ip, r8
 8001dd4:	d2d8      	bcs.n	8001d88 <__ledf2+0x74>
 8001dd6:	e7f5      	b.n	8001dc4 <__ledf2+0xb0>
 8001dd8:	000007ff 	.word	0x000007ff

08001ddc <__aeabi_dmul>:
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	4657      	mov	r7, sl
 8001de0:	464e      	mov	r6, r9
 8001de2:	4645      	mov	r5, r8
 8001de4:	46de      	mov	lr, fp
 8001de6:	b5e0      	push	{r5, r6, r7, lr}
 8001de8:	4698      	mov	r8, r3
 8001dea:	030c      	lsls	r4, r1, #12
 8001dec:	004b      	lsls	r3, r1, #1
 8001dee:	0006      	movs	r6, r0
 8001df0:	4692      	mov	sl, r2
 8001df2:	b087      	sub	sp, #28
 8001df4:	0b24      	lsrs	r4, r4, #12
 8001df6:	0d5b      	lsrs	r3, r3, #21
 8001df8:	0fcf      	lsrs	r7, r1, #31
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x24>
 8001dfe:	e15c      	b.n	80020ba <__aeabi_dmul+0x2de>
 8001e00:	4ad9      	ldr	r2, [pc, #868]	; (8002168 <__aeabi_dmul+0x38c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dmul+0x2c>
 8001e06:	e175      	b.n	80020f4 <__aeabi_dmul+0x318>
 8001e08:	0f42      	lsrs	r2, r0, #29
 8001e0a:	00e4      	lsls	r4, r4, #3
 8001e0c:	4314      	orrs	r4, r2
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	0412      	lsls	r2, r2, #16
 8001e12:	4314      	orrs	r4, r2
 8001e14:	4ad5      	ldr	r2, [pc, #852]	; (800216c <__aeabi_dmul+0x390>)
 8001e16:	00c5      	lsls	r5, r0, #3
 8001e18:	4694      	mov	ip, r2
 8001e1a:	4463      	add	r3, ip
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	4699      	mov	r9, r3
 8001e22:	469b      	mov	fp, r3
 8001e24:	4643      	mov	r3, r8
 8001e26:	4642      	mov	r2, r8
 8001e28:	031e      	lsls	r6, r3, #12
 8001e2a:	0fd2      	lsrs	r2, r2, #31
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4650      	mov	r0, sl
 8001e30:	4690      	mov	r8, r2
 8001e32:	0b36      	lsrs	r6, r6, #12
 8001e34:	0d5b      	lsrs	r3, r3, #21
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x5e>
 8001e38:	e120      	b.n	800207c <__aeabi_dmul+0x2a0>
 8001e3a:	4acb      	ldr	r2, [pc, #812]	; (8002168 <__aeabi_dmul+0x38c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dmul+0x66>
 8001e40:	e162      	b.n	8002108 <__aeabi_dmul+0x32c>
 8001e42:	49ca      	ldr	r1, [pc, #808]	; (800216c <__aeabi_dmul+0x390>)
 8001e44:	0f42      	lsrs	r2, r0, #29
 8001e46:	468c      	mov	ip, r1
 8001e48:	9900      	ldr	r1, [sp, #0]
 8001e4a:	4463      	add	r3, ip
 8001e4c:	00f6      	lsls	r6, r6, #3
 8001e4e:	468c      	mov	ip, r1
 8001e50:	4316      	orrs	r6, r2
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	449c      	add	ip, r3
 8001e56:	0412      	lsls	r2, r2, #16
 8001e58:	4663      	mov	r3, ip
 8001e5a:	4316      	orrs	r6, r2
 8001e5c:	00c2      	lsls	r2, r0, #3
 8001e5e:	2000      	movs	r0, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	9900      	ldr	r1, [sp, #0]
 8001e64:	4643      	mov	r3, r8
 8001e66:	3101      	adds	r1, #1
 8001e68:	468c      	mov	ip, r1
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	407b      	eors	r3, r7
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	290f      	cmp	r1, #15
 8001e72:	d826      	bhi.n	8001ec2 <__aeabi_dmul+0xe6>
 8001e74:	4bbe      	ldr	r3, [pc, #760]	; (8002170 <__aeabi_dmul+0x394>)
 8001e76:	0089      	lsls	r1, r1, #2
 8001e78:	5859      	ldr	r1, [r3, r1]
 8001e7a:	468f      	mov	pc, r1
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	0034      	movs	r4, r6
 8001e82:	0015      	movs	r5, r2
 8001e84:	4683      	mov	fp, r0
 8001e86:	465b      	mov	r3, fp
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d016      	beq.n	8001eba <__aeabi_dmul+0xde>
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dmul+0xb6>
 8001e90:	e203      	b.n	800229a <__aeabi_dmul+0x4be>
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dmul+0xbc>
 8001e96:	e0cd      	b.n	8002034 <__aeabi_dmul+0x258>
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	2500      	movs	r5, #0
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	0512      	lsls	r2, r2, #20
 8001ea2:	4322      	orrs	r2, r4
 8001ea4:	07db      	lsls	r3, r3, #31
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0028      	movs	r0, r5
 8001eaa:	0011      	movs	r1, r2
 8001eac:	b007      	add	sp, #28
 8001eae:	bcf0      	pop	{r4, r5, r6, r7}
 8001eb0:	46bb      	mov	fp, r7
 8001eb2:	46b2      	mov	sl, r6
 8001eb4:	46a9      	mov	r9, r5
 8001eb6:	46a0      	mov	r8, r4
 8001eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eba:	2400      	movs	r4, #0
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	4aaa      	ldr	r2, [pc, #680]	; (8002168 <__aeabi_dmul+0x38c>)
 8001ec0:	e7ed      	b.n	8001e9e <__aeabi_dmul+0xc2>
 8001ec2:	0c28      	lsrs	r0, r5, #16
 8001ec4:	042d      	lsls	r5, r5, #16
 8001ec6:	0c2d      	lsrs	r5, r5, #16
 8001ec8:	002b      	movs	r3, r5
 8001eca:	0c11      	lsrs	r1, r2, #16
 8001ecc:	0412      	lsls	r2, r2, #16
 8001ece:	0c12      	lsrs	r2, r2, #16
 8001ed0:	4353      	muls	r3, r2
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	002f      	movs	r7, r5
 8001ed8:	4343      	muls	r3, r0
 8001eda:	4699      	mov	r9, r3
 8001edc:	434f      	muls	r7, r1
 8001ede:	444f      	add	r7, r9
 8001ee0:	46bb      	mov	fp, r7
 8001ee2:	4647      	mov	r7, r8
 8001ee4:	000b      	movs	r3, r1
 8001ee6:	0c3f      	lsrs	r7, r7, #16
 8001ee8:	46ba      	mov	sl, r7
 8001eea:	4343      	muls	r3, r0
 8001eec:	44da      	add	sl, fp
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	45d1      	cmp	r9, sl
 8001ef2:	d904      	bls.n	8001efe <__aeabi_dmul+0x122>
 8001ef4:	2780      	movs	r7, #128	; 0x80
 8001ef6:	027f      	lsls	r7, r7, #9
 8001ef8:	46b9      	mov	r9, r7
 8001efa:	444b      	add	r3, r9
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	4653      	mov	r3, sl
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	469b      	mov	fp, r3
 8001f04:	4653      	mov	r3, sl
 8001f06:	041f      	lsls	r7, r3, #16
 8001f08:	4643      	mov	r3, r8
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	4698      	mov	r8, r3
 8001f10:	003b      	movs	r3, r7
 8001f12:	4443      	add	r3, r8
 8001f14:	9304      	str	r3, [sp, #16]
 8001f16:	0c33      	lsrs	r3, r6, #16
 8001f18:	0436      	lsls	r6, r6, #16
 8001f1a:	0c36      	lsrs	r6, r6, #16
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	0033      	movs	r3, r6
 8001f20:	4343      	muls	r3, r0
 8001f22:	4699      	mov	r9, r3
 8001f24:	4643      	mov	r3, r8
 8001f26:	4343      	muls	r3, r0
 8001f28:	002f      	movs	r7, r5
 8001f2a:	469a      	mov	sl, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	4377      	muls	r7, r6
 8001f30:	435d      	muls	r5, r3
 8001f32:	0c38      	lsrs	r0, r7, #16
 8001f34:	444d      	add	r5, r9
 8001f36:	1945      	adds	r5, r0, r5
 8001f38:	45a9      	cmp	r9, r5
 8001f3a:	d903      	bls.n	8001f44 <__aeabi_dmul+0x168>
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	4699      	mov	r9, r3
 8001f42:	44ca      	add	sl, r9
 8001f44:	043f      	lsls	r7, r7, #16
 8001f46:	0c28      	lsrs	r0, r5, #16
 8001f48:	0c3f      	lsrs	r7, r7, #16
 8001f4a:	042d      	lsls	r5, r5, #16
 8001f4c:	19ed      	adds	r5, r5, r7
 8001f4e:	0c27      	lsrs	r7, r4, #16
 8001f50:	0424      	lsls	r4, r4, #16
 8001f52:	0c24      	lsrs	r4, r4, #16
 8001f54:	0003      	movs	r3, r0
 8001f56:	0020      	movs	r0, r4
 8001f58:	4350      	muls	r0, r2
 8001f5a:	437a      	muls	r2, r7
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	003a      	movs	r2, r7
 8001f60:	4453      	add	r3, sl
 8001f62:	9305      	str	r3, [sp, #20]
 8001f64:	0c03      	lsrs	r3, r0, #16
 8001f66:	469a      	mov	sl, r3
 8001f68:	434a      	muls	r2, r1
 8001f6a:	4361      	muls	r1, r4
 8001f6c:	4449      	add	r1, r9
 8001f6e:	4451      	add	r1, sl
 8001f70:	44ab      	add	fp, r5
 8001f72:	4589      	cmp	r9, r1
 8001f74:	d903      	bls.n	8001f7e <__aeabi_dmul+0x1a2>
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	444a      	add	r2, r9
 8001f7e:	0400      	lsls	r0, r0, #16
 8001f80:	0c0b      	lsrs	r3, r1, #16
 8001f82:	0c00      	lsrs	r0, r0, #16
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	1809      	adds	r1, r1, r0
 8001f88:	0020      	movs	r0, r4
 8001f8a:	4699      	mov	r9, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	4370      	muls	r0, r6
 8001f90:	435c      	muls	r4, r3
 8001f92:	437e      	muls	r6, r7
 8001f94:	435f      	muls	r7, r3
 8001f96:	0c03      	lsrs	r3, r0, #16
 8001f98:	4698      	mov	r8, r3
 8001f9a:	19a4      	adds	r4, r4, r6
 8001f9c:	4444      	add	r4, r8
 8001f9e:	444a      	add	r2, r9
 8001fa0:	9703      	str	r7, [sp, #12]
 8001fa2:	42a6      	cmp	r6, r4
 8001fa4:	d904      	bls.n	8001fb0 <__aeabi_dmul+0x1d4>
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	4698      	mov	r8, r3
 8001fac:	4447      	add	r7, r8
 8001fae:	9703      	str	r7, [sp, #12]
 8001fb0:	0423      	lsls	r3, r4, #16
 8001fb2:	9e02      	ldr	r6, [sp, #8]
 8001fb4:	469a      	mov	sl, r3
 8001fb6:	9b05      	ldr	r3, [sp, #20]
 8001fb8:	445e      	add	r6, fp
 8001fba:	4698      	mov	r8, r3
 8001fbc:	42ae      	cmp	r6, r5
 8001fbe:	41ad      	sbcs	r5, r5
 8001fc0:	1876      	adds	r6, r6, r1
 8001fc2:	428e      	cmp	r6, r1
 8001fc4:	4189      	sbcs	r1, r1
 8001fc6:	0400      	lsls	r0, r0, #16
 8001fc8:	0c00      	lsrs	r0, r0, #16
 8001fca:	4450      	add	r0, sl
 8001fcc:	4440      	add	r0, r8
 8001fce:	426d      	negs	r5, r5
 8001fd0:	1947      	adds	r7, r0, r5
 8001fd2:	46b8      	mov	r8, r7
 8001fd4:	4693      	mov	fp, r2
 8001fd6:	4249      	negs	r1, r1
 8001fd8:	4689      	mov	r9, r1
 8001fda:	44c3      	add	fp, r8
 8001fdc:	44d9      	add	r9, fp
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	4180      	sbcs	r0, r0
 8001fe2:	45a8      	cmp	r8, r5
 8001fe4:	41ad      	sbcs	r5, r5
 8001fe6:	4593      	cmp	fp, r2
 8001fe8:	4192      	sbcs	r2, r2
 8001fea:	4589      	cmp	r9, r1
 8001fec:	4189      	sbcs	r1, r1
 8001fee:	426d      	negs	r5, r5
 8001ff0:	4240      	negs	r0, r0
 8001ff2:	4328      	orrs	r0, r5
 8001ff4:	0c24      	lsrs	r4, r4, #16
 8001ff6:	4252      	negs	r2, r2
 8001ff8:	4249      	negs	r1, r1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	9b03      	ldr	r3, [sp, #12]
 8001ffe:	1900      	adds	r0, r0, r4
 8002000:	1880      	adds	r0, r0, r2
 8002002:	18c7      	adds	r7, r0, r3
 8002004:	464b      	mov	r3, r9
 8002006:	0ddc      	lsrs	r4, r3, #23
 8002008:	9b04      	ldr	r3, [sp, #16]
 800200a:	0275      	lsls	r5, r6, #9
 800200c:	431d      	orrs	r5, r3
 800200e:	1e6a      	subs	r2, r5, #1
 8002010:	4195      	sbcs	r5, r2
 8002012:	464b      	mov	r3, r9
 8002014:	0df6      	lsrs	r6, r6, #23
 8002016:	027f      	lsls	r7, r7, #9
 8002018:	4335      	orrs	r5, r6
 800201a:	025a      	lsls	r2, r3, #9
 800201c:	433c      	orrs	r4, r7
 800201e:	4315      	orrs	r5, r2
 8002020:	01fb      	lsls	r3, r7, #7
 8002022:	d400      	bmi.n	8002026 <__aeabi_dmul+0x24a>
 8002024:	e11c      	b.n	8002260 <__aeabi_dmul+0x484>
 8002026:	2101      	movs	r1, #1
 8002028:	086a      	lsrs	r2, r5, #1
 800202a:	400d      	ands	r5, r1
 800202c:	4315      	orrs	r5, r2
 800202e:	07e2      	lsls	r2, r4, #31
 8002030:	4315      	orrs	r5, r2
 8002032:	0864      	lsrs	r4, r4, #1
 8002034:	494f      	ldr	r1, [pc, #316]	; (8002174 <__aeabi_dmul+0x398>)
 8002036:	4461      	add	r1, ip
 8002038:	2900      	cmp	r1, #0
 800203a:	dc00      	bgt.n	800203e <__aeabi_dmul+0x262>
 800203c:	e0b0      	b.n	80021a0 <__aeabi_dmul+0x3c4>
 800203e:	076b      	lsls	r3, r5, #29
 8002040:	d009      	beq.n	8002056 <__aeabi_dmul+0x27a>
 8002042:	220f      	movs	r2, #15
 8002044:	402a      	ands	r2, r5
 8002046:	2a04      	cmp	r2, #4
 8002048:	d005      	beq.n	8002056 <__aeabi_dmul+0x27a>
 800204a:	1d2a      	adds	r2, r5, #4
 800204c:	42aa      	cmp	r2, r5
 800204e:	41ad      	sbcs	r5, r5
 8002050:	426d      	negs	r5, r5
 8002052:	1964      	adds	r4, r4, r5
 8002054:	0015      	movs	r5, r2
 8002056:	01e3      	lsls	r3, r4, #7
 8002058:	d504      	bpl.n	8002064 <__aeabi_dmul+0x288>
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	4a46      	ldr	r2, [pc, #280]	; (8002178 <__aeabi_dmul+0x39c>)
 800205e:	00c9      	lsls	r1, r1, #3
 8002060:	4014      	ands	r4, r2
 8002062:	4461      	add	r1, ip
 8002064:	4a45      	ldr	r2, [pc, #276]	; (800217c <__aeabi_dmul+0x3a0>)
 8002066:	4291      	cmp	r1, r2
 8002068:	dd00      	ble.n	800206c <__aeabi_dmul+0x290>
 800206a:	e726      	b.n	8001eba <__aeabi_dmul+0xde>
 800206c:	0762      	lsls	r2, r4, #29
 800206e:	08ed      	lsrs	r5, r5, #3
 8002070:	0264      	lsls	r4, r4, #9
 8002072:	0549      	lsls	r1, r1, #21
 8002074:	4315      	orrs	r5, r2
 8002076:	0b24      	lsrs	r4, r4, #12
 8002078:	0d4a      	lsrs	r2, r1, #21
 800207a:	e710      	b.n	8001e9e <__aeabi_dmul+0xc2>
 800207c:	4652      	mov	r2, sl
 800207e:	4332      	orrs	r2, r6
 8002080:	d100      	bne.n	8002084 <__aeabi_dmul+0x2a8>
 8002082:	e07f      	b.n	8002184 <__aeabi_dmul+0x3a8>
 8002084:	2e00      	cmp	r6, #0
 8002086:	d100      	bne.n	800208a <__aeabi_dmul+0x2ae>
 8002088:	e0dc      	b.n	8002244 <__aeabi_dmul+0x468>
 800208a:	0030      	movs	r0, r6
 800208c:	f000 fdda 	bl	8002c44 <__clzsi2>
 8002090:	0002      	movs	r2, r0
 8002092:	3a0b      	subs	r2, #11
 8002094:	231d      	movs	r3, #29
 8002096:	0001      	movs	r1, r0
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	4652      	mov	r2, sl
 800209c:	3908      	subs	r1, #8
 800209e:	40da      	lsrs	r2, r3
 80020a0:	408e      	lsls	r6, r1
 80020a2:	4316      	orrs	r6, r2
 80020a4:	4652      	mov	r2, sl
 80020a6:	408a      	lsls	r2, r1
 80020a8:	9b00      	ldr	r3, [sp, #0]
 80020aa:	4935      	ldr	r1, [pc, #212]	; (8002180 <__aeabi_dmul+0x3a4>)
 80020ac:	1a18      	subs	r0, r3, r0
 80020ae:	0003      	movs	r3, r0
 80020b0:	468c      	mov	ip, r1
 80020b2:	4463      	add	r3, ip
 80020b4:	2000      	movs	r0, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	e6d3      	b.n	8001e62 <__aeabi_dmul+0x86>
 80020ba:	0025      	movs	r5, r4
 80020bc:	4305      	orrs	r5, r0
 80020be:	d04a      	beq.n	8002156 <__aeabi_dmul+0x37a>
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x2ea>
 80020c4:	e0b0      	b.n	8002228 <__aeabi_dmul+0x44c>
 80020c6:	0020      	movs	r0, r4
 80020c8:	f000 fdbc 	bl	8002c44 <__clzsi2>
 80020cc:	0001      	movs	r1, r0
 80020ce:	0002      	movs	r2, r0
 80020d0:	390b      	subs	r1, #11
 80020d2:	231d      	movs	r3, #29
 80020d4:	0010      	movs	r0, r2
 80020d6:	1a5b      	subs	r3, r3, r1
 80020d8:	0031      	movs	r1, r6
 80020da:	0035      	movs	r5, r6
 80020dc:	3808      	subs	r0, #8
 80020de:	4084      	lsls	r4, r0
 80020e0:	40d9      	lsrs	r1, r3
 80020e2:	4085      	lsls	r5, r0
 80020e4:	430c      	orrs	r4, r1
 80020e6:	4826      	ldr	r0, [pc, #152]	; (8002180 <__aeabi_dmul+0x3a4>)
 80020e8:	1a83      	subs	r3, r0, r2
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2300      	movs	r3, #0
 80020ee:	4699      	mov	r9, r3
 80020f0:	469b      	mov	fp, r3
 80020f2:	e697      	b.n	8001e24 <__aeabi_dmul+0x48>
 80020f4:	0005      	movs	r5, r0
 80020f6:	4325      	orrs	r5, r4
 80020f8:	d126      	bne.n	8002148 <__aeabi_dmul+0x36c>
 80020fa:	2208      	movs	r2, #8
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2400      	movs	r4, #0
 8002102:	4691      	mov	r9, r2
 8002104:	469b      	mov	fp, r3
 8002106:	e68d      	b.n	8001e24 <__aeabi_dmul+0x48>
 8002108:	4652      	mov	r2, sl
 800210a:	9b00      	ldr	r3, [sp, #0]
 800210c:	4332      	orrs	r2, r6
 800210e:	d110      	bne.n	8002132 <__aeabi_dmul+0x356>
 8002110:	4915      	ldr	r1, [pc, #84]	; (8002168 <__aeabi_dmul+0x38c>)
 8002112:	2600      	movs	r6, #0
 8002114:	468c      	mov	ip, r1
 8002116:	4463      	add	r3, ip
 8002118:	4649      	mov	r1, r9
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	4319      	orrs	r1, r3
 8002120:	4689      	mov	r9, r1
 8002122:	2002      	movs	r0, #2
 8002124:	e69d      	b.n	8001e62 <__aeabi_dmul+0x86>
 8002126:	465b      	mov	r3, fp
 8002128:	9701      	str	r7, [sp, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d000      	beq.n	8002130 <__aeabi_dmul+0x354>
 800212e:	e6ad      	b.n	8001e8c <__aeabi_dmul+0xb0>
 8002130:	e6c3      	b.n	8001eba <__aeabi_dmul+0xde>
 8002132:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <__aeabi_dmul+0x38c>)
 8002134:	2003      	movs	r0, #3
 8002136:	4694      	mov	ip, r2
 8002138:	4463      	add	r3, ip
 800213a:	464a      	mov	r2, r9
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2303      	movs	r3, #3
 8002140:	431a      	orrs	r2, r3
 8002142:	4691      	mov	r9, r2
 8002144:	4652      	mov	r2, sl
 8002146:	e68c      	b.n	8001e62 <__aeabi_dmul+0x86>
 8002148:	220c      	movs	r2, #12
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2303      	movs	r3, #3
 800214e:	0005      	movs	r5, r0
 8002150:	4691      	mov	r9, r2
 8002152:	469b      	mov	fp, r3
 8002154:	e666      	b.n	8001e24 <__aeabi_dmul+0x48>
 8002156:	2304      	movs	r3, #4
 8002158:	4699      	mov	r9, r3
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	2400      	movs	r4, #0
 8002162:	469b      	mov	fp, r3
 8002164:	e65e      	b.n	8001e24 <__aeabi_dmul+0x48>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	000007ff 	.word	0x000007ff
 800216c:	fffffc01 	.word	0xfffffc01
 8002170:	08009870 	.word	0x08009870
 8002174:	000003ff 	.word	0x000003ff
 8002178:	feffffff 	.word	0xfeffffff
 800217c:	000007fe 	.word	0x000007fe
 8002180:	fffffc0d 	.word	0xfffffc0d
 8002184:	4649      	mov	r1, r9
 8002186:	2301      	movs	r3, #1
 8002188:	4319      	orrs	r1, r3
 800218a:	4689      	mov	r9, r1
 800218c:	2600      	movs	r6, #0
 800218e:	2001      	movs	r0, #1
 8002190:	e667      	b.n	8001e62 <__aeabi_dmul+0x86>
 8002192:	2300      	movs	r3, #0
 8002194:	2480      	movs	r4, #128	; 0x80
 8002196:	2500      	movs	r5, #0
 8002198:	4a43      	ldr	r2, [pc, #268]	; (80022a8 <__aeabi_dmul+0x4cc>)
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	0324      	lsls	r4, r4, #12
 800219e:	e67e      	b.n	8001e9e <__aeabi_dmul+0xc2>
 80021a0:	2001      	movs	r0, #1
 80021a2:	1a40      	subs	r0, r0, r1
 80021a4:	2838      	cmp	r0, #56	; 0x38
 80021a6:	dd00      	ble.n	80021aa <__aeabi_dmul+0x3ce>
 80021a8:	e676      	b.n	8001e98 <__aeabi_dmul+0xbc>
 80021aa:	281f      	cmp	r0, #31
 80021ac:	dd5b      	ble.n	8002266 <__aeabi_dmul+0x48a>
 80021ae:	221f      	movs	r2, #31
 80021b0:	0023      	movs	r3, r4
 80021b2:	4252      	negs	r2, r2
 80021b4:	1a51      	subs	r1, r2, r1
 80021b6:	40cb      	lsrs	r3, r1
 80021b8:	0019      	movs	r1, r3
 80021ba:	2820      	cmp	r0, #32
 80021bc:	d003      	beq.n	80021c6 <__aeabi_dmul+0x3ea>
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <__aeabi_dmul+0x4d0>)
 80021c0:	4462      	add	r2, ip
 80021c2:	4094      	lsls	r4, r2
 80021c4:	4325      	orrs	r5, r4
 80021c6:	1e6a      	subs	r2, r5, #1
 80021c8:	4195      	sbcs	r5, r2
 80021ca:	002a      	movs	r2, r5
 80021cc:	430a      	orrs	r2, r1
 80021ce:	2107      	movs	r1, #7
 80021d0:	000d      	movs	r5, r1
 80021d2:	2400      	movs	r4, #0
 80021d4:	4015      	ands	r5, r2
 80021d6:	4211      	tst	r1, r2
 80021d8:	d05b      	beq.n	8002292 <__aeabi_dmul+0x4b6>
 80021da:	210f      	movs	r1, #15
 80021dc:	2400      	movs	r4, #0
 80021de:	4011      	ands	r1, r2
 80021e0:	2904      	cmp	r1, #4
 80021e2:	d053      	beq.n	800228c <__aeabi_dmul+0x4b0>
 80021e4:	1d11      	adds	r1, r2, #4
 80021e6:	4291      	cmp	r1, r2
 80021e8:	4192      	sbcs	r2, r2
 80021ea:	4252      	negs	r2, r2
 80021ec:	18a4      	adds	r4, r4, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	0223      	lsls	r3, r4, #8
 80021f2:	d54b      	bpl.n	800228c <__aeabi_dmul+0x4b0>
 80021f4:	2201      	movs	r2, #1
 80021f6:	2400      	movs	r4, #0
 80021f8:	2500      	movs	r5, #0
 80021fa:	e650      	b.n	8001e9e <__aeabi_dmul+0xc2>
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	031b      	lsls	r3, r3, #12
 8002200:	421c      	tst	r4, r3
 8002202:	d009      	beq.n	8002218 <__aeabi_dmul+0x43c>
 8002204:	421e      	tst	r6, r3
 8002206:	d107      	bne.n	8002218 <__aeabi_dmul+0x43c>
 8002208:	4333      	orrs	r3, r6
 800220a:	031c      	lsls	r4, r3, #12
 800220c:	4643      	mov	r3, r8
 800220e:	0015      	movs	r5, r2
 8002210:	0b24      	lsrs	r4, r4, #12
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <__aeabi_dmul+0x4cc>)
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	e642      	b.n	8001e9e <__aeabi_dmul+0xc2>
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	0312      	lsls	r2, r2, #12
 800221c:	4314      	orrs	r4, r2
 800221e:	0324      	lsls	r4, r4, #12
 8002220:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <__aeabi_dmul+0x4cc>)
 8002222:	0b24      	lsrs	r4, r4, #12
 8002224:	9701      	str	r7, [sp, #4]
 8002226:	e63a      	b.n	8001e9e <__aeabi_dmul+0xc2>
 8002228:	f000 fd0c 	bl	8002c44 <__clzsi2>
 800222c:	0001      	movs	r1, r0
 800222e:	0002      	movs	r2, r0
 8002230:	3115      	adds	r1, #21
 8002232:	3220      	adds	r2, #32
 8002234:	291c      	cmp	r1, #28
 8002236:	dc00      	bgt.n	800223a <__aeabi_dmul+0x45e>
 8002238:	e74b      	b.n	80020d2 <__aeabi_dmul+0x2f6>
 800223a:	0034      	movs	r4, r6
 800223c:	3808      	subs	r0, #8
 800223e:	2500      	movs	r5, #0
 8002240:	4084      	lsls	r4, r0
 8002242:	e750      	b.n	80020e6 <__aeabi_dmul+0x30a>
 8002244:	f000 fcfe 	bl	8002c44 <__clzsi2>
 8002248:	0003      	movs	r3, r0
 800224a:	001a      	movs	r2, r3
 800224c:	3215      	adds	r2, #21
 800224e:	3020      	adds	r0, #32
 8002250:	2a1c      	cmp	r2, #28
 8002252:	dc00      	bgt.n	8002256 <__aeabi_dmul+0x47a>
 8002254:	e71e      	b.n	8002094 <__aeabi_dmul+0x2b8>
 8002256:	4656      	mov	r6, sl
 8002258:	3b08      	subs	r3, #8
 800225a:	2200      	movs	r2, #0
 800225c:	409e      	lsls	r6, r3
 800225e:	e723      	b.n	80020a8 <__aeabi_dmul+0x2cc>
 8002260:	9b00      	ldr	r3, [sp, #0]
 8002262:	469c      	mov	ip, r3
 8002264:	e6e6      	b.n	8002034 <__aeabi_dmul+0x258>
 8002266:	4912      	ldr	r1, [pc, #72]	; (80022b0 <__aeabi_dmul+0x4d4>)
 8002268:	0022      	movs	r2, r4
 800226a:	4461      	add	r1, ip
 800226c:	002e      	movs	r6, r5
 800226e:	408d      	lsls	r5, r1
 8002270:	408a      	lsls	r2, r1
 8002272:	40c6      	lsrs	r6, r0
 8002274:	1e69      	subs	r1, r5, #1
 8002276:	418d      	sbcs	r5, r1
 8002278:	4332      	orrs	r2, r6
 800227a:	432a      	orrs	r2, r5
 800227c:	40c4      	lsrs	r4, r0
 800227e:	0753      	lsls	r3, r2, #29
 8002280:	d0b6      	beq.n	80021f0 <__aeabi_dmul+0x414>
 8002282:	210f      	movs	r1, #15
 8002284:	4011      	ands	r1, r2
 8002286:	2904      	cmp	r1, #4
 8002288:	d1ac      	bne.n	80021e4 <__aeabi_dmul+0x408>
 800228a:	e7b1      	b.n	80021f0 <__aeabi_dmul+0x414>
 800228c:	0765      	lsls	r5, r4, #29
 800228e:	0264      	lsls	r4, r4, #9
 8002290:	0b24      	lsrs	r4, r4, #12
 8002292:	08d2      	lsrs	r2, r2, #3
 8002294:	4315      	orrs	r5, r2
 8002296:	2200      	movs	r2, #0
 8002298:	e601      	b.n	8001e9e <__aeabi_dmul+0xc2>
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	0312      	lsls	r2, r2, #12
 800229e:	4314      	orrs	r4, r2
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	4a01      	ldr	r2, [pc, #4]	; (80022a8 <__aeabi_dmul+0x4cc>)
 80022a4:	0b24      	lsrs	r4, r4, #12
 80022a6:	e5fa      	b.n	8001e9e <__aeabi_dmul+0xc2>
 80022a8:	000007ff 	.word	0x000007ff
 80022ac:	0000043e 	.word	0x0000043e
 80022b0:	0000041e 	.word	0x0000041e

080022b4 <__aeabi_dsub>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	4657      	mov	r7, sl
 80022b8:	464e      	mov	r6, r9
 80022ba:	4645      	mov	r5, r8
 80022bc:	46de      	mov	lr, fp
 80022be:	b5e0      	push	{r5, r6, r7, lr}
 80022c0:	001e      	movs	r6, r3
 80022c2:	0017      	movs	r7, r2
 80022c4:	004a      	lsls	r2, r1, #1
 80022c6:	030b      	lsls	r3, r1, #12
 80022c8:	0d52      	lsrs	r2, r2, #21
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	4690      	mov	r8, r2
 80022ce:	0f42      	lsrs	r2, r0, #29
 80022d0:	431a      	orrs	r2, r3
 80022d2:	0fcd      	lsrs	r5, r1, #31
 80022d4:	4ccd      	ldr	r4, [pc, #820]	; (800260c <__aeabi_dsub+0x358>)
 80022d6:	0331      	lsls	r1, r6, #12
 80022d8:	00c3      	lsls	r3, r0, #3
 80022da:	4694      	mov	ip, r2
 80022dc:	0070      	lsls	r0, r6, #1
 80022de:	0f7a      	lsrs	r2, r7, #29
 80022e0:	0a49      	lsrs	r1, r1, #9
 80022e2:	00ff      	lsls	r7, r7, #3
 80022e4:	469a      	mov	sl, r3
 80022e6:	46b9      	mov	r9, r7
 80022e8:	0d40      	lsrs	r0, r0, #21
 80022ea:	0ff6      	lsrs	r6, r6, #31
 80022ec:	4311      	orrs	r1, r2
 80022ee:	42a0      	cmp	r0, r4
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x40>
 80022f2:	e0b1      	b.n	8002458 <__aeabi_dsub+0x1a4>
 80022f4:	2201      	movs	r2, #1
 80022f6:	4056      	eors	r6, r2
 80022f8:	46b3      	mov	fp, r6
 80022fa:	42b5      	cmp	r5, r6
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x4c>
 80022fe:	e088      	b.n	8002412 <__aeabi_dsub+0x15e>
 8002300:	4642      	mov	r2, r8
 8002302:	1a12      	subs	r2, r2, r0
 8002304:	2a00      	cmp	r2, #0
 8002306:	dc00      	bgt.n	800230a <__aeabi_dsub+0x56>
 8002308:	e0ae      	b.n	8002468 <__aeabi_dsub+0x1b4>
 800230a:	2800      	cmp	r0, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x5c>
 800230e:	e0c1      	b.n	8002494 <__aeabi_dsub+0x1e0>
 8002310:	48be      	ldr	r0, [pc, #760]	; (800260c <__aeabi_dsub+0x358>)
 8002312:	4580      	cmp	r8, r0
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x64>
 8002316:	e151      	b.n	80025bc <__aeabi_dsub+0x308>
 8002318:	2080      	movs	r0, #128	; 0x80
 800231a:	0400      	lsls	r0, r0, #16
 800231c:	4301      	orrs	r1, r0
 800231e:	2a38      	cmp	r2, #56	; 0x38
 8002320:	dd00      	ble.n	8002324 <__aeabi_dsub+0x70>
 8002322:	e17b      	b.n	800261c <__aeabi_dsub+0x368>
 8002324:	2a1f      	cmp	r2, #31
 8002326:	dd00      	ble.n	800232a <__aeabi_dsub+0x76>
 8002328:	e1ee      	b.n	8002708 <__aeabi_dsub+0x454>
 800232a:	2020      	movs	r0, #32
 800232c:	003e      	movs	r6, r7
 800232e:	1a80      	subs	r0, r0, r2
 8002330:	000c      	movs	r4, r1
 8002332:	40d6      	lsrs	r6, r2
 8002334:	40d1      	lsrs	r1, r2
 8002336:	4087      	lsls	r7, r0
 8002338:	4662      	mov	r2, ip
 800233a:	4084      	lsls	r4, r0
 800233c:	1a52      	subs	r2, r2, r1
 800233e:	1e78      	subs	r0, r7, #1
 8002340:	4187      	sbcs	r7, r0
 8002342:	4694      	mov	ip, r2
 8002344:	4334      	orrs	r4, r6
 8002346:	4327      	orrs	r7, r4
 8002348:	1bdc      	subs	r4, r3, r7
 800234a:	42a3      	cmp	r3, r4
 800234c:	419b      	sbcs	r3, r3
 800234e:	4662      	mov	r2, ip
 8002350:	425b      	negs	r3, r3
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4699      	mov	r9, r3
 8002356:	464b      	mov	r3, r9
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	d400      	bmi.n	800235e <__aeabi_dsub+0xaa>
 800235c:	e118      	b.n	8002590 <__aeabi_dsub+0x2dc>
 800235e:	464b      	mov	r3, r9
 8002360:	0258      	lsls	r0, r3, #9
 8002362:	0a43      	lsrs	r3, r0, #9
 8002364:	4699      	mov	r9, r3
 8002366:	464b      	mov	r3, r9
 8002368:	2b00      	cmp	r3, #0
 800236a:	d100      	bne.n	800236e <__aeabi_dsub+0xba>
 800236c:	e137      	b.n	80025de <__aeabi_dsub+0x32a>
 800236e:	4648      	mov	r0, r9
 8002370:	f000 fc68 	bl	8002c44 <__clzsi2>
 8002374:	0001      	movs	r1, r0
 8002376:	3908      	subs	r1, #8
 8002378:	2320      	movs	r3, #32
 800237a:	0022      	movs	r2, r4
 800237c:	4648      	mov	r0, r9
 800237e:	1a5b      	subs	r3, r3, r1
 8002380:	40da      	lsrs	r2, r3
 8002382:	4088      	lsls	r0, r1
 8002384:	408c      	lsls	r4, r1
 8002386:	4643      	mov	r3, r8
 8002388:	4310      	orrs	r0, r2
 800238a:	4588      	cmp	r8, r1
 800238c:	dd00      	ble.n	8002390 <__aeabi_dsub+0xdc>
 800238e:	e136      	b.n	80025fe <__aeabi_dsub+0x34a>
 8002390:	1ac9      	subs	r1, r1, r3
 8002392:	1c4b      	adds	r3, r1, #1
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0xe6>
 8002398:	e0ea      	b.n	8002570 <__aeabi_dsub+0x2bc>
 800239a:	2220      	movs	r2, #32
 800239c:	0026      	movs	r6, r4
 800239e:	1ad2      	subs	r2, r2, r3
 80023a0:	0001      	movs	r1, r0
 80023a2:	4094      	lsls	r4, r2
 80023a4:	40de      	lsrs	r6, r3
 80023a6:	40d8      	lsrs	r0, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	4091      	lsls	r1, r2
 80023ac:	1e62      	subs	r2, r4, #1
 80023ae:	4194      	sbcs	r4, r2
 80023b0:	4681      	mov	r9, r0
 80023b2:	4698      	mov	r8, r3
 80023b4:	4331      	orrs	r1, r6
 80023b6:	430c      	orrs	r4, r1
 80023b8:	0763      	lsls	r3, r4, #29
 80023ba:	d009      	beq.n	80023d0 <__aeabi_dsub+0x11c>
 80023bc:	230f      	movs	r3, #15
 80023be:	4023      	ands	r3, r4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d005      	beq.n	80023d0 <__aeabi_dsub+0x11c>
 80023c4:	1d23      	adds	r3, r4, #4
 80023c6:	42a3      	cmp	r3, r4
 80023c8:	41a4      	sbcs	r4, r4
 80023ca:	4264      	negs	r4, r4
 80023cc:	44a1      	add	r9, r4
 80023ce:	001c      	movs	r4, r3
 80023d0:	464b      	mov	r3, r9
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	d400      	bmi.n	80023d8 <__aeabi_dsub+0x124>
 80023d6:	e0de      	b.n	8002596 <__aeabi_dsub+0x2e2>
 80023d8:	4641      	mov	r1, r8
 80023da:	4b8c      	ldr	r3, [pc, #560]	; (800260c <__aeabi_dsub+0x358>)
 80023dc:	3101      	adds	r1, #1
 80023de:	4299      	cmp	r1, r3
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x130>
 80023e2:	e0e7      	b.n	80025b4 <__aeabi_dsub+0x300>
 80023e4:	464b      	mov	r3, r9
 80023e6:	488a      	ldr	r0, [pc, #552]	; (8002610 <__aeabi_dsub+0x35c>)
 80023e8:	08e4      	lsrs	r4, r4, #3
 80023ea:	4003      	ands	r3, r0
 80023ec:	0018      	movs	r0, r3
 80023ee:	0549      	lsls	r1, r1, #21
 80023f0:	075b      	lsls	r3, r3, #29
 80023f2:	0240      	lsls	r0, r0, #9
 80023f4:	4323      	orrs	r3, r4
 80023f6:	0d4a      	lsrs	r2, r1, #21
 80023f8:	0b04      	lsrs	r4, r0, #12
 80023fa:	0512      	lsls	r2, r2, #20
 80023fc:	07ed      	lsls	r5, r5, #31
 80023fe:	4322      	orrs	r2, r4
 8002400:	432a      	orrs	r2, r5
 8002402:	0018      	movs	r0, r3
 8002404:	0011      	movs	r1, r2
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	46bb      	mov	fp, r7
 800240a:	46b2      	mov	sl, r6
 800240c:	46a9      	mov	r9, r5
 800240e:	46a0      	mov	r8, r4
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002412:	4642      	mov	r2, r8
 8002414:	1a12      	subs	r2, r2, r0
 8002416:	2a00      	cmp	r2, #0
 8002418:	dd52      	ble.n	80024c0 <__aeabi_dsub+0x20c>
 800241a:	2800      	cmp	r0, #0
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x16c>
 800241e:	e09c      	b.n	800255a <__aeabi_dsub+0x2a6>
 8002420:	45a0      	cmp	r8, r4
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x172>
 8002424:	e0ca      	b.n	80025bc <__aeabi_dsub+0x308>
 8002426:	2080      	movs	r0, #128	; 0x80
 8002428:	0400      	lsls	r0, r0, #16
 800242a:	4301      	orrs	r1, r0
 800242c:	2a38      	cmp	r2, #56	; 0x38
 800242e:	dd00      	ble.n	8002432 <__aeabi_dsub+0x17e>
 8002430:	e149      	b.n	80026c6 <__aeabi_dsub+0x412>
 8002432:	2a1f      	cmp	r2, #31
 8002434:	dc00      	bgt.n	8002438 <__aeabi_dsub+0x184>
 8002436:	e197      	b.n	8002768 <__aeabi_dsub+0x4b4>
 8002438:	0010      	movs	r0, r2
 800243a:	000e      	movs	r6, r1
 800243c:	3820      	subs	r0, #32
 800243e:	40c6      	lsrs	r6, r0
 8002440:	2a20      	cmp	r2, #32
 8002442:	d004      	beq.n	800244e <__aeabi_dsub+0x19a>
 8002444:	2040      	movs	r0, #64	; 0x40
 8002446:	1a82      	subs	r2, r0, r2
 8002448:	4091      	lsls	r1, r2
 800244a:	430f      	orrs	r7, r1
 800244c:	46b9      	mov	r9, r7
 800244e:	464c      	mov	r4, r9
 8002450:	1e62      	subs	r2, r4, #1
 8002452:	4194      	sbcs	r4, r2
 8002454:	4334      	orrs	r4, r6
 8002456:	e13a      	b.n	80026ce <__aeabi_dsub+0x41a>
 8002458:	000a      	movs	r2, r1
 800245a:	433a      	orrs	r2, r7
 800245c:	d028      	beq.n	80024b0 <__aeabi_dsub+0x1fc>
 800245e:	46b3      	mov	fp, r6
 8002460:	42b5      	cmp	r5, r6
 8002462:	d02b      	beq.n	80024bc <__aeabi_dsub+0x208>
 8002464:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <__aeabi_dsub+0x360>)
 8002466:	4442      	add	r2, r8
 8002468:	2a00      	cmp	r2, #0
 800246a:	d05d      	beq.n	8002528 <__aeabi_dsub+0x274>
 800246c:	4642      	mov	r2, r8
 800246e:	4644      	mov	r4, r8
 8002470:	1a82      	subs	r2, r0, r2
 8002472:	2c00      	cmp	r4, #0
 8002474:	d000      	beq.n	8002478 <__aeabi_dsub+0x1c4>
 8002476:	e0f5      	b.n	8002664 <__aeabi_dsub+0x3b0>
 8002478:	4665      	mov	r5, ip
 800247a:	431d      	orrs	r5, r3
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x1cc>
 800247e:	e19c      	b.n	80027ba <__aeabi_dsub+0x506>
 8002480:	1e55      	subs	r5, r2, #1
 8002482:	2a01      	cmp	r2, #1
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x1d4>
 8002486:	e1fb      	b.n	8002880 <__aeabi_dsub+0x5cc>
 8002488:	4c60      	ldr	r4, [pc, #384]	; (800260c <__aeabi_dsub+0x358>)
 800248a:	42a2      	cmp	r2, r4
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x1dc>
 800248e:	e1bd      	b.n	800280c <__aeabi_dsub+0x558>
 8002490:	002a      	movs	r2, r5
 8002492:	e0f0      	b.n	8002676 <__aeabi_dsub+0x3c2>
 8002494:	0008      	movs	r0, r1
 8002496:	4338      	orrs	r0, r7
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x1e8>
 800249a:	e0c3      	b.n	8002624 <__aeabi_dsub+0x370>
 800249c:	1e50      	subs	r0, r2, #1
 800249e:	2a01      	cmp	r2, #1
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x1f0>
 80024a2:	e1a8      	b.n	80027f6 <__aeabi_dsub+0x542>
 80024a4:	4c59      	ldr	r4, [pc, #356]	; (800260c <__aeabi_dsub+0x358>)
 80024a6:	42a2      	cmp	r2, r4
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x1f8>
 80024aa:	e087      	b.n	80025bc <__aeabi_dsub+0x308>
 80024ac:	0002      	movs	r2, r0
 80024ae:	e736      	b.n	800231e <__aeabi_dsub+0x6a>
 80024b0:	2201      	movs	r2, #1
 80024b2:	4056      	eors	r6, r2
 80024b4:	46b3      	mov	fp, r6
 80024b6:	42b5      	cmp	r5, r6
 80024b8:	d000      	beq.n	80024bc <__aeabi_dsub+0x208>
 80024ba:	e721      	b.n	8002300 <__aeabi_dsub+0x4c>
 80024bc:	4a55      	ldr	r2, [pc, #340]	; (8002614 <__aeabi_dsub+0x360>)
 80024be:	4442      	add	r2, r8
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dsub+0x212>
 80024c4:	e0b5      	b.n	8002632 <__aeabi_dsub+0x37e>
 80024c6:	4642      	mov	r2, r8
 80024c8:	4644      	mov	r4, r8
 80024ca:	1a82      	subs	r2, r0, r2
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x21e>
 80024d0:	e138      	b.n	8002744 <__aeabi_dsub+0x490>
 80024d2:	4e4e      	ldr	r6, [pc, #312]	; (800260c <__aeabi_dsub+0x358>)
 80024d4:	42b0      	cmp	r0, r6
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x226>
 80024d8:	e1de      	b.n	8002898 <__aeabi_dsub+0x5e4>
 80024da:	2680      	movs	r6, #128	; 0x80
 80024dc:	4664      	mov	r4, ip
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	4334      	orrs	r4, r6
 80024e2:	46a4      	mov	ip, r4
 80024e4:	2a38      	cmp	r2, #56	; 0x38
 80024e6:	dd00      	ble.n	80024ea <__aeabi_dsub+0x236>
 80024e8:	e196      	b.n	8002818 <__aeabi_dsub+0x564>
 80024ea:	2a1f      	cmp	r2, #31
 80024ec:	dd00      	ble.n	80024f0 <__aeabi_dsub+0x23c>
 80024ee:	e224      	b.n	800293a <__aeabi_dsub+0x686>
 80024f0:	2620      	movs	r6, #32
 80024f2:	1ab4      	subs	r4, r6, r2
 80024f4:	46a2      	mov	sl, r4
 80024f6:	4664      	mov	r4, ip
 80024f8:	4656      	mov	r6, sl
 80024fa:	40b4      	lsls	r4, r6
 80024fc:	46a1      	mov	r9, r4
 80024fe:	001c      	movs	r4, r3
 8002500:	464e      	mov	r6, r9
 8002502:	40d4      	lsrs	r4, r2
 8002504:	4326      	orrs	r6, r4
 8002506:	0034      	movs	r4, r6
 8002508:	4656      	mov	r6, sl
 800250a:	40b3      	lsls	r3, r6
 800250c:	1e5e      	subs	r6, r3, #1
 800250e:	41b3      	sbcs	r3, r6
 8002510:	431c      	orrs	r4, r3
 8002512:	4663      	mov	r3, ip
 8002514:	40d3      	lsrs	r3, r2
 8002516:	18c9      	adds	r1, r1, r3
 8002518:	19e4      	adds	r4, r4, r7
 800251a:	42bc      	cmp	r4, r7
 800251c:	41bf      	sbcs	r7, r7
 800251e:	427f      	negs	r7, r7
 8002520:	46b9      	mov	r9, r7
 8002522:	4680      	mov	r8, r0
 8002524:	4489      	add	r9, r1
 8002526:	e0d8      	b.n	80026da <__aeabi_dsub+0x426>
 8002528:	4640      	mov	r0, r8
 800252a:	4c3b      	ldr	r4, [pc, #236]	; (8002618 <__aeabi_dsub+0x364>)
 800252c:	3001      	adds	r0, #1
 800252e:	4220      	tst	r0, r4
 8002530:	d000      	beq.n	8002534 <__aeabi_dsub+0x280>
 8002532:	e0b4      	b.n	800269e <__aeabi_dsub+0x3ea>
 8002534:	4640      	mov	r0, r8
 8002536:	2800      	cmp	r0, #0
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x288>
 800253a:	e144      	b.n	80027c6 <__aeabi_dsub+0x512>
 800253c:	4660      	mov	r0, ip
 800253e:	4318      	orrs	r0, r3
 8002540:	d100      	bne.n	8002544 <__aeabi_dsub+0x290>
 8002542:	e190      	b.n	8002866 <__aeabi_dsub+0x5b2>
 8002544:	0008      	movs	r0, r1
 8002546:	4338      	orrs	r0, r7
 8002548:	d000      	beq.n	800254c <__aeabi_dsub+0x298>
 800254a:	e1aa      	b.n	80028a2 <__aeabi_dsub+0x5ee>
 800254c:	4661      	mov	r1, ip
 800254e:	08db      	lsrs	r3, r3, #3
 8002550:	0749      	lsls	r1, r1, #29
 8002552:	430b      	orrs	r3, r1
 8002554:	4661      	mov	r1, ip
 8002556:	08cc      	lsrs	r4, r1, #3
 8002558:	e027      	b.n	80025aa <__aeabi_dsub+0x2f6>
 800255a:	0008      	movs	r0, r1
 800255c:	4338      	orrs	r0, r7
 800255e:	d061      	beq.n	8002624 <__aeabi_dsub+0x370>
 8002560:	1e50      	subs	r0, r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x2b4>
 8002566:	e139      	b.n	80027dc <__aeabi_dsub+0x528>
 8002568:	42a2      	cmp	r2, r4
 800256a:	d027      	beq.n	80025bc <__aeabi_dsub+0x308>
 800256c:	0002      	movs	r2, r0
 800256e:	e75d      	b.n	800242c <__aeabi_dsub+0x178>
 8002570:	0002      	movs	r2, r0
 8002572:	391f      	subs	r1, #31
 8002574:	40ca      	lsrs	r2, r1
 8002576:	0011      	movs	r1, r2
 8002578:	2b20      	cmp	r3, #32
 800257a:	d003      	beq.n	8002584 <__aeabi_dsub+0x2d0>
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4098      	lsls	r0, r3
 8002582:	4304      	orrs	r4, r0
 8002584:	1e63      	subs	r3, r4, #1
 8002586:	419c      	sbcs	r4, r3
 8002588:	2300      	movs	r3, #0
 800258a:	4699      	mov	r9, r3
 800258c:	4698      	mov	r8, r3
 800258e:	430c      	orrs	r4, r1
 8002590:	0763      	lsls	r3, r4, #29
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x2e2>
 8002594:	e712      	b.n	80023bc <__aeabi_dsub+0x108>
 8002596:	464b      	mov	r3, r9
 8002598:	464a      	mov	r2, r9
 800259a:	08e4      	lsrs	r4, r4, #3
 800259c:	075b      	lsls	r3, r3, #29
 800259e:	4323      	orrs	r3, r4
 80025a0:	08d4      	lsrs	r4, r2, #3
 80025a2:	4642      	mov	r2, r8
 80025a4:	4919      	ldr	r1, [pc, #100]	; (800260c <__aeabi_dsub+0x358>)
 80025a6:	428a      	cmp	r2, r1
 80025a8:	d00e      	beq.n	80025c8 <__aeabi_dsub+0x314>
 80025aa:	0324      	lsls	r4, r4, #12
 80025ac:	0552      	lsls	r2, r2, #21
 80025ae:	0b24      	lsrs	r4, r4, #12
 80025b0:	0d52      	lsrs	r2, r2, #21
 80025b2:	e722      	b.n	80023fa <__aeabi_dsub+0x146>
 80025b4:	000a      	movs	r2, r1
 80025b6:	2400      	movs	r4, #0
 80025b8:	2300      	movs	r3, #0
 80025ba:	e71e      	b.n	80023fa <__aeabi_dsub+0x146>
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	4662      	mov	r2, ip
 80025c0:	0752      	lsls	r2, r2, #29
 80025c2:	4313      	orrs	r3, r2
 80025c4:	4662      	mov	r2, ip
 80025c6:	08d4      	lsrs	r4, r2, #3
 80025c8:	001a      	movs	r2, r3
 80025ca:	4322      	orrs	r2, r4
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x31c>
 80025ce:	e1fc      	b.n	80029ca <__aeabi_dsub+0x716>
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0312      	lsls	r2, r2, #12
 80025d4:	4314      	orrs	r4, r2
 80025d6:	0324      	lsls	r4, r4, #12
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <__aeabi_dsub+0x358>)
 80025da:	0b24      	lsrs	r4, r4, #12
 80025dc:	e70d      	b.n	80023fa <__aeabi_dsub+0x146>
 80025de:	0020      	movs	r0, r4
 80025e0:	f000 fb30 	bl	8002c44 <__clzsi2>
 80025e4:	0001      	movs	r1, r0
 80025e6:	3118      	adds	r1, #24
 80025e8:	291f      	cmp	r1, #31
 80025ea:	dc00      	bgt.n	80025ee <__aeabi_dsub+0x33a>
 80025ec:	e6c4      	b.n	8002378 <__aeabi_dsub+0xc4>
 80025ee:	3808      	subs	r0, #8
 80025f0:	4084      	lsls	r4, r0
 80025f2:	4643      	mov	r3, r8
 80025f4:	0020      	movs	r0, r4
 80025f6:	2400      	movs	r4, #0
 80025f8:	4588      	cmp	r8, r1
 80025fa:	dc00      	bgt.n	80025fe <__aeabi_dsub+0x34a>
 80025fc:	e6c8      	b.n	8002390 <__aeabi_dsub+0xdc>
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__aeabi_dsub+0x35c>)
 8002600:	1a5b      	subs	r3, r3, r1
 8002602:	4010      	ands	r0, r2
 8002604:	4698      	mov	r8, r3
 8002606:	4681      	mov	r9, r0
 8002608:	e6d6      	b.n	80023b8 <__aeabi_dsub+0x104>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	fffff801 	.word	0xfffff801
 8002618:	000007fe 	.word	0x000007fe
 800261c:	430f      	orrs	r7, r1
 800261e:	1e7a      	subs	r2, r7, #1
 8002620:	4197      	sbcs	r7, r2
 8002622:	e691      	b.n	8002348 <__aeabi_dsub+0x94>
 8002624:	4661      	mov	r1, ip
 8002626:	08db      	lsrs	r3, r3, #3
 8002628:	0749      	lsls	r1, r1, #29
 800262a:	430b      	orrs	r3, r1
 800262c:	4661      	mov	r1, ip
 800262e:	08cc      	lsrs	r4, r1, #3
 8002630:	e7b8      	b.n	80025a4 <__aeabi_dsub+0x2f0>
 8002632:	4640      	mov	r0, r8
 8002634:	4cd3      	ldr	r4, [pc, #844]	; (8002984 <__aeabi_dsub+0x6d0>)
 8002636:	3001      	adds	r0, #1
 8002638:	4220      	tst	r0, r4
 800263a:	d000      	beq.n	800263e <__aeabi_dsub+0x38a>
 800263c:	e0a2      	b.n	8002784 <__aeabi_dsub+0x4d0>
 800263e:	4640      	mov	r0, r8
 8002640:	2800      	cmp	r0, #0
 8002642:	d000      	beq.n	8002646 <__aeabi_dsub+0x392>
 8002644:	e101      	b.n	800284a <__aeabi_dsub+0x596>
 8002646:	4660      	mov	r0, ip
 8002648:	4318      	orrs	r0, r3
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x39a>
 800264c:	e15e      	b.n	800290c <__aeabi_dsub+0x658>
 800264e:	0008      	movs	r0, r1
 8002650:	4338      	orrs	r0, r7
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x3a2>
 8002654:	e15f      	b.n	8002916 <__aeabi_dsub+0x662>
 8002656:	4661      	mov	r1, ip
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	0749      	lsls	r1, r1, #29
 800265c:	430b      	orrs	r3, r1
 800265e:	4661      	mov	r1, ip
 8002660:	08cc      	lsrs	r4, r1, #3
 8002662:	e7a2      	b.n	80025aa <__aeabi_dsub+0x2f6>
 8002664:	4dc8      	ldr	r5, [pc, #800]	; (8002988 <__aeabi_dsub+0x6d4>)
 8002666:	42a8      	cmp	r0, r5
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x3b8>
 800266a:	e0cf      	b.n	800280c <__aeabi_dsub+0x558>
 800266c:	2580      	movs	r5, #128	; 0x80
 800266e:	4664      	mov	r4, ip
 8002670:	042d      	lsls	r5, r5, #16
 8002672:	432c      	orrs	r4, r5
 8002674:	46a4      	mov	ip, r4
 8002676:	2a38      	cmp	r2, #56	; 0x38
 8002678:	dc56      	bgt.n	8002728 <__aeabi_dsub+0x474>
 800267a:	2a1f      	cmp	r2, #31
 800267c:	dd00      	ble.n	8002680 <__aeabi_dsub+0x3cc>
 800267e:	e0d1      	b.n	8002824 <__aeabi_dsub+0x570>
 8002680:	2520      	movs	r5, #32
 8002682:	001e      	movs	r6, r3
 8002684:	1aad      	subs	r5, r5, r2
 8002686:	4664      	mov	r4, ip
 8002688:	40ab      	lsls	r3, r5
 800268a:	40ac      	lsls	r4, r5
 800268c:	40d6      	lsrs	r6, r2
 800268e:	1e5d      	subs	r5, r3, #1
 8002690:	41ab      	sbcs	r3, r5
 8002692:	4334      	orrs	r4, r6
 8002694:	4323      	orrs	r3, r4
 8002696:	4664      	mov	r4, ip
 8002698:	40d4      	lsrs	r4, r2
 800269a:	1b09      	subs	r1, r1, r4
 800269c:	e049      	b.n	8002732 <__aeabi_dsub+0x47e>
 800269e:	4660      	mov	r0, ip
 80026a0:	1bdc      	subs	r4, r3, r7
 80026a2:	1a46      	subs	r6, r0, r1
 80026a4:	42a3      	cmp	r3, r4
 80026a6:	4180      	sbcs	r0, r0
 80026a8:	4240      	negs	r0, r0
 80026aa:	4681      	mov	r9, r0
 80026ac:	0030      	movs	r0, r6
 80026ae:	464e      	mov	r6, r9
 80026b0:	1b80      	subs	r0, r0, r6
 80026b2:	4681      	mov	r9, r0
 80026b4:	0200      	lsls	r0, r0, #8
 80026b6:	d476      	bmi.n	80027a6 <__aeabi_dsub+0x4f2>
 80026b8:	464b      	mov	r3, r9
 80026ba:	4323      	orrs	r3, r4
 80026bc:	d000      	beq.n	80026c0 <__aeabi_dsub+0x40c>
 80026be:	e652      	b.n	8002366 <__aeabi_dsub+0xb2>
 80026c0:	2400      	movs	r4, #0
 80026c2:	2500      	movs	r5, #0
 80026c4:	e771      	b.n	80025aa <__aeabi_dsub+0x2f6>
 80026c6:	4339      	orrs	r1, r7
 80026c8:	000c      	movs	r4, r1
 80026ca:	1e62      	subs	r2, r4, #1
 80026cc:	4194      	sbcs	r4, r2
 80026ce:	18e4      	adds	r4, r4, r3
 80026d0:	429c      	cmp	r4, r3
 80026d2:	419b      	sbcs	r3, r3
 80026d4:	425b      	negs	r3, r3
 80026d6:	4463      	add	r3, ip
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0x42e>
 80026e0:	e756      	b.n	8002590 <__aeabi_dsub+0x2dc>
 80026e2:	2301      	movs	r3, #1
 80026e4:	469c      	mov	ip, r3
 80026e6:	4ba8      	ldr	r3, [pc, #672]	; (8002988 <__aeabi_dsub+0x6d4>)
 80026e8:	44e0      	add	r8, ip
 80026ea:	4598      	cmp	r8, r3
 80026ec:	d038      	beq.n	8002760 <__aeabi_dsub+0x4ac>
 80026ee:	464b      	mov	r3, r9
 80026f0:	48a6      	ldr	r0, [pc, #664]	; (800298c <__aeabi_dsub+0x6d8>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	4003      	ands	r3, r0
 80026f6:	0018      	movs	r0, r3
 80026f8:	0863      	lsrs	r3, r4, #1
 80026fa:	4014      	ands	r4, r2
 80026fc:	431c      	orrs	r4, r3
 80026fe:	07c3      	lsls	r3, r0, #31
 8002700:	431c      	orrs	r4, r3
 8002702:	0843      	lsrs	r3, r0, #1
 8002704:	4699      	mov	r9, r3
 8002706:	e657      	b.n	80023b8 <__aeabi_dsub+0x104>
 8002708:	0010      	movs	r0, r2
 800270a:	000e      	movs	r6, r1
 800270c:	3820      	subs	r0, #32
 800270e:	40c6      	lsrs	r6, r0
 8002710:	2a20      	cmp	r2, #32
 8002712:	d004      	beq.n	800271e <__aeabi_dsub+0x46a>
 8002714:	2040      	movs	r0, #64	; 0x40
 8002716:	1a82      	subs	r2, r0, r2
 8002718:	4091      	lsls	r1, r2
 800271a:	430f      	orrs	r7, r1
 800271c:	46b9      	mov	r9, r7
 800271e:	464f      	mov	r7, r9
 8002720:	1e7a      	subs	r2, r7, #1
 8002722:	4197      	sbcs	r7, r2
 8002724:	4337      	orrs	r7, r6
 8002726:	e60f      	b.n	8002348 <__aeabi_dsub+0x94>
 8002728:	4662      	mov	r2, ip
 800272a:	431a      	orrs	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	4193      	sbcs	r3, r2
 8002732:	1afc      	subs	r4, r7, r3
 8002734:	42a7      	cmp	r7, r4
 8002736:	41bf      	sbcs	r7, r7
 8002738:	427f      	negs	r7, r7
 800273a:	1bcb      	subs	r3, r1, r7
 800273c:	4699      	mov	r9, r3
 800273e:	465d      	mov	r5, fp
 8002740:	4680      	mov	r8, r0
 8002742:	e608      	b.n	8002356 <__aeabi_dsub+0xa2>
 8002744:	4666      	mov	r6, ip
 8002746:	431e      	orrs	r6, r3
 8002748:	d100      	bne.n	800274c <__aeabi_dsub+0x498>
 800274a:	e0be      	b.n	80028ca <__aeabi_dsub+0x616>
 800274c:	1e56      	subs	r6, r2, #1
 800274e:	2a01      	cmp	r2, #1
 8002750:	d100      	bne.n	8002754 <__aeabi_dsub+0x4a0>
 8002752:	e109      	b.n	8002968 <__aeabi_dsub+0x6b4>
 8002754:	4c8c      	ldr	r4, [pc, #560]	; (8002988 <__aeabi_dsub+0x6d4>)
 8002756:	42a2      	cmp	r2, r4
 8002758:	d100      	bne.n	800275c <__aeabi_dsub+0x4a8>
 800275a:	e119      	b.n	8002990 <__aeabi_dsub+0x6dc>
 800275c:	0032      	movs	r2, r6
 800275e:	e6c1      	b.n	80024e4 <__aeabi_dsub+0x230>
 8002760:	4642      	mov	r2, r8
 8002762:	2400      	movs	r4, #0
 8002764:	2300      	movs	r3, #0
 8002766:	e648      	b.n	80023fa <__aeabi_dsub+0x146>
 8002768:	2020      	movs	r0, #32
 800276a:	000c      	movs	r4, r1
 800276c:	1a80      	subs	r0, r0, r2
 800276e:	003e      	movs	r6, r7
 8002770:	4087      	lsls	r7, r0
 8002772:	4084      	lsls	r4, r0
 8002774:	40d6      	lsrs	r6, r2
 8002776:	1e78      	subs	r0, r7, #1
 8002778:	4187      	sbcs	r7, r0
 800277a:	40d1      	lsrs	r1, r2
 800277c:	4334      	orrs	r4, r6
 800277e:	433c      	orrs	r4, r7
 8002780:	448c      	add	ip, r1
 8002782:	e7a4      	b.n	80026ce <__aeabi_dsub+0x41a>
 8002784:	4a80      	ldr	r2, [pc, #512]	; (8002988 <__aeabi_dsub+0x6d4>)
 8002786:	4290      	cmp	r0, r2
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x4d8>
 800278a:	e0e9      	b.n	8002960 <__aeabi_dsub+0x6ac>
 800278c:	19df      	adds	r7, r3, r7
 800278e:	429f      	cmp	r7, r3
 8002790:	419b      	sbcs	r3, r3
 8002792:	4461      	add	r1, ip
 8002794:	425b      	negs	r3, r3
 8002796:	18c9      	adds	r1, r1, r3
 8002798:	07cc      	lsls	r4, r1, #31
 800279a:	087f      	lsrs	r7, r7, #1
 800279c:	084b      	lsrs	r3, r1, #1
 800279e:	4699      	mov	r9, r3
 80027a0:	4680      	mov	r8, r0
 80027a2:	433c      	orrs	r4, r7
 80027a4:	e6f4      	b.n	8002590 <__aeabi_dsub+0x2dc>
 80027a6:	1afc      	subs	r4, r7, r3
 80027a8:	42a7      	cmp	r7, r4
 80027aa:	41bf      	sbcs	r7, r7
 80027ac:	4663      	mov	r3, ip
 80027ae:	427f      	negs	r7, r7
 80027b0:	1ac9      	subs	r1, r1, r3
 80027b2:	1bcb      	subs	r3, r1, r7
 80027b4:	4699      	mov	r9, r3
 80027b6:	465d      	mov	r5, fp
 80027b8:	e5d5      	b.n	8002366 <__aeabi_dsub+0xb2>
 80027ba:	08ff      	lsrs	r7, r7, #3
 80027bc:	074b      	lsls	r3, r1, #29
 80027be:	465d      	mov	r5, fp
 80027c0:	433b      	orrs	r3, r7
 80027c2:	08cc      	lsrs	r4, r1, #3
 80027c4:	e6ee      	b.n	80025a4 <__aeabi_dsub+0x2f0>
 80027c6:	4662      	mov	r2, ip
 80027c8:	431a      	orrs	r2, r3
 80027ca:	d000      	beq.n	80027ce <__aeabi_dsub+0x51a>
 80027cc:	e082      	b.n	80028d4 <__aeabi_dsub+0x620>
 80027ce:	000b      	movs	r3, r1
 80027d0:	433b      	orrs	r3, r7
 80027d2:	d11b      	bne.n	800280c <__aeabi_dsub+0x558>
 80027d4:	2480      	movs	r4, #128	; 0x80
 80027d6:	2500      	movs	r5, #0
 80027d8:	0324      	lsls	r4, r4, #12
 80027da:	e6f9      	b.n	80025d0 <__aeabi_dsub+0x31c>
 80027dc:	19dc      	adds	r4, r3, r7
 80027de:	429c      	cmp	r4, r3
 80027e0:	419b      	sbcs	r3, r3
 80027e2:	4461      	add	r1, ip
 80027e4:	4689      	mov	r9, r1
 80027e6:	425b      	negs	r3, r3
 80027e8:	4499      	add	r9, r3
 80027ea:	464b      	mov	r3, r9
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	d444      	bmi.n	800287a <__aeabi_dsub+0x5c6>
 80027f0:	2301      	movs	r3, #1
 80027f2:	4698      	mov	r8, r3
 80027f4:	e6cc      	b.n	8002590 <__aeabi_dsub+0x2dc>
 80027f6:	1bdc      	subs	r4, r3, r7
 80027f8:	4662      	mov	r2, ip
 80027fa:	42a3      	cmp	r3, r4
 80027fc:	419b      	sbcs	r3, r3
 80027fe:	1a51      	subs	r1, r2, r1
 8002800:	425b      	negs	r3, r3
 8002802:	1acb      	subs	r3, r1, r3
 8002804:	4699      	mov	r9, r3
 8002806:	2301      	movs	r3, #1
 8002808:	4698      	mov	r8, r3
 800280a:	e5a4      	b.n	8002356 <__aeabi_dsub+0xa2>
 800280c:	08ff      	lsrs	r7, r7, #3
 800280e:	074b      	lsls	r3, r1, #29
 8002810:	465d      	mov	r5, fp
 8002812:	433b      	orrs	r3, r7
 8002814:	08cc      	lsrs	r4, r1, #3
 8002816:	e6d7      	b.n	80025c8 <__aeabi_dsub+0x314>
 8002818:	4662      	mov	r2, ip
 800281a:	431a      	orrs	r2, r3
 800281c:	0014      	movs	r4, r2
 800281e:	1e63      	subs	r3, r4, #1
 8002820:	419c      	sbcs	r4, r3
 8002822:	e679      	b.n	8002518 <__aeabi_dsub+0x264>
 8002824:	0015      	movs	r5, r2
 8002826:	4664      	mov	r4, ip
 8002828:	3d20      	subs	r5, #32
 800282a:	40ec      	lsrs	r4, r5
 800282c:	46a0      	mov	r8, r4
 800282e:	2a20      	cmp	r2, #32
 8002830:	d005      	beq.n	800283e <__aeabi_dsub+0x58a>
 8002832:	2540      	movs	r5, #64	; 0x40
 8002834:	4664      	mov	r4, ip
 8002836:	1aaa      	subs	r2, r5, r2
 8002838:	4094      	lsls	r4, r2
 800283a:	4323      	orrs	r3, r4
 800283c:	469a      	mov	sl, r3
 800283e:	4654      	mov	r4, sl
 8002840:	1e63      	subs	r3, r4, #1
 8002842:	419c      	sbcs	r4, r3
 8002844:	4643      	mov	r3, r8
 8002846:	4323      	orrs	r3, r4
 8002848:	e773      	b.n	8002732 <__aeabi_dsub+0x47e>
 800284a:	4662      	mov	r2, ip
 800284c:	431a      	orrs	r2, r3
 800284e:	d023      	beq.n	8002898 <__aeabi_dsub+0x5e4>
 8002850:	000a      	movs	r2, r1
 8002852:	433a      	orrs	r2, r7
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x5a4>
 8002856:	e0a0      	b.n	800299a <__aeabi_dsub+0x6e6>
 8002858:	4662      	mov	r2, ip
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	0752      	lsls	r2, r2, #29
 800285e:	4313      	orrs	r3, r2
 8002860:	4662      	mov	r2, ip
 8002862:	08d4      	lsrs	r4, r2, #3
 8002864:	e6b0      	b.n	80025c8 <__aeabi_dsub+0x314>
 8002866:	000b      	movs	r3, r1
 8002868:	433b      	orrs	r3, r7
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x5ba>
 800286c:	e728      	b.n	80026c0 <__aeabi_dsub+0x40c>
 800286e:	08ff      	lsrs	r7, r7, #3
 8002870:	074b      	lsls	r3, r1, #29
 8002872:	465d      	mov	r5, fp
 8002874:	433b      	orrs	r3, r7
 8002876:	08cc      	lsrs	r4, r1, #3
 8002878:	e697      	b.n	80025aa <__aeabi_dsub+0x2f6>
 800287a:	2302      	movs	r3, #2
 800287c:	4698      	mov	r8, r3
 800287e:	e736      	b.n	80026ee <__aeabi_dsub+0x43a>
 8002880:	1afc      	subs	r4, r7, r3
 8002882:	42a7      	cmp	r7, r4
 8002884:	41bf      	sbcs	r7, r7
 8002886:	4663      	mov	r3, ip
 8002888:	427f      	negs	r7, r7
 800288a:	1ac9      	subs	r1, r1, r3
 800288c:	1bcb      	subs	r3, r1, r7
 800288e:	4699      	mov	r9, r3
 8002890:	2301      	movs	r3, #1
 8002892:	465d      	mov	r5, fp
 8002894:	4698      	mov	r8, r3
 8002896:	e55e      	b.n	8002356 <__aeabi_dsub+0xa2>
 8002898:	074b      	lsls	r3, r1, #29
 800289a:	08ff      	lsrs	r7, r7, #3
 800289c:	433b      	orrs	r3, r7
 800289e:	08cc      	lsrs	r4, r1, #3
 80028a0:	e692      	b.n	80025c8 <__aeabi_dsub+0x314>
 80028a2:	1bdc      	subs	r4, r3, r7
 80028a4:	4660      	mov	r0, ip
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	41b6      	sbcs	r6, r6
 80028aa:	1a40      	subs	r0, r0, r1
 80028ac:	4276      	negs	r6, r6
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	4681      	mov	r9, r0
 80028b2:	0200      	lsls	r0, r0, #8
 80028b4:	d560      	bpl.n	8002978 <__aeabi_dsub+0x6c4>
 80028b6:	1afc      	subs	r4, r7, r3
 80028b8:	42a7      	cmp	r7, r4
 80028ba:	41bf      	sbcs	r7, r7
 80028bc:	4663      	mov	r3, ip
 80028be:	427f      	negs	r7, r7
 80028c0:	1ac9      	subs	r1, r1, r3
 80028c2:	1bcb      	subs	r3, r1, r7
 80028c4:	4699      	mov	r9, r3
 80028c6:	465d      	mov	r5, fp
 80028c8:	e576      	b.n	80023b8 <__aeabi_dsub+0x104>
 80028ca:	08ff      	lsrs	r7, r7, #3
 80028cc:	074b      	lsls	r3, r1, #29
 80028ce:	433b      	orrs	r3, r7
 80028d0:	08cc      	lsrs	r4, r1, #3
 80028d2:	e667      	b.n	80025a4 <__aeabi_dsub+0x2f0>
 80028d4:	000a      	movs	r2, r1
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	433a      	orrs	r2, r7
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x62a>
 80028dc:	e66f      	b.n	80025be <__aeabi_dsub+0x30a>
 80028de:	4662      	mov	r2, ip
 80028e0:	0752      	lsls	r2, r2, #29
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4662      	mov	r2, ip
 80028e6:	08d4      	lsrs	r4, r2, #3
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0312      	lsls	r2, r2, #12
 80028ec:	4214      	tst	r4, r2
 80028ee:	d007      	beq.n	8002900 <__aeabi_dsub+0x64c>
 80028f0:	08c8      	lsrs	r0, r1, #3
 80028f2:	4210      	tst	r0, r2
 80028f4:	d104      	bne.n	8002900 <__aeabi_dsub+0x64c>
 80028f6:	465d      	mov	r5, fp
 80028f8:	0004      	movs	r4, r0
 80028fa:	08fb      	lsrs	r3, r7, #3
 80028fc:	0749      	lsls	r1, r1, #29
 80028fe:	430b      	orrs	r3, r1
 8002900:	0f5a      	lsrs	r2, r3, #29
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	0752      	lsls	r2, r2, #29
 8002908:	4313      	orrs	r3, r2
 800290a:	e65d      	b.n	80025c8 <__aeabi_dsub+0x314>
 800290c:	074b      	lsls	r3, r1, #29
 800290e:	08ff      	lsrs	r7, r7, #3
 8002910:	433b      	orrs	r3, r7
 8002912:	08cc      	lsrs	r4, r1, #3
 8002914:	e649      	b.n	80025aa <__aeabi_dsub+0x2f6>
 8002916:	19dc      	adds	r4, r3, r7
 8002918:	429c      	cmp	r4, r3
 800291a:	419b      	sbcs	r3, r3
 800291c:	4461      	add	r1, ip
 800291e:	4689      	mov	r9, r1
 8002920:	425b      	negs	r3, r3
 8002922:	4499      	add	r9, r3
 8002924:	464b      	mov	r3, r9
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	d400      	bmi.n	800292c <__aeabi_dsub+0x678>
 800292a:	e631      	b.n	8002590 <__aeabi_dsub+0x2dc>
 800292c:	464a      	mov	r2, r9
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <__aeabi_dsub+0x6d8>)
 8002930:	401a      	ands	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	4691      	mov	r9, r2
 8002936:	4698      	mov	r8, r3
 8002938:	e62a      	b.n	8002590 <__aeabi_dsub+0x2dc>
 800293a:	0016      	movs	r6, r2
 800293c:	4664      	mov	r4, ip
 800293e:	3e20      	subs	r6, #32
 8002940:	40f4      	lsrs	r4, r6
 8002942:	46a0      	mov	r8, r4
 8002944:	2a20      	cmp	r2, #32
 8002946:	d005      	beq.n	8002954 <__aeabi_dsub+0x6a0>
 8002948:	2640      	movs	r6, #64	; 0x40
 800294a:	4664      	mov	r4, ip
 800294c:	1ab2      	subs	r2, r6, r2
 800294e:	4094      	lsls	r4, r2
 8002950:	4323      	orrs	r3, r4
 8002952:	469a      	mov	sl, r3
 8002954:	4654      	mov	r4, sl
 8002956:	1e63      	subs	r3, r4, #1
 8002958:	419c      	sbcs	r4, r3
 800295a:	4643      	mov	r3, r8
 800295c:	431c      	orrs	r4, r3
 800295e:	e5db      	b.n	8002518 <__aeabi_dsub+0x264>
 8002960:	0002      	movs	r2, r0
 8002962:	2400      	movs	r4, #0
 8002964:	2300      	movs	r3, #0
 8002966:	e548      	b.n	80023fa <__aeabi_dsub+0x146>
 8002968:	19dc      	adds	r4, r3, r7
 800296a:	42bc      	cmp	r4, r7
 800296c:	41bf      	sbcs	r7, r7
 800296e:	4461      	add	r1, ip
 8002970:	4689      	mov	r9, r1
 8002972:	427f      	negs	r7, r7
 8002974:	44b9      	add	r9, r7
 8002976:	e738      	b.n	80027ea <__aeabi_dsub+0x536>
 8002978:	464b      	mov	r3, r9
 800297a:	4323      	orrs	r3, r4
 800297c:	d100      	bne.n	8002980 <__aeabi_dsub+0x6cc>
 800297e:	e69f      	b.n	80026c0 <__aeabi_dsub+0x40c>
 8002980:	e606      	b.n	8002590 <__aeabi_dsub+0x2dc>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	000007fe 	.word	0x000007fe
 8002988:	000007ff 	.word	0x000007ff
 800298c:	ff7fffff 	.word	0xff7fffff
 8002990:	08ff      	lsrs	r7, r7, #3
 8002992:	074b      	lsls	r3, r1, #29
 8002994:	433b      	orrs	r3, r7
 8002996:	08cc      	lsrs	r4, r1, #3
 8002998:	e616      	b.n	80025c8 <__aeabi_dsub+0x314>
 800299a:	4662      	mov	r2, ip
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	0752      	lsls	r2, r2, #29
 80029a0:	4313      	orrs	r3, r2
 80029a2:	4662      	mov	r2, ip
 80029a4:	08d4      	lsrs	r4, r2, #3
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	0312      	lsls	r2, r2, #12
 80029aa:	4214      	tst	r4, r2
 80029ac:	d007      	beq.n	80029be <__aeabi_dsub+0x70a>
 80029ae:	08c8      	lsrs	r0, r1, #3
 80029b0:	4210      	tst	r0, r2
 80029b2:	d104      	bne.n	80029be <__aeabi_dsub+0x70a>
 80029b4:	465d      	mov	r5, fp
 80029b6:	0004      	movs	r4, r0
 80029b8:	08fb      	lsrs	r3, r7, #3
 80029ba:	0749      	lsls	r1, r1, #29
 80029bc:	430b      	orrs	r3, r1
 80029be:	0f5a      	lsrs	r2, r3, #29
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	0752      	lsls	r2, r2, #29
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	e5fe      	b.n	80025c8 <__aeabi_dsub+0x314>
 80029ca:	2300      	movs	r3, #0
 80029cc:	4a01      	ldr	r2, [pc, #4]	; (80029d4 <__aeabi_dsub+0x720>)
 80029ce:	001c      	movs	r4, r3
 80029d0:	e513      	b.n	80023fa <__aeabi_dsub+0x146>
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	000007ff 	.word	0x000007ff

080029d8 <__aeabi_d2iz>:
 80029d8:	000a      	movs	r2, r1
 80029da:	b530      	push	{r4, r5, lr}
 80029dc:	4c13      	ldr	r4, [pc, #76]	; (8002a2c <__aeabi_d2iz+0x54>)
 80029de:	0053      	lsls	r3, r2, #1
 80029e0:	0309      	lsls	r1, r1, #12
 80029e2:	0005      	movs	r5, r0
 80029e4:	0b09      	lsrs	r1, r1, #12
 80029e6:	2000      	movs	r0, #0
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	0fd2      	lsrs	r2, r2, #31
 80029ec:	42a3      	cmp	r3, r4
 80029ee:	dd04      	ble.n	80029fa <__aeabi_d2iz+0x22>
 80029f0:	480f      	ldr	r0, [pc, #60]	; (8002a30 <__aeabi_d2iz+0x58>)
 80029f2:	4283      	cmp	r3, r0
 80029f4:	dd02      	ble.n	80029fc <__aeabi_d2iz+0x24>
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <__aeabi_d2iz+0x5c>)
 80029f8:	18d0      	adds	r0, r2, r3
 80029fa:	bd30      	pop	{r4, r5, pc}
 80029fc:	2080      	movs	r0, #128	; 0x80
 80029fe:	0340      	lsls	r0, r0, #13
 8002a00:	4301      	orrs	r1, r0
 8002a02:	480d      	ldr	r0, [pc, #52]	; (8002a38 <__aeabi_d2iz+0x60>)
 8002a04:	1ac0      	subs	r0, r0, r3
 8002a06:	281f      	cmp	r0, #31
 8002a08:	dd08      	ble.n	8002a1c <__aeabi_d2iz+0x44>
 8002a0a:	480c      	ldr	r0, [pc, #48]	; (8002a3c <__aeabi_d2iz+0x64>)
 8002a0c:	1ac3      	subs	r3, r0, r3
 8002a0e:	40d9      	lsrs	r1, r3
 8002a10:	000b      	movs	r3, r1
 8002a12:	4258      	negs	r0, r3
 8002a14:	2a00      	cmp	r2, #0
 8002a16:	d1f0      	bne.n	80029fa <__aeabi_d2iz+0x22>
 8002a18:	0018      	movs	r0, r3
 8002a1a:	e7ee      	b.n	80029fa <__aeabi_d2iz+0x22>
 8002a1c:	4c08      	ldr	r4, [pc, #32]	; (8002a40 <__aeabi_d2iz+0x68>)
 8002a1e:	40c5      	lsrs	r5, r0
 8002a20:	46a4      	mov	ip, r4
 8002a22:	4463      	add	r3, ip
 8002a24:	4099      	lsls	r1, r3
 8002a26:	000b      	movs	r3, r1
 8002a28:	432b      	orrs	r3, r5
 8002a2a:	e7f2      	b.n	8002a12 <__aeabi_d2iz+0x3a>
 8002a2c:	000003fe 	.word	0x000003fe
 8002a30:	0000041d 	.word	0x0000041d
 8002a34:	7fffffff 	.word	0x7fffffff
 8002a38:	00000433 	.word	0x00000433
 8002a3c:	00000413 	.word	0x00000413
 8002a40:	fffffbed 	.word	0xfffffbed

08002a44 <__aeabi_i2d>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d016      	beq.n	8002a78 <__aeabi_i2d+0x34>
 8002a4a:	17c3      	asrs	r3, r0, #31
 8002a4c:	18c5      	adds	r5, r0, r3
 8002a4e:	405d      	eors	r5, r3
 8002a50:	0fc4      	lsrs	r4, r0, #31
 8002a52:	0028      	movs	r0, r5
 8002a54:	f000 f8f6 	bl	8002c44 <__clzsi2>
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <__aeabi_i2d+0x5c>)
 8002a5a:	1a12      	subs	r2, r2, r0
 8002a5c:	280a      	cmp	r0, #10
 8002a5e:	dc16      	bgt.n	8002a8e <__aeabi_i2d+0x4a>
 8002a60:	0003      	movs	r3, r0
 8002a62:	002e      	movs	r6, r5
 8002a64:	3315      	adds	r3, #21
 8002a66:	409e      	lsls	r6, r3
 8002a68:	230b      	movs	r3, #11
 8002a6a:	1a18      	subs	r0, r3, r0
 8002a6c:	40c5      	lsrs	r5, r0
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	032d      	lsls	r5, r5, #12
 8002a72:	0b2d      	lsrs	r5, r5, #12
 8002a74:	0d53      	lsrs	r3, r2, #21
 8002a76:	e003      	b.n	8002a80 <__aeabi_i2d+0x3c>
 8002a78:	2400      	movs	r4, #0
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	2600      	movs	r6, #0
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	432b      	orrs	r3, r5
 8002a84:	07e4      	lsls	r4, r4, #31
 8002a86:	4323      	orrs	r3, r4
 8002a88:	0030      	movs	r0, r6
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
 8002a8e:	380b      	subs	r0, #11
 8002a90:	4085      	lsls	r5, r0
 8002a92:	0552      	lsls	r2, r2, #21
 8002a94:	032d      	lsls	r5, r5, #12
 8002a96:	2600      	movs	r6, #0
 8002a98:	0b2d      	lsrs	r5, r5, #12
 8002a9a:	0d53      	lsrs	r3, r2, #21
 8002a9c:	e7f0      	b.n	8002a80 <__aeabi_i2d+0x3c>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	0000041e 	.word	0x0000041e

08002aa4 <__aeabi_f2d>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	0043      	lsls	r3, r0, #1
 8002aa8:	0246      	lsls	r6, r0, #9
 8002aaa:	0fc4      	lsrs	r4, r0, #31
 8002aac:	20fe      	movs	r0, #254	; 0xfe
 8002aae:	0e1b      	lsrs	r3, r3, #24
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	0a75      	lsrs	r5, r6, #9
 8002ab4:	4208      	tst	r0, r1
 8002ab6:	d00c      	beq.n	8002ad2 <__aeabi_f2d+0x2e>
 8002ab8:	22e0      	movs	r2, #224	; 0xe0
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4694      	mov	ip, r2
 8002abe:	076d      	lsls	r5, r5, #29
 8002ac0:	0b36      	lsrs	r6, r6, #12
 8002ac2:	4463      	add	r3, ip
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	4333      	orrs	r3, r6
 8002ac8:	07e4      	lsls	r4, r4, #31
 8002aca:	4323      	orrs	r3, r4
 8002acc:	0028      	movs	r0, r5
 8002ace:	0019      	movs	r1, r3
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d114      	bne.n	8002b00 <__aeabi_f2d+0x5c>
 8002ad6:	2d00      	cmp	r5, #0
 8002ad8:	d01b      	beq.n	8002b12 <__aeabi_f2d+0x6e>
 8002ada:	0028      	movs	r0, r5
 8002adc:	f000 f8b2 	bl	8002c44 <__clzsi2>
 8002ae0:	280a      	cmp	r0, #10
 8002ae2:	dc1c      	bgt.n	8002b1e <__aeabi_f2d+0x7a>
 8002ae4:	230b      	movs	r3, #11
 8002ae6:	002e      	movs	r6, r5
 8002ae8:	1a1b      	subs	r3, r3, r0
 8002aea:	40de      	lsrs	r6, r3
 8002aec:	0003      	movs	r3, r0
 8002aee:	3315      	adds	r3, #21
 8002af0:	409d      	lsls	r5, r3
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <__aeabi_f2d+0x88>)
 8002af4:	0336      	lsls	r6, r6, #12
 8002af6:	1a12      	subs	r2, r2, r0
 8002af8:	0552      	lsls	r2, r2, #21
 8002afa:	0b36      	lsrs	r6, r6, #12
 8002afc:	0d53      	lsrs	r3, r2, #21
 8002afe:	e7e1      	b.n	8002ac4 <__aeabi_f2d+0x20>
 8002b00:	2d00      	cmp	r5, #0
 8002b02:	d009      	beq.n	8002b18 <__aeabi_f2d+0x74>
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	0b36      	lsrs	r6, r6, #12
 8002b08:	0312      	lsls	r2, r2, #12
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <__aeabi_f2d+0x8c>)
 8002b0c:	076d      	lsls	r5, r5, #29
 8002b0e:	4316      	orrs	r6, r2
 8002b10:	e7d8      	b.n	8002ac4 <__aeabi_f2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2600      	movs	r6, #0
 8002b16:	e7d5      	b.n	8002ac4 <__aeabi_f2d+0x20>
 8002b18:	2600      	movs	r6, #0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <__aeabi_f2d+0x8c>)
 8002b1c:	e7d2      	b.n	8002ac4 <__aeabi_f2d+0x20>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	3b0b      	subs	r3, #11
 8002b22:	409d      	lsls	r5, r3
 8002b24:	002e      	movs	r6, r5
 8002b26:	2500      	movs	r5, #0
 8002b28:	e7e3      	b.n	8002af2 <__aeabi_f2d+0x4e>
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	00000389 	.word	0x00000389
 8002b30:	000007ff 	.word	0x000007ff

08002b34 <__aeabi_d2f>:
 8002b34:	0002      	movs	r2, r0
 8002b36:	004b      	lsls	r3, r1, #1
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	0d5b      	lsrs	r3, r3, #21
 8002b3c:	030c      	lsls	r4, r1, #12
 8002b3e:	4e3d      	ldr	r6, [pc, #244]	; (8002c34 <__aeabi_d2f+0x100>)
 8002b40:	0a64      	lsrs	r4, r4, #9
 8002b42:	0f40      	lsrs	r0, r0, #29
 8002b44:	1c5f      	adds	r7, r3, #1
 8002b46:	0fc9      	lsrs	r1, r1, #31
 8002b48:	4304      	orrs	r4, r0
 8002b4a:	00d5      	lsls	r5, r2, #3
 8002b4c:	4237      	tst	r7, r6
 8002b4e:	d00a      	beq.n	8002b66 <__aeabi_d2f+0x32>
 8002b50:	4839      	ldr	r0, [pc, #228]	; (8002c38 <__aeabi_d2f+0x104>)
 8002b52:	181e      	adds	r6, r3, r0
 8002b54:	2efe      	cmp	r6, #254	; 0xfe
 8002b56:	dd16      	ble.n	8002b86 <__aeabi_d2f+0x52>
 8002b58:	20ff      	movs	r0, #255	; 0xff
 8002b5a:	2400      	movs	r4, #0
 8002b5c:	05c0      	lsls	r0, r0, #23
 8002b5e:	4320      	orrs	r0, r4
 8002b60:	07c9      	lsls	r1, r1, #31
 8002b62:	4308      	orrs	r0, r1
 8002b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <__aeabi_d2f+0x44>
 8002b6a:	432c      	orrs	r4, r5
 8002b6c:	d026      	beq.n	8002bbc <__aeabi_d2f+0x88>
 8002b6e:	2205      	movs	r2, #5
 8002b70:	0192      	lsls	r2, r2, #6
 8002b72:	0a54      	lsrs	r4, r2, #9
 8002b74:	b2d8      	uxtb	r0, r3
 8002b76:	e7f1      	b.n	8002b5c <__aeabi_d2f+0x28>
 8002b78:	4325      	orrs	r5, r4
 8002b7a:	d0ed      	beq.n	8002b58 <__aeabi_d2f+0x24>
 8002b7c:	2080      	movs	r0, #128	; 0x80
 8002b7e:	03c0      	lsls	r0, r0, #15
 8002b80:	4304      	orrs	r4, r0
 8002b82:	20ff      	movs	r0, #255	; 0xff
 8002b84:	e7ea      	b.n	8002b5c <__aeabi_d2f+0x28>
 8002b86:	2e00      	cmp	r6, #0
 8002b88:	dd1b      	ble.n	8002bc2 <__aeabi_d2f+0x8e>
 8002b8a:	0192      	lsls	r2, r2, #6
 8002b8c:	1e53      	subs	r3, r2, #1
 8002b8e:	419a      	sbcs	r2, r3
 8002b90:	00e4      	lsls	r4, r4, #3
 8002b92:	0f6d      	lsrs	r5, r5, #29
 8002b94:	4322      	orrs	r2, r4
 8002b96:	432a      	orrs	r2, r5
 8002b98:	0753      	lsls	r3, r2, #29
 8002b9a:	d048      	beq.n	8002c2e <__aeabi_d2f+0xfa>
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_d2f+0x72>
 8002ba4:	3204      	adds	r2, #4
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	04db      	lsls	r3, r3, #19
 8002baa:	4013      	ands	r3, r2
 8002bac:	d03f      	beq.n	8002c2e <__aeabi_d2f+0xfa>
 8002bae:	1c70      	adds	r0, r6, #1
 8002bb0:	2efe      	cmp	r6, #254	; 0xfe
 8002bb2:	d0d1      	beq.n	8002b58 <__aeabi_d2f+0x24>
 8002bb4:	0192      	lsls	r2, r2, #6
 8002bb6:	0a54      	lsrs	r4, r2, #9
 8002bb8:	b2c0      	uxtb	r0, r0
 8002bba:	e7cf      	b.n	8002b5c <__aeabi_d2f+0x28>
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	2400      	movs	r4, #0
 8002bc0:	e7cc      	b.n	8002b5c <__aeabi_d2f+0x28>
 8002bc2:	0032      	movs	r2, r6
 8002bc4:	3217      	adds	r2, #23
 8002bc6:	db22      	blt.n	8002c0e <__aeabi_d2f+0xda>
 8002bc8:	2080      	movs	r0, #128	; 0x80
 8002bca:	0400      	lsls	r0, r0, #16
 8002bcc:	4320      	orrs	r0, r4
 8002bce:	241e      	movs	r4, #30
 8002bd0:	1ba4      	subs	r4, r4, r6
 8002bd2:	2c1f      	cmp	r4, #31
 8002bd4:	dd1d      	ble.n	8002c12 <__aeabi_d2f+0xde>
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	4252      	negs	r2, r2
 8002bda:	1b96      	subs	r6, r2, r6
 8002bdc:	0002      	movs	r2, r0
 8002bde:	40f2      	lsrs	r2, r6
 8002be0:	0016      	movs	r6, r2
 8002be2:	2c20      	cmp	r4, #32
 8002be4:	d004      	beq.n	8002bf0 <__aeabi_d2f+0xbc>
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <__aeabi_d2f+0x108>)
 8002be8:	4694      	mov	ip, r2
 8002bea:	4463      	add	r3, ip
 8002bec:	4098      	lsls	r0, r3
 8002bee:	4305      	orrs	r5, r0
 8002bf0:	002a      	movs	r2, r5
 8002bf2:	1e53      	subs	r3, r2, #1
 8002bf4:	419a      	sbcs	r2, r3
 8002bf6:	4332      	orrs	r2, r6
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	0753      	lsls	r3, r2, #29
 8002bfc:	d1ce      	bne.n	8002b9c <__aeabi_d2f+0x68>
 8002bfe:	2480      	movs	r4, #128	; 0x80
 8002c00:	0013      	movs	r3, r2
 8002c02:	04e4      	lsls	r4, r4, #19
 8002c04:	2001      	movs	r0, #1
 8002c06:	4023      	ands	r3, r4
 8002c08:	4222      	tst	r2, r4
 8002c0a:	d1d3      	bne.n	8002bb4 <__aeabi_d2f+0x80>
 8002c0c:	e7b0      	b.n	8002b70 <__aeabi_d2f+0x3c>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e7ad      	b.n	8002b6e <__aeabi_d2f+0x3a>
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <__aeabi_d2f+0x10c>)
 8002c14:	4694      	mov	ip, r2
 8002c16:	002a      	movs	r2, r5
 8002c18:	40e2      	lsrs	r2, r4
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	002a      	movs	r2, r5
 8002c1e:	4463      	add	r3, ip
 8002c20:	409a      	lsls	r2, r3
 8002c22:	4098      	lsls	r0, r3
 8002c24:	1e55      	subs	r5, r2, #1
 8002c26:	41aa      	sbcs	r2, r5
 8002c28:	4302      	orrs	r2, r0
 8002c2a:	4322      	orrs	r2, r4
 8002c2c:	e7e4      	b.n	8002bf8 <__aeabi_d2f+0xc4>
 8002c2e:	0033      	movs	r3, r6
 8002c30:	e79e      	b.n	8002b70 <__aeabi_d2f+0x3c>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	000007fe 	.word	0x000007fe
 8002c38:	fffffc80 	.word	0xfffffc80
 8002c3c:	fffffca2 	.word	0xfffffca2
 8002c40:	fffffc82 	.word	0xfffffc82

08002c44 <__clzsi2>:
 8002c44:	211c      	movs	r1, #28
 8002c46:	2301      	movs	r3, #1
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d301      	bcc.n	8002c52 <__clzsi2+0xe>
 8002c4e:	0c00      	lsrs	r0, r0, #16
 8002c50:	3910      	subs	r1, #16
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	4298      	cmp	r0, r3
 8002c56:	d301      	bcc.n	8002c5c <__clzsi2+0x18>
 8002c58:	0a00      	lsrs	r0, r0, #8
 8002c5a:	3908      	subs	r1, #8
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	d301      	bcc.n	8002c66 <__clzsi2+0x22>
 8002c62:	0900      	lsrs	r0, r0, #4
 8002c64:	3904      	subs	r1, #4
 8002c66:	a202      	add	r2, pc, #8	; (adr r2, 8002c70 <__clzsi2+0x2c>)
 8002c68:	5c10      	ldrb	r0, [r2, r0]
 8002c6a:	1840      	adds	r0, r0, r1
 8002c6c:	4770      	bx	lr
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	02020304 	.word	0x02020304
 8002c74:	01010101 	.word	0x01010101
	...

08002c80 <CAN_reset>:
	uint8_t  m_bytes[sizeof(float)];};

union uint16_byte 	set_voltage,set_arus;

void CAN_reset()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	slot1.TxData[0] = 0;
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <CAN_reset+0x8c>)
 8002c86:	226c      	movs	r2, #108	; 0x6c
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5499      	strb	r1, [r3, r2]
	slot1.TxData[1] = 0;
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <CAN_reset+0x8c>)
 8002c8e:	226d      	movs	r2, #109	; 0x6d
 8002c90:	2100      	movs	r1, #0
 8002c92:	5499      	strb	r1, [r3, r2]
	slot1.TxData[2] = 0;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <CAN_reset+0x8c>)
 8002c96:	226e      	movs	r2, #110	; 0x6e
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]
	slot1.TxData[3] = 0;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <CAN_reset+0x8c>)
 8002c9e:	226f      	movs	r2, #111	; 0x6f
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]
	slot1.TxData[4] = 0;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <CAN_reset+0x8c>)
 8002ca6:	2270      	movs	r2, #112	; 0x70
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]
	slot1.TxData[5] = 0;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <CAN_reset+0x8c>)
 8002cae:	2271      	movs	r2, #113	; 0x71
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]
	slot1.TxData[6] = 0;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <CAN_reset+0x8c>)
 8002cb6:	2272      	movs	r2, #114	; 0x72
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]
	slot1.TxData[7] = 0;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <CAN_reset+0x8c>)
 8002cbe:	2273      	movs	r2, #115	; 0x73
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

	slot2.TxData[0] = 0;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <CAN_reset+0x90>)
 8002cc6:	226c      	movs	r2, #108	; 0x6c
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]
	slot2.TxData[1] = 0;
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <CAN_reset+0x90>)
 8002cce:	226d      	movs	r2, #109	; 0x6d
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[2] = 0;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <CAN_reset+0x90>)
 8002cd6:	226e      	movs	r2, #110	; 0x6e
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]
	slot2.TxData[3] = 0;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <CAN_reset+0x90>)
 8002cde:	226f      	movs	r2, #111	; 0x6f
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[4] = 0;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <CAN_reset+0x90>)
 8002ce6:	2270      	movs	r2, #112	; 0x70
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]
	slot2.TxData[5] = 0;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <CAN_reset+0x90>)
 8002cee:	2271      	movs	r2, #113	; 0x71
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]
	slot2.TxData[6] = 0;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <CAN_reset+0x90>)
 8002cf6:	2272      	movs	r2, #114	; 0x72
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]
	slot2.TxData[7] = 0;
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <CAN_reset+0x90>)
 8002cfe:	2273      	movs	r2, #115	; 0x73
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200000b4 	.word	0x200000b4
 8002d10:	200003fc 	.word	0x200003fc

08002d14 <CAN_TX>:

void CAN_TX()
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	CAN_reset();
 8002d18:	f7ff ffb2 	bl	8002c80 <CAN_reset>
	TxHeader.Identifier=0x000001B2;
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <CAN_TX+0x190>)
 8002d1e:	22d9      	movs	r2, #217	; 0xd9
 8002d20:	0052      	lsls	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002d24:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <CAN_TX+0x190>)
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	05d2      	lsls	r2, r2, #23
 8002d2a:	605a      	str	r2, [r3, #4]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002d2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <CAN_TX+0x190>)
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0312      	lsls	r2, r2, #12
 8002d32:	60da      	str	r2, [r3, #12]
	slot1.TxData[0]=slot1.batt_state;
 8002d34:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <CAN_TX+0x194>)
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	b2d9      	uxtb	r1, r3
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <CAN_TX+0x194>)
 8002d3c:	226c      	movs	r2, #108	; 0x6c
 8002d3e:	5499      	strb	r1, [r3, r2]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, slot1.TxData)!= HAL_OK) {
 8002d40:	4a5a      	ldr	r2, [pc, #360]	; (8002eac <CAN_TX+0x198>)
 8002d42:	4958      	ldr	r1, [pc, #352]	; (8002ea4 <CAN_TX+0x190>)
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <CAN_TX+0x19c>)
 8002d46:	0018      	movs	r0, r3
 8002d48:	f002 fb79 	bl	800543e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	TxHeader.Identifier=0X1806E5F4;
 8002d4c:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <CAN_TX+0x190>)
 8002d4e:	4a59      	ldr	r2, [pc, #356]	; (8002eb4 <CAN_TX+0x1a0>)
 8002d50:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002d52:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <CAN_TX+0x190>)
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	05d2      	lsls	r2, r2, #23
 8002d58:	605a      	str	r2, [r3, #4]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002d5a:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <CAN_TX+0x190>)
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	0312      	lsls	r2, r2, #12
 8002d60:	60da      	str	r2, [r3, #12]
	set_voltage.m_uint16_t=(Vset*10);
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <CAN_TX+0x1a4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4955      	ldr	r1, [pc, #340]	; (8002ebc <CAN_TX+0x1a8>)
 8002d68:	1c18      	adds	r0, r3, #0
 8002d6a:	f7fd fdb7 	bl	80008dc <__aeabi_fmul>
 8002d6e:	1c03      	adds	r3, r0, #0
 8002d70:	1c18      	adds	r0, r3, #0
 8002d72:	f7fd fbb5 	bl	80004e0 <__aeabi_f2uiz>
 8002d76:	0003      	movs	r3, r0
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <CAN_TX+0x1ac>)
 8002d7c:	801a      	strh	r2, [r3, #0]
	set_arus.m_uint16_t=(Aset*10);
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <CAN_TX+0x1b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	494e      	ldr	r1, [pc, #312]	; (8002ebc <CAN_TX+0x1a8>)
 8002d84:	1c18      	adds	r0, r3, #0
 8002d86:	f7fd fda9 	bl	80008dc <__aeabi_fmul>
 8002d8a:	1c03      	adds	r3, r0, #0
 8002d8c:	1c18      	adds	r0, r3, #0
 8002d8e:	f7fd fba7 	bl	80004e0 <__aeabi_f2uiz>
 8002d92:	0003      	movs	r3, r0
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <CAN_TX+0x1b4>)
 8002d98:	801a      	strh	r2, [r3, #0]
	slot1.TxData[0] = set_voltage.m_bytes[1];
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <CAN_TX+0x1ac>)
 8002d9c:	7859      	ldrb	r1, [r3, #1]
 8002d9e:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <CAN_TX+0x194>)
 8002da0:	226c      	movs	r2, #108	; 0x6c
 8002da2:	5499      	strb	r1, [r3, r2]
	slot1.TxData[1] = set_voltage.m_bytes[0];
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <CAN_TX+0x1ac>)
 8002da6:	7819      	ldrb	r1, [r3, #0]
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <CAN_TX+0x194>)
 8002daa:	226d      	movs	r2, #109	; 0x6d
 8002dac:	5499      	strb	r1, [r3, r2]
	slot1.TxData[2] = set_arus.m_bytes[1];
 8002dae:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <CAN_TX+0x1b4>)
 8002db0:	7859      	ldrb	r1, [r3, #1]
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <CAN_TX+0x194>)
 8002db4:	226e      	movs	r2, #110	; 0x6e
 8002db6:	5499      	strb	r1, [r3, r2]
	slot1.TxData[3] = set_arus.m_bytes[0];
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <CAN_TX+0x1b4>)
 8002dba:	7819      	ldrb	r1, [r3, #0]
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <CAN_TX+0x194>)
 8002dbe:	226f      	movs	r2, #111	; 0x6f
 8002dc0:	5499      	strb	r1, [r3, r2]
	slot1.TxData[4] = slot1.charger_start_DIS;
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <CAN_TX+0x194>)
 8002dc4:	2224      	movs	r2, #36	; 0x24
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	0019      	movs	r1, r3
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <CAN_TX+0x194>)
 8002dcc:	2270      	movs	r2, #112	; 0x70
 8002dce:	5499      	strb	r1, [r3, r2]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, slot1.TxData)!= HAL_OK) {
 8002dd0:	4a36      	ldr	r2, [pc, #216]	; (8002eac <CAN_TX+0x198>)
 8002dd2:	4934      	ldr	r1, [pc, #208]	; (8002ea4 <CAN_TX+0x190>)
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <CAN_TX+0x19c>)
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f002 fb31 	bl	800543e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	CAN_reset();
 8002ddc:	f7ff ff50 	bl	8002c80 <CAN_reset>
	TxHeader2.Identifier=0x000005B2;
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <CAN_TX+0x1b8>)
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <CAN_TX+0x1bc>)
 8002de4:	601a      	str	r2, [r3, #0]
	TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <CAN_TX+0x1b8>)
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	05d2      	lsls	r2, r2, #23
 8002dec:	605a      	str	r2, [r3, #4]
	TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <CAN_TX+0x1b8>)
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	0312      	lsls	r2, r2, #12
 8002df4:	60da      	str	r2, [r3, #12]
	slot2.TxData[0]=slot2.batt_state;
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <CAN_TX+0x1c0>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	b2d9      	uxtb	r1, r3
 8002dfc:	4b35      	ldr	r3, [pc, #212]	; (8002ed4 <CAN_TX+0x1c0>)
 8002dfe:	226c      	movs	r2, #108	; 0x6c
 8002e00:	5499      	strb	r1, [r3, r2]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, slot2.TxData)!= HAL_OK) {
 8002e02:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <CAN_TX+0x1c4>)
 8002e04:	4931      	ldr	r1, [pc, #196]	; (8002ecc <CAN_TX+0x1b8>)
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <CAN_TX+0x1c8>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f002 fb18 	bl	800543e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

	TxHeader2.Identifier=0X1806E5F4;
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <CAN_TX+0x1b8>)
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <CAN_TX+0x1a0>)
 8002e12:	601a      	str	r2, [r3, #0]
	TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <CAN_TX+0x1b8>)
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	05d2      	lsls	r2, r2, #23
 8002e1a:	605a      	str	r2, [r3, #4]
	TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <CAN_TX+0x1b8>)
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	0312      	lsls	r2, r2, #12
 8002e22:	60da      	str	r2, [r3, #12]

	set_voltage.m_uint16_t=(Vset*10);
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <CAN_TX+0x1a4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4924      	ldr	r1, [pc, #144]	; (8002ebc <CAN_TX+0x1a8>)
 8002e2a:	1c18      	adds	r0, r3, #0
 8002e2c:	f7fd fd56 	bl	80008dc <__aeabi_fmul>
 8002e30:	1c03      	adds	r3, r0, #0
 8002e32:	1c18      	adds	r0, r3, #0
 8002e34:	f7fd fb54 	bl	80004e0 <__aeabi_f2uiz>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <CAN_TX+0x1ac>)
 8002e3e:	801a      	strh	r2, [r3, #0]
	set_arus.m_uint16_t=(Aset*10);
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <CAN_TX+0x1b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	491d      	ldr	r1, [pc, #116]	; (8002ebc <CAN_TX+0x1a8>)
 8002e46:	1c18      	adds	r0, r3, #0
 8002e48:	f7fd fd48 	bl	80008dc <__aeabi_fmul>
 8002e4c:	1c03      	adds	r3, r0, #0
 8002e4e:	1c18      	adds	r0, r3, #0
 8002e50:	f7fd fb46 	bl	80004e0 <__aeabi_f2uiz>
 8002e54:	0003      	movs	r3, r0
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <CAN_TX+0x1b4>)
 8002e5a:	801a      	strh	r2, [r3, #0]
	slot2.TxData[0] = set_voltage.m_bytes[1];
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <CAN_TX+0x1ac>)
 8002e5e:	7859      	ldrb	r1, [r3, #1]
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e62:	226c      	movs	r2, #108	; 0x6c
 8002e64:	5499      	strb	r1, [r3, r2]
	slot2.TxData[1] = set_voltage.m_bytes[0];
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <CAN_TX+0x1ac>)
 8002e68:	7819      	ldrb	r1, [r3, #0]
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e6c:	226d      	movs	r2, #109	; 0x6d
 8002e6e:	5499      	strb	r1, [r3, r2]
	slot2.TxData[2] = set_arus.m_bytes[1];
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <CAN_TX+0x1b4>)
 8002e72:	7859      	ldrb	r1, [r3, #1]
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e76:	226e      	movs	r2, #110	; 0x6e
 8002e78:	5499      	strb	r1, [r3, r2]
	slot2.TxData[3] = set_arus.m_bytes[0];
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <CAN_TX+0x1b4>)
 8002e7c:	7819      	ldrb	r1, [r3, #0]
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e80:	226f      	movs	r2, #111	; 0x6f
 8002e82:	5499      	strb	r1, [r3, r2]
	slot2.TxData[4] = slot2.charger_start_DIS;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <CAN_TX+0x1c0>)
 8002e8e:	2270      	movs	r2, #112	; 0x70
 8002e90:	5499      	strb	r1, [r3, r2]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, slot2.TxData)!= HAL_OK) {
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <CAN_TX+0x1c4>)
 8002e94:	490d      	ldr	r1, [pc, #52]	; (8002ecc <CAN_TX+0x1b8>)
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <CAN_TX+0x1c8>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f002 fad0 	bl	800543e <HAL_FDCAN_AddMessageToTxFifoQ>
//	Error_Handler();
	}

//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000090 	.word	0x20000090
 8002ea8:	200000b4 	.word	0x200000b4
 8002eac:	20000120 	.word	0x20000120
 8002eb0:	20000790 	.word	0x20000790
 8002eb4:	1806e5f4 	.word	0x1806e5f4
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	41200000 	.word	0x41200000
 8002ec0:	20000030 	.word	0x20000030
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	20000034 	.word	0x20000034
 8002ecc:	2000076c 	.word	0x2000076c
 8002ed0:	000005b2 	.word	0x000005b2
 8002ed4:	200003fc 	.word	0x200003fc
 8002ed8:	20000468 	.word	0x20000468
 8002edc:	200007f4 	.word	0x200007f4

08002ee0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d100      	bne.n	8002ef4 <HAL_FDCAN_RxFifo0Callback+0x14>
 8002ef2:	e3be      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
	{
		if(hfdcan==&hfdcan1)
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4bea      	ldr	r3, [pc, #936]	; (80032a0 <HAL_FDCAN_RxFifo0Callback+0x3c0>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d000      	beq.n	8002efe <HAL_FDCAN_RxFifo0Callback+0x1e>
 8002efc:	e1e6      	b.n	80032cc <HAL_FDCAN_RxFifo0Callback+0x3ec>
		  {
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, slot1.RxData) == HAL_OK)
 8002efe:	4be9      	ldr	r3, [pc, #932]	; (80032a4 <HAL_FDCAN_RxFifo0Callback+0x3c4>)
 8002f00:	4ae9      	ldr	r2, [pc, #932]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	f002 fadf 	bl	80054c8 <HAL_FDCAN_GetRxMessage>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d000      	beq.n	8002f10 <HAL_FDCAN_RxFifo0Callback+0x30>
 8002f0e:	e1ba      	b.n	8003286 <HAL_FDCAN_RxFifo0Callback+0x3a6>
			{
				if((RxHeader.Identifier>>20)==0X0B0)//batre
 8002f10:	4be5      	ldr	r3, [pc, #916]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0d1b      	lsrs	r3, r3, #20
 8002f16:	2bb0      	cmp	r3, #176	; 0xb0
 8002f18:	d159      	bne.n	8002fce <HAL_FDCAN_RxFifo0Callback+0xee>
				{
					slot1.batt_protocol1=1;
 8002f1a:	4be4      	ldr	r3, [pc, #912]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	73da      	strb	r2, [r3, #15]
					slot1.Vbatt=(((slot1.RxData[1]<<8)|slot1.RxData[0])*0.01);
 8002f20:	4be2      	ldr	r3, [pc, #904]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f22:	2265      	movs	r2, #101	; 0x65
 8002f24:	5c9b      	ldrb	r3, [r3, r2]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	4ae0      	ldr	r2, [pc, #896]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	5c52      	ldrb	r2, [r2, r1]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff fd87 	bl	8002a44 <__aeabi_i2d>
 8002f36:	4ade      	ldr	r2, [pc, #888]	; (80032b0 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 8002f38:	4bde      	ldr	r3, [pc, #888]	; (80032b4 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 8002f3a:	f7fe ff4f 	bl	8001ddc <__aeabi_dmul>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	000b      	movs	r3, r1
 8002f42:	0010      	movs	r0, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	f7ff fdf5 	bl	8002b34 <__aeabi_d2f>
 8002f4a:	1c02      	adds	r2, r0, #0
 8002f4c:	4bd7      	ldr	r3, [pc, #860]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
					slot1.Abatt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.1);
 8002f50:	4bd6      	ldr	r3, [pc, #856]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f52:	2267      	movs	r2, #103	; 0x67
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	4ad4      	ldr	r2, [pc, #848]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f5a:	2166      	movs	r1, #102	; 0x66
 8002f5c:	5c52      	ldrb	r2, [r2, r1]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff fd6f 	bl	8002a44 <__aeabi_i2d>
 8002f66:	4ad4      	ldr	r2, [pc, #848]	; (80032b8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 8002f68:	4bd4      	ldr	r3, [pc, #848]	; (80032bc <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 8002f6a:	f7fe ff37 	bl	8001ddc <__aeabi_dmul>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	000b      	movs	r3, r1
 8002f72:	0010      	movs	r0, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	f7ff fddd 	bl	8002b34 <__aeabi_d2f>
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	4bcb      	ldr	r3, [pc, #812]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
					slot1.SOC_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8002f80:	4bca      	ldr	r3, [pc, #808]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f82:	2269      	movs	r2, #105	; 0x69
 8002f84:	5c9b      	ldrb	r3, [r3, r2]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	4ac8      	ldr	r2, [pc, #800]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f8a:	2168      	movs	r1, #104	; 0x68
 8002f8c:	5c52      	ldrb	r2, [r2, r1]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd ff97 	bl	8000ec4 <__aeabi_i2f>
 8002f96:	1c02      	adds	r2, r0, #0
 8002f98:	4bc4      	ldr	r3, [pc, #784]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
					slot1.temp_batt=(slot1.RxData[6]-40);
 8002f9c:	4bc3      	ldr	r3, [pc, #780]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002f9e:	226a      	movs	r2, #106	; 0x6a
 8002fa0:	5c9b      	ldrb	r3, [r3, r2]
 8002fa2:	3b28      	subs	r3, #40	; 0x28
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd ff8d 	bl	8000ec4 <__aeabi_i2f>
 8002faa:	1c02      	adds	r2, r0, #0
 8002fac:	4bbf      	ldr	r3, [pc, #764]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fae:	649a      	str	r2, [r3, #72]	; 0x48
					slot1.flag_recieve_batt1=1;
 8002fb0:	4bbe      	ldr	r3, [pc, #760]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]
					slot1.can_batt_trouble_state=0;
 8002fb8:	4bbc      	ldr	r3, [pc, #752]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fba:	2222      	movs	r2, #34	; 0x22
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8002fc0:	4bb9      	ldr	r3, [pc, #740]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	031b      	lsls	r3, r3, #12
 8002fc6:	0b1a      	lsrs	r2, r3, #12
 8002fc8:	4bb8      	ldr	r3, [pc, #736]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fca:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fcc:	e0dd      	b.n	800318a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				}
				else if((RxHeader.Identifier>>20)==0X0B1)//batre
 8002fce:	4bb6      	ldr	r3, [pc, #728]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0d1b      	lsrs	r3, r3, #20
 8002fd4:	2bb1      	cmp	r3, #177	; 0xb1
 8002fd6:	d000      	beq.n	8002fda <HAL_FDCAN_RxFifo0Callback+0xfa>
 8002fd8:	e0d7      	b.n	800318a <HAL_FDCAN_RxFifo0Callback+0x2aa>
				{
					slot1.batt_protocol2=1;
 8002fda:	4bb4      	ldr	r3, [pc, #720]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	741a      	strb	r2, [r3, #16]

					slot1.SOH_batt=(((slot1.RxData[3]<<8)|slot1.RxData[2])*0.01);
 8002fe0:	4bb2      	ldr	r3, [pc, #712]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fe2:	2267      	movs	r2, #103	; 0x67
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	4ab0      	ldr	r2, [pc, #704]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8002fea:	2166      	movs	r1, #102	; 0x66
 8002fec:	5c52      	ldrb	r2, [r2, r1]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fd27 	bl	8002a44 <__aeabi_i2d>
 8002ff6:	4aae      	ldr	r2, [pc, #696]	; (80032b0 <HAL_FDCAN_RxFifo0Callback+0x3d0>)
 8002ff8:	4bae      	ldr	r3, [pc, #696]	; (80032b4 <HAL_FDCAN_RxFifo0Callback+0x3d4>)
 8002ffa:	f7fe feef 	bl	8001ddc <__aeabi_dmul>
 8002ffe:	0002      	movs	r2, r0
 8003000:	000b      	movs	r3, r1
 8003002:	0010      	movs	r0, r2
 8003004:	0019      	movs	r1, r3
 8003006:	f7ff fd95 	bl	8002b34 <__aeabi_d2f>
 800300a:	1c02      	adds	r2, r0, #0
 800300c:	4ba7      	ldr	r3, [pc, #668]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800300e:	64da      	str	r2, [r3, #76]	; 0x4c
					slot1.cycle_batt=(((slot1.RxData[5]<<8)|slot1.RxData[4]));
 8003010:	4ba6      	ldr	r3, [pc, #664]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003012:	2269      	movs	r2, #105	; 0x69
 8003014:	5c9b      	ldrb	r3, [r3, r2]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	4aa4      	ldr	r2, [pc, #656]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800301a:	2168      	movs	r1, #104	; 0x68
 800301c:	5c52      	ldrb	r2, [r2, r1]
 800301e:	431a      	orrs	r2, r3
 8003020:	4ba2      	ldr	r3, [pc, #648]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003022:	651a      	str	r2, [r3, #80]	; 0x50
					slot1.batt_discharge_overcurrent=(slot1.RxData[6])&(0x01<<0);
 8003024:	4ba1      	ldr	r3, [pc, #644]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003026:	226a      	movs	r2, #106	; 0x6a
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	001a      	movs	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	4013      	ands	r3, r2
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	4193      	sbcs	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b9d      	ldr	r3, [pc, #628]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003038:	745a      	strb	r2, [r3, #17]
					slot1.batt_charge_overCurrent = (slot1.RxData[6])&(0x01<<1);
 800303a:	4b9c      	ldr	r3, [pc, #624]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800303c:	226a      	movs	r2, #106	; 0x6a
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	001a      	movs	r2, r3
 8003042:	2302      	movs	r3, #2
 8003044:	4013      	ands	r3, r2
 8003046:	1e5a      	subs	r2, r3, #1
 8003048:	4193      	sbcs	r3, r2
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b97      	ldr	r3, [pc, #604]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800304e:	749a      	strb	r2, [r3, #18]
					slot1.batt_short_circuit=(slot1.RxData[6])&(0x01<<2);
 8003050:	4b96      	ldr	r3, [pc, #600]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003052:	226a      	movs	r2, #106	; 0x6a
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	001a      	movs	r2, r3
 8003058:	2304      	movs	r3, #4
 800305a:	4013      	ands	r3, r2
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	4193      	sbcs	r3, r2
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003064:	74da      	strb	r2, [r3, #19]
					slot1.batt_discharge_overtempreature=(slot1.RxData[6])&(0x01<<3);
 8003066:	4b91      	ldr	r3, [pc, #580]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003068:	226a      	movs	r2, #106	; 0x6a
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	001a      	movs	r2, r3
 800306e:	2308      	movs	r3, #8
 8003070:	4013      	ands	r3, r2
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	4193      	sbcs	r3, r2
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b8c      	ldr	r3, [pc, #560]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800307a:	751a      	strb	r2, [r3, #20]
					slot1.batt_discharge_undertempreature=(slot1.RxData[6])&(0x01<<4);
 800307c:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800307e:	226a      	movs	r2, #106	; 0x6a
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	001a      	movs	r2, r3
 8003084:	2310      	movs	r3, #16
 8003086:	4013      	ands	r3, r2
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	4193      	sbcs	r3, r2
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b87      	ldr	r3, [pc, #540]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003090:	755a      	strb	r2, [r3, #21]
					slot1.batt_charge_overtempreature=(slot1.RxData[6])&(0x01<<5);
 8003092:	4b86      	ldr	r3, [pc, #536]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003094:	226a      	movs	r2, #106	; 0x6a
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	001a      	movs	r2, r3
 800309a:	2320      	movs	r3, #32
 800309c:	4013      	ands	r3, r2
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	4193      	sbcs	r3, r2
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030a6:	759a      	strb	r2, [r3, #22]
					slot1.batt_charge_undertempreature=(slot1.RxData[6])&(0x01<<6);
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030aa:	226a      	movs	r2, #106	; 0x6a
 80030ac:	5c9b      	ldrb	r3, [r3, r2]
 80030ae:	001a      	movs	r2, r3
 80030b0:	2340      	movs	r3, #64	; 0x40
 80030b2:	4013      	ands	r3, r2
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	4193      	sbcs	r3, r2
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030bc:	75da      	strb	r2, [r3, #23]
					slot1.batt_under_voltage=(slot1.RxData[6])&(0x01<<7);
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030c0:	226a      	movs	r2, #106	; 0x6a
 80030c2:	5c9b      	ldrb	r3, [r3, r2]
 80030c4:	001a      	movs	r2, r3
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	4013      	ands	r3, r2
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	4193      	sbcs	r3, r2
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030d2:	761a      	strb	r2, [r3, #24]

					slot1.batt_over_voltage=(slot1.RxData[7])&(0x01<<0);
 80030d4:	4b75      	ldr	r3, [pc, #468]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030d6:	226b      	movs	r2, #107	; 0x6b
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	001a      	movs	r2, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	4193      	sbcs	r3, r2
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4b71      	ldr	r3, [pc, #452]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030e8:	765a      	strb	r2, [r3, #25]
					slot1.batt_over_discharge_capacity=(slot1.RxData[7])&(0x01<<1);
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030ec:	226b      	movs	r2, #107	; 0x6b
 80030ee:	5c9b      	ldrb	r3, [r3, r2]
 80030f0:	001a      	movs	r2, r3
 80030f2:	2302      	movs	r3, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	4193      	sbcs	r3, r2
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80030fe:	769a      	strb	r2, [r3, #26]
					slot1.batt_unbalance=(slot1.RxData[7])&(0x01<<2);
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003102:	226b      	movs	r2, #107	; 0x6b
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	001a      	movs	r2, r3
 8003108:	2304      	movs	r3, #4
 800310a:	4013      	ands	r3, r2
 800310c:	1e5a      	subs	r2, r3, #1
 800310e:	4193      	sbcs	r3, r2
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003114:	76da      	strb	r2, [r3, #27]
					slot1.batt_system_failure=(slot1.RxData[7])&(0x01<<3);
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003118:	226b      	movs	r2, #107	; 0x6b
 800311a:	5c9b      	ldrb	r3, [r3, r2]
 800311c:	001a      	movs	r2, r3
 800311e:	2308      	movs	r3, #8
 8003120:	4013      	ands	r3, r2
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	4193      	sbcs	r3, r2
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b60      	ldr	r3, [pc, #384]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800312a:	771a      	strb	r2, [r3, #28]
					slot1.batt_charge_state=(slot1.RxData[7])&(0x01<<4);
 800312c:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800312e:	226b      	movs	r2, #107	; 0x6b
 8003130:	5c9b      	ldrb	r3, [r3, r2]
 8003132:	001a      	movs	r2, r3
 8003134:	2310      	movs	r3, #16
 8003136:	4013      	ands	r3, r2
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	4193      	sbcs	r3, r2
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003140:	775a      	strb	r2, [r3, #29]
					slot1.batt_discharge_state=(slot1.RxData[7])&(0x01<<5);
 8003142:	4b5a      	ldr	r3, [pc, #360]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003144:	226b      	movs	r2, #107	; 0x6b
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	001a      	movs	r2, r3
 800314a:	2320      	movs	r3, #32
 800314c:	4013      	ands	r3, r2
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003156:	779a      	strb	r2, [r3, #30]
					slot1.batt_sleep_state=(slot1.RxData[7])&(0x01<<6);
 8003158:	4b54      	ldr	r3, [pc, #336]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800315a:	226b      	movs	r2, #107	; 0x6b
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	001a      	movs	r2, r3
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	4013      	ands	r3, r2
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	4193      	sbcs	r3, r2
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800316c:	77da      	strb	r2, [r3, #31]

					slot1.flag_recieve_batt2=1;
 800316e:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003170:	2221      	movs	r2, #33	; 0x21
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
					slot1.can_batt2_trouble_state=0;
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003178:	2223      	movs	r2, #35	; 0x23
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]
					slot1.batt_id = (RxHeader.Identifier&0x000FFFFF);
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	031b      	lsls	r3, r3, #12
 8003184:	0b1a      	lsrs	r2, r3, #12
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003188:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				if(RxHeader.Identifier==0x18FF50E5)//charger
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_FDCAN_RxFifo0Callback+0x3c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_FDCAN_RxFifo0Callback+0x3e0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d000      	beq.n	8003196 <HAL_FDCAN_RxFifo0Callback+0x2b6>
 8003194:	e26d      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
				{
					slot1.isCharger=1;
 8003196:	4b45      	ldr	r3, [pc, #276]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003198:	2201      	movs	r2, #1
 800319a:	70da      	strb	r2, [r3, #3]
					slot1.Vcharger=(((slot1.RxData[0]<<8)|slot1.RxData[1])*0.1);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800319e:	2264      	movs	r2, #100	; 0x64
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	4a41      	ldr	r2, [pc, #260]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031a6:	2165      	movs	r1, #101	; 0x65
 80031a8:	5c52      	ldrb	r2, [r2, r1]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff fc49 	bl	8002a44 <__aeabi_i2d>
 80031b2:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80031b4:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80031b6:	f7fe fe11 	bl	8001ddc <__aeabi_dmul>
 80031ba:	0002      	movs	r2, r0
 80031bc:	000b      	movs	r3, r1
 80031be:	0010      	movs	r0, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	f7ff fcb7 	bl	8002b34 <__aeabi_d2f>
 80031c6:	1c02      	adds	r2, r0, #0
 80031c8:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
					slot1.Acharger=(((slot1.RxData[2]<<8)|slot1.RxData[3])*0.1);
 80031cc:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031ce:	2266      	movs	r2, #102	; 0x66
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	4a35      	ldr	r2, [pc, #212]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031d6:	2167      	movs	r1, #103	; 0x67
 80031d8:	5c52      	ldrb	r2, [r2, r1]
 80031da:	4313      	orrs	r3, r2
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff fc31 	bl	8002a44 <__aeabi_i2d>
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <HAL_FDCAN_RxFifo0Callback+0x3d8>)
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_FDCAN_RxFifo0Callback+0x3dc>)
 80031e6:	f7fe fdf9 	bl	8001ddc <__aeabi_dmul>
 80031ea:	0002      	movs	r2, r0
 80031ec:	000b      	movs	r3, r1
 80031ee:	0010      	movs	r0, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	f7ff fc9f 	bl	8002b34 <__aeabi_d2f>
 80031f6:	1c02      	adds	r2, r0, #0
 80031f8:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031fa:	659a      	str	r2, [r3, #88]	; 0x58
					slot1.charger_hardware_error=(slot1.RxData[4])&(0x01<<0);
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 80031fe:	2268      	movs	r2, #104	; 0x68
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	001a      	movs	r2, r3
 8003204:	2301      	movs	r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	1e5a      	subs	r2, r3, #1
 800320a:	4193      	sbcs	r3, r2
 800320c:	b2d9      	uxtb	r1, r3
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003210:	222a      	movs	r2, #42	; 0x2a
 8003212:	5499      	strb	r1, [r3, r2]
					slot1.charger_temp=(slot1.RxData[4])&(0x01<<1);
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003216:	2268      	movs	r2, #104	; 0x68
 8003218:	5c9b      	ldrb	r3, [r3, r2]
 800321a:	001a      	movs	r2, r3
 800321c:	2302      	movs	r3, #2
 800321e:	4013      	ands	r3, r2
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	4193      	sbcs	r3, r2
 8003224:	b2d9      	uxtb	r1, r3
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003228:	222b      	movs	r2, #43	; 0x2b
 800322a:	5499      	strb	r1, [r3, r2]
					slot1.charger_input_voltage=(slot1.RxData[4])&(0x01<<2);
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800322e:	2268      	movs	r2, #104	; 0x68
 8003230:	5c9b      	ldrb	r3, [r3, r2]
 8003232:	001a      	movs	r2, r3
 8003234:	2304      	movs	r3, #4
 8003236:	4013      	ands	r3, r2
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	4193      	sbcs	r3, r2
 800323c:	b2d9      	uxtb	r1, r3
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003240:	222c      	movs	r2, #44	; 0x2c
 8003242:	5499      	strb	r1, [r3, r2]
					slot1.charger_work_condition=(slot1.RxData[4])&(0x01<<3);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003246:	2268      	movs	r2, #104	; 0x68
 8003248:	5c9b      	ldrb	r3, [r3, r2]
 800324a:	001a      	movs	r2, r3
 800324c:	2308      	movs	r3, #8
 800324e:	4013      	ands	r3, r2
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	4193      	sbcs	r3, r2
 8003254:	b2d9      	uxtb	r1, r3
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003258:	222d      	movs	r2, #45	; 0x2d
 800325a:	5499      	strb	r1, [r3, r2]
					slot1.charger_communication_error=(slot1.RxData[4])&(0x01<<4);
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800325e:	2268      	movs	r2, #104	; 0x68
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	001a      	movs	r2, r3
 8003264:	2310      	movs	r3, #16
 8003266:	4013      	ands	r3, r2
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	4193      	sbcs	r3, r2
 800326c:	b2d9      	uxtb	r1, r3
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003270:	222e      	movs	r2, #46	; 0x2e
 8003272:	5499      	strb	r1, [r3, r2]
					slot1.can_charger_trouble_state=0;
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 8003276:	2230      	movs	r2, #48	; 0x30
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]
					slot1.flag_recieve_charger=1;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_FDCAN_RxFifo0Callback+0x3cc>)
 800327e:	222f      	movs	r2, #47	; 0x2f
 8003280:	2101      	movs	r1, #1
 8003282:	5499      	strb	r1, [r3, r2]
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();

		}

	}
}
 8003284:	e1f5      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_FDCAN_RxFifo0Callback+0x3e4>)
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_FDCAN_RxFifo0Callback+0x3e8>)
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	f002 f91b 	bl	80054c8 <HAL_FDCAN_GetRxMessage>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d100      	bne.n	8003298 <HAL_FDCAN_RxFifo0Callback+0x3b8>
 8003296:	e1ec      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
 8003298:	f000 fdd2 	bl	8003e40 <Error_Handler>
}
 800329c:	e1e9      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000790 	.word	0x20000790
 80032a4:	20000118 	.word	0x20000118
 80032a8:	20000068 	.word	0x20000068
 80032ac:	200000b4 	.word	0x200000b4
 80032b0:	47ae147b 	.word	0x47ae147b
 80032b4:	3f847ae1 	.word	0x3f847ae1
 80032b8:	9999999a 	.word	0x9999999a
 80032bc:	3fb99999 	.word	0x3fb99999
 80032c0:	18ff50e5 	.word	0x18ff50e5
 80032c4:	20000460 	.word	0x20000460
 80032c8:	20000744 	.word	0x20000744
		else if (hfdcan==&hfdcan2)
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4beb      	ldr	r3, [pc, #940]	; (800367c <HAL_FDCAN_RxFifo0Callback+0x79c>)
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d000      	beq.n	80032d6 <HAL_FDCAN_RxFifo0Callback+0x3f6>
 80032d4:	e1cd      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) == HAL_OK)
 80032d6:	4bea      	ldr	r3, [pc, #936]	; (8003680 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 80032d8:	4aea      	ldr	r2, [pc, #936]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	f002 f8f3 	bl	80054c8 <HAL_FDCAN_GetRxMessage>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d000      	beq.n	80032e8 <HAL_FDCAN_RxFifo0Callback+0x408>
 80032e6:	e1ba      	b.n	800365e <HAL_FDCAN_RxFifo0Callback+0x77e>
				if((RxHeader2.Identifier>>20)==0X0B0)//batre
 80032e8:	4be6      	ldr	r3, [pc, #920]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0d1b      	lsrs	r3, r3, #20
 80032ee:	2bb0      	cmp	r3, #176	; 0xb0
 80032f0:	d159      	bne.n	80033a6 <HAL_FDCAN_RxFifo0Callback+0x4c6>
				slot2.batt_protocol1=1;
 80032f2:	4be5      	ldr	r3, [pc, #916]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	73da      	strb	r2, [r3, #15]
				slot2.Vbatt=(((slot2.RxData[1]<<8)|slot2.RxData[0])*0.01);
 80032f8:	4be3      	ldr	r3, [pc, #908]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80032fa:	2265      	movs	r2, #101	; 0x65
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4ae1      	ldr	r2, [pc, #900]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	5c52      	ldrb	r2, [r2, r1]
 8003306:	4313      	orrs	r3, r2
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fb9b 	bl	8002a44 <__aeabi_i2d>
 800330e:	4adf      	ldr	r2, [pc, #892]	; (800368c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 8003310:	4bdf      	ldr	r3, [pc, #892]	; (8003690 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 8003312:	f7fe fd63 	bl	8001ddc <__aeabi_dmul>
 8003316:	0002      	movs	r2, r0
 8003318:	000b      	movs	r3, r1
 800331a:	0010      	movs	r0, r2
 800331c:	0019      	movs	r1, r3
 800331e:	f7ff fc09 	bl	8002b34 <__aeabi_d2f>
 8003322:	1c02      	adds	r2, r0, #0
 8003324:	4bd8      	ldr	r3, [pc, #864]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
				slot2.Abatt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.1);
 8003328:	4bd7      	ldr	r3, [pc, #860]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800332a:	2267      	movs	r2, #103	; 0x67
 800332c:	5c9b      	ldrb	r3, [r3, r2]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4ad5      	ldr	r2, [pc, #852]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003332:	2166      	movs	r1, #102	; 0x66
 8003334:	5c52      	ldrb	r2, [r2, r1]
 8003336:	4313      	orrs	r3, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff fb83 	bl	8002a44 <__aeabi_i2d>
 800333e:	4ad5      	ldr	r2, [pc, #852]	; (8003694 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 8003340:	4bd5      	ldr	r3, [pc, #852]	; (8003698 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 8003342:	f7fe fd4b 	bl	8001ddc <__aeabi_dmul>
 8003346:	0002      	movs	r2, r0
 8003348:	000b      	movs	r3, r1
 800334a:	0010      	movs	r0, r2
 800334c:	0019      	movs	r1, r3
 800334e:	f7ff fbf1 	bl	8002b34 <__aeabi_d2f>
 8003352:	1c02      	adds	r2, r0, #0
 8003354:	4bcc      	ldr	r3, [pc, #816]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
				slot2.SOC_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 8003358:	4bcb      	ldr	r3, [pc, #812]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800335a:	2269      	movs	r2, #105	; 0x69
 800335c:	5c9b      	ldrb	r3, [r3, r2]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	4ac9      	ldr	r2, [pc, #804]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003362:	2168      	movs	r1, #104	; 0x68
 8003364:	5c52      	ldrb	r2, [r2, r1]
 8003366:	4313      	orrs	r3, r2
 8003368:	0018      	movs	r0, r3
 800336a:	f7fd fdab 	bl	8000ec4 <__aeabi_i2f>
 800336e:	1c02      	adds	r2, r0, #0
 8003370:	4bc5      	ldr	r3, [pc, #788]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
				slot2.temp_batt=(slot2.RxData[6]-40);
 8003374:	4bc4      	ldr	r3, [pc, #784]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003376:	226a      	movs	r2, #106	; 0x6a
 8003378:	5c9b      	ldrb	r3, [r3, r2]
 800337a:	3b28      	subs	r3, #40	; 0x28
 800337c:	0018      	movs	r0, r3
 800337e:	f7fd fda1 	bl	8000ec4 <__aeabi_i2f>
 8003382:	1c02      	adds	r2, r0, #0
 8003384:	4bc0      	ldr	r3, [pc, #768]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003386:	649a      	str	r2, [r3, #72]	; 0x48
				slot2.flag_recieve_batt1=1;
 8003388:	4bbf      	ldr	r3, [pc, #764]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800338a:	2220      	movs	r2, #32
 800338c:	2101      	movs	r1, #1
 800338e:	5499      	strb	r1, [r3, r2]
				slot2.can_batt_trouble_state=0;
 8003390:	4bbd      	ldr	r3, [pc, #756]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003392:	2222      	movs	r2, #34	; 0x22
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader2.Identifier&0x000FFFFF);
 8003398:	4bba      	ldr	r3, [pc, #744]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	0b1a      	lsrs	r2, r3, #12
 80033a0:	4bb9      	ldr	r3, [pc, #740]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a4:	e0dd      	b.n	8003562 <HAL_FDCAN_RxFifo0Callback+0x682>
				else if((RxHeader2.Identifier>>20)==0X0B1)//batre
 80033a6:	4bb7      	ldr	r3, [pc, #732]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0d1b      	lsrs	r3, r3, #20
 80033ac:	2bb1      	cmp	r3, #177	; 0xb1
 80033ae:	d000      	beq.n	80033b2 <HAL_FDCAN_RxFifo0Callback+0x4d2>
 80033b0:	e0d7      	b.n	8003562 <HAL_FDCAN_RxFifo0Callback+0x682>
				slot2.batt_protocol2=1;
 80033b2:	4bb5      	ldr	r3, [pc, #724]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	741a      	strb	r2, [r3, #16]
				slot2.SOH_batt=(((slot2.RxData[3]<<8)|slot2.RxData[2])*0.01);
 80033b8:	4bb3      	ldr	r3, [pc, #716]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033ba:	2267      	movs	r2, #103	; 0x67
 80033bc:	5c9b      	ldrb	r3, [r3, r2]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	4ab1      	ldr	r2, [pc, #708]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033c2:	2166      	movs	r1, #102	; 0x66
 80033c4:	5c52      	ldrb	r2, [r2, r1]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff fb3b 	bl	8002a44 <__aeabi_i2d>
 80033ce:	4aaf      	ldr	r2, [pc, #700]	; (800368c <HAL_FDCAN_RxFifo0Callback+0x7ac>)
 80033d0:	4baf      	ldr	r3, [pc, #700]	; (8003690 <HAL_FDCAN_RxFifo0Callback+0x7b0>)
 80033d2:	f7fe fd03 	bl	8001ddc <__aeabi_dmul>
 80033d6:	0002      	movs	r2, r0
 80033d8:	000b      	movs	r3, r1
 80033da:	0010      	movs	r0, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	f7ff fba9 	bl	8002b34 <__aeabi_d2f>
 80033e2:	1c02      	adds	r2, r0, #0
 80033e4:	4ba8      	ldr	r3, [pc, #672]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c
				slot2.cycle_batt=(((slot2.RxData[5]<<8)|slot2.RxData[4]));
 80033e8:	4ba7      	ldr	r3, [pc, #668]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033ea:	2269      	movs	r2, #105	; 0x69
 80033ec:	5c9b      	ldrb	r3, [r3, r2]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	4aa5      	ldr	r2, [pc, #660]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033f2:	2168      	movs	r1, #104	; 0x68
 80033f4:	5c52      	ldrb	r2, [r2, r1]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	4ba3      	ldr	r3, [pc, #652]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
				slot2.batt_discharge_overcurrent=(slot2.RxData[6])&(0x01<<0);
 80033fc:	4ba2      	ldr	r3, [pc, #648]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80033fe:	226a      	movs	r2, #106	; 0x6a
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	001a      	movs	r2, r3
 8003404:	2301      	movs	r3, #1
 8003406:	4013      	ands	r3, r2
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	4193      	sbcs	r3, r2
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b9e      	ldr	r3, [pc, #632]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003410:	745a      	strb	r2, [r3, #17]
				slot2.batt_charge_overCurrent = (slot2.RxData[6])&(0x01<<1);
 8003412:	4b9d      	ldr	r3, [pc, #628]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003414:	226a      	movs	r2, #106	; 0x6a
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	001a      	movs	r2, r3
 800341a:	2302      	movs	r3, #2
 800341c:	4013      	ands	r3, r2
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	4193      	sbcs	r3, r2
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b98      	ldr	r3, [pc, #608]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003426:	749a      	strb	r2, [r3, #18]
				slot2.batt_short_circuit=(slot2.RxData[6])&(0x01<<2);
 8003428:	4b97      	ldr	r3, [pc, #604]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800342a:	226a      	movs	r2, #106	; 0x6a
 800342c:	5c9b      	ldrb	r3, [r3, r2]
 800342e:	001a      	movs	r2, r3
 8003430:	2304      	movs	r3, #4
 8003432:	4013      	ands	r3, r2
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	4193      	sbcs	r3, r2
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b93      	ldr	r3, [pc, #588]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800343c:	74da      	strb	r2, [r3, #19]
				slot2.batt_discharge_overtempreature=(slot2.RxData[6])&(0x01<<3);
 800343e:	4b92      	ldr	r3, [pc, #584]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003440:	226a      	movs	r2, #106	; 0x6a
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	001a      	movs	r2, r3
 8003446:	2308      	movs	r3, #8
 8003448:	4013      	ands	r3, r2
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	4193      	sbcs	r3, r2
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b8d      	ldr	r3, [pc, #564]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003452:	751a      	strb	r2, [r3, #20]
				slot2.batt_discharge_undertempreature=(slot2.RxData[6])&(0x01<<4);
 8003454:	4b8c      	ldr	r3, [pc, #560]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003456:	226a      	movs	r2, #106	; 0x6a
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	001a      	movs	r2, r3
 800345c:	2310      	movs	r3, #16
 800345e:	4013      	ands	r3, r2
 8003460:	1e5a      	subs	r2, r3, #1
 8003462:	4193      	sbcs	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003468:	755a      	strb	r2, [r3, #21]
				slot2.batt_charge_overtempreature=(slot2.RxData[6])&(0x01<<5);
 800346a:	4b87      	ldr	r3, [pc, #540]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800346c:	226a      	movs	r2, #106	; 0x6a
 800346e:	5c9b      	ldrb	r3, [r3, r2]
 8003470:	001a      	movs	r2, r3
 8003472:	2320      	movs	r3, #32
 8003474:	4013      	ands	r3, r2
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	4193      	sbcs	r3, r2
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800347e:	759a      	strb	r2, [r3, #22]
				slot2.batt_charge_undertempreature=(slot2.RxData[6])&(0x01<<6);
 8003480:	4b81      	ldr	r3, [pc, #516]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003482:	226a      	movs	r2, #106	; 0x6a
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	001a      	movs	r2, r3
 8003488:	2340      	movs	r3, #64	; 0x40
 800348a:	4013      	ands	r3, r2
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	4193      	sbcs	r3, r2
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b7d      	ldr	r3, [pc, #500]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003494:	75da      	strb	r2, [r3, #23]
				slot2.batt_under_voltage=(slot2.RxData[6])&(0x01<<7);
 8003496:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003498:	226a      	movs	r2, #106	; 0x6a
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	001a      	movs	r2, r3
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	4013      	ands	r3, r2
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	4193      	sbcs	r3, r2
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b77      	ldr	r3, [pc, #476]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034aa:	761a      	strb	r2, [r3, #24]
				slot2.batt_over_voltage=(slot2.RxData[7])&(0x01<<0);
 80034ac:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034ae:	226b      	movs	r2, #107	; 0x6b
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	001a      	movs	r2, r3
 80034b4:	2301      	movs	r3, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	4193      	sbcs	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034c0:	765a      	strb	r2, [r3, #25]
				slot2.batt_over_discharge_capacity=(slot2.RxData[7])&(0x01<<1);
 80034c2:	4b71      	ldr	r3, [pc, #452]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034c4:	226b      	movs	r2, #107	; 0x6b
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	001a      	movs	r2, r3
 80034ca:	2302      	movs	r3, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	4193      	sbcs	r3, r2
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034d6:	769a      	strb	r2, [r3, #26]
				slot2.batt_unbalance=(slot2.RxData[7])&(0x01<<2);
 80034d8:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034da:	226b      	movs	r2, #107	; 0x6b
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	001a      	movs	r2, r3
 80034e0:	2304      	movs	r3, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	4193      	sbcs	r3, r2
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034ec:	76da      	strb	r2, [r3, #27]
				slot2.batt_system_failure=(slot2.RxData[7])&(0x01<<3);
 80034ee:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80034f0:	226b      	movs	r2, #107	; 0x6b
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	001a      	movs	r2, r3
 80034f6:	2308      	movs	r3, #8
 80034f8:	4013      	ands	r3, r2
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	4193      	sbcs	r3, r2
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003502:	771a      	strb	r2, [r3, #28]
				slot2.batt_charge_state=(slot2.RxData[7])&(0x01<<4);
 8003504:	4b60      	ldr	r3, [pc, #384]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003506:	226b      	movs	r2, #107	; 0x6b
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	001a      	movs	r2, r3
 800350c:	2310      	movs	r3, #16
 800350e:	4013      	ands	r3, r2
 8003510:	1e5a      	subs	r2, r3, #1
 8003512:	4193      	sbcs	r3, r2
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003518:	775a      	strb	r2, [r3, #29]
				slot2.batt_discharge_state=(slot2.RxData[7])&(0x01<<5);
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800351c:	226b      	movs	r2, #107	; 0x6b
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	001a      	movs	r2, r3
 8003522:	2320      	movs	r3, #32
 8003524:	4013      	ands	r3, r2
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	4193      	sbcs	r3, r2
 800352a:	b2da      	uxtb	r2, r3
 800352c:	4b56      	ldr	r3, [pc, #344]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800352e:	779a      	strb	r2, [r3, #30]
				slot2.batt_sleep_state=(slot2.RxData[7])&(0x01<<6);
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003532:	226b      	movs	r2, #107	; 0x6b
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	001a      	movs	r2, r3
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	4013      	ands	r3, r2
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	4193      	sbcs	r3, r2
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003544:	77da      	strb	r2, [r3, #31]
				slot2.flag_recieve_batt2=1;
 8003546:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003548:	2221      	movs	r2, #33	; 0x21
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
				slot2.can_batt2_trouble_state=0;
 800354e:	4b4e      	ldr	r3, [pc, #312]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003550:	2223      	movs	r2, #35	; 0x23
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]
				slot2.batt_id = (RxHeader.Identifier&0x000FFFFF);
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_FDCAN_RxFifo0Callback+0x7bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	031b      	lsls	r3, r3, #12
 800355c:	0b1a      	lsrs	r2, r3, #12
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c
				if(RxHeader2.Identifier==0x18FF50E5)//charger
 8003562:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <HAL_FDCAN_RxFifo0Callback+0x7c0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d000      	beq.n	800356e <HAL_FDCAN_RxFifo0Callback+0x68e>
 800356c:	e081      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
				slot2.isCharger=1;
 800356e:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003570:	2201      	movs	r2, #1
 8003572:	70da      	strb	r2, [r3, #3]
				slot2.Vcharger=(((slot2.RxData[0]<<8)|slot2.RxData[1])*0.1);
 8003574:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003576:	2264      	movs	r2, #100	; 0x64
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800357e:	2165      	movs	r1, #101	; 0x65
 8003580:	5c52      	ldrb	r2, [r2, r1]
 8003582:	4313      	orrs	r3, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff fa5d 	bl	8002a44 <__aeabi_i2d>
 800358a:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 800358e:	f7fe fc25 	bl	8001ddc <__aeabi_dmul>
 8003592:	0002      	movs	r2, r0
 8003594:	000b      	movs	r3, r1
 8003596:	0010      	movs	r0, r2
 8003598:	0019      	movs	r1, r3
 800359a:	f7ff facb 	bl	8002b34 <__aeabi_d2f>
 800359e:	1c02      	adds	r2, r0, #0
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
				slot2.Acharger=(((slot2.RxData[2]<<8)|slot2.RxData[3])*0.1);
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035a6:	2266      	movs	r2, #102	; 0x66
 80035a8:	5c9b      	ldrb	r3, [r3, r2]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	4a36      	ldr	r2, [pc, #216]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035ae:	2167      	movs	r1, #103	; 0x67
 80035b0:	5c52      	ldrb	r2, [r2, r1]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fa45 	bl	8002a44 <__aeabi_i2d>
 80035ba:	4a36      	ldr	r2, [pc, #216]	; (8003694 <HAL_FDCAN_RxFifo0Callback+0x7b4>)
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_FDCAN_RxFifo0Callback+0x7b8>)
 80035be:	f7fe fc0d 	bl	8001ddc <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	f7ff fab3 	bl	8002b34 <__aeabi_d2f>
 80035ce:	1c02      	adds	r2, r0, #0
 80035d0:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035d2:	659a      	str	r2, [r3, #88]	; 0x58
				slot2.charger_hardware_error=(slot2.RxData[4])&(0x01<<0);
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035d6:	2268      	movs	r2, #104	; 0x68
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	001a      	movs	r2, r3
 80035dc:	2301      	movs	r3, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	4193      	sbcs	r3, r2
 80035e4:	b2d9      	uxtb	r1, r3
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035e8:	222a      	movs	r2, #42	; 0x2a
 80035ea:	5499      	strb	r1, [r3, r2]
				slot2.charger_temp=(slot2.RxData[4])&(0x01<<1);
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 80035ee:	2268      	movs	r2, #104	; 0x68
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	001a      	movs	r2, r3
 80035f4:	2302      	movs	r3, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	4193      	sbcs	r3, r2
 80035fc:	b2d9      	uxtb	r1, r3
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003600:	222b      	movs	r2, #43	; 0x2b
 8003602:	5499      	strb	r1, [r3, r2]
				slot2.charger_input_voltage=(slot2.RxData[4])&(0x01<<2);
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003606:	2268      	movs	r2, #104	; 0x68
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	001a      	movs	r2, r3
 800360c:	2304      	movs	r3, #4
 800360e:	4013      	ands	r3, r2
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	4193      	sbcs	r3, r2
 8003614:	b2d9      	uxtb	r1, r3
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003618:	222c      	movs	r2, #44	; 0x2c
 800361a:	5499      	strb	r1, [r3, r2]
				slot2.charger_work_condition=(slot2.RxData[4])&(0x01<<3);
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800361e:	2268      	movs	r2, #104	; 0x68
 8003620:	5c9b      	ldrb	r3, [r3, r2]
 8003622:	001a      	movs	r2, r3
 8003624:	2308      	movs	r3, #8
 8003626:	4013      	ands	r3, r2
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	4193      	sbcs	r3, r2
 800362c:	b2d9      	uxtb	r1, r3
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003630:	222d      	movs	r2, #45	; 0x2d
 8003632:	5499      	strb	r1, [r3, r2]
				slot2.charger_communication_error=(slot2.RxData[4])&(0x01<<4);
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003636:	2268      	movs	r2, #104	; 0x68
 8003638:	5c9b      	ldrb	r3, [r3, r2]
 800363a:	001a      	movs	r2, r3
 800363c:	2310      	movs	r3, #16
 800363e:	4013      	ands	r3, r2
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	4193      	sbcs	r3, r2
 8003644:	b2d9      	uxtb	r1, r3
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003648:	222e      	movs	r2, #46	; 0x2e
 800364a:	5499      	strb	r1, [r3, r2]
				slot2.can_charger_trouble_state=0;
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 800364e:	2230      	movs	r2, #48	; 0x30
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]
				slot2.flag_recieve_charger=1;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_FDCAN_RxFifo0Callback+0x7a8>)
 8003656:	222f      	movs	r2, #47	; 0x2f
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
}
 800365c:	e009      	b.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
			else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, slot2.RxData) != HAL_OK)Error_Handler();
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_FDCAN_RxFifo0Callback+0x7a0>)
 8003660:	4a08      	ldr	r2, [pc, #32]	; (8003684 <HAL_FDCAN_RxFifo0Callback+0x7a4>)
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	f001 ff2f 	bl	80054c8 <HAL_FDCAN_GetRxMessage>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <HAL_FDCAN_RxFifo0Callback+0x792>
 800366e:	f000 fbe7 	bl	8003e40 <Error_Handler>
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	200007f4 	.word	0x200007f4
 8003680:	20000460 	.word	0x20000460
 8003684:	20000744 	.word	0x20000744
 8003688:	200003fc 	.word	0x200003fc
 800368c:	47ae147b 	.word	0x47ae147b
 8003690:	3f847ae1 	.word	0x3f847ae1
 8003694:	9999999a 	.word	0x9999999a
 8003698:	3fb99999 	.word	0x3fb99999
 800369c:	20000068 	.word	0x20000068
 80036a0:	18ff50e5 	.word	0x18ff50e5

080036a4 <CAN_config>:


void CAN_config()
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80036a8:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <CAN_config+0x130>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	05d2      	lsls	r2, r2, #23
 80036ae:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIndex = 0;
 80036b0:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <CAN_config+0x130>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_DISABLE;
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <CAN_config+0x130>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80036bc:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <CAN_config+0x130>)
 80036be:	2201      	movs	r2, #1
 80036c0:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterID1 = 0;
 80036c2:	4b44      	ldr	r3, [pc, #272]	; (80037d4 <CAN_config+0x130>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterID2 = 0;
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <CAN_config+0x130>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	615a      	str	r2, [r3, #20]


	  sFilterConfig2.IdType = FDCAN_EXTENDED_ID;
 80036ce:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <CAN_config+0x134>)
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	05d2      	lsls	r2, r2, #23
 80036d4:	601a      	str	r2, [r3, #0]
	  sFilterConfig2.FilterIndex = 0;
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <CAN_config+0x134>)
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]
	  sFilterConfig2.FilterType = FDCAN_FILTER_DISABLE;
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <CAN_config+0x134>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
	  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <CAN_config+0x134>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	60da      	str	r2, [r3, #12]
	  sFilterConfig2.FilterID1 = 0;
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <CAN_config+0x134>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
	  sFilterConfig2.FilterID2 = 0;
 80036ee:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <CAN_config+0x134>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]

	  TxHeader.Identifier = 0x01;
 80036f4:	4b39      	ldr	r3, [pc, #228]	; (80037dc <CAN_config+0x138>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_EXTENDED_ID;
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <CAN_config+0x138>)
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	05d2      	lsls	r2, r2, #23
 8003700:	605a      	str	r2, [r3, #4]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <CAN_config+0x138>)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	0312      	lsls	r2, r2, #12
 8003708:	60da      	str	r2, [r3, #12]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <CAN_config+0x138>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <CAN_config+0x138>)
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <CAN_config+0x138>)
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <CAN_config+0x138>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8003722:	4b2e      	ldr	r3, [pc, #184]	; (80037dc <CAN_config+0x138>)
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0412      	lsls	r2, r2, #16
 8003728:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <CAN_config+0x138>)
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]

	  TxHeader2.Identifier = 0x02;
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <CAN_config+0x13c>)
 8003732:	2202      	movs	r2, #2
 8003734:	601a      	str	r2, [r3, #0]
	  TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <CAN_config+0x13c>)
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	05d2      	lsls	r2, r2, #23
 800373c:	605a      	str	r2, [r3, #4]
	  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <CAN_config+0x13c>)
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	0312      	lsls	r2, r2, #12
 8003744:	60da      	str	r2, [r3, #12]
	  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <CAN_config+0x13c>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
	  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <CAN_config+0x13c>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
	  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <CAN_config+0x13c>)
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]
	  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <CAN_config+0x13c>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
	  TxHeader2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <CAN_config+0x13c>)
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0412      	lsls	r2, r2, #16
 8003764:	61da      	str	r2, [r3, #28]
	  TxHeader2.MessageMarker = 0x00;
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <CAN_config+0x13c>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]

	  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <CAN_config+0x130>)
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <CAN_config+0x140>)
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f001 fde0 	bl	8005338 <HAL_FDCAN_ConfigFilter>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <CAN_config+0x140>)
 800377a:	0018      	movs	r0, r3
 800377c:	f001 fe39 	bl	80053f2 <HAL_FDCAN_Start>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <CAN_config+0xe4>
	  {
	    Error_Handler();
 8003784:	f000 fb5c 	bl	8003e40 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <CAN_config+0x140>)
 800378a:	2200      	movs	r2, #0
 800378c:	2101      	movs	r1, #1
 800378e:	0018      	movs	r0, r3
 8003790:	f001 ff7c 	bl	800568c <HAL_FDCAN_ActivateNotification>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d001      	beq.n	800379c <CAN_config+0xf8>
	  {
	    Error_Handler();
 8003798:	f000 fb52 	bl	8003e40 <Error_Handler>
	  }


	  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2);
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <CAN_config+0x134>)
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <CAN_config+0x144>)
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f001 fdc8 	bl	8005338 <HAL_FDCAN_ConfigFilter>
	  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <CAN_config+0x144>)
 80037aa:	0018      	movs	r0, r3
 80037ac:	f001 fe21 	bl	80053f2 <HAL_FDCAN_Start>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d001      	beq.n	80037b8 <CAN_config+0x114>
	  {
	   Error_Handler();
 80037b4:	f000 fb44 	bl	8003e40 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <CAN_config+0x144>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	2101      	movs	r1, #1
 80037be:	0018      	movs	r0, r3
 80037c0:	f001 ff64 	bl	800568c <HAL_FDCAN_ActivateNotification>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <CAN_config+0x128>
	  {
	    /* Notification Error */
	    Error_Handler();
 80037c8:	f000 fb3a 	bl	8003e40 <Error_Handler>
	  }
    
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000038 	.word	0x20000038
 80037d8:	20000050 	.word	0x20000050
 80037dc:	20000090 	.word	0x20000090
 80037e0:	2000076c 	.word	0x2000076c
 80037e4:	20000790 	.word	0x20000790
 80037e8:	200007f4 	.word	0x200007f4

080037ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f0:	f001 f98a 	bl	8004b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f4:	f000 f93e 	bl	8003a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f8:	f000 fb00 	bl	8003dfc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80037fc:	f000 f998 	bl	8003b30 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8003800:	f000 f9de 	bl	8003bc0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8003804:	f000 fa24 	bl	8003c50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  CAN_config();
 8003808:	f7ff ff4c 	bl	80036a4 <CAN_config>
  slot1.notif=led_standby;
 800380c:	4a94      	ldr	r2, [pc, #592]	; (8003a60 <main+0x274>)
 800380e:	23c4      	movs	r3, #196	; 0xc4
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	2101      	movs	r1, #1
 8003814:	54d1      	strb	r1, [r2, r3]
  slot2.notif=led_standby;
 8003816:	4a93      	ldr	r2, [pc, #588]	; (8003a64 <main+0x278>)
 8003818:	23c4      	movs	r3, #196	; 0xc4
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	2101      	movs	r1, #1
 800381e:	54d1      	strb	r1, [r2, r3]
  slot1.state = standby;
 8003820:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <main+0x274>)
 8003822:	2274      	movs	r2, #116	; 0x74
 8003824:	2101      	movs	r1, #1
 8003826:	5499      	strb	r1, [r3, r2]
  slot2.state=standby;
 8003828:	4b8e      	ldr	r3, [pc, #568]	; (8003a64 <main+0x278>)
 800382a:	2274      	movs	r2, #116	; 0x74
 800382c:	2101      	movs	r1, #1
 800382e:	5499      	strb	r1, [r3, r2]

  slot1.wake_trig=1;
 8003830:	4b8b      	ldr	r3, [pc, #556]	; (8003a60 <main+0x274>)
 8003832:	2201      	movs	r2, #1
 8003834:	705a      	strb	r2, [r3, #1]
  slot2.wake_trig=1;
 8003836:	4b8b      	ldr	r3, [pc, #556]	; (8003a64 <main+0x278>)
 8003838:	2201      	movs	r2, #1
 800383a:	705a      	strb	r2, [r3, #1]
  slot1.last_lock_state=1;
 800383c:	4b88      	ldr	r3, [pc, #544]	; (8003a60 <main+0x274>)
 800383e:	2201      	movs	r2, #1
 8003840:	731a      	strb	r2, [r3, #12]
  slot2.last_lock_state=1;
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <main+0x278>)
 8003844:	2201      	movs	r2, #1
 8003846:	731a      	strb	r2, [r3, #12]
  slot1.charger_start_DIS=1;
 8003848:	4b85      	ldr	r3, [pc, #532]	; (8003a60 <main+0x274>)
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]
  slot2.charger_start_DIS=1;
 8003850:	4b84      	ldr	r3, [pc, #528]	; (8003a64 <main+0x278>)
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]
  slot1.unlock_command=1;
 8003858:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <main+0x274>)
 800385a:	2201      	movs	r2, #1
 800385c:	721a      	strb	r2, [r3, #8]
  slot2.unlock_command=1;
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <main+0x278>)
 8003860:	2201      	movs	r2, #1
 8003862:	721a      	strb	r2, [r3, #8]
  slot1.batt_state=0x01;
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <main+0x274>)
 8003866:	2201      	movs	r2, #1
 8003868:	661a      	str	r2, [r3, #96]	; 0x60
  slot2.batt_state=0x01;
 800386a:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <main+0x278>)
 800386c:	2201      	movs	r2, #1
 800386e:	661a      	str	r2, [r3, #96]	; 0x60

  slot1.datasentflag=0;
 8003870:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <main+0x274>)
 8003872:	2200      	movs	r2, #0
 8003874:	679a      	str	r2, [r3, #120]	; 0x78
  slot2.datasentflag=1;
 8003876:	4b7b      	ldr	r3, [pc, #492]	; (8003a64 <main+0x278>)
 8003878:	2201      	movs	r2, #1
 800387a:	679a      	str	r2, [r3, #120]	; 0x78
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(slot1.notif)
 800387c:	4a78      	ldr	r2, [pc, #480]	; (8003a60 <main+0x274>)
 800387e:	23c4      	movs	r3, #196	; 0xc4
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d81d      	bhi.n	80038c4 <main+0xd8>
 8003888:	009a      	lsls	r2, r3, #2
 800388a:	4b77      	ldr	r3, [pc, #476]	; (8003a68 <main+0x27c>)
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	469f      	mov	pc, r3
	 	  {
	 	  case led_standby:
	 		  standby_led(&slot1);
 8003892:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <main+0x274>)
 8003894:	0018      	movs	r0, r3
 8003896:	f001 f8c7 	bl	8004a28 <standby_led>
	 		  break;
 800389a:	e018      	b.n	80038ce <main+0xe2>
	 	  case led_swap:
	 		  swap_led(&slot1);
 800389c:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <main+0x274>)
 800389e:	0018      	movs	r0, r3
 80038a0:	f001 f840 	bl	8004924 <swap_led>
	 		  break;
 80038a4:	e013      	b.n	80038ce <main+0xe2>
	 	  case led_charging:
	 		   charging_led(&slot1);
 80038a6:	4b6e      	ldr	r3, [pc, #440]	; (8003a60 <main+0x274>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 ff7f 	bl	80047ac <charging_led>
	 		   break;
 80038ae:	e00e      	b.n	80038ce <main+0xe2>
	 	  case led_fault:
	 		  fault_led(&slot1);
 80038b0:	4b6b      	ldr	r3, [pc, #428]	; (8003a60 <main+0x274>)
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 f89a 	bl	80049ec <fault_led>
	 		  break;
 80038b8:	e009      	b.n	80038ce <main+0xe2>
	 	  case led_ready_pick:
	 		  ready_pick_led(&slot1);
 80038ba:	4b69      	ldr	r3, [pc, #420]	; (8003a60 <main+0x274>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 ffe9 	bl	8004894 <ready_pick_led>
	 		  break;
 80038c2:	e004      	b.n	80038ce <main+0xe2>
	 	  default:
	 		  standby_led(&slot1);
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <main+0x274>)
 80038c6:	0018      	movs	r0, r3
 80038c8:	f001 f8ae 	bl	8004a28 <standby_led>
	 		  break;
 80038cc:	46c0      	nop			; (mov r8, r8)
	 	  }

	 	  switch(slot2.notif)
 80038ce:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <main+0x278>)
 80038d0:	23c4      	movs	r3, #196	; 0xc4
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d81d      	bhi.n	8003916 <main+0x12a>
 80038da:	009a      	lsls	r2, r3, #2
 80038dc:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <main+0x280>)
 80038de:	18d3      	adds	r3, r2, r3
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	469f      	mov	pc, r3
	 	  {
	 	  case led_standby:
	 		  standby_led(&slot2);
 80038e4:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <main+0x278>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 f89e 	bl	8004a28 <standby_led>
	 		  break;
 80038ec:	e018      	b.n	8003920 <main+0x134>
	 	  case led_swap:
	 		  swap_led(&slot2);
 80038ee:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <main+0x278>)
 80038f0:	0018      	movs	r0, r3
 80038f2:	f001 f817 	bl	8004924 <swap_led>
	 		  break;
 80038f6:	e013      	b.n	8003920 <main+0x134>
	 	  case led_charging:
	 		   charging_led(&slot2);
 80038f8:	4b5a      	ldr	r3, [pc, #360]	; (8003a64 <main+0x278>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 ff56 	bl	80047ac <charging_led>
	 		   break;
 8003900:	e00e      	b.n	8003920 <main+0x134>
	 	  case led_fault:
	 		  fault_led(&slot2);
 8003902:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <main+0x278>)
 8003904:	0018      	movs	r0, r3
 8003906:	f001 f871 	bl	80049ec <fault_led>
	 		  break;
 800390a:	e009      	b.n	8003920 <main+0x134>
	 	  case led_ready_pick:
	 		  ready_pick_led(&slot2);
 800390c:	4b55      	ldr	r3, [pc, #340]	; (8003a64 <main+0x278>)
 800390e:	0018      	movs	r0, r3
 8003910:	f000 ffc0 	bl	8004894 <ready_pick_led>
	 		  break;
 8003914:	e004      	b.n	8003920 <main+0x134>
	 	  default:
	 		  standby_led(&slot2);
 8003916:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <main+0x278>)
 8003918:	0018      	movs	r0, r3
 800391a:	f001 f885 	bl	8004a28 <standby_led>
	 		  break;
 800391e:	46c0      	nop			; (mov r8, r8)
	 	  }

	 	  switch(slot1.state)
 8003920:	4b4f      	ldr	r3, [pc, #316]	; (8003a60 <main+0x274>)
 8003922:	2274      	movs	r2, #116	; 0x74
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d032      	beq.n	8003990 <main+0x1a4>
 800392a:	dc3b      	bgt.n	80039a4 <main+0x1b8>
 800392c:	2b05      	cmp	r3, #5
 800392e:	d025      	beq.n	800397c <main+0x190>
 8003930:	dc38      	bgt.n	80039a4 <main+0x1b8>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d002      	beq.n	800393c <main+0x150>
 8003936:	2b02      	cmp	r3, #2
 8003938:	d00a      	beq.n	8003950 <main+0x164>
 800393a:	e033      	b.n	80039a4 <main+0x1b8>
	 			  {
	 			  case standby:
	 				  slot1.notif=led_standby;
 800393c:	4a48      	ldr	r2, [pc, #288]	; (8003a60 <main+0x274>)
 800393e:	23c4      	movs	r3, #196	; 0xc4
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	2101      	movs	r1, #1
 8003944:	54d1      	strb	r1, [r2, r3]
	 				  standby_mode(&slot1);
 8003946:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <main+0x274>)
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fa7e 	bl	8003e4a <standby_mode>
	 				  break;
 800394e:	e033      	b.n	80039b8 <main+0x1cc>
	 			  case charging:
	 				  if(slot1.SOC_batt<100&&slot1.charge_state==1)
 8003950:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <main+0x274>)
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	4946      	ldr	r1, [pc, #280]	; (8003a70 <main+0x284>)
 8003956:	1c18      	adds	r0, r3, #0
 8003958:	f7fc fd9a 	bl	8000490 <__aeabi_fcmplt>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d008      	beq.n	8003972 <main+0x186>
 8003960:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <main+0x274>)
 8003962:	795b      	ldrb	r3, [r3, #5]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <main+0x186>
	 				  slot1.notif=led_charging;
 8003968:	4a3d      	ldr	r2, [pc, #244]	; (8003a60 <main+0x274>)
 800396a:	23c4      	movs	r3, #196	; 0xc4
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	2103      	movs	r1, #3
 8003970:	54d1      	strb	r1, [r2, r3]
	 				  charging_mode(&slot1);
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <main+0x274>)
 8003974:	0018      	movs	r0, r3
 8003976:	f000 fb0d 	bl	8003f94 <charging_mode>
	 				  break;
 800397a:	e01d      	b.n	80039b8 <main+0x1cc>
	 			  case fault:
	 				  slot1.notif=led_fault;
 800397c:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <main+0x274>)
 800397e:	23c4      	movs	r3, #196	; 0xc4
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	2104      	movs	r1, #4
 8003984:	54d1      	strb	r1, [r2, r3]
	 				  fault_mode(&slot1);
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <main+0x274>)
 8003988:	0018      	movs	r0, r3
 800398a:	f000 fbaf 	bl	80040ec <fault_mode>
	 				  break;
 800398e:	e013      	b.n	80039b8 <main+0x1cc>
	 			  case swap:
	 				  slot1.notif=led_swap;
 8003990:	4a33      	ldr	r2, [pc, #204]	; (8003a60 <main+0x274>)
 8003992:	23c4      	movs	r3, #196	; 0xc4
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	2102      	movs	r1, #2
 8003998:	54d1      	strb	r1, [r2, r3]
	 				  swap_mode(&slot1);
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <main+0x274>)
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fa99 	bl	8003ed4 <swap_mode>
	 				  break;
 80039a2:	e009      	b.n	80039b8 <main+0x1cc>
	 			  default:
	 				  slot1.notif=standby;
 80039a4:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <main+0x274>)
 80039a6:	23c4      	movs	r3, #196	; 0xc4
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	2101      	movs	r1, #1
 80039ac:	54d1      	strb	r1, [r2, r3]
	 				  slot1.state = standby;
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <main+0x274>)
 80039b0:	2274      	movs	r2, #116	; 0x74
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
	 				  break;
 80039b6:	46c0      	nop			; (mov r8, r8)
	 			  }

	 		  switch(slot2.state)
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <main+0x278>)
 80039ba:	2274      	movs	r2, #116	; 0x74
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d032      	beq.n	8003a28 <main+0x23c>
 80039c2:	dc3b      	bgt.n	8003a3c <main+0x250>
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d025      	beq.n	8003a14 <main+0x228>
 80039c8:	dc38      	bgt.n	8003a3c <main+0x250>
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d002      	beq.n	80039d4 <main+0x1e8>
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d00a      	beq.n	80039e8 <main+0x1fc>
 80039d2:	e033      	b.n	8003a3c <main+0x250>
	 			  {
	 			  case standby:
	 				  slot2.notif=led_standby;
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <main+0x278>)
 80039d6:	23c4      	movs	r3, #196	; 0xc4
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	2101      	movs	r1, #1
 80039dc:	54d1      	strb	r1, [r2, r3]
	 				  standby_mode(&slot2);
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <main+0x278>)
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fa32 	bl	8003e4a <standby_mode>
	 				  break;
 80039e6:	e033      	b.n	8003a50 <main+0x264>
	 			  case charging:
	 				  if(slot2.SOC_batt<100&&slot2.charge_state==1)
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <main+0x278>)
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	4920      	ldr	r1, [pc, #128]	; (8003a70 <main+0x284>)
 80039ee:	1c18      	adds	r0, r3, #0
 80039f0:	f7fc fd4e 	bl	8000490 <__aeabi_fcmplt>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d008      	beq.n	8003a0a <main+0x21e>
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <main+0x278>)
 80039fa:	795b      	ldrb	r3, [r3, #5]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <main+0x21e>
	 				  slot2.notif=led_charging;
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <main+0x278>)
 8003a02:	23c4      	movs	r3, #196	; 0xc4
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	2103      	movs	r1, #3
 8003a08:	54d1      	strb	r1, [r2, r3]
	 				  charging_mode(&slot2);
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <main+0x278>)
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 fac1 	bl	8003f94 <charging_mode>
	 				  break;
 8003a12:	e01d      	b.n	8003a50 <main+0x264>
	 			  case fault:
	 				  slot2.notif=led_fault;
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <main+0x278>)
 8003a16:	23c4      	movs	r3, #196	; 0xc4
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	54d1      	strb	r1, [r2, r3]
	 				  fault_mode(&slot2);
 8003a1e:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <main+0x278>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fb63 	bl	80040ec <fault_mode>
	 				  break;
 8003a26:	e013      	b.n	8003a50 <main+0x264>
	 			  case swap:
	 				  slot2.notif=led_swap;
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <main+0x278>)
 8003a2a:	23c4      	movs	r3, #196	; 0xc4
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	2102      	movs	r1, #2
 8003a30:	54d1      	strb	r1, [r2, r3]
	 				  swap_mode(&slot2);
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <main+0x278>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 fa4d 	bl	8003ed4 <swap_mode>
	 				  break;
 8003a3a:	e009      	b.n	8003a50 <main+0x264>
	 			  default:
	 				  slot2.notif=standby;
 8003a3c:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <main+0x278>)
 8003a3e:	23c4      	movs	r3, #196	; 0xc4
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	2101      	movs	r1, #1
 8003a44:	54d1      	strb	r1, [r2, r3]
	 				  slot2.state = standby;
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <main+0x278>)
 8003a48:	2274      	movs	r2, #116	; 0x74
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
	 				  break;
 8003a4e:	46c0      	nop			; (mov r8, r8)
	 			  }
CAN_TX();
 8003a50:	f7ff f960 	bl	8002d14 <CAN_TX>
HAL_Delay(1000);
 8003a54:	23fa      	movs	r3, #250	; 0xfa
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f001 f8db 	bl	8004c14 <HAL_Delay>
	  switch(slot1.notif)
 8003a5e:	e70d      	b.n	800387c <main+0x90>
 8003a60:	200000b4 	.word	0x200000b4
 8003a64:	200003fc 	.word	0x200003fc
 8003a68:	080098b0 	.word	0x080098b0
 8003a6c:	080098c8 	.word	0x080098c8
 8003a70:	42c80000 	.word	0x42c80000

08003a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b095      	sub	sp, #84	; 0x54
 8003a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a7a:	2414      	movs	r4, #20
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	0018      	movs	r0, r3
 8003a80:	233c      	movs	r3, #60	; 0x3c
 8003a82:	001a      	movs	r2, r3
 8003a84:	2100      	movs	r1, #0
 8003a86:	f004 fde3 	bl	8008650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	2310      	movs	r3, #16
 8003a90:	001a      	movs	r2, r3
 8003a92:	2100      	movs	r1, #0
 8003a94:	f004 fddc 	bl	8008650 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f002 fabb 	bl	8006018 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	0052      	lsls	r2, r2, #1
 8003aae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003ab0:	0021      	movs	r1, r4
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	0292      	lsls	r2, r2, #10
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	0492      	lsls	r2, r2, #18
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0592      	lsls	r2, r2, #22
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	0018      	movs	r0, r3
 8003af2:	f002 fad1 	bl	8006098 <HAL_RCC_OscConfig>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d001      	beq.n	8003afe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003afa:	f000 f9a1 	bl	8003e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	2202      	movs	r2, #2
 8003b08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2102      	movs	r1, #2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f002 fe1c 	bl	8006758 <HAL_RCC_ClockConfig>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003b24:	f000 f98c 	bl	8003e40 <Error_Handler>
  }
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b015      	add	sp, #84	; 0x54
 8003b2e:	bd90      	pop	{r4, r7, pc}

08003b30 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <MX_FDCAN1_Init+0x8c>)
 8003b38:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b60:	2210      	movs	r2, #16
 8003b62:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b72:	2208      	movs	r2, #8
 8003b74:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <MX_FDCAN1_Init+0x88>)
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f001 fa62 	bl	800506c <HAL_FDCAN_Init>
 8003ba8:	1e03      	subs	r3, r0, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003bac:	f000 f948 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20000790 	.word	0x20000790
 8003bbc:	40006400 	.word	0x40006400

08003bc0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bc6:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <MX_FDCAN2_Init+0x8c>)
 8003bc8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 7;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 8;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c02:	2208      	movs	r2, #8
 8003c04:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <MX_FDCAN2_Init+0x88>)
 8003c32:	0018      	movs	r0, r3
 8003c34:	f001 fa1a 	bl	800506c <HAL_FDCAN_Init>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003c3c:	f000 f900 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	200007f4 	.word	0x200007f4
 8003c4c:	40006800 	.word	0x40006800

08003c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b09c      	sub	sp, #112	; 0x70
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c56:	2360      	movs	r3, #96	; 0x60
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	001a      	movs	r2, r3
 8003c60:	2100      	movs	r1, #0
 8003c62:	f004 fcf5 	bl	8008650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c66:	2354      	movs	r3, #84	; 0x54
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	230c      	movs	r3, #12
 8003c6e:	001a      	movs	r2, r3
 8003c70:	2100      	movs	r1, #0
 8003c72:	f004 fced 	bl	8008650 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c76:	2338      	movs	r3, #56	; 0x38
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	231c      	movs	r3, #28
 8003c7e:	001a      	movs	r2, r3
 8003c80:	2100      	movs	r1, #0
 8003c82:	f004 fce5 	bl	8008650 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	0018      	movs	r0, r3
 8003c8a:	2334      	movs	r3, #52	; 0x34
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f004 fcde 	bl	8008650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c94:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003c96:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <MX_TIM1_Init+0x1a4>)
 8003c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c9a:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca0:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ca6:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003ca8:	4a53      	ldr	r2, [pc, #332]	; (8003df8 <MX_TIM1_Init+0x1a8>)
 8003caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cbe:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f003 f90f 	bl	8006ee4 <HAL_TIM_Base_Init>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003cca:	f000 f8b9 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cce:	2160      	movs	r1, #96	; 0x60
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	0152      	lsls	r2, r2, #5
 8003cd6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cd8:	187a      	adds	r2, r7, r1
 8003cda:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cdc:	0011      	movs	r1, r2
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f003 fdae 	bl	8007840 <HAL_TIM_ConfigClockSource>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003ce8:	f000 f8aa 	bl	8003e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f003 f950 	bl	8006f94 <HAL_TIM_PWM_Init>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003cf8:	f000 f8a2 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cfc:	2154      	movs	r1, #84	; 0x54
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2200      	movs	r2, #0
 8003d08:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d10:	187a      	adds	r2, r7, r1
 8003d12:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f004 fb5a 	bl	80083d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003d20:	f000 f88e 	bl	8003e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d24:	2138      	movs	r1, #56	; 0x38
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2260      	movs	r2, #96	; 0x60
 8003d2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2200      	movs	r2, #0
 8003d30:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2200      	movs	r2, #0
 8003d48:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d50:	1879      	adds	r1, r7, r1
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003d54:	2204      	movs	r2, #4
 8003d56:	0018      	movs	r0, r3
 8003d58:	f003 fc72 	bl	8007640 <HAL_TIM_PWM_ConfigChannel>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003d60:	f000 f86e 	bl	8003e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d64:	2338      	movs	r3, #56	; 0x38
 8003d66:	18f9      	adds	r1, r7, r3
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f003 fc67 	bl	8007640 <HAL_TIM_PWM_ConfigChannel>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003d76:	f000 f863 	bl	8003e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	2280      	movs	r2, #128	; 0x80
 8003d9c:	0192      	lsls	r2, r2, #6
 8003d9e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	2200      	movs	r2, #0
 8003daa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0492      	lsls	r2, r2, #18
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dcc:	1d3a      	adds	r2, r7, #4
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f004 fb72 	bl	80084bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003dd8:	1e03      	subs	r3, r0, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8003ddc:	f000 f830 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <MX_TIM1_Init+0x1a0>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fb30 	bl	8004448 <HAL_TIM_MspPostInit>

}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b01c      	add	sp, #112	; 0x70
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000858 	.word	0x20000858
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	0000ffff 	.word	0x0000ffff

08003dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e08:	2102      	movs	r1, #2
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2202      	movs	r2, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e20:	2101      	movs	r1, #1
 8003e22:	430a      	orrs	r2, r1
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <MX_GPIO_Init+0x40>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]

}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	40021000 	.word	0x40021000

08003e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <Error_Handler+0x8>

08003e4a <standby_mode>:
extern enum step lastState;

extern enum step state2;
extern enum step lastState2;
void standby_mode(slot *Slot)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
	if(Slot->can_charger_trouble_state)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2230      	movs	r2, #48	; 0x30
 8003e56:	5c9b      	ldrb	r3, [r3, r2]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <standby_mode+0x26>
	{
		Slot->lastState=Slot->state;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2274      	movs	r2, #116	; 0x74
 8003e60:	5c99      	ldrb	r1, [r3, r2]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2275      	movs	r2, #117	; 0x75
 8003e66:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2274      	movs	r2, #116	; 0x74
 8003e6c:	2105      	movs	r1, #5
 8003e6e:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->unlock_command==1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7a1b      	ldrb	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <standby_mode+0x3a>
	{
		Slot->lock_state=0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	72da      	strb	r2, [r3, #11]
	}

	if(Slot->isBattery==1&&Slot->CAN_error_state==0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	789b      	ldrb	r3, [r3, #2]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d014      	beq.n	8003eb6 <standby_mode+0x6c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7a9b      	ldrb	r3, [r3, #10]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4053      	eors	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <standby_mode+0x6c>
	{
		Slot->lastState=Slot->state;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2274      	movs	r2, #116	; 0x74
 8003e9e:	5c99      	ldrb	r1, [r3, r2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2275      	movs	r2, #117	; 0x75
 8003ea4:	5499      	strb	r1, [r3, r2]
		Slot->state=swap;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2274      	movs	r2, #116	; 0x74
 8003eaa:	2106      	movs	r1, #6
 8003eac:	5499      	strb	r1, [r3, r2]
		Slot->wake_trig=0;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
 8003eb4:	e002      	b.n	8003ebc <standby_mode+0x72>
	}
	else
	{
		Slot->wake_trig=1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	705a      	strb	r2, [r3, #1]

	}
	if(Slot->hardware_failure)Slot->state=fault;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7a5b      	ldrb	r3, [r3, #9]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <standby_mode+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2274      	movs	r2, #116	; 0x74
 8003ec8:	2105      	movs	r1, #5
 8003eca:	5499      	strb	r1, [r3, r2]
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <swap_mode>:

void swap_mode(slot *Slot)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2222      	movs	r2, #34	; 0x22
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <swap_mode+0x1c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2223      	movs	r2, #35	; 0x23
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <swap_mode+0x24>
	Slot->state=standby;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2274      	movs	r2, #116	; 0x74
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	5499      	strb	r1, [r3, r2]
	if(Slot->lock_command)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	79db      	ldrb	r3, [r3, #7]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <swap_mode+0x3e>
	{
		Slot->lock_state=1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	72da      	strb	r2, [r3, #11]
		Slot->lock_command=0;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	71da      	strb	r2, [r3, #7]
	}
	if(Slot->unlock_command)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7a1b      	ldrb	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <swap_mode+0x58>
	{
		Slot->lock_state=0;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	72da      	strb	r2, [r3, #11]
		Slot->unlock_command=0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	721a      	strb	r2, [r3, #8]
	}
	if(Slot->lock_state==1&&Slot->charge_command==1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	799b      	ldrb	r3, [r3, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <swap_mode+0x7c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <swap_mode+0x7c>
	{
		Slot->lastState=Slot->state;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2274      	movs	r2, #116	; 0x74
 8003f40:	5c99      	ldrb	r1, [r3, r2]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2275      	movs	r2, #117	; 0x75
 8003f46:	5499      	strb	r1, [r3, r2]
		Slot->state=charging;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2274      	movs	r2, #116	; 0x74
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->hardware_failure)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7a5b      	ldrb	r3, [r3, #9]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <swap_mode+0x98>
	{
		Slot->lastState=Slot->state;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2274      	movs	r2, #116	; 0x74
 8003f5c:	5c99      	ldrb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2275      	movs	r2, #117	; 0x75
 8003f62:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2274      	movs	r2, #116	; 0x74
 8003f68:	2105      	movs	r1, #5
 8003f6a:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->can_charger_trouble_state==1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2230      	movs	r2, #48	; 0x30
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <swap_mode+0xb6>
	{
		Slot->lastState=Slot->state;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2274      	movs	r2, #116	; 0x74
 8003f7a:	5c99      	ldrb	r1, [r3, r2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2275      	movs	r2, #117	; 0x75
 8003f80:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2274      	movs	r2, #116	; 0x74
 8003f86:	2105      	movs	r1, #5
 8003f88:	5499      	strb	r1, [r3, r2]
	}

}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <charging_mode>:

void charging_mode(slot *Slot)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	if (Slot->isBattery)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	789b      	ldrb	r3, [r3, #2]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05c      	beq.n	800405e <charging_mode+0xca>
	{
		if(Slot->SOC_batt>=100||Slot->stop_charge_command==1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	494f      	ldr	r1, [pc, #316]	; (80040e8 <charging_mode+0x154>)
 8003faa:	1c18      	adds	r0, r3, #0
 8003fac:	f7fc fa8e 	bl	80004cc <__aeabi_fcmpge>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d103      	bne.n	8003fbc <charging_mode+0x28>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <charging_mode+0x4c>
		{
			Slot->stop_charge_command=0;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
			Slot->batt_state=0x01;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60
			Slot->charger_start_DIS=1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	; 0x24
 8003fcc:	2101      	movs	r1, #1
 8003fce:	5499      	strb	r1, [r3, r2]
			Slot->charge_state=0;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	715a      	strb	r2, [r3, #5]
			Slot->notif=led_standby;
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	23c4      	movs	r3, #196	; 0xc4
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	2101      	movs	r1, #1
 8003fde:	54d1      	strb	r1, [r2, r3]
		}
		if(Slot->unlock_command)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7a1b      	ldrb	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d028      	beq.n	800403a <charging_mode+0xa6>
		{
			if(Slot->charge_state==0)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	795b      	ldrb	r3, [r3, #5]
 8003fec:	2201      	movs	r2, #1
 8003fee:	4053      	eors	r3, r2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d021      	beq.n	800403a <charging_mode+0xa6>
			{
				Slot->notif=led_ready_pick;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	23c4      	movs	r3, #196	; 0xc4
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	2105      	movs	r1, #5
 8003ffe:	54d1      	strb	r1, [r2, r3]
				if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2222      	movs	r2, #34	; 0x22
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <charging_mode+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2223      	movs	r2, #35	; 0x23
 800400e:	5c9b      	ldrb	r3, [r3, r2]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <charging_mode+0xa6>
				{
					Slot->unlock_command=0;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	721a      	strb	r2, [r3, #8]
					Slot->lock_state=0;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	719a      	strb	r2, [r3, #6]
					Slot->current_lock_state=0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	72da      	strb	r2, [r3, #11]
					Slot->lastState=Slot->state;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2274      	movs	r2, #116	; 0x74
 800402a:	5c99      	ldrb	r1, [r3, r2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2275      	movs	r2, #117	; 0x75
 8004030:	5499      	strb	r1, [r3, r2]
					Slot->state=standby;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2274      	movs	r2, #116	; 0x74
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]

				}

			}
		}
		if(Slot->charge_command)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <charging_mode+0xf0>
		{
			//start batre and charge to charge
			Slot->batt_state=0x05;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2205      	movs	r2, #5
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
			Slot->charger_start_DIS=0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	; 0x24
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]
			Slot->charge_state=1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	715a      	strb	r2, [r3, #5]
			Slot->charge_command=0;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	711a      	strb	r2, [r3, #4]
 800405c:	e012      	b.n	8004084 <charging_mode+0xf0>
		}

	}
	else
	{
		Slot->unlock_command=0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	721a      	strb	r2, [r3, #8]
		Slot->lock_state=0;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	719a      	strb	r2, [r3, #6]
		Slot->current_lock_state=0;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	72da      	strb	r2, [r3, #11]
		Slot->lastState=Slot->state;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2274      	movs	r2, #116	; 0x74
 8004074:	5c99      	ldrb	r1, [r3, r2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2275      	movs	r2, #117	; 0x75
 800407a:	5499      	strb	r1, [r3, r2]
		Slot->state=standby;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2274      	movs	r2, #116	; 0x74
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->hardware_failure)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7a5b      	ldrb	r3, [r3, #9]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <charging_mode+0x10c>
	{
		Slot->lastState=Slot->state;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2274      	movs	r2, #116	; 0x74
 8004090:	5c99      	ldrb	r1, [r3, r2]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2275      	movs	r2, #117	; 0x75
 8004096:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2274      	movs	r2, #116	; 0x74
 800409c:	2105      	movs	r1, #5
 800409e:	5499      	strb	r1, [r3, r2]
	}
	if(Slot->unlock_command==0 && (Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1) )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7a1b      	ldrb	r3, [r3, #8]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4053      	eors	r3, r2
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <charging_mode+0x14c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	5c9b      	ldrb	r3, [r3, r2]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <charging_mode+0x138>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2223      	movs	r2, #35	; 0x23
 80040bc:	5c9b      	ldrb	r3, [r3, r2]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d104      	bne.n	80040cc <charging_mode+0x138>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2230      	movs	r2, #48	; 0x30
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <charging_mode+0x14c>
	{
		Slot->lastState=Slot->state;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2274      	movs	r2, #116	; 0x74
 80040d0:	5c99      	ldrb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2275      	movs	r2, #117	; 0x75
 80040d6:	5499      	strb	r1, [r3, r2]
		Slot->state=fault;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2274      	movs	r2, #116	; 0x74
 80040dc:	2105      	movs	r1, #5
 80040de:	5499      	strb	r1, [r3, r2]
	}
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	42c80000 	.word	0x42c80000

080040ec <fault_mode>:
{

}

void fault_mode(slot *Slot)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	if(Slot->hardware_failure)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7a5b      	ldrb	r3, [r3, #9]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <fault_mode+0x20>
	{
		Slot->batt_state=0x01;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
		Slot->charger_start_DIS=1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2224      	movs	r2, #36	; 0x24
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
			}
		}

	}
	else Slot->state=Slot->lastState;
}
 800410a:	e05e      	b.n	80041ca <fault_mode+0xde>
	else if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2222      	movs	r2, #34	; 0x22
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <fault_mode+0x3e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2223      	movs	r2, #35	; 0x23
 800411a:	5c9b      	ldrb	r3, [r3, r2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <fault_mode+0x3e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2230      	movs	r2, #48	; 0x30
 8004124:	5c9b      	ldrb	r3, [r3, r2]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d047      	beq.n	80041ba <fault_mode+0xce>
		if(Slot->lastState==standby)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2275      	movs	r2, #117	; 0x75
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10d      	bne.n	8004150 <fault_mode+0x64>
			if(Slot->can_charger_trouble_state==1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2230      	movs	r2, #48	; 0x30
 8004138:	5c9b      	ldrb	r3, [r3, r2]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <fault_mode+0x5a>
				Slot->CAN_error_state=1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 8004144:	e040      	b.n	80041c8 <fault_mode+0xdc>
			else Slot->state=standby;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2274      	movs	r2, #116	; 0x74
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]
		if(Slot->lastState==standby)
 800414e:	e03b      	b.n	80041c8 <fault_mode+0xdc>
		else if(Slot->lastState==swap)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2275      	movs	r2, #117	; 0x75
 8004154:	5c9b      	ldrb	r3, [r3, r2]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d108      	bne.n	800416c <fault_mode+0x80>
			if(Slot->can_charger_trouble_state==1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2230      	movs	r2, #48	; 0x30
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d031      	beq.n	80041c8 <fault_mode+0xdc>
				Slot->CAN_error_state=1;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 800416a:	e02d      	b.n	80041c8 <fault_mode+0xdc>
		else if(Slot->lastState==charging)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2275      	movs	r2, #117	; 0x75
 8004170:	5c9b      	ldrb	r3, [r3, r2]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d128      	bne.n	80041c8 <fault_mode+0xdc>
			if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2222      	movs	r2, #34	; 0x22
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <fault_mode+0x9e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2223      	movs	r2, #35	; 0x23
 8004184:	5c9b      	ldrb	r3, [r3, r2]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <fault_mode+0xa8>
			Slot->state=theft;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2274      	movs	r2, #116	; 0x74
 800418e:	2104      	movs	r1, #4
 8004190:	5499      	strb	r1, [r3, r2]
		if(Slot->lastState==standby)
 8004192:	e019      	b.n	80041c8 <fault_mode+0xdc>
			else if(Slot->can_batt_trouble_state==1||Slot->can_batt2_trouble_state==1||Slot->can_charger_trouble_state==1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2222      	movs	r2, #34	; 0x22
 8004198:	5c9b      	ldrb	r3, [r3, r2]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <fault_mode+0xc6>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2223      	movs	r2, #35	; 0x23
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <fault_mode+0xc6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2230      	movs	r2, #48	; 0x30
 80041ac:	5c9b      	ldrb	r3, [r3, r2]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <fault_mode+0xdc>
				Slot->CAN_error_state=1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	729a      	strb	r2, [r3, #10]
		if(Slot->lastState==standby)
 80041b8:	e006      	b.n	80041c8 <fault_mode+0xdc>
	else Slot->state=Slot->lastState;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2275      	movs	r2, #117	; 0x75
 80041be:	5c99      	ldrb	r1, [r3, r2]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2274      	movs	r2, #116	; 0x74
 80041c4:	5499      	strb	r1, [r3, r2]
}
 80041c6:	e000      	b.n	80041ca <fault_mode+0xde>
		if(Slot->lastState==standby)
 80041c8:	46c0      	nop			; (mov r8, r8)
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b002      	add	sp, #8
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_MspInit+0x44>)
 80041dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_MspInit+0x44>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_MspInit+0x44>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2201      	movs	r2, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_MspInit+0x44>)
 80041f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_MspInit+0x44>)
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	0549      	lsls	r1, r1, #21
 80041fc:	430a      	orrs	r2, r1
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_MspInit+0x44>)
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	4013      	ands	r3, r2
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b002      	add	sp, #8
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b09f      	sub	sp, #124	; 0x7c
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	2364      	movs	r3, #100	; 0x64
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	0018      	movs	r0, r3
 800422a:	2314      	movs	r3, #20
 800422c:	001a      	movs	r2, r3
 800422e:	2100      	movs	r1, #0
 8004230:	f004 fa0e 	bl	8008650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004234:	2418      	movs	r4, #24
 8004236:	193b      	adds	r3, r7, r4
 8004238:	0018      	movs	r0, r3
 800423a:	234c      	movs	r3, #76	; 0x4c
 800423c:	001a      	movs	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	f004 fa06 	bl	8008650 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5f      	ldr	r2, [pc, #380]	; (80043c8 <HAL_FDCAN_MspInit+0x1ac>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d15a      	bne.n	8004304 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800424e:	193b      	adds	r3, r7, r4
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	0492      	lsls	r2, r2, #18
 8004254:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004256:	193b      	adds	r3, r7, r4
 8004258:	2200      	movs	r2, #0
 800425a:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800425c:	193b      	adds	r3, r7, r4
 800425e:	0018      	movs	r0, r3
 8004260:	f002 fc04 	bl	8006a6c <HAL_RCCEx_PeriphCLKConfig>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d001      	beq.n	800426c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004268:	f7ff fdea 	bl	8003e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800426c:	4b57      	ldr	r3, [pc, #348]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	4b56      	ldr	r3, [pc, #344]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 8004274:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004276:	4b55      	ldr	r3, [pc, #340]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10d      	bne.n	800429a <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800427e:	4b54      	ldr	r3, [pc, #336]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004282:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	0149      	lsls	r1, r1, #5
 8004288:	430a      	orrs	r2, r1
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 800428e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	015b      	lsls	r3, r3, #5
 8004294:	4013      	ands	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 800429c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429e:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 80042a0:	2101      	movs	r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80042b2:	2164      	movs	r1, #100	; 0x64
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	22c0      	movs	r2, #192	; 0xc0
 80042b8:	0152      	lsls	r2, r2, #5
 80042ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	2202      	movs	r2, #2
 80042c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	187b      	adds	r3, r7, r1
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	2203      	movs	r2, #3
 80042d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	187a      	adds	r2, r7, r1
 80042d6:	23a0      	movs	r3, #160	; 0xa0
 80042d8:	05db      	lsls	r3, r3, #23
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f001 fd2f 	bl	8005d40 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2015      	movs	r0, #21
 80042e8:	f000 fd64 	bl	8004db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80042ec:	2015      	movs	r0, #21
 80042ee:	f000 fd76 	bl	8004dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2100      	movs	r1, #0
 80042f6:	2016      	movs	r0, #22
 80042f8:	f000 fd5c 	bl	8004db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80042fc:	2016      	movs	r0, #22
 80042fe:	f000 fd6e 	bl	8004dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004302:	e05d      	b.n	80043c0 <HAL_FDCAN_MspInit+0x1a4>
  else if(hfdcan->Instance==FDCAN2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a32      	ldr	r2, [pc, #200]	; (80043d4 <HAL_FDCAN_MspInit+0x1b8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d158      	bne.n	80043c0 <HAL_FDCAN_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800430e:	2118      	movs	r1, #24
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0492      	lsls	r2, r2, #18
 8004316:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004318:	187b      	adds	r3, r7, r1
 800431a:	2200      	movs	r2, #0
 800431c:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800431e:	187b      	adds	r3, r7, r1
 8004320:	0018      	movs	r0, r3
 8004322:	f002 fba3 	bl	8006a6c <HAL_RCCEx_PeriphCLKConfig>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 800432a:	f7ff fd89 	bl	8003e40 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 8004336:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004338:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_FDCAN_MspInit+0x1b0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10d      	bne.n	800435c <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	0149      	lsls	r1, r1, #5
 800434a:	430a      	orrs	r2, r1
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	015b      	lsls	r3, r3, #5
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 800435e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 8004362:	2102      	movs	r1, #2
 8004364:	430a      	orrs	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_FDCAN_MspInit+0x1b4>)
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	2202      	movs	r2, #2
 800436e:	4013      	ands	r3, r2
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004374:	2164      	movs	r1, #100	; 0x64
 8004376:	187b      	adds	r3, r7, r1
 8004378:	2203      	movs	r2, #3
 800437a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437c:	187b      	adds	r3, r7, r1
 800437e:	2202      	movs	r2, #2
 8004380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	187b      	adds	r3, r7, r1
 800438a:	2200      	movs	r2, #0
 800438c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 800438e:	187b      	adds	r3, r7, r1
 8004390:	2203      	movs	r2, #3
 8004392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004394:	187b      	adds	r3, r7, r1
 8004396:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <HAL_FDCAN_MspInit+0x1bc>)
 8004398:	0019      	movs	r1, r3
 800439a:	0010      	movs	r0, r2
 800439c:	f001 fcd0 	bl	8005d40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80043a0:	2200      	movs	r2, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	2015      	movs	r0, #21
 80043a6:	f000 fd05 	bl	8004db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80043aa:	2015      	movs	r0, #21
 80043ac:	f000 fd17 	bl	8004dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2100      	movs	r1, #0
 80043b4:	2016      	movs	r0, #22
 80043b6:	f000 fcfd 	bl	8004db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80043ba:	2016      	movs	r0, #22
 80043bc:	f000 fd0f 	bl	8004dde <HAL_NVIC_EnableIRQ>
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b01f      	add	sp, #124	; 0x7c
 80043c6:	bd90      	pop	{r4, r7, pc}
 80043c8:	40006400 	.word	0x40006400
 80043cc:	200008a4 	.word	0x200008a4
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40006800 	.word	0x40006800
 80043d8:	50000400 	.word	0x50000400

080043dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b097      	sub	sp, #92	; 0x5c
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043e4:	240c      	movs	r4, #12
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	0018      	movs	r0, r3
 80043ea:	234c      	movs	r3, #76	; 0x4c
 80043ec:	001a      	movs	r2, r3
 80043ee:	2100      	movs	r1, #0
 80043f0:	f004 f92e 	bl	8008650 <memset>
  if(htim_base->Instance==TIM1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_TIM_Base_MspInit+0x64>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d11c      	bne.n	8004438 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80043fe:	193b      	adds	r3, r7, r4
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	0392      	lsls	r2, r2, #14
 8004404:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004406:	193b      	adds	r3, r7, r4
 8004408:	2200      	movs	r2, #0
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800440c:	193b      	adds	r3, r7, r4
 800440e:	0018      	movs	r0, r3
 8004410:	f002 fb2c 	bl	8006a6c <HAL_RCCEx_PeriphCLKConfig>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004418:	f7ff fd12 	bl	8003e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_TIM_Base_MspInit+0x68>)
 800441e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_TIM_Base_MspInit+0x68>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0109      	lsls	r1, r1, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_TIM_Base_MspInit+0x68>)
 800442c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4013      	ands	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b017      	add	sp, #92	; 0x5c
 800443e:	bd90      	pop	{r4, r7, pc}
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40021000 	.word	0x40021000

08004448 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	240c      	movs	r4, #12
 8004452:	193b      	adds	r3, r7, r4
 8004454:	0018      	movs	r0, r3
 8004456:	2314      	movs	r3, #20
 8004458:	001a      	movs	r2, r3
 800445a:	2100      	movs	r1, #0
 800445c:	f004 f8f8 	bl	8008650 <memset>
  if(htim->Instance==TIM1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <HAL_TIM_MspPostInit+0x70>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d121      	bne.n	80044ae <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_TIM_MspPostInit+0x74>)
 800446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <HAL_TIM_MspPostInit+0x74>)
 8004470:	2102      	movs	r1, #2
 8004472:	430a      	orrs	r2, r1
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_TIM_MspPostInit+0x74>)
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004482:	0021      	movs	r1, r4
 8004484:	187b      	adds	r3, r7, r1
 8004486:	2248      	movs	r2, #72	; 0x48
 8004488:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	187b      	adds	r3, r7, r1
 800448c:	2202      	movs	r2, #2
 800448e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	187b      	adds	r3, r7, r1
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	187b      	adds	r3, r7, r1
 8004498:	2200      	movs	r2, #0
 800449a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800449c:	187b      	adds	r3, r7, r1
 800449e:	2201      	movs	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <HAL_TIM_MspPostInit+0x78>)
 80044a6:	0019      	movs	r1, r3
 80044a8:	0010      	movs	r0, r2
 80044aa:	f001 fc49 	bl	8005d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b009      	add	sp, #36	; 0x24
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40021000 	.word	0x40021000
 80044c0:	50000400 	.word	0x50000400

080044c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044c8:	e7fe      	b.n	80044c8 <NMI_Handler+0x4>

080044ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ce:	e7fe      	b.n	80044ce <HardFault_Handler+0x4>

080044d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f000 fb78 	bl	8004bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 80044fa:	0018      	movs	r0, r3
 80044fc:	f001 f99c 	bl	8005838 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8004502:	0018      	movs	r0, r3
 8004504:	f001 f998 	bl	8005838 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	20000790 	.word	0x20000790
 8004514:	200007f4 	.word	0x200007f4

08004518 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 800451e:	0018      	movs	r0, r3
 8004520:	f001 f98a 	bl	8005838 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8004526:	0018      	movs	r0, r3
 8004528:	f001 f986 	bl	8005838 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	20000790 	.word	0x20000790
 8004538:	200007f4 	.word	0x200007f4

0800453c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <Set_LED>:
extern DMA_HandleTypeDef hdma_tim1_ch3;
extern DMA_HandleTypeDef hdma_tim1_ch2;
extern slot slot1,slot2;

void Set_LED (slot *Slot,int LEDnum, int Red, int Green, int Blue)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
	Slot->LED_Data[LEDnum][0] = LEDnum;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	b2d9      	uxtb	r1, r3
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	331e      	adds	r3, #30
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	3304      	adds	r3, #4
 8004564:	1c0a      	adds	r2, r1, #0
 8004566:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][1] = Green;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2d8      	uxtb	r0, r3
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	217d      	movs	r1, #125	; 0x7d
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	185b      	adds	r3, r3, r1
 8004578:	1c02      	adds	r2, r0, #0
 800457a:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][2] = Red;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	b2d8      	uxtb	r0, r3
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	217e      	movs	r1, #126	; 0x7e
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	185b      	adds	r3, r3, r1
 800458c:	1c02      	adds	r2, r0, #0
 800458e:	701a      	strb	r2, [r3, #0]
	Slot->LED_Data[LEDnum][3] = Blue;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	b2d8      	uxtb	r0, r3
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	217f      	movs	r1, #127	; 0x7f
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	185b      	adds	r3, r3, r1
 80045a0:	1c02      	adds	r2, r0, #0
 80045a2:	701a      	strb	r2, [r3, #0]
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}

080045ac <Set_Brightness>:
#define PI 3.14159265
void Set_Brightness (slot *Slot,int brightness)  // 0-45
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b2d      	cmp	r3, #45	; 0x2d
 80045ba:	dd01      	ble.n	80045c0 <Set_Brightness+0x14>
 80045bc:	232d      	movs	r3, #45	; 0x2d
 80045be:	603b      	str	r3, [r7, #0]
	for (int i=0; i<MAX_LED; i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e068      	b.n	8004698 <Set_Brightness+0xec>
	{
		Slot->LED_Mod[i][0] = Slot->LED_Data[i][0];
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	331e      	adds	r3, #30
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	3304      	adds	r3, #4
 80045d2:	7819      	ldrb	r1, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3328      	adds	r3, #40	; 0x28
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	18d3      	adds	r3, r2, r3
 80045de:	3304      	adds	r3, #4
 80045e0:	1c0a      	adds	r2, r1, #0
 80045e2:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80045e4:	2301      	movs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e050      	b.n	800468c <Set_Brightness+0xe0>
		{
			float angle = 90-brightness;  // in degrees
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	225a      	movs	r2, #90	; 0x5a
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fc fc67 	bl	8000ec4 <__aeabi_i2f>
 80045f6:	1c03      	adds	r3, r0, #0
 80045f8:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7fe fa52 	bl	8002aa4 <__aeabi_f2d>
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <Set_Brightness+0xfc>)
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <Set_Brightness+0x100>)
 8004604:	f7fd fbea 	bl	8001ddc <__aeabi_dmul>
 8004608:	0002      	movs	r2, r0
 800460a:	000b      	movs	r3, r1
 800460c:	0010      	movs	r0, r2
 800460e:	0019      	movs	r1, r3
 8004610:	2200      	movs	r2, #0
 8004612:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <Set_Brightness+0x104>)
 8004614:	f7fc ffe0 	bl	80015d8 <__aeabi_ddiv>
 8004618:	0002      	movs	r2, r0
 800461a:	000b      	movs	r3, r1
 800461c:	0010      	movs	r0, r2
 800461e:	0019      	movs	r1, r3
 8004620:	f7fe fa88 	bl	8002b34 <__aeabi_d2f>
 8004624:	1c03      	adds	r3, r0, #0
 8004626:	60fb      	str	r3, [r7, #12]
			Slot->LED_Mod[i][j] = (Slot->LED_Data[i][j])/(tan(angle));
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	217c      	movs	r1, #124	; 0x7c
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	18d2      	adds	r2, r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	18d3      	adds	r3, r2, r3
 8004636:	185b      	adds	r3, r3, r1
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	0018      	movs	r0, r3
 800463c:	f7fe fa02 	bl	8002a44 <__aeabi_i2d>
 8004640:	0004      	movs	r4, r0
 8004642:	000d      	movs	r5, r1
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7fe fa2d 	bl	8002aa4 <__aeabi_f2d>
 800464a:	0002      	movs	r2, r0
 800464c:	000b      	movs	r3, r1
 800464e:	0010      	movs	r0, r2
 8004650:	0019      	movs	r1, r3
 8004652:	f004 f805 	bl	8008660 <tan>
 8004656:	0002      	movs	r2, r0
 8004658:	000b      	movs	r3, r1
 800465a:	0020      	movs	r0, r4
 800465c:	0029      	movs	r1, r5
 800465e:	f7fc ffbb 	bl	80015d8 <__aeabi_ddiv>
 8004662:	0002      	movs	r2, r0
 8004664:	000b      	movs	r3, r1
 8004666:	0010      	movs	r0, r2
 8004668:	0019      	movs	r1, r3
 800466a:	f7fb ff51 	bl	8000510 <__aeabi_d2uiz>
 800466e:	0003      	movs	r3, r0
 8004670:	b2d8      	uxtb	r0, r3
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	21a4      	movs	r1, #164	; 0xa4
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	18d2      	adds	r2, r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	185b      	adds	r3, r3, r1
 8004682:	1c02      	adds	r2, r0, #0
 8004684:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b03      	cmp	r3, #3
 8004690:	ddab      	ble.n	80045ea <Set_Brightness+0x3e>
	for (int i=0; i<MAX_LED; i++)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b09      	cmp	r3, #9
 800469c:	dd93      	ble.n	80045c6 <Set_Brightness+0x1a>
		}
	}

#endif

}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b006      	add	sp, #24
 80046a6:	bdb0      	pop	{r4, r5, r7, pc}
 80046a8:	53c8d4f1 	.word	0x53c8d4f1
 80046ac:	400921fb 	.word	0x400921fb
 80046b0:	40668000 	.word	0x40668000

080046b4 <WS2812_Send>:
void WS2812_Send (void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e041      	b.n	8004748 <WS2812_Send+0x94>
	{
	  if (USE_BRIGHTNESS)
	  {
			color = ((slot1.LED_Mod[i][1]<<16) | (slot1.LED_Mod[i][2]<<8) | (slot1.LED_Mod[i][3]));
 80046c4:	4a35      	ldr	r2, [pc, #212]	; (800479c <WS2812_Send+0xe8>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	21a5      	movs	r1, #165	; 0xa5
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	18d3      	adds	r3, r2, r3
 80046ce:	185b      	adds	r3, r3, r1
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	041a      	lsls	r2, r3, #16
 80046d4:	4931      	ldr	r1, [pc, #196]	; (800479c <WS2812_Send+0xe8>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	20a6      	movs	r0, #166	; 0xa6
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	18cb      	adds	r3, r1, r3
 80046de:	181b      	adds	r3, r3, r0
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	4313      	orrs	r3, r2
 80046e6:	492d      	ldr	r1, [pc, #180]	; (800479c <WS2812_Send+0xe8>)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	20a7      	movs	r0, #167	; 0xa7
 80046ec:	0092      	lsls	r2, r2, #2
 80046ee:	188a      	adds	r2, r1, r2
 80046f0:	1812      	adds	r2, r2, r0
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	607b      	str	r3, [r7, #4]
	  {
			color = ((slot1.LED_Data[i][1]<<16) | (slot1.LED_Data[i][2]<<8) | (slot1.LED_Data[i][3]));
	  }


		for (int i=23; i>=0; i--)
 80046f8:	2317      	movs	r3, #23
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e01e      	b.n	800473c <WS2812_Send+0x88>
		{
			if (color&(1<<i))
 80046fe:	2201      	movs	r2, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	409a      	lsls	r2, r3
 8004704:	0013      	movs	r3, r2
 8004706:	001a      	movs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4013      	ands	r3, r2
 800470c:	d008      	beq.n	8004720 <WS2812_Send+0x6c>
			{
				slot1.pwmData[indx] = 51;  // 2/3 of 79
 800470e:	4a23      	ldr	r2, [pc, #140]	; (800479c <WS2812_Send+0xe8>)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3364      	adds	r3, #100	; 0x64
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	18d3      	adds	r3, r2, r3
 8004718:	3304      	adds	r3, #4
 800471a:	2233      	movs	r2, #51	; 0x33
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e007      	b.n	8004730 <WS2812_Send+0x7c>
			}

			else slot1.pwmData[indx] = 29;  // 1/3 of 79
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <WS2812_Send+0xe8>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3364      	adds	r3, #100	; 0x64
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	3304      	adds	r3, #4
 800472c:	221d      	movs	r2, #29
 800472e:	801a      	strh	r2, [r3, #0]

			indx++;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3301      	adds	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3b01      	subs	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dadd      	bge.n	80046fe <WS2812_Send+0x4a>
	for (int i= 0; i<MAX_LED; i++)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3301      	adds	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b09      	cmp	r3, #9
 800474c:	ddba      	ble.n	80046c4 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	e00d      	b.n	8004770 <WS2812_Send+0xbc>
	{
		slot1.pwmData[indx] = 0;
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <WS2812_Send+0xe8>)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3364      	adds	r3, #100	; 0x64
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	18d3      	adds	r3, r2, r3
 800475e:	3304      	adds	r3, #4
 8004760:	2200      	movs	r2, #0
 8004762:	801a      	strh	r2, [r3, #0]
		indx++;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3301      	adds	r3, #1
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b31      	cmp	r3, #49	; 0x31
 8004774:	ddee      	ble.n	8004754 <WS2812_Send+0xa0>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)slot1.pwmData, indx);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	b29b      	uxth	r3, r3
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <WS2812_Send+0xec>)
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <WS2812_Send+0xf0>)
 800477e:	2108      	movs	r1, #8
 8004780:	f002 fc68 	bl	8007054 <HAL_TIM_PWM_Start_DMA>
	while (!slot1.datasentflag){};
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <WS2812_Send+0xe8>)
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0fb      	beq.n	8004786 <WS2812_Send+0xd2>
	slot2.datasentflag = 0;
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <WS2812_Send+0xf4>)
 8004790:	2200      	movs	r2, #0
 8004792:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bd80      	pop	{r7, pc}
 800479c:	200000b4 	.word	0x200000b4
 80047a0:	20000180 	.word	0x20000180
 80047a4:	20000858 	.word	0x20000858
 80047a8:	200003fc 	.word	0x200003fc

080047ac <charging_led>:

	while (!slot2.datasentflag){};
	slot1.datasentflag = 0;
}
void charging_led(slot *Slot)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
	int i=Slot->SOC_batt/10;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	4935      	ldr	r1, [pc, #212]	; (8004890 <charging_led+0xe4>)
 80047ba:	1c18      	adds	r0, r3, #0
 80047bc:	f7fb fec6 	bl	800054c <__aeabi_fdiv>
 80047c0:	1c03      	adds	r3, r0, #0
 80047c2:	1c18      	adds	r0, r3, #0
 80047c4:	f7fc fb5e 	bl	8000e84 <__aeabi_f2iz>
 80047c8:	0003      	movs	r3, r0
 80047ca:	60bb      	str	r3, [r7, #8]
	for (int j=0;j<=MAX_LED;j++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e01d      	b.n	800480e <charging_led+0x62>
	{

		if(j<i)Set_LED(Slot,j,255,0,0);
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	da08      	bge.n	80047ec <charging_led+0x40>
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	2300      	movs	r3, #0
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	f7ff feae 	bl	8004546 <Set_LED>
 80047ea:	e00d      	b.n	8004808 <charging_led+0x5c>
		else if(j==i)asm ("nop");
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d101      	bne.n	80047f8 <charging_led+0x4c>
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	e007      	b.n	8004808 <charging_led+0x5c>
		else Set_LED(Slot,j,0,0,0);
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	2300      	movs	r3, #0
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2300      	movs	r3, #0
 8004802:	2200      	movs	r2, #0
 8004804:	f7ff fe9f 	bl	8004546 <Set_LED>
	for (int j=0;j<=MAX_LED;j++)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b0a      	cmp	r3, #10
 8004812:	ddde      	ble.n	80047d2 <charging_led+0x26>
	}
	if(HAL_GetTick()-Slot->tick_led_charging>=1000)
 8004814:	f000 f9f4 	bl	8004c00 <HAL_GetTick>
 8004818:	0001      	movs	r1, r0
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	23c8      	movs	r3, #200	; 0xc8
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	58d3      	ldr	r3, [r2, r3]
 8004822:	1aca      	subs	r2, r1, r3
 8004824:	23fa      	movs	r3, #250	; 0xfa
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d327      	bcc.n	800487c <charging_led+0xd0>
	{
		if(Slot->flag_charge_led==1)
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	23c9      	movs	r3, #201	; 0xc9
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <charging_led+0xa8>
		{
			Set_LED(Slot,i,255,0,0);
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	2300      	movs	r3, #0
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2300      	movs	r3, #0
 8004842:	22ff      	movs	r2, #255	; 0xff
 8004844:	f7ff fe7f 	bl	8004546 <Set_LED>
			Slot->flag_charge_led=0;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	23c9      	movs	r3, #201	; 0xc9
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	2100      	movs	r1, #0
 8004850:	54d1      	strb	r1, [r2, r3]
 8004852:	e00c      	b.n	800486e <charging_led+0xc2>
		}
		else
		{
			Set_LED(Slot,i,0,0,0);
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	2200      	movs	r2, #0
 8004860:	f7ff fe71 	bl	8004546 <Set_LED>
			Slot->flag_charge_led=1;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	23c9      	movs	r3, #201	; 0xc9
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	2101      	movs	r1, #1
 800486c:	54d1      	strb	r1, [r2, r3]
		}
		Slot->tick_led_charging=HAL_GetTick();
 800486e:	f000 f9c7 	bl	8004c00 <HAL_GetTick>
 8004872:	0001      	movs	r1, r0
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	23c8      	movs	r3, #200	; 0xc8
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	50d1      	str	r1, [r2, r3]
	}
	Set_Brightness(Slot,46);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	212e      	movs	r1, #46	; 0x2e
 8004880:	0018      	movs	r0, r3
 8004882:	f7ff fe93 	bl	80045ac <Set_Brightness>
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	41200000 	.word	0x41200000

08004894 <ready_pick_led>:
void ready_pick_led(slot *Slot)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<MAX_LED;i++)
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e00a      	b.n	80048b8 <ready_pick_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 255, 0);
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	23ff      	movs	r3, #255	; 0xff
 80048ac:	22ff      	movs	r2, #255	; 0xff
 80048ae:	f7ff fe4a 	bl	8004546 <Set_LED>
	  for(int i=0;i<MAX_LED;i++)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b09      	cmp	r3, #9
 80048bc:	ddf1      	ble.n	80048a2 <ready_pick_led+0xe>
	  }
	  if(HAL_GetTick()-Slot->tick_led_swap>=1000)
 80048be:	f000 f99f 	bl	8004c00 <HAL_GetTick>
 80048c2:	0001      	movs	r1, r0
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	23c6      	movs	r3, #198	; 0xc6
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	58d3      	ldr	r3, [r2, r3]
 80048cc:	1aca      	subs	r2, r1, r3
 80048ce:	23fa      	movs	r3, #250	; 0xfa
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d322      	bcc.n	800491c <ready_pick_led+0x88>
	  {
		  Slot->j++;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	23c5      	movs	r3, #197	; 0xc5
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	58d3      	ldr	r3, [r2, r3]
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	23c5      	movs	r3, #197	; 0xc5
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	50d1      	str	r1, [r2, r3]
		if(Slot->j%2==0)Set_Brightness(Slot,35);
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	23c5      	movs	r3, #197	; 0xc5
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	58d3      	ldr	r3, [r2, r3]
 80048f0:	001a      	movs	r2, r3
 80048f2:	2301      	movs	r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d105      	bne.n	8004904 <ready_pick_led+0x70>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2123      	movs	r1, #35	; 0x23
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7ff fe55 	bl	80045ac <Set_Brightness>
 8004902:	e004      	b.n	800490e <ready_pick_led+0x7a>
		else Set_Brightness(Slot,0);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2100      	movs	r1, #0
 8004908:	0018      	movs	r0, r3
 800490a:	f7ff fe4f 	bl	80045ac <Set_Brightness>
		Slot->tick_led_swap=HAL_GetTick();
 800490e:	f000 f977 	bl	8004c00 <HAL_GetTick>
 8004912:	0001      	movs	r1, r0
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	23c6      	movs	r3, #198	; 0xc6
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	50d1      	str	r1, [r2, r3]
	  }

}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b004      	add	sp, #16
 8004922:	bd80      	pop	{r7, pc}

08004924 <swap_led>:
void swap_led(slot *Slot)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e00a      	b.n	8004948 <swap_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 255, 255);
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	23ff      	movs	r3, #255	; 0xff
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	23ff      	movs	r3, #255	; 0xff
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	f7ff fe02 	bl	8004546 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b0a      	cmp	r3, #10
 800494c:	ddf1      	ble.n	8004932 <swap_led+0xe>
	  }

	  if(HAL_GetTick()-Slot->tick_led_swap>=50)
 800494e:	f000 f957 	bl	8004c00 <HAL_GetTick>
 8004952:	0001      	movs	r1, r0
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	23c6      	movs	r3, #198	; 0xc6
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	58d3      	ldr	r3, [r2, r3]
 800495c:	1acb      	subs	r3, r1, r3
 800495e:	2b31      	cmp	r3, #49	; 0x31
 8004960:	d935      	bls.n	80049ce <swap_led+0xaa>
	  {
		if(Slot->j>35)Slot->a=1;
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	23c5      	movs	r3, #197	; 0xc5
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	58d3      	ldr	r3, [r2, r3]
 800496a:	2b23      	cmp	r3, #35	; 0x23
 800496c:	dd04      	ble.n	8004978 <swap_led+0x54>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	23c7      	movs	r3, #199	; 0xc7
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	2101      	movs	r1, #1
 8004976:	54d1      	strb	r1, [r2, r3]
		if(Slot->j<3)Slot->a=0;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	23c5      	movs	r3, #197	; 0xc5
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	58d3      	ldr	r3, [r2, r3]
 8004980:	2b02      	cmp	r3, #2
 8004982:	dc04      	bgt.n	800498e <swap_led+0x6a>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	23c7      	movs	r3, #199	; 0xc7
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	2100      	movs	r1, #0
 800498c:	54d1      	strb	r1, [r2, r3]
		if(Slot->a==1)Slot->j--;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	23c7      	movs	r3, #199	; 0xc7
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <swap_led+0x8a>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	23c5      	movs	r3, #197	; 0xc5
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	58d3      	ldr	r3, [r2, r3]
 80049a2:	1e59      	subs	r1, r3, #1
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	23c5      	movs	r3, #197	; 0xc5
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	50d1      	str	r1, [r2, r3]
 80049ac:	e008      	b.n	80049c0 <swap_led+0x9c>
		else Slot->j++;
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	23c5      	movs	r3, #197	; 0xc5
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	58d3      	ldr	r3, [r2, r3]
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	23c5      	movs	r3, #197	; 0xc5
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	50d1      	str	r1, [r2, r3]
		Slot->tick_led_swap=HAL_GetTick();
 80049c0:	f000 f91e 	bl	8004c00 <HAL_GetTick>
 80049c4:	0001      	movs	r1, r0
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	23c6      	movs	r3, #198	; 0xc6
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	50d1      	str	r1, [r2, r3]
	  }
		  Set_Brightness(Slot,Slot->j);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	23c5      	movs	r3, #197	; 0xc5
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	58d2      	ldr	r2, [r2, r3]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff fde6 	bl	80045ac <Set_Brightness>
		  WS2812_Send();
 80049e0:	f7ff fe68 	bl	80046b4 <WS2812_Send>



}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}

080049ec <fault_led>:
void fault_led(slot *Slot)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e00a      	b.n	8004a10 <fault_led+0x24>
	  {
		  Set_LED(Slot,i, 255, 0, 0);
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	2300      	movs	r3, #0
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	f7ff fd9e 	bl	8004546 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b0a      	cmp	r3, #10
 8004a14:	ddf1      	ble.n	80049fa <fault_led+0xe>
	  }

		Set_Brightness(Slot,46);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	212e      	movs	r1, #46	; 0x2e
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff fdc6 	bl	80045ac <Set_Brightness>
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b004      	add	sp, #16
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <standby_led>:
void standby_led(slot *Slot)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<=MAX_LED;i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e00a      	b.n	8004a4c <standby_led+0x24>
	  {
		  Set_LED(Slot,i, 0, 0, 0);
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2200      	movs	r2, #0
 8004a42:	f7ff fd80 	bl	8004546 <Set_LED>
	  for(int i=0;i<=MAX_LED;i++)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b0a      	cmp	r3, #10
 8004a50:	ddf1      	ble.n	8004a36 <standby_led+0xe>
	  }

		Set_Brightness(Slot,46);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	212e      	movs	r1, #46	; 0x2e
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff fda8 	bl	80045ac <Set_Brightness>
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b004      	add	sp, #16
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7f1b      	ldrb	r3, [r3, #28]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d108      	bne.n	8004a86 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8004a76:	2108      	movs	r1, #8
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f002 fcf1 	bl	8007460 <HAL_TIM_PWM_Stop_DMA>
		slot1.datasentflag=1;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	679a      	str	r2, [r3, #120]	; 0x78
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
		slot2.datasentflag=1;
	}


}
 8004a84:	e00b      	b.n	8004a9e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7f1b      	ldrb	r3, [r3, #28]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8004a90:	2104      	movs	r1, #4
 8004a92:	0018      	movs	r0, r3
 8004a94:	f002 fce4 	bl	8007460 <HAL_TIM_PWM_Stop_DMA>
		slot2.datasentflag=1;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b002      	add	sp, #8
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	20000858 	.word	0x20000858
 8004aac:	200000b4 	.word	0x200000b4
 8004ab0:	200003fc 	.word	0x200003fc

08004ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ab4:	480d      	ldr	r0, [pc, #52]	; (8004aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ab8:	f7ff fd40 	bl	800453c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004abc:	480c      	ldr	r0, [pc, #48]	; (8004af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004abe:	490d      	ldr	r1, [pc, #52]	; (8004af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <LoopForever+0xe>)
  movs r3, #0
 8004ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ac4:	e002      	b.n	8004acc <LoopCopyDataInit>

08004ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aca:	3304      	adds	r3, #4

08004acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad0:	d3f9      	bcc.n	8004ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ad4:	4c0a      	ldr	r4, [pc, #40]	; (8004b00 <LoopForever+0x16>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ad8:	e001      	b.n	8004ade <LoopFillZerobss>

08004ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004adc:	3204      	adds	r2, #4

08004ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae0:	d3fb      	bcc.n	8004ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ae2:	f003 fd91 	bl	8008608 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004ae6:	f7fe fe81 	bl	80037ec <main>

08004aea <LoopForever>:

LoopForever:
  b LoopForever
 8004aea:	e7fe      	b.n	8004aea <LoopForever>
  ldr   r0, =_estack
 8004aec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004af4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004af8:	08009b68 	.word	0x08009b68
  ldr r2, =_sbss
 8004afc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004b00:	200008ac 	.word	0x200008ac

08004b04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b04:	e7fe      	b.n	8004b04 <ADC1_COMP_IRQHandler>
	...

08004b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_Init+0x3c>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_Init+0x3c>)
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	0049      	lsls	r1, r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b22:	2003      	movs	r0, #3
 8004b24:	f000 f810 	bl	8004b48 <HAL_InitTick>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e001      	b.n	8004b38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004b34:	f7ff fb4e 	bl	80041d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40022000 	.word	0x40022000

08004b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b50:	230f      	movs	r3, #15
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_InitTick+0x88>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02b      	beq.n	8004bb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004b60:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <HAL_InitTick+0x8c>)
 8004b62:	681c      	ldr	r4, [r3, #0]
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <HAL_InitTick+0x88>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0019      	movs	r1, r3
 8004b6a:	23fa      	movs	r3, #250	; 0xfa
 8004b6c:	0098      	lsls	r0, r3, #2
 8004b6e:	f7fb fac9 	bl	8000104 <__udivsi3>
 8004b72:	0003      	movs	r3, r0
 8004b74:	0019      	movs	r1, r3
 8004b76:	0020      	movs	r0, r4
 8004b78:	f7fb fac4 	bl	8000104 <__udivsi3>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 f93d 	bl	8004dfe <HAL_SYSTICK_Config>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d112      	bne.n	8004bae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d80a      	bhi.n	8004ba4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	2301      	movs	r3, #1
 8004b92:	425b      	negs	r3, r3
 8004b94:	2200      	movs	r2, #0
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f90c 	bl	8004db4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_InitTick+0x90>)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e00d      	b.n	8004bc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004ba4:	230f      	movs	r3, #15
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e008      	b.n	8004bc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bae:	230f      	movs	r3, #15
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e003      	b.n	8004bc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bb8:	230f      	movs	r3, #15
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004bc0:	230f      	movs	r3, #15
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	781b      	ldrb	r3, [r3, #0]
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b005      	add	sp, #20
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000010 	.word	0x20000010
 8004bd4:	20000008 	.word	0x20000008
 8004bd8:	2000000c 	.word	0x2000000c

08004bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_IncTick+0x1c>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	001a      	movs	r2, r3
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_IncTick+0x20>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	18d2      	adds	r2, r2, r3
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <HAL_IncTick+0x20>)
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	20000010 	.word	0x20000010
 8004bfc:	200008a8 	.word	0x200008a8

08004c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  return uwTick;
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <HAL_GetTick+0x10>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	200008a8 	.word	0x200008a8

08004c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d005      	beq.n	8004c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_Delay+0x44>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	001a      	movs	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	f7ff ffe0 	bl	8004c00 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d8f7      	bhi.n	8004c3c <HAL_Delay+0x28>
  {
  }
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b004      	add	sp, #16
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000010 	.word	0x20000010

08004c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	0002      	movs	r2, r0
 8004c64:	1dfb      	adds	r3, r7, #7
 8004c66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6e:	d809      	bhi.n	8004c84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c70:	1dfb      	adds	r3, r7, #7
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	001a      	movs	r2, r3
 8004c76:	231f      	movs	r3, #31
 8004c78:	401a      	ands	r2, r3
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_EnableIRQ+0x30>)
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4091      	lsls	r1, r2
 8004c80:	000a      	movs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	e000e100 	.word	0xe000e100

08004c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	0002      	movs	r2, r0
 8004c98:	6039      	str	r1, [r7, #0]
 8004c9a:	1dfb      	adds	r3, r7, #7
 8004c9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca4:	d828      	bhi.n	8004cf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ca6:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <__NVIC_SetPriority+0xd4>)
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	33c0      	adds	r3, #192	; 0xc0
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	589b      	ldr	r3, [r3, r2]
 8004cb6:	1dfa      	adds	r2, r7, #7
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	0011      	movs	r1, r2
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	00d2      	lsls	r2, r2, #3
 8004cc2:	21ff      	movs	r1, #255	; 0xff
 8004cc4:	4091      	lsls	r1, r2
 8004cc6:	000a      	movs	r2, r1
 8004cc8:	43d2      	mvns	r2, r2
 8004cca:	401a      	ands	r2, r3
 8004ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	1dfb      	adds	r3, r7, #7
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	2303      	movs	r3, #3
 8004cde:	4003      	ands	r3, r0
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce4:	481f      	ldr	r0, [pc, #124]	; (8004d64 <__NVIC_SetPriority+0xd4>)
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	33c0      	adds	r3, #192	; 0xc0
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cf6:	e031      	b.n	8004d5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <__NVIC_SetPriority+0xd8>)
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0019      	movs	r1, r3
 8004d00:	230f      	movs	r3, #15
 8004d02:	400b      	ands	r3, r1
 8004d04:	3b08      	subs	r3, #8
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	3306      	adds	r3, #6
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	3304      	adds	r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1dfa      	adds	r2, r7, #7
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	0011      	movs	r1, r2
 8004d18:	2203      	movs	r2, #3
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	00d2      	lsls	r2, r2, #3
 8004d1e:	21ff      	movs	r1, #255	; 0xff
 8004d20:	4091      	lsls	r1, r2
 8004d22:	000a      	movs	r2, r1
 8004d24:	43d2      	mvns	r2, r2
 8004d26:	401a      	ands	r2, r3
 8004d28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	22ff      	movs	r2, #255	; 0xff
 8004d30:	401a      	ands	r2, r3
 8004d32:	1dfb      	adds	r3, r7, #7
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	0018      	movs	r0, r3
 8004d38:	2303      	movs	r3, #3
 8004d3a:	4003      	ands	r3, r0
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d40:	4809      	ldr	r0, [pc, #36]	; (8004d68 <__NVIC_SetPriority+0xd8>)
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	001c      	movs	r4, r3
 8004d48:	230f      	movs	r3, #15
 8004d4a:	4023      	ands	r3, r4
 8004d4c:	3b08      	subs	r3, #8
 8004d4e:	089b      	lsrs	r3, r3, #2
 8004d50:	430a      	orrs	r2, r1
 8004d52:	3306      	adds	r3, #6
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	18c3      	adds	r3, r0, r3
 8004d58:	3304      	adds	r3, #4
 8004d5a:	601a      	str	r2, [r3, #0]
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b003      	add	sp, #12
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	e000e100 	.word	0xe000e100
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	045b      	lsls	r3, r3, #17
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d301      	bcc.n	8004d84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d80:	2301      	movs	r3, #1
 8004d82:	e010      	b.n	8004da6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <SysTick_Config+0x44>)
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	425b      	negs	r3, r3
 8004d90:	2103      	movs	r1, #3
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7ff ff7c 	bl	8004c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <SysTick_Config+0x44>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <SysTick_Config+0x44>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b002      	add	sp, #8
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	e000e010 	.word	0xe000e010

08004db4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	210f      	movs	r1, #15
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	1c02      	adds	r2, r0, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7ff ff5d 	bl	8004c90 <__NVIC_SetPriority>
}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	0002      	movs	r2, r0
 8004de6:	1dfb      	adds	r3, r7, #7
 8004de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	b25b      	sxtb	r3, r3
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7ff ff33 	bl	8004c5c <__NVIC_EnableIRQ>
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b002      	add	sp, #8
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff ffaf 	bl	8004d6c <SysTick_Config>
 8004e0e:	0003      	movs	r3, r0
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2317      	movs	r3, #23
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2224      	movs	r2, #36	; 0x24
 8004e32:	5c9b      	ldrb	r3, [r3, r2]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_DMA_Start_IT+0x24>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e06f      	b.n	8004f1c <HAL_DMA_Start_IT+0x104>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	2101      	movs	r1, #1
 8004e42:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2225      	movs	r2, #37	; 0x25
 8004e48:	5c9b      	ldrb	r3, [r3, r2]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d157      	bne.n	8004f00 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2225      	movs	r2, #37	; 0x25
 8004e54:	2102      	movs	r1, #2
 8004e56:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	438a      	bics	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f8bd 	bl	8004ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	210e      	movs	r1, #14
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e00f      	b.n	8004eb4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	438a      	bics	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	210a      	movs	r1, #10
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	025b      	lsls	r3, r3, #9
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d008      	beq.n	8004ed4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	0049      	lsls	r1, r1, #1
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0049      	lsls	r1, r1, #1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e00a      	b.n	8004f16 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004f0e:	2317      	movs	r3, #23
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004f16:	2317      	movs	r3, #23
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	781b      	ldrb	r3, [r3, #0]
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b006      	add	sp, #24
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	210f      	movs	r1, #15
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2225      	movs	r2, #37	; 0x25
 8004f38:	5c9b      	ldrb	r3, [r3, r2]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d006      	beq.n	8004f4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2204      	movs	r2, #4
 8004f44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e048      	b.n	8004fe0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	210e      	movs	r1, #14
 8004f5a:	438a      	bics	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	438a      	bics	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f78:	491d      	ldr	r1, [pc, #116]	; (8004ff0 <HAL_DMA_Abort_IT+0xcc>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	221c      	movs	r2, #28
 8004f84:	401a      	ands	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4091      	lsls	r1, r2
 8004f8e:	000a      	movs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <HAL_DMA_Abort_IT+0xcc>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2225      	movs	r2, #37	; 0x25
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2224      	movs	r2, #36	; 0x24
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	0010      	movs	r0, r2
 8004fde:	4798      	blx	r3
    }
  }
  return status;
 8004fe0:	230f      	movs	r3, #15
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	781b      	ldrb	r3, [r3, #0]
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b004      	add	sp, #16
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	fffffeff 	.word	0xfffffeff

08004ff4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800500a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	221c      	movs	r2, #28
 8005024:	401a      	ands	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2101      	movs	r1, #1
 800502c:	4091      	lsls	r1, r2
 800502e:	000a      	movs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b10      	cmp	r3, #16
 8005040:	d108      	bne.n	8005054 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005052:	e007      	b.n	8005064 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b004      	add	sp, #16
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e14e      	b.n	800531c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	225c      	movs	r2, #92	; 0x5c
 8005082:	5c9b      	ldrb	r3, [r3, r2]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	225d      	movs	r2, #93	; 0x5d
 800508e:	2100      	movs	r1, #0
 8005090:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f7ff f8c1 	bl	800421c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2110      	movs	r1, #16
 80050a6:	438a      	bics	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050aa:	f7ff fda9 	bl	8004c00 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050b2:	e012      	b.n	80050da <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050b4:	f7ff fda4 	bl	8004c00 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b0a      	cmp	r3, #10
 80050c0:	d90b      	bls.n	80050da <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	2201      	movs	r2, #1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	225c      	movs	r2, #92	; 0x5c
 80050d2:	2103      	movs	r1, #3
 80050d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e120      	b.n	800531c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2208      	movs	r2, #8
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d0e5      	beq.n	80050b4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2101      	movs	r1, #1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f8:	f7ff fd82 	bl	8004c00 <HAL_GetTick>
 80050fc:	0003      	movs	r3, r0
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005100:	e012      	b.n	8005128 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005102:	f7ff fd7d 	bl	8004c00 <HAL_GetTick>
 8005106:	0002      	movs	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b0a      	cmp	r3, #10
 800510e:	d90b      	bls.n	8005128 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	2201      	movs	r2, #1
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	225c      	movs	r2, #92	; 0x5c
 8005120:	2103      	movs	r1, #3
 8005122:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0f9      	b.n	800531c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2201      	movs	r2, #1
 8005130:	4013      	ands	r3, r2
 8005132:	d0e6      	beq.n	8005102 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2102      	movs	r1, #2
 8005140:	430a      	orrs	r2, r1
 8005142:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a76      	ldr	r2, [pc, #472]	; (8005324 <HAL_FDCAN_Init+0x2b8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d103      	bne.n	8005156 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800514e:	4a76      	ldr	r2, [pc, #472]	; (8005328 <HAL_FDCAN_Init+0x2bc>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7c1b      	ldrb	r3, [r3, #16]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d108      	bne.n	8005170 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	438a      	bics	r2, r1
 800516c:	619a      	str	r2, [r3, #24]
 800516e:	e007      	b.n	8005180 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2140      	movs	r1, #64	; 0x40
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7c5b      	ldrb	r3, [r3, #17]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d109      	bne.n	800519c <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2180      	movs	r1, #128	; 0x80
 8005194:	01c9      	lsls	r1, r1, #7
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e007      	b.n	80051ac <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4961      	ldr	r1, [pc, #388]	; (800532c <HAL_FDCAN_Init+0x2c0>)
 80051a8:	400a      	ands	r2, r1
 80051aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7c9b      	ldrb	r3, [r3, #18]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d108      	bne.n	80051c6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	495c      	ldr	r1, [pc, #368]	; (8005330 <HAL_FDCAN_Init+0x2c4>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
 80051c4:	e008      	b.n	80051d8 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	0149      	lsls	r1, r1, #5
 80051d4:	430a      	orrs	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4a55      	ldr	r2, [pc, #340]	; (8005334 <HAL_FDCAN_Init+0x2c8>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	21a4      	movs	r1, #164	; 0xa4
 80051fc:	438a      	bics	r2, r1
 80051fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2110      	movs	r1, #16
 800520c:	438a      	bics	r2, r1
 800520e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d108      	bne.n	800522a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2104      	movs	r1, #4
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	e02c      	b.n	8005284 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d028      	beq.n	8005284 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d01c      	beq.n	8005274 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	430a      	orrs	r2, r1
 8005248:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2110      	movs	r1, #16
 8005256:	430a      	orrs	r2, r1
 8005258:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d110      	bne.n	8005284 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2120      	movs	r1, #32
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
 8005272:	e007      	b.n	8005284 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2120      	movs	r1, #32
 8005280:	430a      	orrs	r2, r1
 8005282:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	3b01      	subs	r3, #1
 800528a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	3b01      	subs	r3, #1
 8005292:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005294:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800529c:	431a      	orrs	r2, r3
 800529e:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	23c0      	movs	r3, #192	; 0xc0
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d115      	bne.n	80052e8 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	3b01      	subs	r3, #1
 80052c8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052ca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	3b01      	subs	r3, #1
 80052d2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052d4:	431a      	orrs	r2, r3
 80052d6:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	3b01      	subs	r3, #1
 80052de:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052e4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052e6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	22c0      	movs	r2, #192	; 0xc0
 80052ee:	5899      	ldr	r1, [r3, r2]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	21c0      	movs	r1, #192	; 0xc0
 80052fc:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0018      	movs	r0, r3
 8005302:	f000 fc35 	bl	8005b70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	225c      	movs	r2, #92	; 0x5c
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40006400 	.word	0x40006400
 8005328:	40006500 	.word	0x40006500
 800532c:	ffffbfff 	.word	0xffffbfff
 8005330:	ffffefff 	.word	0xffffefff
 8005334:	fffffcff 	.word	0xfffffcff

08005338 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005342:	2017      	movs	r0, #23
 8005344:	183b      	adds	r3, r7, r0
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	215c      	movs	r1, #92	; 0x5c
 800534a:	5c52      	ldrb	r2, [r2, r1]
 800534c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800534e:	0002      	movs	r2, r0
 8005350:	18bb      	adds	r3, r7, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d003      	beq.n	8005360 <HAL_FDCAN_ConfigFilter+0x28>
 8005358:	18bb      	adds	r3, r7, r2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d13d      	bne.n	80053dc <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d119      	bne.n	800539c <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005374:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800537c:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e01d      	b.n	80053d8 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	075a      	lsls	r2, r3, #29
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	079a      	lsls	r2, r3, #30
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3304      	adds	r3, #4
 80053d0:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e006      	b.n	80053ea <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	2202      	movs	r2, #2
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
  }
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b006      	add	sp, #24
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	225c      	movs	r2, #92	; 0x5c
 80053fe:	5c9b      	ldrb	r3, [r3, r2]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d110      	bne.n	8005428 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	225c      	movs	r2, #92	; 0x5c
 800540a:	2102      	movs	r1, #2
 800540c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2101      	movs	r1, #1
 800541a:	438a      	bics	r2, r1
 800541c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e006      	b.n	8005436 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	2204      	movs	r2, #4
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
  }
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	225c      	movs	r2, #92	; 0x5c
 800544e:	5c9b      	ldrb	r3, [r3, r2]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d12d      	bne.n	80054b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	22c4      	movs	r2, #196	; 0xc4
 800545c:	589a      	ldr	r2, [r3, r2]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	039b      	lsls	r3, r3, #14
 8005462:	4013      	ands	r3, r2
 8005464:	d008      	beq.n	8005478 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	431a      	orrs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e023      	b.n	80054c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	22c4      	movs	r2, #196	; 0xc4
 800547e:	589b      	ldr	r3, [r3, r2]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	2203      	movs	r2, #3
 8005484:	4013      	ands	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fbda 	bl	8005c48 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2101      	movs	r1, #1
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4091      	lsls	r1, r2
 800549e:	000a      	movs	r2, r1
 80054a0:	21cc      	movs	r1, #204	; 0xcc
 80054a2:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80054a4:	2201      	movs	r2, #1
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	409a      	lsls	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e006      	b.n	80054c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	2208      	movs	r2, #8
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
  }
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b006      	add	sp, #24
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054d6:	201b      	movs	r0, #27
 80054d8:	183b      	adds	r3, r7, r0
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	215c      	movs	r1, #92	; 0x5c
 80054de:	5c52      	ldrb	r2, [r2, r1]
 80054e0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80054e2:	183b      	adds	r3, r7, r0
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d000      	beq.n	80054ec <HAL_FDCAN_GetRxMessage+0x24>
 80054ea:	e0c1      	b.n	8005670 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d121      	bne.n	8005536 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2290      	movs	r2, #144	; 0x90
 80054f8:	589b      	ldr	r3, [r3, r2]
 80054fa:	220f      	movs	r2, #15
 80054fc:	4013      	ands	r3, r2
 80054fe:	d108      	bne.n	8005512 <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	0052      	lsls	r2, r2, #1
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0b5      	b.n	800567e <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2290      	movs	r2, #144	; 0x90
 8005518:	589b      	ldr	r3, [r3, r2]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	2203      	movs	r2, #3
 800551e:	4013      	ands	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	0013      	movs	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	189b      	adds	r3, r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	18cb      	adds	r3, r1, r3
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	e020      	b.n	8005578 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2298      	movs	r2, #152	; 0x98
 800553c:	589b      	ldr	r3, [r3, r2]
 800553e:	220f      	movs	r2, #15
 8005540:	4013      	ands	r3, r2
 8005542:	d108      	bne.n	8005556 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0052      	lsls	r2, r2, #1
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e093      	b.n	800567e <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2298      	movs	r2, #152	; 0x98
 800555c:	589b      	ldr	r3, [r3, r2]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	2203      	movs	r2, #3
 8005562:	4013      	ands	r3, r2
 8005564:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	0013      	movs	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	189b      	adds	r3, r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	18cb      	adds	r3, r1, r3
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	05db      	lsls	r3, r3, #23
 8005580:	401a      	ands	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d107      	bne.n	800559e <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	0c9b      	lsrs	r3, r3, #18
 8005594:	055b      	lsls	r3, r3, #21
 8005596:	0d5a      	lsrs	r2, r3, #21
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e005      	b.n	80055aa <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	08da      	lsrs	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	059b      	lsls	r3, r3, #22
 80055b2:	401a      	ands	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	0fdb      	lsrs	r3, r3, #31
 80055be:	07da      	lsls	r2, r3, #31
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	3304      	adds	r3, #4
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	0c1a      	lsrs	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	23f0      	movs	r3, #240	; 0xf0
 80055dc:	031b      	lsls	r3, r3, #12
 80055de:	401a      	ands	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	035b      	lsls	r3, r3, #13
 80055ec:	401a      	ands	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	039b      	lsls	r3, r3, #14
 80055fa:	401a      	ands	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	0e1b      	lsrs	r3, r3, #24
 8005606:	227f      	movs	r2, #127	; 0x7f
 8005608:	401a      	ands	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	0fda      	lsrs	r2, r3, #31
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	3304      	adds	r3, #4
 800561c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005622:	2300      	movs	r3, #0
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	e00a      	b.n	800563e <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	18d2      	adds	r2, r2, r3
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	18cb      	adds	r3, r1, r3
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	3301      	adds	r3, #1
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	001a      	movs	r2, r3
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	4293      	cmp	r3, r2
 800564e:	d3eb      	bcc.n	8005628 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d105      	bne.n	8005662 <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2194      	movs	r1, #148	; 0x94
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	505a      	str	r2, [r3, r1]
 8005660:	e004      	b.n	800566c <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	219c      	movs	r1, #156	; 0x9c
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e006      	b.n	800567e <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	2208      	movs	r2, #8
 8005676:	431a      	orrs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
  }
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b00a      	add	sp, #40	; 0x28
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	08009920 	.word	0x08009920

0800568c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005698:	2017      	movs	r0, #23
 800569a:	183b      	adds	r3, r7, r0
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	215c      	movs	r1, #92	; 0x5c
 80056a0:	5c52      	ldrb	r2, [r2, r1]
 80056a2:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80056a4:	0002      	movs	r2, r0
 80056a6:	18bb      	adds	r3, r7, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d004      	beq.n	80056b8 <HAL_FDCAN_ActivateNotification+0x2c>
 80056ae:	18bb      	adds	r3, r7, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d000      	beq.n	80056b8 <HAL_FDCAN_ActivateNotification+0x2c>
 80056b6:	e0b4      	b.n	8005822 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2207      	movs	r2, #7
 80056c4:	4013      	ands	r3, r2
 80056c6:	d003      	beq.n	80056d0 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2201      	movs	r2, #1
 80056cc:	4013      	ands	r3, r2
 80056ce:	d034      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2238      	movs	r2, #56	; 0x38
 80056d4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80056d6:	d003      	beq.n	80056e0 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2202      	movs	r2, #2
 80056dc:	4013      	ands	r3, r2
 80056de:	d02c      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	23e0      	movs	r3, #224	; 0xe0
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80056e8:	d003      	beq.n	80056f2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2204      	movs	r2, #4
 80056ee:	4013      	ands	r3, r2
 80056f0:	d023      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	23f0      	movs	r3, #240	; 0xf0
 80056f6:	015b      	lsls	r3, r3, #5
 80056f8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80056fa:	d003      	beq.n	8005704 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2208      	movs	r2, #8
 8005700:	4013      	ands	r3, r2
 8005702:	d01a      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	23e0      	movs	r3, #224	; 0xe0
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800570c:	d003      	beq.n	8005716 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2210      	movs	r2, #16
 8005712:	4013      	ands	r3, r2
 8005714:	d011      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800571e:	d003      	beq.n	8005728 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	d008      	beq.n	800573a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	23fc      	movs	r3, #252	; 0xfc
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005730:	d00b      	beq.n	800574a <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	4013      	ands	r3, r2
 8005738:	d107      	bne.n	800574a <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2207      	movs	r2, #7
 800574e:	4013      	ands	r3, r2
 8005750:	d003      	beq.n	800575a <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2201      	movs	r2, #1
 8005756:	4013      	ands	r3, r2
 8005758:	d134      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2238      	movs	r2, #56	; 0x38
 800575e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005760:	d003      	beq.n	800576a <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2202      	movs	r2, #2
 8005766:	4013      	ands	r3, r2
 8005768:	d12c      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	23e0      	movs	r3, #224	; 0xe0
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005772:	d003      	beq.n	800577c <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2204      	movs	r2, #4
 8005778:	4013      	ands	r3, r2
 800577a:	d123      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	23f0      	movs	r3, #240	; 0xf0
 8005780:	015b      	lsls	r3, r3, #5
 8005782:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005784:	d003      	beq.n	800578e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2208      	movs	r2, #8
 800578a:	4013      	ands	r3, r2
 800578c:	d11a      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	23e0      	movs	r3, #224	; 0xe0
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005796:	d003      	beq.n	80057a0 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2210      	movs	r2, #16
 800579c:	4013      	ands	r3, r2
 800579e:	d111      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	23c0      	movs	r3, #192	; 0xc0
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80057a8:	d003      	beq.n	80057b2 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2220      	movs	r2, #32
 80057ae:	4013      	ands	r3, r2
 80057b0:	d108      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	23fc      	movs	r3, #252	; 0xfc
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80057ba:	d00b      	beq.n	80057d4 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2240      	movs	r2, #64	; 0x40
 80057c0:	4013      	ands	r3, r2
 80057c2:	d007      	beq.n	80057d4 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2102      	movs	r1, #2
 80057d0:	430a      	orrs	r2, r1
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	4013      	ands	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	22dc      	movs	r2, #220	; 0xdc
 80057e2:	5899      	ldr	r1, [r3, r2]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	21dc      	movs	r1, #220	; 0xdc
 80057ee:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	22e0      	movs	r2, #224	; 0xe0
 8005800:	5899      	ldr	r1, [r3, r2]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	430a      	orrs	r2, r1
 800580a:	21e0      	movs	r1, #224	; 0xe0
 800580c:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	430a      	orrs	r2, r1
 800581c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e006      	b.n	8005830 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	2202      	movs	r2, #2
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
  }
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b006      	add	sp, #24
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005846:	23e0      	movs	r3, #224	; 0xe0
 8005848:	015b      	lsls	r3, r3, #5
 800584a:	4013      	ands	r3, r2
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	4013      	ands	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	2207      	movs	r2, #7
 8005862:	4013      	ands	r3, r2
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	4013      	ands	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	2238      	movs	r2, #56	; 0x38
 800587a:	4013      	ands	r3, r2
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	4013      	ands	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005890:	23f1      	movs	r3, #241	; 0xf1
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	4013      	ands	r3, r2
 8005896:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	4013      	ands	r3, r2
 80058a2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058aa:	23e0      	movs	r3, #224	; 0xe0
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	4013      	ands	r3, r2
 80058b0:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	001a      	movs	r2, r3
 80058d4:	2301      	movs	r3, #1
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00d      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	099b      	lsrs	r3, r3, #6
 80058de:	001a      	movs	r2, r3
 80058e0:	2301      	movs	r3, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d007      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f924 	bl	8005b3e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	001a      	movs	r2, r3
 80058fc:	2301      	movs	r3, #1
 80058fe:	4013      	ands	r3, r2
 8005900:	d01c      	beq.n	800593c <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	001a      	movs	r2, r3
 8005908:	2301      	movs	r3, #1
 800590a:	4013      	ands	r3, r2
 800590c:	d016      	beq.n	800593c <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22d8      	movs	r2, #216	; 0xd8
 8005914:	589b      	ldr	r3, [r3, r2]
 8005916:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22e0      	movs	r2, #224	; 0xe0
 800591e:	589a      	ldr	r2, [r3, r2]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	0052      	lsls	r2, r2, #1
 800592e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f000 f8e8 	bl	8005b0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800594a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f000 f8b8 	bl	8005ac6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005962:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f7fd fab8 	bl	8002ee0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0011      	movs	r1, r2
 8005984:	0018      	movs	r0, r3
 8005986:	f000 f8a7 	bl	8005ad8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	001a      	movs	r2, r3
 8005990:	2301      	movs	r3, #1
 8005992:	4013      	ands	r3, r2
 8005994:	d00e      	beq.n	80059b4 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	0a5b      	lsrs	r3, r3, #9
 800599a:	001a      	movs	r2, r3
 800599c:	2301      	movs	r3, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	d008      	beq.n	80059b4 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	0092      	lsls	r2, r2, #2
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 f89b 	bl	8005aea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	09db      	lsrs	r3, r3, #7
 80059b8:	001a      	movs	r2, r3
 80059ba:	2301      	movs	r3, #1
 80059bc:	4013      	ands	r3, r2
 80059be:	d01b      	beq.n	80059f8 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	001a      	movs	r2, r3
 80059c6:	2301      	movs	r3, #1
 80059c8:	4013      	ands	r3, r2
 80059ca:	d015      	beq.n	80059f8 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	22d4      	movs	r2, #212	; 0xd4
 80059d2:	589b      	ldr	r3, [r3, r2]
 80059d4:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	22dc      	movs	r2, #220	; 0xdc
 80059dc:	589a      	ldr	r2, [r3, r2]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2280      	movs	r2, #128	; 0x80
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0011      	movs	r1, r2
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 f881 	bl	8005afa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	0b5b      	lsrs	r3, r3, #13
 80059fc:	001a      	movs	r2, r3
 80059fe:	2301      	movs	r3, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	0b5b      	lsrs	r3, r3, #13
 8005a08:	001a      	movs	r2, r3
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d008      	beq.n	8005a22 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2280      	movs	r2, #128	; 0x80
 8005a16:	0192      	lsls	r2, r2, #6
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f87e 	bl	8005b1e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	0bdb      	lsrs	r3, r3, #15
 8005a26:	001a      	movs	r2, r3
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	0bdb      	lsrs	r3, r3, #15
 8005a32:	001a      	movs	r2, r3
 8005a34:	2301      	movs	r3, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	d008      	beq.n	8005a4c <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	0212      	lsls	r2, r2, #8
 8005a42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 f871 	bl	8005b2e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	0b9b      	lsrs	r3, r3, #14
 8005a50:	001a      	movs	r2, r3
 8005a52:	2301      	movs	r3, #1
 8005a54:	4013      	ands	r3, r2
 8005a56:	d010      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	0b9b      	lsrs	r3, r3, #14
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00a      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	01d2      	lsls	r2, r2, #7
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0011      	movs	r1, r2
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 f865 	bl	8005b5e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a3a      	ldr	r2, [r7, #32]
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 f848 	bl	8005b4e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b00c      	add	sp, #48	; 0x30
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b002      	add	sp, #8
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b002      	add	sp, #8
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b002      	add	sp, #8
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b002      	add	sp, #8
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b002      	add	sp, #8
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005b78:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8005b7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d105      	bne.n	8005b92 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	22d4      	movs	r2, #212	; 0xd4
 8005b8a:	0092      	lsls	r2, r2, #2
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	4463      	add	r3, ip
 8005b90:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	589b      	ldr	r3, [r3, r2]
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	041a      	lsls	r2, r3, #16
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3370      	adds	r3, #112	; 0x70
 8005bba:	001a      	movs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	589b      	ldr	r3, [r3, r2]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	061a      	lsls	r2, r3, #24
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	2180      	movs	r1, #128	; 0x80
 8005bdc:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	33b0      	adds	r3, #176	; 0xb0
 8005be2:	001a      	movs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	3389      	adds	r3, #137	; 0x89
 8005bec:	33ff      	adds	r3, #255	; 0xff
 8005bee:	001a      	movs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2298      	movs	r2, #152	; 0x98
 8005bf8:	0092      	lsls	r2, r2, #2
 8005bfa:	189a      	adds	r2, r3, r2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	229e      	movs	r2, #158	; 0x9e
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	189a      	adds	r2, r3, r2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e005      	b.n	8005c1e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	22d4      	movs	r2, #212	; 0xd4
 8005c22:	0092      	lsls	r2, r2, #2
 8005c24:	4694      	mov	ip, r2
 8005c26:	4463      	add	r3, ip
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3f1      	bcc.n	8005c12 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b004      	add	sp, #16
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	4000b400 	.word	0x4000b400
 8005c3c:	40006800 	.word	0x40006800
 8005c40:	ffe0ffff 	.word	0xffe0ffff
 8005c44:	f0ffffff 	.word	0xf0ffffff

08005c48 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005c66:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e00b      	b.n	8005c8c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005c7c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005c82:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c84:	2280      	movs	r2, #128	; 0x80
 8005c86:	05d2      	lsls	r2, r2, #23
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c96:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005c9c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005ca2:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	0013      	movs	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	189b      	adds	r3, r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	18cb      	adds	r3, r1, r3
 8005cbc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e020      	b.n	8005d1e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3303      	adds	r3, #3
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	18d3      	adds	r3, r2, r3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3302      	adds	r3, #2
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	18cb      	adds	r3, r1, r3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005cf4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	18cb      	adds	r3, r1, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d02:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	188a      	adds	r2, r1, r2
 8005d0a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d0c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3304      	adds	r3, #4
 8005d16:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <FDCAN_CopyMessageToRAM+0xf4>)
 8005d26:	5cd3      	ldrb	r3, [r2, r3]
 8005d28:	001a      	movs	r2, r3
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d3d5      	bcc.n	8005cdc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005d30:	46c0      	nop			; (mov r8, r8)
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b008      	add	sp, #32
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	08009920 	.word	0x08009920

08005d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d4e:	e14d      	b.n	8005fec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2101      	movs	r1, #1
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4091      	lsls	r1, r2
 8005d5a:	000a      	movs	r2, r1
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d100      	bne.n	8005d68 <HAL_GPIO_Init+0x28>
 8005d66:	e13e      	b.n	8005fe6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d005      	beq.n	8005d80 <HAL_GPIO_Init+0x40>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d130      	bne.n	8005de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	0013      	movs	r3, r2
 8005d90:	43da      	mvns	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	0013      	movs	r3, r2
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005db6:	2201      	movs	r2, #1
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	0013      	movs	r3, r2
 8005dbe:	43da      	mvns	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	2201      	movs	r2, #1
 8005dce:	401a      	ands	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	0013      	movs	r3, r2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d017      	beq.n	8005e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	0013      	movs	r3, r2
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	0013      	movs	r3, r2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2203      	movs	r2, #3
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d123      	bne.n	8005e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	08da      	lsrs	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3208      	adds	r2, #8
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	58d3      	ldr	r3, [r2, r3]
 8005e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2207      	movs	r2, #7
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	220f      	movs	r2, #15
 8005e42:	409a      	lsls	r2, r3
 8005e44:	0013      	movs	r3, r2
 8005e46:	43da      	mvns	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2107      	movs	r1, #7
 8005e56:	400b      	ands	r3, r1
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	0013      	movs	r3, r2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	08da      	lsrs	r2, r3, #3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3208      	adds	r2, #8
 8005e6c:	0092      	lsls	r2, r2, #2
 8005e6e:	6939      	ldr	r1, [r7, #16]
 8005e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	0013      	movs	r3, r2
 8005e82:	43da      	mvns	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	401a      	ands	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	409a      	lsls	r2, r3
 8005e98:	0013      	movs	r3, r2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	23c0      	movs	r3, #192	; 0xc0
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d100      	bne.n	8005eb4 <HAL_GPIO_Init+0x174>
 8005eb2:	e098      	b.n	8005fe6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005eb4:	4a53      	ldr	r2, [pc, #332]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	3318      	adds	r3, #24
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	589b      	ldr	r3, [r3, r2]
 8005ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	220f      	movs	r2, #15
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	0013      	movs	r3, r2
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	23a0      	movs	r3, #160	; 0xa0
 8005edc:	05db      	lsls	r3, r3, #23
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d019      	beq.n	8005f16 <HAL_GPIO_Init+0x1d6>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a48      	ldr	r2, [pc, #288]	; (8006008 <HAL_GPIO_Init+0x2c8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_GPIO_Init+0x1d2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a47      	ldr	r2, [pc, #284]	; (800600c <HAL_GPIO_Init+0x2cc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00d      	beq.n	8005f0e <HAL_GPIO_Init+0x1ce>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a46      	ldr	r2, [pc, #280]	; (8006010 <HAL_GPIO_Init+0x2d0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <HAL_GPIO_Init+0x1ca>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a45      	ldr	r2, [pc, #276]	; (8006014 <HAL_GPIO_Init+0x2d4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_GPIO_Init+0x1c6>
 8005f02:	2304      	movs	r3, #4
 8005f04:	e008      	b.n	8005f18 <HAL_GPIO_Init+0x1d8>
 8005f06:	2305      	movs	r3, #5
 8005f08:	e006      	b.n	8005f18 <HAL_GPIO_Init+0x1d8>
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e004      	b.n	8005f18 <HAL_GPIO_Init+0x1d8>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e002      	b.n	8005f18 <HAL_GPIO_Init+0x1d8>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <HAL_GPIO_Init+0x1d8>
 8005f16:	2300      	movs	r3, #0
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	2103      	movs	r1, #3
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	00d2      	lsls	r2, r2, #3
 8005f20:	4093      	lsls	r3, r2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005f28:	4936      	ldr	r1, [pc, #216]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	089b      	lsrs	r3, r3, #2
 8005f2e:	3318      	adds	r3, #24
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	035b      	lsls	r3, r3, #13
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	43da      	mvns	r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	039b      	lsls	r3, r3, #14
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005f8c:	2384      	movs	r3, #132	; 0x84
 8005f8e:	58d3      	ldr	r3, [r2, r3]
 8005f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	43da      	mvns	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fb0:	4914      	ldr	r1, [pc, #80]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005fb2:	2284      	movs	r2, #132	; 0x84
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005fb8:	4a12      	ldr	r2, [pc, #72]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005fba:	2380      	movs	r3, #128	; 0x80
 8005fbc:	58d3      	ldr	r3, [r2, r3]
 8005fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	025b      	lsls	r3, r3, #9
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d003      	beq.n	8005fde <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fde:	4909      	ldr	r1, [pc, #36]	; (8006004 <HAL_GPIO_Init+0x2c4>)
 8005fe0:	2280      	movs	r2, #128	; 0x80
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	40da      	lsrs	r2, r3
 8005ff4:	1e13      	subs	r3, r2, #0
 8005ff6:	d000      	beq.n	8005ffa <HAL_GPIO_Init+0x2ba>
 8005ff8:	e6aa      	b.n	8005d50 <HAL_GPIO_Init+0x10>
  }
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b006      	add	sp, #24
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021800 	.word	0x40021800
 8006008:	50000400 	.word	0x50000400
 800600c:	50000800 	.word	0x50000800
 8006010:	50000c00 	.word	0x50000c00
 8006014:	50001000 	.word	0x50001000

08006018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	4b17      	ldr	r3, [pc, #92]	; (8006088 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	429a      	cmp	r2, r3
 800603a:	d11f      	bne.n	800607c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800603c:	4b14      	ldr	r3, [pc, #80]	; (8006090 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	0013      	movs	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	189b      	adds	r3, r3, r2
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4912      	ldr	r1, [pc, #72]	; (8006094 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800604a:	0018      	movs	r0, r3
 800604c:	f7fa f85a 	bl	8000104 <__udivsi3>
 8006050:	0003      	movs	r3, r0
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006056:	e008      	b.n	800606a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b01      	subs	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e009      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	401a      	ands	r2, r3
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	429a      	cmp	r2, r3
 800607a:	d0ed      	beq.n	8006058 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	40007000 	.word	0x40007000
 800608c:	fffff9ff 	.word	0xfffff9ff
 8006090:	20000008 	.word	0x20000008
 8006094:	000f4240 	.word	0x000f4240

08006098 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f000 fb50 	bl	800674c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	d100      	bne.n	80060b8 <HAL_RCC_OscConfig+0x20>
 80060b6:	e07c      	b.n	80061b2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b8:	4bc3      	ldr	r3, [pc, #780]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2238      	movs	r2, #56	; 0x38
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060c2:	4bc1      	ldr	r3, [pc, #772]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2203      	movs	r2, #3
 80060c8:	4013      	ands	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d102      	bne.n	80060d8 <HAL_RCC_OscConfig+0x40>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d002      	beq.n	80060de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d10b      	bne.n	80060f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060de:	4bba      	ldr	r3, [pc, #744]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	4013      	ands	r3, r2
 80060e8:	d062      	beq.n	80061b0 <HAL_RCC_OscConfig+0x118>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d15e      	bne.n	80061b0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e32a      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	2380      	movs	r3, #128	; 0x80
 80060fc:	025b      	lsls	r3, r3, #9
 80060fe:	429a      	cmp	r2, r3
 8006100:	d107      	bne.n	8006112 <HAL_RCC_OscConfig+0x7a>
 8006102:	4bb1      	ldr	r3, [pc, #708]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4bb0      	ldr	r3, [pc, #704]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006108:	2180      	movs	r1, #128	; 0x80
 800610a:	0249      	lsls	r1, r1, #9
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e020      	b.n	8006154 <HAL_RCC_OscConfig+0xbc>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	23a0      	movs	r3, #160	; 0xa0
 8006118:	02db      	lsls	r3, r3, #11
 800611a:	429a      	cmp	r2, r3
 800611c:	d10e      	bne.n	800613c <HAL_RCC_OscConfig+0xa4>
 800611e:	4baa      	ldr	r3, [pc, #680]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4ba9      	ldr	r3, [pc, #676]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006124:	2180      	movs	r1, #128	; 0x80
 8006126:	02c9      	lsls	r1, r1, #11
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	4ba6      	ldr	r3, [pc, #664]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4ba5      	ldr	r3, [pc, #660]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006132:	2180      	movs	r1, #128	; 0x80
 8006134:	0249      	lsls	r1, r1, #9
 8006136:	430a      	orrs	r2, r1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e00b      	b.n	8006154 <HAL_RCC_OscConfig+0xbc>
 800613c:	4ba2      	ldr	r3, [pc, #648]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006142:	49a2      	ldr	r1, [pc, #648]	; (80063cc <HAL_RCC_OscConfig+0x334>)
 8006144:	400a      	ands	r2, r1
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	4b9f      	ldr	r3, [pc, #636]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b9e      	ldr	r3, [pc, #632]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800614e:	49a0      	ldr	r1, [pc, #640]	; (80063d0 <HAL_RCC_OscConfig+0x338>)
 8006150:	400a      	ands	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fe fd50 	bl	8004c00 <HAL_GetTick>
 8006160:	0003      	movs	r3, r0
 8006162:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006166:	f7fe fd4b 	bl	8004c00 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b64      	cmp	r3, #100	; 0x64
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e2e9      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006178:	4b93      	ldr	r3, [pc, #588]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	4013      	ands	r3, r2
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0xce>
 8006184:	e015      	b.n	80061b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fe fd3b 	bl	8004c00 <HAL_GetTick>
 800618a:	0003      	movs	r3, r0
 800618c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006190:	f7fe fd36 	bl	8004c00 <HAL_GetTick>
 8006194:	0002      	movs	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e2d4      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061a2:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	029b      	lsls	r3, r3, #10
 80061aa:	4013      	ands	r3, r2
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0xf8>
 80061ae:	e000      	b.n	80061b2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2202      	movs	r2, #2
 80061b8:	4013      	ands	r3, r2
 80061ba:	d100      	bne.n	80061be <HAL_RCC_OscConfig+0x126>
 80061bc:	e099      	b.n	80062f2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061be:	4b82      	ldr	r3, [pc, #520]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2238      	movs	r2, #56	; 0x38
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c8:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2203      	movs	r2, #3
 80061ce:	4013      	ands	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d102      	bne.n	80061de <HAL_RCC_OscConfig+0x146>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d002      	beq.n	80061e4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d135      	bne.n	8006250 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e4:	4b78      	ldr	r3, [pc, #480]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4013      	ands	r3, r2
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_OscConfig+0x164>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e2a7      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fc:	4b72      	ldr	r3, [pc, #456]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	4a74      	ldr	r2, [pc, #464]	; (80063d4 <HAL_RCC_OscConfig+0x33c>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	4b6e      	ldr	r3, [pc, #440]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d112      	bne.n	800623e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006218:	4b6b      	ldr	r3, [pc, #428]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a6e      	ldr	r2, [pc, #440]	; (80063d8 <HAL_RCC_OscConfig+0x340>)
 800621e:	4013      	ands	r3, r2
 8006220:	0019      	movs	r1, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800622c:	4b66      	ldr	r3, [pc, #408]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	0adb      	lsrs	r3, r3, #11
 8006232:	2207      	movs	r2, #7
 8006234:	4013      	ands	r3, r2
 8006236:	4a69      	ldr	r2, [pc, #420]	; (80063dc <HAL_RCC_OscConfig+0x344>)
 8006238:	40da      	lsrs	r2, r3
 800623a:	4b69      	ldr	r3, [pc, #420]	; (80063e0 <HAL_RCC_OscConfig+0x348>)
 800623c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800623e:	4b69      	ldr	r3, [pc, #420]	; (80063e4 <HAL_RCC_OscConfig+0x34c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	0018      	movs	r0, r3
 8006244:	f7fe fc80 	bl	8004b48 <HAL_InitTick>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d051      	beq.n	80062f0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e27d      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d030      	beq.n	80062ba <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006258:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a5e      	ldr	r2, [pc, #376]	; (80063d8 <HAL_RCC_OscConfig+0x340>)
 800625e:	4013      	ands	r3, r2
 8006260:	0019      	movs	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	4b58      	ldr	r3, [pc, #352]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800626c:	4b56      	ldr	r3, [pc, #344]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4b55      	ldr	r3, [pc, #340]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006272:	2180      	movs	r1, #128	; 0x80
 8006274:	0049      	lsls	r1, r1, #1
 8006276:	430a      	orrs	r2, r1
 8006278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fe fcc1 	bl	8004c00 <HAL_GetTick>
 800627e:	0003      	movs	r3, r0
 8006280:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006284:	f7fe fcbc 	bl	8004c00 <HAL_GetTick>
 8006288:	0002      	movs	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e25a      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006296:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4013      	ands	r3, r2
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a2:	4b49      	ldr	r3, [pc, #292]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4a4b      	ldr	r2, [pc, #300]	; (80063d4 <HAL_RCC_OscConfig+0x33c>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	0019      	movs	r1, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	021a      	lsls	r2, r3, #8
 80062b2:	4b45      	ldr	r3, [pc, #276]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	e01b      	b.n	80062f2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b43      	ldr	r3, [pc, #268]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062c0:	4949      	ldr	r1, [pc, #292]	; (80063e8 <HAL_RCC_OscConfig+0x350>)
 80062c2:	400a      	ands	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fe fc9b 	bl	8004c00 <HAL_GetTick>
 80062ca:	0003      	movs	r3, r0
 80062cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062d0:	f7fe fc96 	bl	8004c00 <HAL_GetTick>
 80062d4:	0002      	movs	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e234      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062e2:	4b39      	ldr	r3, [pc, #228]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4013      	ands	r3, r2
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCC_OscConfig+0x238>
 80062ee:	e000      	b.n	80062f2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	d047      	beq.n	800638c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80062fc:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2238      	movs	r2, #56	; 0x38
 8006302:	4013      	ands	r3, r2
 8006304:	2b18      	cmp	r3, #24
 8006306:	d10a      	bne.n	800631e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800630a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630c:	2202      	movs	r2, #2
 800630e:	4013      	ands	r3, r2
 8006310:	d03c      	beq.n	800638c <HAL_RCC_OscConfig+0x2f4>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d138      	bne.n	800638c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e216      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d019      	beq.n	800635a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006326:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800632a:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800632c:	2101      	movs	r1, #1
 800632e:	430a      	orrs	r2, r1
 8006330:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fe fc65 	bl	8004c00 <HAL_GetTick>
 8006336:	0003      	movs	r3, r0
 8006338:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800633c:	f7fe fc60 	bl	8004c00 <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1fe      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800634e:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006352:	2202      	movs	r2, #2
 8006354:	4013      	ands	r3, r2
 8006356:	d0f1      	beq.n	800633c <HAL_RCC_OscConfig+0x2a4>
 8006358:	e018      	b.n	800638c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800635a:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 800635c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006360:	2101      	movs	r1, #1
 8006362:	438a      	bics	r2, r1
 8006364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006366:	f7fe fc4b 	bl	8004c00 <HAL_GetTick>
 800636a:	0003      	movs	r3, r0
 800636c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006370:	f7fe fc46 	bl	8004c00 <HAL_GetTick>
 8006374:	0002      	movs	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e1e4      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	2202      	movs	r2, #2
 8006388:	4013      	ands	r3, r2
 800638a:	d1f1      	bne.n	8006370 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2204      	movs	r2, #4
 8006392:	4013      	ands	r3, r2
 8006394:	d100      	bne.n	8006398 <HAL_RCC_OscConfig+0x300>
 8006396:	e0c7      	b.n	8006528 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006398:	231f      	movs	r3, #31
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2238      	movs	r2, #56	; 0x38
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d11f      	bne.n	80063ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCC_OscConfig+0x330>)
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	2202      	movs	r2, #2
 80063b2:	4013      	ands	r3, r2
 80063b4:	d100      	bne.n	80063b8 <HAL_RCC_OscConfig+0x320>
 80063b6:	e0b7      	b.n	8006528 <HAL_RCC_OscConfig+0x490>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d000      	beq.n	80063c2 <HAL_RCC_OscConfig+0x32a>
 80063c0:	e0b2      	b.n	8006528 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e1c2      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	40021000 	.word	0x40021000
 80063cc:	fffeffff 	.word	0xfffeffff
 80063d0:	fffbffff 	.word	0xfffbffff
 80063d4:	ffff80ff 	.word	0xffff80ff
 80063d8:	ffffc7ff 	.word	0xffffc7ff
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	20000008 	.word	0x20000008
 80063e4:	2000000c 	.word	0x2000000c
 80063e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ec:	4bb5      	ldr	r3, [pc, #724]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80063ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	055b      	lsls	r3, r3, #21
 80063f4:	4013      	ands	r3, r2
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x364>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x366>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4bb0      	ldr	r3, [pc, #704]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006406:	4baf      	ldr	r3, [pc, #700]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	0549      	lsls	r1, r1, #21
 800640c:	430a      	orrs	r2, r1
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006410:	4bac      	ldr	r3, [pc, #688]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	055b      	lsls	r3, r3, #21
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800641e:	231f      	movs	r3, #31
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006426:	4ba8      	ldr	r3, [pc, #672]	; (80066c8 <HAL_RCC_OscConfig+0x630>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	2380      	movs	r3, #128	; 0x80
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d11a      	bne.n	8006468 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006432:	4ba5      	ldr	r3, [pc, #660]	; (80066c8 <HAL_RCC_OscConfig+0x630>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4ba4      	ldr	r3, [pc, #656]	; (80066c8 <HAL_RCC_OscConfig+0x630>)
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	0049      	lsls	r1, r1, #1
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006440:	f7fe fbde 	bl	8004c00 <HAL_GetTick>
 8006444:	0003      	movs	r3, r0
 8006446:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644a:	f7fe fbd9 	bl	8004c00 <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e177      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800645c:	4b9a      	ldr	r3, [pc, #616]	; (80066c8 <HAL_RCC_OscConfig+0x630>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4013      	ands	r3, r2
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x3e6>
 8006470:	4b94      	ldr	r3, [pc, #592]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006474:	4b93      	ldr	r3, [pc, #588]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006476:	2101      	movs	r1, #1
 8006478:	430a      	orrs	r2, r1
 800647a:	65da      	str	r2, [r3, #92]	; 0x5c
 800647c:	e01c      	b.n	80064b8 <HAL_RCC_OscConfig+0x420>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x408>
 8006486:	4b8f      	ldr	r3, [pc, #572]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800648a:	4b8e      	ldr	r3, [pc, #568]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800648c:	2104      	movs	r1, #4
 800648e:	430a      	orrs	r2, r1
 8006490:	65da      	str	r2, [r3, #92]	; 0x5c
 8006492:	4b8c      	ldr	r3, [pc, #560]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006496:	4b8b      	ldr	r3, [pc, #556]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006498:	2101      	movs	r1, #1
 800649a:	430a      	orrs	r2, r1
 800649c:	65da      	str	r2, [r3, #92]	; 0x5c
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0x420>
 80064a0:	4b88      	ldr	r3, [pc, #544]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80064a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064a4:	4b87      	ldr	r3, [pc, #540]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80064a6:	2101      	movs	r1, #1
 80064a8:	438a      	bics	r2, r1
 80064aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80064ac:	4b85      	ldr	r3, [pc, #532]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80064ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b0:	4b84      	ldr	r3, [pc, #528]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80064b2:	2104      	movs	r1, #4
 80064b4:	438a      	bics	r2, r1
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d014      	beq.n	80064ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fe fb9e 	bl	8004c00 <HAL_GetTick>
 80064c4:	0003      	movs	r3, r0
 80064c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c8:	e009      	b.n	80064de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fe fb99 	bl	8004c00 <HAL_GetTick>
 80064ce:	0002      	movs	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	4a7d      	ldr	r2, [pc, #500]	; (80066cc <HAL_RCC_OscConfig+0x634>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e136      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064de:	4b79      	ldr	r3, [pc, #484]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCC_OscConfig+0x432>
 80064e8:	e013      	b.n	8006512 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fe fb89 	bl	8004c00 <HAL_GetTick>
 80064ee:	0003      	movs	r3, r0
 80064f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064f2:	e009      	b.n	8006508 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fe fb84 	bl	8004c00 <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	4a73      	ldr	r2, [pc, #460]	; (80066cc <HAL_RCC_OscConfig+0x634>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e121      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006508:	4b6e      	ldr	r3, [pc, #440]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	2202      	movs	r2, #2
 800650e:	4013      	ands	r3, r2
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006512:	231f      	movs	r3, #31
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800651c:	4b69      	ldr	r3, [pc, #420]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	4b68      	ldr	r3, [pc, #416]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006522:	496b      	ldr	r1, [pc, #428]	; (80066d0 <HAL_RCC_OscConfig+0x638>)
 8006524:	400a      	ands	r2, r1
 8006526:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2220      	movs	r2, #32
 800652e:	4013      	ands	r3, r2
 8006530:	d039      	beq.n	80065a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01b      	beq.n	8006572 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800653a:	4b62      	ldr	r3, [pc, #392]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b61      	ldr	r3, [pc, #388]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006540:	2180      	movs	r1, #128	; 0x80
 8006542:	03c9      	lsls	r1, r1, #15
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fe fb5a 	bl	8004c00 <HAL_GetTick>
 800654c:	0003      	movs	r3, r0
 800654e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006552:	f7fe fb55 	bl	8004c00 <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0f3      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006564:	4b57      	ldr	r3, [pc, #348]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	4013      	ands	r3, r2
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x4ba>
 8006570:	e019      	b.n	80065a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006572:	4b54      	ldr	r3, [pc, #336]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b53      	ldr	r3, [pc, #332]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006578:	4956      	ldr	r1, [pc, #344]	; (80066d4 <HAL_RCC_OscConfig+0x63c>)
 800657a:	400a      	ands	r2, r1
 800657c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fe fb3f 	bl	8004c00 <HAL_GetTick>
 8006582:	0003      	movs	r3, r0
 8006584:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006588:	f7fe fb3a 	bl	8004c00 <HAL_GetTick>
 800658c:	0002      	movs	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0d8      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800659a:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	4013      	ands	r3, r2
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d100      	bne.n	80065b0 <HAL_RCC_OscConfig+0x518>
 80065ae:	e0cc      	b.n	800674a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b0:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2238      	movs	r2, #56	; 0x38
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d100      	bne.n	80065be <HAL_RCC_OscConfig+0x526>
 80065bc:	e07b      	b.n	80066b6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d156      	bne.n	8006674 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c6:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80065cc:	4942      	ldr	r1, [pc, #264]	; (80066d8 <HAL_RCC_OscConfig+0x640>)
 80065ce:	400a      	ands	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fe fb15 	bl	8004c00 <HAL_GetTick>
 80065d6:	0003      	movs	r3, r0
 80065d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fe fb10 	bl	8004c00 <HAL_GetTick>
 80065e0:	0002      	movs	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e0ae      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ee:	4b35      	ldr	r3, [pc, #212]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	049b      	lsls	r3, r3, #18
 80065f6:	4013      	ands	r3, r2
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065fa:	4b32      	ldr	r3, [pc, #200]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4a37      	ldr	r2, [pc, #220]	; (80066dc <HAL_RCC_OscConfig+0x644>)
 8006600:	4013      	ands	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	431a      	orrs	r2, r3
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800662a:	430a      	orrs	r2, r1
 800662c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662e:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006634:	2180      	movs	r1, #128	; 0x80
 8006636:	0449      	lsls	r1, r1, #17
 8006638:	430a      	orrs	r2, r1
 800663a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800663c:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	0549      	lsls	r1, r1, #21
 8006646:	430a      	orrs	r2, r1
 8006648:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fe fad9 	bl	8004c00 <HAL_GetTick>
 800664e:	0003      	movs	r3, r0
 8006650:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006654:	f7fe fad4 	bl	8004c00 <HAL_GetTick>
 8006658:	0002      	movs	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e072      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006666:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	049b      	lsls	r3, r3, #18
 800666e:	4013      	ands	r3, r2
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x5bc>
 8006672:	e06a      	b.n	800674a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006674:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800667a:	4917      	ldr	r1, [pc, #92]	; (80066d8 <HAL_RCC_OscConfig+0x640>)
 800667c:	400a      	ands	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006680:	f7fe fabe 	bl	8004c00 <HAL_GetTick>
 8006684:	0003      	movs	r3, r0
 8006686:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668a:	f7fe fab9 	bl	8004c00 <HAL_GetTick>
 800668e:	0002      	movs	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e057      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	049b      	lsls	r3, r3, #18
 80066a4:	4013      	ands	r3, r2
 80066a6:	d1f0      	bne.n	800668a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <HAL_RCC_OscConfig+0x62c>)
 80066ae:	490c      	ldr	r1, [pc, #48]	; (80066e0 <HAL_RCC_OscConfig+0x648>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]
 80066b4:	e049      	b.n	800674a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d112      	bne.n	80066e4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e044      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40007000 	.word	0x40007000
 80066cc:	00001388 	.word	0x00001388
 80066d0:	efffffff 	.word	0xefffffff
 80066d4:	ffbfffff 	.word	0xffbfffff
 80066d8:	feffffff 	.word	0xfeffffff
 80066dc:	11c1808c 	.word	0x11c1808c
 80066e0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_RCC_OscConfig+0x6bc>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2203      	movs	r2, #3
 80066ee:	401a      	ands	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d126      	bne.n	8006746 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2270      	movs	r2, #112	; 0x70
 80066fc:	401a      	ands	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d11f      	bne.n	8006746 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	23fe      	movs	r3, #254	; 0xfe
 800670a:	01db      	lsls	r3, r3, #7
 800670c:	401a      	ands	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d116      	bne.n	8006746 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	23f8      	movs	r3, #248	; 0xf8
 800671c:	039b      	lsls	r3, r3, #14
 800671e:	401a      	ands	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006724:	429a      	cmp	r2, r3
 8006726:	d10e      	bne.n	8006746 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	23e0      	movs	r3, #224	; 0xe0
 800672c:	051b      	lsls	r3, r3, #20
 800672e:	401a      	ands	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d106      	bne.n	8006746 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	0f5b      	lsrs	r3, r3, #29
 800673c:	075a      	lsls	r2, r3, #29
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006742:	429a      	cmp	r2, r3
 8006744:	d001      	beq.n	800674a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	0018      	movs	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	b008      	add	sp, #32
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40021000 	.word	0x40021000

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0e9      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b76      	ldr	r3, [pc, #472]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2207      	movs	r2, #7
 8006772:	4013      	ands	r3, r2
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d91e      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b73      	ldr	r3, [pc, #460]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2207      	movs	r2, #7
 8006780:	4393      	bics	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	4b70      	ldr	r3, [pc, #448]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800678c:	f7fe fa38 	bl	8004c00 <HAL_GetTick>
 8006790:	0003      	movs	r3, r0
 8006792:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006794:	e009      	b.n	80067aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006796:	f7fe fa33 	bl	8004c00 <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	4a6a      	ldr	r2, [pc, #424]	; (800694c <HAL_RCC_ClockConfig+0x1f4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0ca      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80067aa:	4b67      	ldr	r3, [pc, #412]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2207      	movs	r2, #7
 80067b0:	4013      	ands	r3, r2
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d1ee      	bne.n	8006796 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2202      	movs	r2, #2
 80067be:	4013      	ands	r3, r2
 80067c0:	d015      	beq.n	80067ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2204      	movs	r2, #4
 80067c8:	4013      	ands	r3, r2
 80067ca:	d006      	beq.n	80067da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80067cc:	4b60      	ldr	r3, [pc, #384]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	4b5f      	ldr	r3, [pc, #380]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 80067d2:	21e0      	movs	r1, #224	; 0xe0
 80067d4:	01c9      	lsls	r1, r1, #7
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067da:	4b5d      	ldr	r3, [pc, #372]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4a5d      	ldr	r2, [pc, #372]	; (8006954 <HAL_RCC_ClockConfig+0x1fc>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	0019      	movs	r1, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	4b59      	ldr	r3, [pc, #356]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4013      	ands	r3, r2
 80067f6:	d057      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d107      	bne.n	8006810 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006800:	4b53      	ldr	r3, [pc, #332]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	4013      	ands	r3, r2
 800680a:	d12b      	bne.n	8006864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e097      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d107      	bne.n	8006828 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006818:	4b4d      	ldr	r3, [pc, #308]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	049b      	lsls	r3, r3, #18
 8006820:	4013      	ands	r3, r2
 8006822:	d11f      	bne.n	8006864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e08b      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006830:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	4013      	ands	r3, r2
 800683a:	d113      	bne.n	8006864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e07f      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d106      	bne.n	8006856 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006848:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	2202      	movs	r2, #2
 800684e:	4013      	ands	r3, r2
 8006850:	d108      	bne.n	8006864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e074      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006856:	4b3e      	ldr	r3, [pc, #248]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	2202      	movs	r2, #2
 800685c:	4013      	ands	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e06d      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006864:	4b3a      	ldr	r3, [pc, #232]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2207      	movs	r2, #7
 800686a:	4393      	bics	r3, r2
 800686c:	0019      	movs	r1, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4b37      	ldr	r3, [pc, #220]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006878:	f7fe f9c2 	bl	8004c00 <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006880:	e009      	b.n	8006896 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006882:	f7fe f9bd 	bl	8004c00 <HAL_GetTick>
 8006886:	0002      	movs	r2, r0
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	4a2f      	ldr	r2, [pc, #188]	; (800694c <HAL_RCC_ClockConfig+0x1f4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e054      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2238      	movs	r2, #56	; 0x38
 800689c:	401a      	ands	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1ec      	bne.n	8006882 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068a8:	4b27      	ldr	r3, [pc, #156]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2207      	movs	r2, #7
 80068ae:	4013      	ands	r3, r2
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d21e      	bcs.n	80068f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2207      	movs	r2, #7
 80068bc:	4393      	bics	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068c8:	f7fe f99a 	bl	8004c00 <HAL_GetTick>
 80068cc:	0003      	movs	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068d0:	e009      	b.n	80068e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d2:	f7fe f995 	bl	8004c00 <HAL_GetTick>
 80068d6:	0002      	movs	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <HAL_RCC_ClockConfig+0x1f4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e02c      	b.n	8006940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2207      	movs	r2, #7
 80068ec:	4013      	ands	r3, r2
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d1ee      	bne.n	80068d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2204      	movs	r2, #4
 80068fa:	4013      	ands	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80068fe:	4b14      	ldr	r3, [pc, #80]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <HAL_RCC_ClockConfig+0x200>)
 8006904:	4013      	ands	r3, r2
 8006906:	0019      	movs	r1, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 800690e:	430a      	orrs	r2, r1
 8006910:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006912:	f000 f829 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 8006916:	0001      	movs	r1, r0
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <HAL_RCC_ClockConfig+0x1f8>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	220f      	movs	r2, #15
 8006920:	401a      	ands	r2, r3
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <HAL_RCC_ClockConfig+0x204>)
 8006924:	0092      	lsls	r2, r2, #2
 8006926:	58d3      	ldr	r3, [r2, r3]
 8006928:	221f      	movs	r2, #31
 800692a:	4013      	ands	r3, r2
 800692c:	000a      	movs	r2, r1
 800692e:	40da      	lsrs	r2, r3
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCC_ClockConfig+0x208>)
 8006932:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006934:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <HAL_RCC_ClockConfig+0x20c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	0018      	movs	r0, r3
 800693a:	f7fe f905 	bl	8004b48 <HAL_InitTick>
 800693e:	0003      	movs	r3, r0
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b004      	add	sp, #16
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40022000 	.word	0x40022000
 800694c:	00001388 	.word	0x00001388
 8006950:	40021000 	.word	0x40021000
 8006954:	fffff0ff 	.word	0xfffff0ff
 8006958:	ffff8fff 	.word	0xffff8fff
 800695c:	080098e0 	.word	0x080098e0
 8006960:	20000008 	.word	0x20000008
 8006964:	2000000c 	.word	0x2000000c

08006968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800696e:	4b3c      	ldr	r3, [pc, #240]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2238      	movs	r2, #56	; 0x38
 8006974:	4013      	ands	r3, r2
 8006976:	d10f      	bne.n	8006998 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006978:	4b39      	ldr	r3, [pc, #228]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	0adb      	lsrs	r3, r3, #11
 800697e:	2207      	movs	r2, #7
 8006980:	4013      	ands	r3, r2
 8006982:	2201      	movs	r2, #1
 8006984:	409a      	lsls	r2, r3
 8006986:	0013      	movs	r3, r2
 8006988:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	4835      	ldr	r0, [pc, #212]	; (8006a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800698e:	f7f9 fbb9 	bl	8000104 <__udivsi3>
 8006992:	0003      	movs	r3, r0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	e05d      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006998:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2238      	movs	r2, #56	; 0x38
 800699e:	4013      	ands	r3, r2
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d102      	bne.n	80069aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069a4:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	e054      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069aa:	4b2d      	ldr	r3, [pc, #180]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2238      	movs	r2, #56	; 0x38
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d138      	bne.n	8006a28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80069b6:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2203      	movs	r2, #3
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	2207      	movs	r2, #7
 80069c8:	4013      	ands	r3, r2
 80069ca:	3301      	adds	r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d10d      	bne.n	80069f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	4824      	ldr	r0, [pc, #144]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80069d8:	f7f9 fb94 	bl	8000104 <__udivsi3>
 80069dc:	0003      	movs	r3, r0
 80069de:	0019      	movs	r1, r3
 80069e0:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	227f      	movs	r2, #127	; 0x7f
 80069e8:	4013      	ands	r3, r2
 80069ea:	434b      	muls	r3, r1
 80069ec:	617b      	str	r3, [r7, #20]
        break;
 80069ee:	e00d      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	481c      	ldr	r0, [pc, #112]	; (8006a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 80069f4:	f7f9 fb86 	bl	8000104 <__udivsi3>
 80069f8:	0003      	movs	r3, r0
 80069fa:	0019      	movs	r1, r3
 80069fc:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	227f      	movs	r2, #127	; 0x7f
 8006a04:	4013      	ands	r3, r2
 8006a06:	434b      	muls	r3, r1
 8006a08:	617b      	str	r3, [r7, #20]
        break;
 8006a0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006a0c:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	0f5b      	lsrs	r3, r3, #29
 8006a12:	2207      	movs	r2, #7
 8006a14:	4013      	ands	r3, r2
 8006a16:	3301      	adds	r3, #1
 8006a18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	6978      	ldr	r0, [r7, #20]
 8006a1e:	f7f9 fb71 	bl	8000104 <__udivsi3>
 8006a22:	0003      	movs	r3, r0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e015      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2238      	movs	r2, #56	; 0x38
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d103      	bne.n	8006a3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e00b      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2238      	movs	r2, #56	; 0x38
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b18      	cmp	r3, #24
 8006a46:	d103      	bne.n	8006a50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006a48:	23fa      	movs	r3, #250	; 0xfa
 8006a4a:	01db      	lsls	r3, r3, #7
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e001      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a54:	693b      	ldr	r3, [r7, #16]
}
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b006      	add	sp, #24
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	40021000 	.word	0x40021000
 8006a64:	00f42400 	.word	0x00f42400
 8006a68:	007a1200 	.word	0x007a1200

08006a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006a74:	2313      	movs	r3, #19
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a7c:	2312      	movs	r3, #18
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	029b      	lsls	r3, r3, #10
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006a90:	e0ad      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a92:	2011      	movs	r0, #17
 8006a94:	183b      	adds	r3, r7, r0
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9a:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	055b      	lsls	r3, r3, #21
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d110      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aa6:	4b44      	ldr	r3, [pc, #272]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aaa:	4b43      	ldr	r3, [pc, #268]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	0549      	lsls	r1, r1, #21
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ab4:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	055b      	lsls	r3, r3, #21
 8006abc:	4013      	ands	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac2:	183b      	adds	r3, r7, r0
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	0049      	lsls	r1, r1, #1
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ad6:	f7fe f893 	bl	8004c00 <HAL_GetTick>
 8006ada:	0003      	movs	r3, r0
 8006adc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ade:	e00b      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae0:	f7fe f88e 	bl	8004c00 <HAL_GetTick>
 8006ae4:	0002      	movs	r2, r0
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d904      	bls.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006aee:	2313      	movs	r3, #19
 8006af0:	18fb      	adds	r3, r7, r3
 8006af2:	2203      	movs	r2, #3
 8006af4:	701a      	strb	r2, [r3, #0]
        break;
 8006af6:	e005      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af8:	4b30      	ldr	r3, [pc, #192]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4013      	ands	r3, r2
 8006b02:	d0ed      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006b04:	2313      	movs	r3, #19
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d15e      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b12:	23c0      	movs	r3, #192	; 0xc0
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4013      	ands	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d019      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d014      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b2a:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b34:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b38:	4b1f      	ldr	r3, [pc, #124]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	0249      	lsls	r1, r1, #9
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b46:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b48:	491e      	ldr	r1, [pc, #120]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2201      	movs	r2, #1
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d016      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fe f850 	bl	8004c00 <HAL_GetTick>
 8006b60:	0003      	movs	r3, r0
 8006b62:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b64:	e00c      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7fe f84b 	bl	8004c00 <HAL_GetTick>
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d904      	bls.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006b76:	2313      	movs	r3, #19
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	701a      	strb	r2, [r3, #0]
            break;
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b80:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	2202      	movs	r2, #2
 8006b86:	4013      	ands	r3, r2
 8006b88:	d0ed      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006b8a:	2313      	movs	r3, #19
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ba8:	e016      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006baa:	2312      	movs	r3, #18
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	2213      	movs	r2, #19
 8006bb0:	18ba      	adds	r2, r7, r2
 8006bb2:	7812      	ldrb	r2, [r2, #0]
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e00f      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40007000 	.word	0x40007000
 8006bc0:	fffffcff 	.word	0xfffffcff
 8006bc4:	fffeffff 	.word	0xfffeffff
 8006bc8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	2312      	movs	r3, #18
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	2213      	movs	r2, #19
 8006bd2:	18ba      	adds	r2, r7, r2
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bd8:	2311      	movs	r3, #17
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d105      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be2:	4bb6      	ldr	r3, [pc, #728]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be6:	4bb5      	ldr	r3, [pc, #724]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006be8:	49b5      	ldr	r1, [pc, #724]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006bea:	400a      	ands	r2, r1
 8006bec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bf8:	4bb0      	ldr	r3, [pc, #704]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	4393      	bics	r3, r2
 8006c00:	0019      	movs	r1, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4bad      	ldr	r3, [pc, #692]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2202      	movs	r2, #2
 8006c12:	4013      	ands	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c16:	4ba9      	ldr	r3, [pc, #676]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	0019      	movs	r1, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	4ba5      	ldr	r3, [pc, #660]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c26:	430a      	orrs	r2, r1
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	4013      	ands	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c34:	4ba1      	ldr	r3, [pc, #644]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	2230      	movs	r2, #48	; 0x30
 8006c3a:	4393      	bics	r3, r2
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	4b9e      	ldr	r3, [pc, #632]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c44:	430a      	orrs	r2, r1
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c52:	4b9a      	ldr	r3, [pc, #616]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	4a9b      	ldr	r2, [pc, #620]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	4b96      	ldr	r3, [pc, #600]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c62:	430a      	orrs	r2, r1
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	015b      	lsls	r3, r3, #5
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006c72:	4b92      	ldr	r3, [pc, #584]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	4a94      	ldr	r2, [pc, #592]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	4b8e      	ldr	r3, [pc, #568]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c82:	430a      	orrs	r2, r1
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c92:	4b8a      	ldr	r3, [pc, #552]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	4a8d      	ldr	r2, [pc, #564]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca0:	4b86      	ldr	r3, [pc, #536]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cb2:	4b82      	ldr	r3, [pc, #520]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	4a86      	ldr	r2, [pc, #536]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	0019      	movs	r1, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cd0:	4b7a      	ldr	r3, [pc, #488]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	4a7f      	ldr	r2, [pc, #508]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	0019      	movs	r1, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	4b77      	ldr	r3, [pc, #476]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2240      	movs	r2, #64	; 0x40
 8006cea:	4013      	ands	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cee:	4b73      	ldr	r3, [pc, #460]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	4a79      	ldr	r2, [pc, #484]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	4b6f      	ldr	r3, [pc, #444]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	2380      	movs	r3, #128	; 0x80
 8006d08:	01db      	lsls	r3, r3, #7
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d015      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d0e:	4b6b      	ldr	r3, [pc, #428]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	0899      	lsrs	r1, r3, #2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1a:	4b68      	ldr	r3, [pc, #416]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	05db      	lsls	r3, r3, #23
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006d2c:	4b63      	ldr	r3, [pc, #396]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	4b62      	ldr	r3, [pc, #392]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	0249      	lsls	r1, r1, #9
 8006d36:	430a      	orrs	r2, r1
 8006d38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	2380      	movs	r3, #128	; 0x80
 8006d40:	031b      	lsls	r3, r3, #12
 8006d42:	4013      	ands	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d46:	4b5d      	ldr	r3, [pc, #372]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	4393      	bics	r3, r2
 8006d4e:	0019      	movs	r1, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	4b59      	ldr	r3, [pc, #356]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d56:	430a      	orrs	r2, r1
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	2380      	movs	r3, #128	; 0x80
 8006d60:	039b      	lsls	r3, r3, #14
 8006d62:	4013      	ands	r3, r2
 8006d64:	d016      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d66:	4b55      	ldr	r3, [pc, #340]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	4a5c      	ldr	r2, [pc, #368]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	0019      	movs	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d74:	4b51      	ldr	r3, [pc, #324]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d76:	430a      	orrs	r2, r1
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d7e:	2380      	movs	r3, #128	; 0x80
 8006d80:	03db      	lsls	r3, r3, #15
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d106      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006d86:	4b4d      	ldr	r3, [pc, #308]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	4b4c      	ldr	r3, [pc, #304]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d8c:	2180      	movs	r1, #128	; 0x80
 8006d8e:	0449      	lsls	r1, r1, #17
 8006d90:	430a      	orrs	r2, r1
 8006d92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	03db      	lsls	r3, r3, #15
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d016      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006da0:	4b46      	ldr	r3, [pc, #280]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	4a4e      	ldr	r2, [pc, #312]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dae:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006db0:	430a      	orrs	r2, r1
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db8:	2380      	movs	r3, #128	; 0x80
 8006dba:	045b      	lsls	r3, r3, #17
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d106      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006dc0:	4b3e      	ldr	r3, [pc, #248]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	4b3d      	ldr	r3, [pc, #244]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	0449      	lsls	r1, r1, #17
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d014      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006dda:	4b38      	ldr	r3, [pc, #224]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dde:	2203      	movs	r2, #3
 8006de0:	4393      	bics	r3, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	4b34      	ldr	r3, [pc, #208]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dea:	430a      	orrs	r2, r1
 8006dec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d106      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006df6:	4b31      	ldr	r3, [pc, #196]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dfc:	2180      	movs	r1, #128	; 0x80
 8006dfe:	0249      	lsls	r1, r1, #9
 8006e00:	430a      	orrs	r2, r1
 8006e02:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	019b      	lsls	r3, r3, #6
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d014      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	220c      	movs	r2, #12
 8006e16:	4393      	bics	r3, r2
 8006e18:	0019      	movs	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e1e:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e20:	430a      	orrs	r2, r1
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d106      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006e2c:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	4b22      	ldr	r3, [pc, #136]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	0249      	lsls	r1, r1, #9
 8006e36:	430a      	orrs	r2, r1
 8006e38:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	045b      	lsls	r3, r3, #17
 8006e42:	4013      	ands	r3, r2
 8006e44:	d016      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e46:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4a:	4a22      	ldr	r2, [pc, #136]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e54:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e56:	430a      	orrs	r2, r1
 8006e58:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	019b      	lsls	r3, r3, #6
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d106      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006e66:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	0449      	lsls	r1, r1, #17
 8006e70:	430a      	orrs	r2, r1
 8006e72:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	049b      	lsls	r3, r3, #18
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d016      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e80:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e84:	4a10      	ldr	r2, [pc, #64]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	0019      	movs	r1, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e90:	430a      	orrs	r2, r1
 8006e92:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d106      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	0449      	lsls	r1, r1, #17
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006eae:	2312      	movs	r3, #18
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	781b      	ldrb	r3, [r3, #0]
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b006      	add	sp, #24
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	efffffff 	.word	0xefffffff
 8006ec4:	fffff3ff 	.word	0xfffff3ff
 8006ec8:	fffffcff 	.word	0xfffffcff
 8006ecc:	fff3ffff 	.word	0xfff3ffff
 8006ed0:	ffcfffff 	.word	0xffcfffff
 8006ed4:	ffffcfff 	.word	0xffffcfff
 8006ed8:	ffff3fff 	.word	0xffff3fff
 8006edc:	ffbfffff 	.word	0xffbfffff
 8006ee0:	feffffff 	.word	0xfeffffff

08006ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e04a      	b.n	8006f8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223d      	movs	r2, #61	; 0x3d
 8006efa:	5c9b      	ldrb	r3, [r3, r2]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d107      	bne.n	8006f12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	223c      	movs	r2, #60	; 0x3c
 8006f06:	2100      	movs	r1, #0
 8006f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f7fd fa65 	bl	80043dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	223d      	movs	r2, #61	; 0x3d
 8006f16:	2102      	movs	r1, #2
 8006f18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	0019      	movs	r1, r3
 8006f24:	0010      	movs	r0, r2
 8006f26:	f000 fe45 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2248      	movs	r2, #72	; 0x48
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	223e      	movs	r2, #62	; 0x3e
 8006f36:	2101      	movs	r1, #1
 8006f38:	5499      	strb	r1, [r3, r2]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	223f      	movs	r2, #63	; 0x3f
 8006f3e:	2101      	movs	r1, #1
 8006f40:	5499      	strb	r1, [r3, r2]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	2101      	movs	r1, #1
 8006f48:	5499      	strb	r1, [r3, r2]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2241      	movs	r2, #65	; 0x41
 8006f4e:	2101      	movs	r1, #1
 8006f50:	5499      	strb	r1, [r3, r2]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2242      	movs	r2, #66	; 0x42
 8006f56:	2101      	movs	r1, #1
 8006f58:	5499      	strb	r1, [r3, r2]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2243      	movs	r2, #67	; 0x43
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2244      	movs	r2, #68	; 0x44
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2245      	movs	r2, #69	; 0x45
 8006f6e:	2101      	movs	r1, #1
 8006f70:	5499      	strb	r1, [r3, r2]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2246      	movs	r2, #70	; 0x46
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2247      	movs	r2, #71	; 0x47
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	223d      	movs	r2, #61	; 0x3d
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e04a      	b.n	800703c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	223d      	movs	r2, #61	; 0x3d
 8006faa:	5c9b      	ldrb	r3, [r3, r2]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	223c      	movs	r2, #60	; 0x3c
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 f841 	bl	8007044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	223d      	movs	r2, #61	; 0x3d
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	0010      	movs	r0, r2
 8006fd6:	f000 fded 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2248      	movs	r2, #72	; 0x48
 8006fde:	2101      	movs	r1, #1
 8006fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	223e      	movs	r2, #62	; 0x3e
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	5499      	strb	r1, [r3, r2]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	223f      	movs	r2, #63	; 0x3f
 8006fee:	2101      	movs	r1, #1
 8006ff0:	5499      	strb	r1, [r3, r2]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2240      	movs	r2, #64	; 0x40
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	5499      	strb	r1, [r3, r2]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2241      	movs	r2, #65	; 0x41
 8006ffe:	2101      	movs	r1, #1
 8007000:	5499      	strb	r1, [r3, r2]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2242      	movs	r2, #66	; 0x42
 8007006:	2101      	movs	r1, #1
 8007008:	5499      	strb	r1, [r3, r2]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2243      	movs	r2, #67	; 0x43
 800700e:	2101      	movs	r1, #1
 8007010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2244      	movs	r2, #68	; 0x44
 8007016:	2101      	movs	r1, #1
 8007018:	5499      	strb	r1, [r3, r2]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2245      	movs	r2, #69	; 0x45
 800701e:	2101      	movs	r1, #1
 8007020:	5499      	strb	r1, [r3, r2]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2246      	movs	r2, #70	; 0x46
 8007026:	2101      	movs	r1, #1
 8007028:	5499      	strb	r1, [r3, r2]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2247      	movs	r2, #71	; 0x47
 800702e:	2101      	movs	r1, #1
 8007030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	223d      	movs	r2, #61	; 0x3d
 8007036:	2101      	movs	r1, #1
 8007038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	b002      	add	sp, #8
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	001a      	movs	r2, r3
 8007062:	1cbb      	adds	r3, r7, #2
 8007064:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2317      	movs	r3, #23
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <HAL_TIM_PWM_Start_DMA+0x32>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	223e      	movs	r2, #62	; 0x3e
 8007078:	5c9b      	ldrb	r3, [r3, r2]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	3b02      	subs	r3, #2
 800707e:	425a      	negs	r2, r3
 8007080:	4153      	adcs	r3, r2
 8007082:	b2db      	uxtb	r3, r3
 8007084:	e037      	b.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d108      	bne.n	800709e <HAL_TIM_PWM_Start_DMA+0x4a>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	223f      	movs	r2, #63	; 0x3f
 8007090:	5c9b      	ldrb	r3, [r3, r2]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	3b02      	subs	r3, #2
 8007096:	425a      	negs	r2, r3
 8007098:	4153      	adcs	r3, r2
 800709a:	b2db      	uxtb	r3, r3
 800709c:	e02b      	b.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d108      	bne.n	80070b6 <HAL_TIM_PWM_Start_DMA+0x62>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2240      	movs	r2, #64	; 0x40
 80070a8:	5c9b      	ldrb	r3, [r3, r2]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	3b02      	subs	r3, #2
 80070ae:	425a      	negs	r2, r3
 80070b0:	4153      	adcs	r3, r2
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	e01f      	b.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b0c      	cmp	r3, #12
 80070ba:	d108      	bne.n	80070ce <HAL_TIM_PWM_Start_DMA+0x7a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2241      	movs	r2, #65	; 0x41
 80070c0:	5c9b      	ldrb	r3, [r3, r2]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3b02      	subs	r3, #2
 80070c6:	425a      	negs	r2, r3
 80070c8:	4153      	adcs	r3, r2
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e013      	b.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d108      	bne.n	80070e6 <HAL_TIM_PWM_Start_DMA+0x92>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2242      	movs	r2, #66	; 0x42
 80070d8:	5c9b      	ldrb	r3, [r3, r2]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	3b02      	subs	r3, #2
 80070de:	425a      	negs	r2, r3
 80070e0:	4153      	adcs	r3, r2
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	e007      	b.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2243      	movs	r2, #67	; 0x43
 80070ea:	5c9b      	ldrb	r3, [r3, r2]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	3b02      	subs	r3, #2
 80070f0:	425a      	negs	r2, r3
 80070f2:	4153      	adcs	r3, r2
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
 80070fc:	e198      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <HAL_TIM_PWM_Start_DMA+0xc2>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	223e      	movs	r2, #62	; 0x3e
 8007108:	5c9b      	ldrb	r3, [r3, r2]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	425a      	negs	r2, r3
 8007110:	4153      	adcs	r3, r2
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e037      	b.n	8007186 <HAL_TIM_PWM_Start_DMA+0x132>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d108      	bne.n	800712e <HAL_TIM_PWM_Start_DMA+0xda>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	223f      	movs	r2, #63	; 0x3f
 8007120:	5c9b      	ldrb	r3, [r3, r2]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	425a      	negs	r2, r3
 8007128:	4153      	adcs	r3, r2
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e02b      	b.n	8007186 <HAL_TIM_PWM_Start_DMA+0x132>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d108      	bne.n	8007146 <HAL_TIM_PWM_Start_DMA+0xf2>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	425a      	negs	r2, r3
 8007140:	4153      	adcs	r3, r2
 8007142:	b2db      	uxtb	r3, r3
 8007144:	e01f      	b.n	8007186 <HAL_TIM_PWM_Start_DMA+0x132>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b0c      	cmp	r3, #12
 800714a:	d108      	bne.n	800715e <HAL_TIM_PWM_Start_DMA+0x10a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2241      	movs	r2, #65	; 0x41
 8007150:	5c9b      	ldrb	r3, [r3, r2]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	425a      	negs	r2, r3
 8007158:	4153      	adcs	r3, r2
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e013      	b.n	8007186 <HAL_TIM_PWM_Start_DMA+0x132>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b10      	cmp	r3, #16
 8007162:	d108      	bne.n	8007176 <HAL_TIM_PWM_Start_DMA+0x122>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2242      	movs	r2, #66	; 0x42
 8007168:	5c9b      	ldrb	r3, [r3, r2]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	425a      	negs	r2, r3
 8007170:	4153      	adcs	r3, r2
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e007      	b.n	8007186 <HAL_TIM_PWM_Start_DMA+0x132>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2243      	movs	r2, #67	; 0x43
 800717a:	5c9b      	ldrb	r3, [r3, r2]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	425a      	negs	r2, r3
 8007182:	4153      	adcs	r3, r2
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d035      	beq.n	80071f6 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_TIM_PWM_Start_DMA+0x144>
 8007190:	1cbb      	adds	r3, r7, #2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e149      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <HAL_TIM_PWM_Start_DMA+0x158>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	223e      	movs	r2, #62	; 0x3e
 80071a6:	2102      	movs	r1, #2
 80071a8:	5499      	strb	r1, [r3, r2]
 80071aa:	e026      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d104      	bne.n	80071bc <HAL_TIM_PWM_Start_DMA+0x168>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	223f      	movs	r2, #63	; 0x3f
 80071b6:	2102      	movs	r1, #2
 80071b8:	5499      	strb	r1, [r3, r2]
 80071ba:	e01e      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d104      	bne.n	80071cc <HAL_TIM_PWM_Start_DMA+0x178>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	2102      	movs	r1, #2
 80071c8:	5499      	strb	r1, [r3, r2]
 80071ca:	e016      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b0c      	cmp	r3, #12
 80071d0:	d104      	bne.n	80071dc <HAL_TIM_PWM_Start_DMA+0x188>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2241      	movs	r2, #65	; 0x41
 80071d6:	2102      	movs	r1, #2
 80071d8:	5499      	strb	r1, [r3, r2]
 80071da:	e00e      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d104      	bne.n	80071ec <HAL_TIM_PWM_Start_DMA+0x198>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2242      	movs	r2, #66	; 0x42
 80071e6:	2102      	movs	r1, #2
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	e006      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2243      	movs	r2, #67	; 0x43
 80071f0:	2102      	movs	r1, #2
 80071f2:	5499      	strb	r1, [r3, r2]
 80071f4:	e001      	b.n	80071fa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e11a      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d100      	bne.n	8007202 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8007200:	e080      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d900      	bls.n	800720a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8007208:	e0a1      	b.n	800734e <HAL_TIM_PWM_Start_DMA+0x2fa>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d054      	beq.n	80072ba <HAL_TIM_PWM_Start_DMA+0x266>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b08      	cmp	r3, #8
 8007214:	d900      	bls.n	8007218 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8007216:	e09a      	b.n	800734e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d025      	beq.n	8007270 <HAL_TIM_PWM_Start_DMA+0x21c>
 8007224:	e093      	b.n	800734e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	4a83      	ldr	r2, [pc, #524]	; (8007438 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800722c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	4a82      	ldr	r2, [pc, #520]	; (800743c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	4a81      	ldr	r2, [pc, #516]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800723c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3334      	adds	r3, #52	; 0x34
 800724a:	001a      	movs	r2, r3
 800724c:	1cbb      	adds	r3, r7, #2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	f7fd fde2 	bl	8004e18 <HAL_DMA_Start_IT>
 8007254:	1e03      	subs	r3, r0, #0
 8007256:	d001      	beq.n	800725c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0e9      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	0089      	lsls	r1, r1, #2
 800726a:	430a      	orrs	r2, r1
 800726c:	60da      	str	r2, [r3, #12]
      break;
 800726e:	e073      	b.n	8007358 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	4a70      	ldr	r2, [pc, #448]	; (8007438 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	4a6f      	ldr	r2, [pc, #444]	; (800743c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800727e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	4a6e      	ldr	r2, [pc, #440]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3338      	adds	r3, #56	; 0x38
 8007294:	001a      	movs	r2, r3
 8007296:	1cbb      	adds	r3, r7, #2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	f7fd fdbd 	bl	8004e18 <HAL_DMA_Start_IT>
 800729e:	1e03      	subs	r3, r0, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0c4      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	00c9      	lsls	r1, r1, #3
 80072b4:	430a      	orrs	r2, r1
 80072b6:	60da      	str	r2, [r3, #12]
      break;
 80072b8:	e04e      	b.n	8007358 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	4a5e      	ldr	r2, [pc, #376]	; (8007438 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80072c0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	4a5d      	ldr	r2, [pc, #372]	; (800743c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	4a5c      	ldr	r2, [pc, #368]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80072d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	333c      	adds	r3, #60	; 0x3c
 80072de:	001a      	movs	r2, r3
 80072e0:	1cbb      	adds	r3, r7, #2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	f7fd fd98 	bl	8004e18 <HAL_DMA_Start_IT>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e09f      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	0109      	lsls	r1, r1, #4
 80072fe:	430a      	orrs	r2, r1
 8007300:	60da      	str	r2, [r3, #12]
      break;
 8007302:	e029      	b.n	8007358 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	4a4b      	ldr	r2, [pc, #300]	; (8007438 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	4a4a      	ldr	r2, [pc, #296]	; (800743c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007312:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	4a49      	ldr	r2, [pc, #292]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800731a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3340      	adds	r3, #64	; 0x40
 8007328:	001a      	movs	r2, r3
 800732a:	1cbb      	adds	r3, r7, #2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	f7fd fd73 	bl	8004e18 <HAL_DMA_Start_IT>
 8007332:	1e03      	subs	r3, r0, #0
 8007334:	d001      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e07a      	b.n	8007430 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2180      	movs	r1, #128	; 0x80
 8007346:	0149      	lsls	r1, r1, #5
 8007348:	430a      	orrs	r2, r1
 800734a:	60da      	str	r2, [r3, #12]
      break;
 800734c:	e004      	b.n	8007358 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800734e:	2317      	movs	r3, #23
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007358:	2317      	movs	r3, #23
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d163      	bne.n	800742a <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	2201      	movs	r2, #1
 800736a:	0018      	movs	r0, r3
 800736c:	f001 f80c 	bl	8008388 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a33      	ldr	r2, [pc, #204]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <HAL_TIM_PWM_Start_DMA+0x344>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a32      	ldr	r2, [pc, #200]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <HAL_TIM_PWM_Start_DMA+0x344>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a30      	ldr	r2, [pc, #192]	; (800744c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <HAL_TIM_PWM_Start_DMA+0x344>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2f      	ldr	r2, [pc, #188]	; (8007450 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <HAL_TIM_PWM_Start_DMA+0x348>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_TIM_PWM_Start_DMA+0x34a>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	0209      	lsls	r1, r1, #8
 80073b0:	430a      	orrs	r2, r1
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d014      	beq.n	80073e8 <HAL_TIM_PWM_Start_DMA+0x394>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	2380      	movs	r3, #128	; 0x80
 80073c4:	05db      	lsls	r3, r3, #23
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d00e      	beq.n	80073e8 <HAL_TIM_PWM_Start_DMA+0x394>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <HAL_TIM_PWM_Start_DMA+0x400>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_TIM_PWM_Start_DMA+0x394>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <HAL_TIM_PWM_Start_DMA+0x404>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIM_PWM_Start_DMA+0x394>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a19      	ldr	r2, [pc, #100]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d116      	bne.n	8007416 <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <HAL_TIM_PWM_Start_DMA+0x408>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d016      	beq.n	8007428 <HAL_TIM_PWM_Start_DMA+0x3d4>
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	025b      	lsls	r3, r3, #9
 8007400:	429a      	cmp	r2, r3
 8007402:	d011      	beq.n	8007428 <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2101      	movs	r1, #1
 8007410:	430a      	orrs	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	e008      	b.n	8007428 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	430a      	orrs	r2, r1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e000      	b.n	800742a <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800742a:	2317      	movs	r3, #23
 800742c:	18fb      	adds	r3, r7, r3
 800742e:	781b      	ldrb	r3, [r3, #0]
}
 8007430:	0018      	movs	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	b006      	add	sp, #24
 8007436:	bd80      	pop	{r7, pc}
 8007438:	08007aa1 	.word	0x08007aa1
 800743c:	08007b4b 	.word	0x08007b4b
 8007440:	08007a0d 	.word	0x08007a0d
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40014000 	.word	0x40014000
 800744c:	40014400 	.word	0x40014400
 8007450:	40014800 	.word	0x40014800
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	00010007 	.word	0x00010007

08007460 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800746a:	230f      	movs	r3, #15
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b0c      	cmp	r3, #12
 8007476:	d039      	beq.n	80074ec <HAL_TIM_PWM_Stop_DMA+0x8c>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d844      	bhi.n	8007508 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b08      	cmp	r3, #8
 8007482:	d025      	beq.n	80074d0 <HAL_TIM_PWM_Stop_DMA+0x70>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b08      	cmp	r3, #8
 8007488:	d83e      	bhi.n	8007508 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_TIM_PWM_Stop_DMA+0x38>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b04      	cmp	r3, #4
 8007494:	d00e      	beq.n	80074b4 <HAL_TIM_PWM_Stop_DMA+0x54>
 8007496:	e037      	b.n	8007508 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	495c      	ldr	r1, [pc, #368]	; (8007614 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7fd fd39 	bl	8004f24 <HAL_DMA_Abort_IT>
      break;
 80074b2:	e02e      	b.n	8007512 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4956      	ldr	r1, [pc, #344]	; (8007618 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80074c0:	400a      	ands	r2, r1
 80074c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7fd fd2b 	bl	8004f24 <HAL_DMA_Abort_IT>
      break;
 80074ce:	e020      	b.n	8007512 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4950      	ldr	r1, [pc, #320]	; (800761c <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80074dc:	400a      	ands	r2, r1
 80074de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7fd fd1d 	bl	8004f24 <HAL_DMA_Abort_IT>
      break;
 80074ea:	e012      	b.n	8007512 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	494a      	ldr	r1, [pc, #296]	; (8007620 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80074f8:	400a      	ands	r2, r1
 80074fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	0018      	movs	r0, r3
 8007502:	f7fd fd0f 	bl	8004f24 <HAL_DMA_Abort_IT>
      break;
 8007506:	e004      	b.n	8007512 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8007508:	230f      	movs	r3, #15
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	2201      	movs	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
      break;
 8007510:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007512:	230f      	movs	r3, #15
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d000      	beq.n	800751e <HAL_TIM_PWM_Stop_DMA+0xbe>
 800751c:	e073      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	0018      	movs	r0, r3
 8007528:	f000 ff2e 	bl	8008388 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a3c      	ldr	r2, [pc, #240]	; (8007624 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3b      	ldr	r2, [pc, #236]	; (8007628 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a39      	ldr	r2, [pc, #228]	; (800762c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a38      	ldr	r2, [pc, #224]	; (8007630 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <HAL_TIM_PWM_Stop_DMA+0xfa>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d013      	beq.n	8007586 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	4a33      	ldr	r2, [pc, #204]	; (8007634 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007566:	4013      	ands	r3, r2
 8007568:	d10d      	bne.n	8007586 <HAL_TIM_PWM_Stop_DMA+0x126>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4a31      	ldr	r2, [pc, #196]	; (8007638 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8007572:	4013      	ands	r3, r2
 8007574:	d107      	bne.n	8007586 <HAL_TIM_PWM_Stop_DMA+0x126>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	492e      	ldr	r1, [pc, #184]	; (800763c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007582:	400a      	ands	r2, r1
 8007584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	4a29      	ldr	r2, [pc, #164]	; (8007634 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800758e:	4013      	ands	r3, r2
 8007590:	d10d      	bne.n	80075ae <HAL_TIM_PWM_Stop_DMA+0x14e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	4a27      	ldr	r2, [pc, #156]	; (8007638 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800759a:	4013      	ands	r3, r2
 800759c:	d107      	bne.n	80075ae <HAL_TIM_PWM_Stop_DMA+0x14e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2101      	movs	r1, #1
 80075aa:	438a      	bics	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_TIM_PWM_Stop_DMA+0x15e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	223e      	movs	r2, #62	; 0x3e
 80075b8:	2101      	movs	r1, #1
 80075ba:	5499      	strb	r1, [r3, r2]
 80075bc:	e023      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Stop_DMA+0x16e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	223f      	movs	r2, #63	; 0x3f
 80075c8:	2101      	movs	r1, #1
 80075ca:	5499      	strb	r1, [r3, r2]
 80075cc:	e01b      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Stop_DMA+0x17e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	2101      	movs	r1, #1
 80075da:	5499      	strb	r1, [r3, r2]
 80075dc:	e013      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b0c      	cmp	r3, #12
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Stop_DMA+0x18e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2241      	movs	r2, #65	; 0x41
 80075e8:	2101      	movs	r1, #1
 80075ea:	5499      	strb	r1, [r3, r2]
 80075ec:	e00b      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Stop_DMA+0x19e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2242      	movs	r2, #66	; 0x42
 80075f8:	2101      	movs	r1, #1
 80075fa:	5499      	strb	r1, [r3, r2]
 80075fc:	e003      	b.n	8007606 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2243      	movs	r2, #67	; 0x43
 8007602:	2101      	movs	r1, #1
 8007604:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8007606:	230f      	movs	r3, #15
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	781b      	ldrb	r3, [r3, #0]
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b004      	add	sp, #16
 8007612:	bd80      	pop	{r7, pc}
 8007614:	fffffdff 	.word	0xfffffdff
 8007618:	fffffbff 	.word	0xfffffbff
 800761c:	fffff7ff 	.word	0xfffff7ff
 8007620:	ffffefff 	.word	0xffffefff
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40014000 	.word	0x40014000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800
 8007634:	00001111 	.word	0x00001111
 8007638:	00000444 	.word	0x00000444
 800763c:	ffff7fff 	.word	0xffff7fff

08007640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800764c:	2317      	movs	r3, #23
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	223c      	movs	r2, #60	; 0x3c
 8007658:	5c9b      	ldrb	r3, [r3, r2]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_TIM_PWM_ConfigChannel+0x22>
 800765e:	2302      	movs	r3, #2
 8007660:	e0e5      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	223c      	movs	r2, #60	; 0x3c
 8007666:	2101      	movs	r1, #1
 8007668:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b14      	cmp	r3, #20
 800766e:	d900      	bls.n	8007672 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007670:	e0d1      	b.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	009a      	lsls	r2, r3, #2
 8007676:	4b70      	ldr	r3, [pc, #448]	; (8007838 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007678:	18d3      	adds	r3, r2, r3
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0011      	movs	r1, r2
 8007686:	0018      	movs	r0, r3
 8007688:	f000 fb1e 	bl	8007cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2108      	movs	r1, #8
 8007698:	430a      	orrs	r2, r1
 800769a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2104      	movs	r1, #4
 80076a8:	438a      	bics	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6999      	ldr	r1, [r3, #24]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	619a      	str	r2, [r3, #24]
      break;
 80076be:	e0af      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	0011      	movs	r1, r2
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 fb87 	bl	8007ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2180      	movs	r1, #128	; 0x80
 80076da:	0109      	lsls	r1, r1, #4
 80076dc:	430a      	orrs	r2, r1
 80076de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4954      	ldr	r1, [pc, #336]	; (800783c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80076ec:	400a      	ands	r2, r1
 80076ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6999      	ldr	r1, [r3, #24]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	021a      	lsls	r2, r3, #8
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	619a      	str	r2, [r3, #24]
      break;
 8007704:	e08c      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f000 fbe8 	bl	8007ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2108      	movs	r1, #8
 8007720:	430a      	orrs	r2, r1
 8007722:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2104      	movs	r1, #4
 8007730:	438a      	bics	r2, r1
 8007732:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69d9      	ldr	r1, [r3, #28]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	61da      	str	r2, [r3, #28]
      break;
 8007746:	e06b      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	0011      	movs	r1, r2
 8007750:	0018      	movs	r0, r3
 8007752:	f000 fc4f 	bl	8007ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	0109      	lsls	r1, r1, #4
 8007764:	430a      	orrs	r2, r1
 8007766:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69da      	ldr	r2, [r3, #28]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4932      	ldr	r1, [pc, #200]	; (800783c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007774:	400a      	ands	r2, r1
 8007776:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69d9      	ldr	r1, [r3, #28]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	61da      	str	r2, [r3, #28]
      break;
 800778c:	e048      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	0011      	movs	r1, r2
 8007796:	0018      	movs	r0, r3
 8007798:	f000 fc96 	bl	80080c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2108      	movs	r1, #8
 80077a8:	430a      	orrs	r2, r1
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2104      	movs	r1, #4
 80077b8:	438a      	bics	r2, r1
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077ce:	e027      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	0011      	movs	r1, r2
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 fcd5 	bl	8008188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	0109      	lsls	r1, r1, #4
 80077ec:	430a      	orrs	r2, r1
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4910      	ldr	r1, [pc, #64]	; (800783c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80077fc:	400a      	ands	r2, r1
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007814:	e004      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007816:	2317      	movs	r3, #23
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	2201      	movs	r2, #1
 800781c:	701a      	strb	r2, [r3, #0]
      break;
 800781e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	223c      	movs	r2, #60	; 0x3c
 8007824:	2100      	movs	r1, #0
 8007826:	5499      	strb	r1, [r3, r2]

  return status;
 8007828:	2317      	movs	r3, #23
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	781b      	ldrb	r3, [r3, #0]
}
 800782e:	0018      	movs	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	b006      	add	sp, #24
 8007834:	bd80      	pop	{r7, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	08009930 	.word	0x08009930
 800783c:	fffffbff 	.word	0xfffffbff

08007840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800784a:	230f      	movs	r3, #15
 800784c:	18fb      	adds	r3, r7, r3
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	223c      	movs	r2, #60	; 0x3c
 8007856:	5c9b      	ldrb	r3, [r3, r2]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIM_ConfigClockSource+0x20>
 800785c:	2302      	movs	r3, #2
 800785e:	e0bc      	b.n	80079da <HAL_TIM_ConfigClockSource+0x19a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	223c      	movs	r2, #60	; 0x3c
 8007864:	2101      	movs	r1, #1
 8007866:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	223d      	movs	r2, #61	; 0x3d
 800786c:	2102      	movs	r1, #2
 800786e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800787c:	4013      	ands	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a59      	ldr	r2, [pc, #356]	; (80079e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007884:	4013      	ands	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	0192      	lsls	r2, r2, #6
 8007898:	4293      	cmp	r3, r2
 800789a:	d040      	beq.n	800791e <HAL_TIM_ConfigClockSource+0xde>
 800789c:	2280      	movs	r2, #128	; 0x80
 800789e:	0192      	lsls	r2, r2, #6
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d900      	bls.n	80078a6 <HAL_TIM_ConfigClockSource+0x66>
 80078a4:	e088      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	0152      	lsls	r2, r2, #5
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d100      	bne.n	80078b0 <HAL_TIM_ConfigClockSource+0x70>
 80078ae:	e088      	b.n	80079c2 <HAL_TIM_ConfigClockSource+0x182>
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	0152      	lsls	r2, r2, #5
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d900      	bls.n	80078ba <HAL_TIM_ConfigClockSource+0x7a>
 80078b8:	e07e      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078ba:	2b70      	cmp	r3, #112	; 0x70
 80078bc:	d018      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0xb0>
 80078be:	d900      	bls.n	80078c2 <HAL_TIM_ConfigClockSource+0x82>
 80078c0:	e07a      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078c2:	2b60      	cmp	r3, #96	; 0x60
 80078c4:	d04f      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x126>
 80078c6:	d900      	bls.n	80078ca <HAL_TIM_ConfigClockSource+0x8a>
 80078c8:	e076      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078ca:	2b50      	cmp	r3, #80	; 0x50
 80078cc:	d03b      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0x106>
 80078ce:	d900      	bls.n	80078d2 <HAL_TIM_ConfigClockSource+0x92>
 80078d0:	e072      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d057      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x146>
 80078d6:	d900      	bls.n	80078da <HAL_TIM_ConfigClockSource+0x9a>
 80078d8:	e06e      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078da:	2b30      	cmp	r3, #48	; 0x30
 80078dc:	d063      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x166>
 80078de:	d86b      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d060      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x166>
 80078e4:	d868      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d05d      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x166>
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d05b      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x166>
 80078ee:	e063      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f000 fd22 	bl	8008348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2277      	movs	r2, #119	; 0x77
 8007910:	4313      	orrs	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]
      break;
 800791c:	e052      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6899      	ldr	r1, [r3, #8]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f000 fd0b 	bl	8008348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2180      	movs	r1, #128	; 0x80
 800793e:	01c9      	lsls	r1, r1, #7
 8007940:	430a      	orrs	r2, r1
 8007942:	609a      	str	r2, [r3, #8]
      break;
 8007944:	e03e      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6859      	ldr	r1, [r3, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	001a      	movs	r2, r3
 8007954:	f000 fc7c 	bl	8008250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2150      	movs	r1, #80	; 0x50
 800795e:	0018      	movs	r0, r3
 8007960:	f000 fcd6 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 8007964:	e02e      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	001a      	movs	r2, r3
 8007974:	f000 fc9a 	bl	80082ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2160      	movs	r1, #96	; 0x60
 800797e:	0018      	movs	r0, r3
 8007980:	f000 fcc6 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 8007984:	e01e      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	001a      	movs	r2, r3
 8007994:	f000 fc5c 	bl	8008250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	0018      	movs	r0, r3
 80079a0:	f000 fcb6 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e00e      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	0019      	movs	r1, r3
 80079b0:	0010      	movs	r0, r2
 80079b2:	f000 fcad 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 80079b6:	e005      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80079b8:	230f      	movs	r3, #15
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	2201      	movs	r2, #1
 80079be:	701a      	strb	r2, [r3, #0]
      break;
 80079c0:	e000      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80079c2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	223d      	movs	r2, #61	; 0x3d
 80079c8:	2101      	movs	r1, #1
 80079ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	223c      	movs	r2, #60	; 0x3c
 80079d0:	2100      	movs	r1, #0
 80079d2:	5499      	strb	r1, [r3, r2]

  return status;
 80079d4:	230f      	movs	r3, #15
 80079d6:	18fb      	adds	r3, r7, r3
 80079d8:	781b      	ldrb	r3, [r3, #0]
}
 80079da:	0018      	movs	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	b004      	add	sp, #16
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	ffceff88 	.word	0xffceff88
 80079e8:	ffff00ff 	.word	0xffff00ff

080079ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b002      	add	sp, #8
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a04:	46c0      	nop			; (mov r8, r8)
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b002      	add	sp, #8
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d107      	bne.n	8007a34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	223e      	movs	r2, #62	; 0x3e
 8007a2e:	2101      	movs	r1, #1
 8007a30:	5499      	strb	r1, [r3, r2]
 8007a32:	e02a      	b.n	8007a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d107      	bne.n	8007a4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2202      	movs	r2, #2
 8007a42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	223f      	movs	r2, #63	; 0x3f
 8007a48:	2101      	movs	r1, #1
 8007a4a:	5499      	strb	r1, [r3, r2]
 8007a4c:	e01d      	b.n	8007a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d107      	bne.n	8007a68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2240      	movs	r2, #64	; 0x40
 8007a62:	2101      	movs	r1, #1
 8007a64:	5499      	strb	r1, [r3, r2]
 8007a66:	e010      	b.n	8007a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d107      	bne.n	8007a82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2208      	movs	r2, #8
 8007a76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2241      	movs	r2, #65	; 0x41
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	5499      	strb	r1, [r3, r2]
 8007a80:	e003      	b.n	8007a8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	223d      	movs	r2, #61	; 0x3d
 8007a86:	2101      	movs	r1, #1
 8007a88:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f7ff ffb5 	bl	80079fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]
}
 8007a98:	46c0      	nop			; (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b004      	add	sp, #16
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d10b      	bne.n	8007ad0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d136      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	223e      	movs	r2, #62	; 0x3e
 8007aca:	2101      	movs	r1, #1
 8007acc:	5499      	strb	r1, [r3, r2]
 8007ace:	e031      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d10b      	bne.n	8007af2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2202      	movs	r2, #2
 8007ade:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d125      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	223f      	movs	r2, #63	; 0x3f
 8007aec:	2101      	movs	r1, #1
 8007aee:	5499      	strb	r1, [r3, r2]
 8007af0:	e020      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d10b      	bne.n	8007b14 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2204      	movs	r2, #4
 8007b00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d114      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2240      	movs	r2, #64	; 0x40
 8007b0e:	2101      	movs	r1, #1
 8007b10:	5499      	strb	r1, [r3, r2]
 8007b12:	e00f      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d10a      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2208      	movs	r2, #8
 8007b22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2241      	movs	r2, #65	; 0x41
 8007b30:	2101      	movs	r1, #1
 8007b32:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7fc ff94 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	771a      	strb	r2, [r3, #28]
}
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	46bd      	mov	sp, r7
 8007b46:	b004      	add	sp, #16
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d103      	bne.n	8007b6a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	771a      	strb	r2, [r3, #28]
 8007b68:	e019      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d103      	bne.n	8007b7c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	771a      	strb	r2, [r3, #28]
 8007b7a:	e010      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d103      	bne.n	8007b8e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	771a      	strb	r2, [r3, #28]
 8007b8c:	e007      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d102      	bne.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2208      	movs	r2, #8
 8007b9c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f7ff ff23 	bl	80079ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	771a      	strb	r2, [r3, #28]
}
 8007bac:	46c0      	nop			; (mov r8, r8)
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b004      	add	sp, #16
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a38      	ldr	r2, [pc, #224]	; (8007ca8 <TIM_Base_SetConfig+0xf4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00c      	beq.n	8007be6 <TIM_Base_SetConfig+0x32>
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	05db      	lsls	r3, r3, #23
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d007      	beq.n	8007be6 <TIM_Base_SetConfig+0x32>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a34      	ldr	r2, [pc, #208]	; (8007cac <TIM_Base_SetConfig+0xf8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_Base_SetConfig+0x32>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <TIM_Base_SetConfig+0xfc>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d108      	bne.n	8007bf8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2270      	movs	r2, #112	; 0x70
 8007bea:	4393      	bics	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a2b      	ldr	r2, [pc, #172]	; (8007ca8 <TIM_Base_SetConfig+0xf4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01c      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	05db      	lsls	r3, r3, #23
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d017      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a27      	ldr	r2, [pc, #156]	; (8007cac <TIM_Base_SetConfig+0xf8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a26      	ldr	r2, [pc, #152]	; (8007cb0 <TIM_Base_SetConfig+0xfc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00f      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a25      	ldr	r2, [pc, #148]	; (8007cb4 <TIM_Base_SetConfig+0x100>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00b      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a24      	ldr	r2, [pc, #144]	; (8007cb8 <TIM_Base_SetConfig+0x104>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a23      	ldr	r2, [pc, #140]	; (8007cbc <TIM_Base_SetConfig+0x108>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_Base_SetConfig+0x86>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <TIM_Base_SetConfig+0x10c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d108      	bne.n	8007c4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <TIM_Base_SetConfig+0x110>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2280      	movs	r2, #128	; 0x80
 8007c50:	4393      	bics	r3, r2
 8007c52:	001a      	movs	r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <TIM_Base_SetConfig+0xf4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <TIM_Base_SetConfig+0xde>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a0e      	ldr	r2, [pc, #56]	; (8007cb8 <TIM_Base_SetConfig+0x104>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <TIM_Base_SetConfig+0xde>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a0d      	ldr	r2, [pc, #52]	; (8007cbc <TIM_Base_SetConfig+0x108>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d003      	beq.n	8007c92 <TIM_Base_SetConfig+0xde>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a0c      	ldr	r2, [pc, #48]	; (8007cc0 <TIM_Base_SetConfig+0x10c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d103      	bne.n	8007c9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	615a      	str	r2, [r3, #20]
}
 8007ca0:	46c0      	nop			; (mov r8, r8)
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b004      	add	sp, #16
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40002000 	.word	0x40002000
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400
 8007cc0:	40014800 	.word	0x40014800
 8007cc4:	fffffcff 	.word	0xfffffcff

08007cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4393      	bics	r3, r2
 8007cda:	001a      	movs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a32      	ldr	r2, [pc, #200]	; (8007dc0 <TIM_OC1_SetConfig+0xf8>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	4393      	bics	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	4393      	bics	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a28      	ldr	r2, [pc, #160]	; (8007dc4 <TIM_OC1_SetConfig+0xfc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00b      	beq.n	8007d3e <TIM_OC1_SetConfig+0x76>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a27      	ldr	r2, [pc, #156]	; (8007dc8 <TIM_OC1_SetConfig+0x100>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d007      	beq.n	8007d3e <TIM_OC1_SetConfig+0x76>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <TIM_OC1_SetConfig+0x104>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d003      	beq.n	8007d3e <TIM_OC1_SetConfig+0x76>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <TIM_OC1_SetConfig+0x108>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d10c      	bne.n	8007d58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2208      	movs	r2, #8
 8007d42:	4393      	bics	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2204      	movs	r2, #4
 8007d54:	4393      	bics	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1a      	ldr	r2, [pc, #104]	; (8007dc4 <TIM_OC1_SetConfig+0xfc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00b      	beq.n	8007d78 <TIM_OC1_SetConfig+0xb0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a19      	ldr	r2, [pc, #100]	; (8007dc8 <TIM_OC1_SetConfig+0x100>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <TIM_OC1_SetConfig+0xb0>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <TIM_OC1_SetConfig+0x104>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_OC1_SetConfig+0xb0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a17      	ldr	r2, [pc, #92]	; (8007dd0 <TIM_OC1_SetConfig+0x108>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d111      	bne.n	8007d9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4a16      	ldr	r2, [pc, #88]	; (8007dd4 <TIM_OC1_SetConfig+0x10c>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <TIM_OC1_SetConfig+0x110>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	621a      	str	r2, [r3, #32]
}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	46bd      	mov	sp, r7
 8007dba:	b006      	add	sp, #24
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	fffeff8f 	.word	0xfffeff8f
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800
 8007dd4:	fffffeff 	.word	0xfffffeff
 8007dd8:	fffffdff 	.word	0xfffffdff

08007ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	2210      	movs	r2, #16
 8007dec:	4393      	bics	r3, r2
 8007dee:	001a      	movs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a2e      	ldr	r2, [pc, #184]	; (8007ec4 <TIM_OC2_SetConfig+0xe8>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a2d      	ldr	r2, [pc, #180]	; (8007ec8 <TIM_OC2_SetConfig+0xec>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2220      	movs	r2, #32
 8007e26:	4393      	bics	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <TIM_OC2_SetConfig+0xf0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10d      	bne.n	8007e5a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2280      	movs	r2, #128	; 0x80
 8007e42:	4393      	bics	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2240      	movs	r2, #64	; 0x40
 8007e56:	4393      	bics	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <TIM_OC2_SetConfig+0xf0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00b      	beq.n	8007e7a <TIM_OC2_SetConfig+0x9e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <TIM_OC2_SetConfig+0xf4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d007      	beq.n	8007e7a <TIM_OC2_SetConfig+0x9e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a19      	ldr	r2, [pc, #100]	; (8007ed4 <TIM_OC2_SetConfig+0xf8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d003      	beq.n	8007e7a <TIM_OC2_SetConfig+0x9e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <TIM_OC2_SetConfig+0xfc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d113      	bne.n	8007ea2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <TIM_OC2_SetConfig+0x100>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <TIM_OC2_SetConfig+0x104>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	621a      	str	r2, [r3, #32]
}
 8007ebc:	46c0      	nop			; (mov r8, r8)
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	b006      	add	sp, #24
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	feff8fff 	.word	0xfeff8fff
 8007ec8:	fffffcff 	.word	0xfffffcff
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40014400 	.word	0x40014400
 8007ed8:	40014800 	.word	0x40014800
 8007edc:	fffffbff 	.word	0xfffffbff
 8007ee0:	fffff7ff 	.word	0xfffff7ff

08007ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	4a35      	ldr	r2, [pc, #212]	; (8007fc8 <TIM_OC3_SetConfig+0xe4>)
 8007ef4:	401a      	ands	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4a2f      	ldr	r2, [pc, #188]	; (8007fcc <TIM_OC3_SetConfig+0xe8>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2203      	movs	r2, #3
 8007f18:	4393      	bics	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <TIM_OC3_SetConfig+0xec>)
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a25      	ldr	r2, [pc, #148]	; (8007fd4 <TIM_OC3_SetConfig+0xf0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10d      	bne.n	8007f5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4a24      	ldr	r2, [pc, #144]	; (8007fd8 <TIM_OC3_SetConfig+0xf4>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <TIM_OC3_SetConfig+0xf8>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1c      	ldr	r2, [pc, #112]	; (8007fd4 <TIM_OC3_SetConfig+0xf0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00b      	beq.n	8007f7e <TIM_OC3_SetConfig+0x9a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <TIM_OC3_SetConfig+0xfc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d007      	beq.n	8007f7e <TIM_OC3_SetConfig+0x9a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <TIM_OC3_SetConfig+0x100>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_OC3_SetConfig+0x9a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <TIM_OC3_SetConfig+0x104>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d113      	bne.n	8007fa6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <TIM_OC3_SetConfig+0x108>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	4a19      	ldr	r2, [pc, #100]	; (8007ff0 <TIM_OC3_SetConfig+0x10c>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	621a      	str	r2, [r3, #32]
}
 8007fc0:	46c0      	nop			; (mov r8, r8)
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b006      	add	sp, #24
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	fffffeff 	.word	0xfffffeff
 8007fcc:	fffeff8f 	.word	0xfffeff8f
 8007fd0:	fffffdff 	.word	0xfffffdff
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	fffff7ff 	.word	0xfffff7ff
 8007fdc:	fffffbff 	.word	0xfffffbff
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	40014800 	.word	0x40014800
 8007fec:	ffffefff 	.word	0xffffefff
 8007ff0:	ffffdfff 	.word	0xffffdfff

08007ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	4a28      	ldr	r2, [pc, #160]	; (80080a4 <TIM_OC4_SetConfig+0xb0>)
 8008004:	401a      	ands	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a22      	ldr	r2, [pc, #136]	; (80080a8 <TIM_OC4_SetConfig+0xb4>)
 8008020:	4013      	ands	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <TIM_OC4_SetConfig+0xb8>)
 8008028:	4013      	ands	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <TIM_OC4_SetConfig+0xbc>)
 800803c:	4013      	ands	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	031b      	lsls	r3, r3, #12
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a19      	ldr	r2, [pc, #100]	; (80080b4 <TIM_OC4_SetConfig+0xc0>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00b      	beq.n	800806c <TIM_OC4_SetConfig+0x78>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <TIM_OC4_SetConfig+0xc4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d007      	beq.n	800806c <TIM_OC4_SetConfig+0x78>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a17      	ldr	r2, [pc, #92]	; (80080bc <TIM_OC4_SetConfig+0xc8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_OC4_SetConfig+0x78>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <TIM_OC4_SetConfig+0xcc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d109      	bne.n	8008080 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <TIM_OC4_SetConfig+0xd0>)
 8008070:	4013      	ands	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	019b      	lsls	r3, r3, #6
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	46bd      	mov	sp, r7
 800809e:	b006      	add	sp, #24
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	ffffefff 	.word	0xffffefff
 80080a8:	feff8fff 	.word	0xfeff8fff
 80080ac:	fffffcff 	.word	0xfffffcff
 80080b0:	ffffdfff 	.word	0xffffdfff
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400
 80080c0:	40014800 	.word	0x40014800
 80080c4:	ffffbfff 	.word	0xffffbfff

080080c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	4a25      	ldr	r2, [pc, #148]	; (800816c <TIM_OC5_SetConfig+0xa4>)
 80080d8:	401a      	ands	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <TIM_OC5_SetConfig+0xa8>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4a1b      	ldr	r2, [pc, #108]	; (8008174 <TIM_OC5_SetConfig+0xac>)
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a17      	ldr	r2, [pc, #92]	; (8008178 <TIM_OC5_SetConfig+0xb0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00b      	beq.n	8008136 <TIM_OC5_SetConfig+0x6e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a16      	ldr	r2, [pc, #88]	; (800817c <TIM_OC5_SetConfig+0xb4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d007      	beq.n	8008136 <TIM_OC5_SetConfig+0x6e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a15      	ldr	r2, [pc, #84]	; (8008180 <TIM_OC5_SetConfig+0xb8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d003      	beq.n	8008136 <TIM_OC5_SetConfig+0x6e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a14      	ldr	r2, [pc, #80]	; (8008184 <TIM_OC5_SetConfig+0xbc>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d109      	bne.n	800814a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	4a0c      	ldr	r2, [pc, #48]	; (800816c <TIM_OC5_SetConfig+0xa4>)
 800813a:	4013      	ands	r3, r2
 800813c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b006      	add	sp, #24
 800816a:	bd80      	pop	{r7, pc}
 800816c:	fffeffff 	.word	0xfffeffff
 8008170:	fffeff8f 	.word	0xfffeff8f
 8008174:	fffdffff 	.word	0xfffdffff
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	4a26      	ldr	r2, [pc, #152]	; (8008230 <TIM_OC6_SetConfig+0xa8>)
 8008198:	401a      	ands	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a20      	ldr	r2, [pc, #128]	; (8008234 <TIM_OC6_SetConfig+0xac>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <TIM_OC6_SetConfig+0xb0>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	051b      	lsls	r3, r3, #20
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a18      	ldr	r2, [pc, #96]	; (800823c <TIM_OC6_SetConfig+0xb4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00b      	beq.n	80081f8 <TIM_OC6_SetConfig+0x70>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a17      	ldr	r2, [pc, #92]	; (8008240 <TIM_OC6_SetConfig+0xb8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d007      	beq.n	80081f8 <TIM_OC6_SetConfig+0x70>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a16      	ldr	r2, [pc, #88]	; (8008244 <TIM_OC6_SetConfig+0xbc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC6_SetConfig+0x70>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a15      	ldr	r2, [pc, #84]	; (8008248 <TIM_OC6_SetConfig+0xc0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d109      	bne.n	800820c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	4a14      	ldr	r2, [pc, #80]	; (800824c <TIM_OC6_SetConfig+0xc4>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	029b      	lsls	r3, r3, #10
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	46bd      	mov	sp, r7
 800822a:	b006      	add	sp, #24
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	ffefffff 	.word	0xffefffff
 8008234:	feff8fff 	.word	0xfeff8fff
 8008238:	ffdfffff 	.word	0xffdfffff
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	fffbffff 	.word	0xfffbffff

08008250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	2201      	movs	r2, #1
 8008268:	4393      	bics	r3, r2
 800826a:	001a      	movs	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	22f0      	movs	r2, #240	; 0xf0
 800827a:	4393      	bics	r3, r2
 800827c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	220a      	movs	r2, #10
 800828c:	4393      	bics	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4313      	orrs	r3, r2
 8008296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	621a      	str	r2, [r3, #32]
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b006      	add	sp, #24
 80082aa:	bd80      	pop	{r7, pc}

080082ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	2210      	movs	r2, #16
 80082be:	4393      	bics	r3, r2
 80082c0:	001a      	movs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <TIM_TI2_ConfigInputStage+0x60>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	22a0      	movs	r2, #160	; 0xa0
 80082e8:	4393      	bics	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	46bd      	mov	sp, r7
 8008306:	b006      	add	sp, #24
 8008308:	bd80      	pop	{r7, pc}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	ffff0fff 	.word	0xffff0fff

08008310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a08      	ldr	r2, [pc, #32]	; (8008344 <TIM_ITRx_SetConfig+0x34>)
 8008324:	4013      	ands	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4313      	orrs	r3, r2
 800832e:	2207      	movs	r2, #7
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	609a      	str	r2, [r3, #8]
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	b004      	add	sp, #16
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	ffcfff8f 	.word	0xffcfff8f

08008348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <TIM_ETR_SetConfig+0x3c>)
 8008360:	4013      	ands	r3, r2
 8008362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	609a      	str	r2, [r3, #8]
}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b006      	add	sp, #24
 8008382:	bd80      	pop	{r7, pc}
 8008384:	ffff00ff 	.word	0xffff00ff

08008388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	221f      	movs	r2, #31
 8008398:	4013      	ands	r3, r2
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	0013      	movs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	43d2      	mvns	r2, r2
 80083aa:	401a      	ands	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	211f      	movs	r1, #31
 80083b8:	400b      	ands	r3, r1
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4099      	lsls	r1, r3
 80083be:	000b      	movs	r3, r1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b006      	add	sp, #24
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	223c      	movs	r2, #60	; 0x3c
 80083de:	5c9b      	ldrb	r3, [r3, r2]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e05a      	b.n	800849e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	223c      	movs	r2, #60	; 0x3c
 80083ec:	2101      	movs	r1, #1
 80083ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	223d      	movs	r2, #61	; 0x3d
 80083f4:	2102      	movs	r1, #2
 80083f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d108      	bne.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a25      	ldr	r2, [pc, #148]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008416:	4013      	ands	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2270      	movs	r2, #112	; 0x70
 8008428:	4393      	bics	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d014      	beq.n	8008472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	2380      	movs	r3, #128	; 0x80
 800844e:	05db      	lsls	r3, r3, #23
 8008450:	429a      	cmp	r2, r3
 8008452:	d00e      	beq.n	8008472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a15      	ldr	r2, [pc, #84]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d004      	beq.n	8008472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a12      	ldr	r2, [pc, #72]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10c      	bne.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2280      	movs	r2, #128	; 0x80
 8008476:	4393      	bics	r3, r2
 8008478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	4313      	orrs	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	223d      	movs	r2, #61	; 0x3d
 8008490:	2101      	movs	r1, #1
 8008492:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	223c      	movs	r2, #60	; 0x3c
 8008498:	2100      	movs	r1, #0
 800849a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	0018      	movs	r0, r3
 80084a0:	46bd      	mov	sp, r7
 80084a2:	b004      	add	sp, #16
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	ff0fffff 	.word	0xff0fffff
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40014000 	.word	0x40014000

080084bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	223c      	movs	r2, #60	; 0x3c
 80084ce:	5c9b      	ldrb	r3, [r3, r2]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e079      	b.n	80085cc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	223c      	movs	r2, #60	; 0x3c
 80084dc:	2101      	movs	r1, #1
 80084de:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	22ff      	movs	r2, #255	; 0xff
 80084e4:	4393      	bics	r3, r2
 80084e6:	001a      	movs	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a38      	ldr	r2, [pc, #224]	; (80085d4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80084f4:	401a      	ands	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008502:	401a      	ands	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4a33      	ldr	r2, [pc, #204]	; (80085dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008510:	401a      	ands	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a30      	ldr	r2, [pc, #192]	; (80085e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800851e:	401a      	ands	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a2e      	ldr	r2, [pc, #184]	; (80085e4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800852c:	401a      	ands	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a2b      	ldr	r2, [pc, #172]	; (80085e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800853a:	401a      	ands	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a29      	ldr	r2, [pc, #164]	; (80085ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008548:	401a      	ands	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d106      	bne.n	800856c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a24      	ldr	r2, [pc, #144]	; (80085f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008562:	401a      	ands	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d121      	bne.n	80085ba <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4a1f      	ldr	r2, [pc, #124]	; (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800857a:	401a      	ands	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	051b      	lsls	r3, r3, #20
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4a1c      	ldr	r2, [pc, #112]	; (80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800858a:	401a      	ands	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4a1a      	ldr	r2, [pc, #104]	; (8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008598:	401a      	ands	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a12      	ldr	r2, [pc, #72]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d106      	bne.n	80085ba <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a15      	ldr	r2, [pc, #84]	; (8008604 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80085b0:	401a      	ands	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	223c      	movs	r2, #60	; 0x3c
 80085c6:	2100      	movs	r1, #0
 80085c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	0018      	movs	r0, r3
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b004      	add	sp, #16
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	fffffcff 	.word	0xfffffcff
 80085d8:	fffffbff 	.word	0xfffffbff
 80085dc:	fffff7ff 	.word	0xfffff7ff
 80085e0:	ffffefff 	.word	0xffffefff
 80085e4:	ffffdfff 	.word	0xffffdfff
 80085e8:	ffffbfff 	.word	0xffffbfff
 80085ec:	fff0ffff 	.word	0xfff0ffff
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	efffffff 	.word	0xefffffff
 80085f8:	ff0fffff 	.word	0xff0fffff
 80085fc:	feffffff 	.word	0xfeffffff
 8008600:	fdffffff 	.word	0xfdffffff
 8008604:	dfffffff 	.word	0xdfffffff

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	2600      	movs	r6, #0
 800860c:	4d0c      	ldr	r5, [pc, #48]	; (8008640 <__libc_init_array+0x38>)
 800860e:	4c0d      	ldr	r4, [pc, #52]	; (8008644 <__libc_init_array+0x3c>)
 8008610:	1b64      	subs	r4, r4, r5
 8008612:	10a4      	asrs	r4, r4, #2
 8008614:	42a6      	cmp	r6, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	2600      	movs	r6, #0
 800861a:	f001 f89d 	bl	8009758 <_init>
 800861e:	4d0a      	ldr	r5, [pc, #40]	; (8008648 <__libc_init_array+0x40>)
 8008620:	4c0a      	ldr	r4, [pc, #40]	; (800864c <__libc_init_array+0x44>)
 8008622:	1b64      	subs	r4, r4, r5
 8008624:	10a4      	asrs	r4, r4, #2
 8008626:	42a6      	cmp	r6, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	00b3      	lsls	r3, r6, #2
 800862e:	58eb      	ldr	r3, [r5, r3]
 8008630:	4798      	blx	r3
 8008632:	3601      	adds	r6, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	00b3      	lsls	r3, r6, #2
 8008638:	58eb      	ldr	r3, [r5, r3]
 800863a:	4798      	blx	r3
 800863c:	3601      	adds	r6, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	08009b60 	.word	0x08009b60
 8008644:	08009b60 	.word	0x08009b60
 8008648:	08009b60 	.word	0x08009b60
 800864c:	08009b64 	.word	0x08009b64

08008650 <memset>:
 8008650:	0003      	movs	r3, r0
 8008652:	1882      	adds	r2, r0, r2
 8008654:	4293      	cmp	r3, r2
 8008656:	d100      	bne.n	800865a <memset+0xa>
 8008658:	4770      	bx	lr
 800865a:	7019      	strb	r1, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	e7f9      	b.n	8008654 <memset+0x4>

08008660 <tan>:
 8008660:	b5d0      	push	{r4, r6, r7, lr}
 8008662:	4a12      	ldr	r2, [pc, #72]	; (80086ac <tan+0x4c>)
 8008664:	004b      	lsls	r3, r1, #1
 8008666:	b086      	sub	sp, #24
 8008668:	085b      	lsrs	r3, r3, #1
 800866a:	4293      	cmp	r3, r2
 800866c:	dc06      	bgt.n	800867c <tan+0x1c>
 800866e:	2301      	movs	r3, #1
 8008670:	2200      	movs	r2, #0
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2300      	movs	r3, #0
 8008676:	f000 fd77 	bl	8009168 <__kernel_tan>
 800867a:	e006      	b.n	800868a <tan+0x2a>
 800867c:	4a0c      	ldr	r2, [pc, #48]	; (80086b0 <tan+0x50>)
 800867e:	4293      	cmp	r3, r2
 8008680:	dd05      	ble.n	800868e <tan+0x2e>
 8008682:	0002      	movs	r2, r0
 8008684:	000b      	movs	r3, r1
 8008686:	f7f9 fe15 	bl	80022b4 <__aeabi_dsub>
 800868a:	b006      	add	sp, #24
 800868c:	bdd0      	pop	{r4, r6, r7, pc}
 800868e:	aa02      	add	r2, sp, #8
 8008690:	f000 f810 	bl	80086b4 <__ieee754_rem_pio2>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	9b05      	ldr	r3, [sp, #20]
 8008698:	2102      	movs	r1, #2
 800869a:	0040      	lsls	r0, r0, #1
 800869c:	4008      	ands	r0, r1
 800869e:	3901      	subs	r1, #1
 80086a0:	1a08      	subs	r0, r1, r0
 80086a2:	9000      	str	r0, [sp, #0]
 80086a4:	9802      	ldr	r0, [sp, #8]
 80086a6:	9903      	ldr	r1, [sp, #12]
 80086a8:	e7e5      	b.n	8008676 <tan+0x16>
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	3fe921fb 	.word	0x3fe921fb
 80086b0:	7fefffff 	.word	0x7fefffff

080086b4 <__ieee754_rem_pio2>:
 80086b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b6:	004b      	lsls	r3, r1, #1
 80086b8:	b091      	sub	sp, #68	; 0x44
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	9302      	str	r3, [sp, #8]
 80086be:	0017      	movs	r7, r2
 80086c0:	4bb6      	ldr	r3, [pc, #728]	; (800899c <__ieee754_rem_pio2+0x2e8>)
 80086c2:	9a02      	ldr	r2, [sp, #8]
 80086c4:	0004      	movs	r4, r0
 80086c6:	000d      	movs	r5, r1
 80086c8:	9109      	str	r1, [sp, #36]	; 0x24
 80086ca:	429a      	cmp	r2, r3
 80086cc:	dc09      	bgt.n	80086e2 <__ieee754_rem_pio2+0x2e>
 80086ce:	0002      	movs	r2, r0
 80086d0:	000b      	movs	r3, r1
 80086d2:	603a      	str	r2, [r7, #0]
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2300      	movs	r3, #0
 80086da:	60ba      	str	r2, [r7, #8]
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	2600      	movs	r6, #0
 80086e0:	e025      	b.n	800872e <__ieee754_rem_pio2+0x7a>
 80086e2:	4baf      	ldr	r3, [pc, #700]	; (80089a0 <__ieee754_rem_pio2+0x2ec>)
 80086e4:	9a02      	ldr	r2, [sp, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	dd00      	ble.n	80086ec <__ieee754_rem_pio2+0x38>
 80086ea:	e06e      	b.n	80087ca <__ieee754_rem_pio2+0x116>
 80086ec:	4ead      	ldr	r6, [pc, #692]	; (80089a4 <__ieee754_rem_pio2+0x2f0>)
 80086ee:	4aae      	ldr	r2, [pc, #696]	; (80089a8 <__ieee754_rem_pio2+0x2f4>)
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd35      	ble.n	8008760 <__ieee754_rem_pio2+0xac>
 80086f4:	0020      	movs	r0, r4
 80086f6:	0029      	movs	r1, r5
 80086f8:	4baa      	ldr	r3, [pc, #680]	; (80089a4 <__ieee754_rem_pio2+0x2f0>)
 80086fa:	f7f9 fddb 	bl	80022b4 <__aeabi_dsub>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	0004      	movs	r4, r0
 8008702:	000d      	movs	r5, r1
 8008704:	42b3      	cmp	r3, r6
 8008706:	d015      	beq.n	8008734 <__ieee754_rem_pio2+0x80>
 8008708:	4aa8      	ldr	r2, [pc, #672]	; (80089ac <__ieee754_rem_pio2+0x2f8>)
 800870a:	4ba9      	ldr	r3, [pc, #676]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 800870c:	f7f9 fdd2 	bl	80022b4 <__aeabi_dsub>
 8008710:	0002      	movs	r2, r0
 8008712:	000b      	movs	r3, r1
 8008714:	0020      	movs	r0, r4
 8008716:	603a      	str	r2, [r7, #0]
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	0029      	movs	r1, r5
 800871c:	f7f9 fdca 	bl	80022b4 <__aeabi_dsub>
 8008720:	4aa2      	ldr	r2, [pc, #648]	; (80089ac <__ieee754_rem_pio2+0x2f8>)
 8008722:	4ba3      	ldr	r3, [pc, #652]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 8008724:	f7f9 fdc6 	bl	80022b4 <__aeabi_dsub>
 8008728:	2601      	movs	r6, #1
 800872a:	60b8      	str	r0, [r7, #8]
 800872c:	60f9      	str	r1, [r7, #12]
 800872e:	0030      	movs	r0, r6
 8008730:	b011      	add	sp, #68	; 0x44
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008734:	22d3      	movs	r2, #211	; 0xd3
 8008736:	4b9e      	ldr	r3, [pc, #632]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 8008738:	0552      	lsls	r2, r2, #21
 800873a:	f7f9 fdbb 	bl	80022b4 <__aeabi_dsub>
 800873e:	4a9d      	ldr	r2, [pc, #628]	; (80089b4 <__ieee754_rem_pio2+0x300>)
 8008740:	4b9d      	ldr	r3, [pc, #628]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 8008742:	0004      	movs	r4, r0
 8008744:	000d      	movs	r5, r1
 8008746:	f7f9 fdb5 	bl	80022b4 <__aeabi_dsub>
 800874a:	0002      	movs	r2, r0
 800874c:	000b      	movs	r3, r1
 800874e:	0020      	movs	r0, r4
 8008750:	603a      	str	r2, [r7, #0]
 8008752:	607b      	str	r3, [r7, #4]
 8008754:	0029      	movs	r1, r5
 8008756:	f7f9 fdad 	bl	80022b4 <__aeabi_dsub>
 800875a:	4a96      	ldr	r2, [pc, #600]	; (80089b4 <__ieee754_rem_pio2+0x300>)
 800875c:	4b96      	ldr	r3, [pc, #600]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 800875e:	e7e1      	b.n	8008724 <__ieee754_rem_pio2+0x70>
 8008760:	0020      	movs	r0, r4
 8008762:	0029      	movs	r1, r5
 8008764:	4b8f      	ldr	r3, [pc, #572]	; (80089a4 <__ieee754_rem_pio2+0x2f0>)
 8008766:	f7f8 fbfb 	bl	8000f60 <__aeabi_dadd>
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	0004      	movs	r4, r0
 800876e:	000d      	movs	r5, r1
 8008770:	42b3      	cmp	r3, r6
 8008772:	d014      	beq.n	800879e <__ieee754_rem_pio2+0xea>
 8008774:	4a8d      	ldr	r2, [pc, #564]	; (80089ac <__ieee754_rem_pio2+0x2f8>)
 8008776:	4b8e      	ldr	r3, [pc, #568]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 8008778:	f7f8 fbf2 	bl	8000f60 <__aeabi_dadd>
 800877c:	0002      	movs	r2, r0
 800877e:	000b      	movs	r3, r1
 8008780:	0020      	movs	r0, r4
 8008782:	603a      	str	r2, [r7, #0]
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	0029      	movs	r1, r5
 8008788:	f7f9 fd94 	bl	80022b4 <__aeabi_dsub>
 800878c:	4a87      	ldr	r2, [pc, #540]	; (80089ac <__ieee754_rem_pio2+0x2f8>)
 800878e:	4b88      	ldr	r3, [pc, #544]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 8008790:	f7f8 fbe6 	bl	8000f60 <__aeabi_dadd>
 8008794:	2601      	movs	r6, #1
 8008796:	60b8      	str	r0, [r7, #8]
 8008798:	60f9      	str	r1, [r7, #12]
 800879a:	4276      	negs	r6, r6
 800879c:	e7c7      	b.n	800872e <__ieee754_rem_pio2+0x7a>
 800879e:	22d3      	movs	r2, #211	; 0xd3
 80087a0:	4b83      	ldr	r3, [pc, #524]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 80087a2:	0552      	lsls	r2, r2, #21
 80087a4:	f7f8 fbdc 	bl	8000f60 <__aeabi_dadd>
 80087a8:	4a82      	ldr	r2, [pc, #520]	; (80089b4 <__ieee754_rem_pio2+0x300>)
 80087aa:	4b83      	ldr	r3, [pc, #524]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 80087ac:	0004      	movs	r4, r0
 80087ae:	000d      	movs	r5, r1
 80087b0:	f7f8 fbd6 	bl	8000f60 <__aeabi_dadd>
 80087b4:	0002      	movs	r2, r0
 80087b6:	000b      	movs	r3, r1
 80087b8:	0020      	movs	r0, r4
 80087ba:	603a      	str	r2, [r7, #0]
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	0029      	movs	r1, r5
 80087c0:	f7f9 fd78 	bl	80022b4 <__aeabi_dsub>
 80087c4:	4a7b      	ldr	r2, [pc, #492]	; (80089b4 <__ieee754_rem_pio2+0x300>)
 80087c6:	4b7c      	ldr	r3, [pc, #496]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 80087c8:	e7e2      	b.n	8008790 <__ieee754_rem_pio2+0xdc>
 80087ca:	4b7c      	ldr	r3, [pc, #496]	; (80089bc <__ieee754_rem_pio2+0x308>)
 80087cc:	9a02      	ldr	r2, [sp, #8]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	dd00      	ble.n	80087d4 <__ieee754_rem_pio2+0x120>
 80087d2:	e0d3      	b.n	800897c <__ieee754_rem_pio2+0x2c8>
 80087d4:	0020      	movs	r0, r4
 80087d6:	0029      	movs	r1, r5
 80087d8:	f000 febc 	bl	8009554 <fabs>
 80087dc:	4a78      	ldr	r2, [pc, #480]	; (80089c0 <__ieee754_rem_pio2+0x30c>)
 80087de:	4b79      	ldr	r3, [pc, #484]	; (80089c4 <__ieee754_rem_pio2+0x310>)
 80087e0:	0004      	movs	r4, r0
 80087e2:	000d      	movs	r5, r1
 80087e4:	f7f9 fafa 	bl	8001ddc <__aeabi_dmul>
 80087e8:	2200      	movs	r2, #0
 80087ea:	4b77      	ldr	r3, [pc, #476]	; (80089c8 <__ieee754_rem_pio2+0x314>)
 80087ec:	f7f8 fbb8 	bl	8000f60 <__aeabi_dadd>
 80087f0:	f7fa f8f2 	bl	80029d8 <__aeabi_d2iz>
 80087f4:	0006      	movs	r6, r0
 80087f6:	f7fa f925 	bl	8002a44 <__aeabi_i2d>
 80087fa:	4a6b      	ldr	r2, [pc, #428]	; (80089a8 <__ieee754_rem_pio2+0x2f4>)
 80087fc:	4b69      	ldr	r3, [pc, #420]	; (80089a4 <__ieee754_rem_pio2+0x2f0>)
 80087fe:	9006      	str	r0, [sp, #24]
 8008800:	9107      	str	r1, [sp, #28]
 8008802:	f7f9 faeb 	bl	8001ddc <__aeabi_dmul>
 8008806:	0002      	movs	r2, r0
 8008808:	000b      	movs	r3, r1
 800880a:	0020      	movs	r0, r4
 800880c:	0029      	movs	r1, r5
 800880e:	f7f9 fd51 	bl	80022b4 <__aeabi_dsub>
 8008812:	4a66      	ldr	r2, [pc, #408]	; (80089ac <__ieee754_rem_pio2+0x2f8>)
 8008814:	9004      	str	r0, [sp, #16]
 8008816:	9105      	str	r1, [sp, #20]
 8008818:	9806      	ldr	r0, [sp, #24]
 800881a:	9907      	ldr	r1, [sp, #28]
 800881c:	4b64      	ldr	r3, [pc, #400]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 800881e:	f7f9 fadd 	bl	8001ddc <__aeabi_dmul>
 8008822:	0004      	movs	r4, r0
 8008824:	000d      	movs	r5, r1
 8008826:	2e1f      	cmp	r6, #31
 8008828:	dc0f      	bgt.n	800884a <__ieee754_rem_pio2+0x196>
 800882a:	4a68      	ldr	r2, [pc, #416]	; (80089cc <__ieee754_rem_pio2+0x318>)
 800882c:	1e73      	subs	r3, r6, #1
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	589b      	ldr	r3, [r3, r2]
 8008832:	9a02      	ldr	r2, [sp, #8]
 8008834:	4293      	cmp	r3, r2
 8008836:	d008      	beq.n	800884a <__ieee754_rem_pio2+0x196>
 8008838:	9804      	ldr	r0, [sp, #16]
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	0022      	movs	r2, r4
 800883e:	002b      	movs	r3, r5
 8008840:	f7f9 fd38 	bl	80022b4 <__aeabi_dsub>
 8008844:	6038      	str	r0, [r7, #0]
 8008846:	6079      	str	r1, [r7, #4]
 8008848:	e012      	b.n	8008870 <__ieee754_rem_pio2+0x1bc>
 800884a:	0022      	movs	r2, r4
 800884c:	9804      	ldr	r0, [sp, #16]
 800884e:	9905      	ldr	r1, [sp, #20]
 8008850:	002b      	movs	r3, r5
 8008852:	f7f9 fd2f 	bl	80022b4 <__aeabi_dsub>
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	151b      	asrs	r3, r3, #20
 800885a:	9308      	str	r3, [sp, #32]
 800885c:	9a08      	ldr	r2, [sp, #32]
 800885e:	004b      	lsls	r3, r1, #1
 8008860:	0d5b      	lsrs	r3, r3, #21
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b10      	cmp	r3, #16
 8008866:	dc21      	bgt.n	80088ac <__ieee754_rem_pio2+0x1f8>
 8008868:	0002      	movs	r2, r0
 800886a:	000b      	movs	r3, r1
 800886c:	603a      	str	r2, [r7, #0]
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	9804      	ldr	r0, [sp, #16]
 8008872:	9905      	ldr	r1, [sp, #20]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	9b02      	ldr	r3, [sp, #8]
 800887c:	f7f9 fd1a 	bl	80022b4 <__aeabi_dsub>
 8008880:	0022      	movs	r2, r4
 8008882:	002b      	movs	r3, r5
 8008884:	f7f9 fd16 	bl	80022b4 <__aeabi_dsub>
 8008888:	000b      	movs	r3, r1
 800888a:	0002      	movs	r2, r0
 800888c:	60ba      	str	r2, [r7, #8]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	db00      	blt.n	8008898 <__ieee754_rem_pio2+0x1e4>
 8008896:	e74a      	b.n	800872e <__ieee754_rem_pio2+0x7a>
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	469c      	mov	ip, r3
 800889e:	9c02      	ldr	r4, [sp, #8]
 80088a0:	18c9      	adds	r1, r1, r3
 80088a2:	4464      	add	r4, ip
 80088a4:	607c      	str	r4, [r7, #4]
 80088a6:	60b8      	str	r0, [r7, #8]
 80088a8:	60f9      	str	r1, [r7, #12]
 80088aa:	e776      	b.n	800879a <__ieee754_rem_pio2+0xe6>
 80088ac:	22d3      	movs	r2, #211	; 0xd3
 80088ae:	9806      	ldr	r0, [sp, #24]
 80088b0:	9907      	ldr	r1, [sp, #28]
 80088b2:	4b3f      	ldr	r3, [pc, #252]	; (80089b0 <__ieee754_rem_pio2+0x2fc>)
 80088b4:	0552      	lsls	r2, r2, #21
 80088b6:	f7f9 fa91 	bl	8001ddc <__aeabi_dmul>
 80088ba:	0004      	movs	r4, r0
 80088bc:	000d      	movs	r5, r1
 80088be:	0002      	movs	r2, r0
 80088c0:	000b      	movs	r3, r1
 80088c2:	9804      	ldr	r0, [sp, #16]
 80088c4:	9905      	ldr	r1, [sp, #20]
 80088c6:	f7f9 fcf5 	bl	80022b4 <__aeabi_dsub>
 80088ca:	0002      	movs	r2, r0
 80088cc:	000b      	movs	r3, r1
 80088ce:	9002      	str	r0, [sp, #8]
 80088d0:	9103      	str	r1, [sp, #12]
 80088d2:	9804      	ldr	r0, [sp, #16]
 80088d4:	9905      	ldr	r1, [sp, #20]
 80088d6:	f7f9 fced 	bl	80022b4 <__aeabi_dsub>
 80088da:	0022      	movs	r2, r4
 80088dc:	002b      	movs	r3, r5
 80088de:	f7f9 fce9 	bl	80022b4 <__aeabi_dsub>
 80088e2:	0004      	movs	r4, r0
 80088e4:	000d      	movs	r5, r1
 80088e6:	9806      	ldr	r0, [sp, #24]
 80088e8:	9907      	ldr	r1, [sp, #28]
 80088ea:	4a32      	ldr	r2, [pc, #200]	; (80089b4 <__ieee754_rem_pio2+0x300>)
 80088ec:	4b32      	ldr	r3, [pc, #200]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 80088ee:	f7f9 fa75 	bl	8001ddc <__aeabi_dmul>
 80088f2:	0022      	movs	r2, r4
 80088f4:	002b      	movs	r3, r5
 80088f6:	f7f9 fcdd 	bl	80022b4 <__aeabi_dsub>
 80088fa:	0002      	movs	r2, r0
 80088fc:	000b      	movs	r3, r1
 80088fe:	0004      	movs	r4, r0
 8008900:	000d      	movs	r5, r1
 8008902:	9802      	ldr	r0, [sp, #8]
 8008904:	9903      	ldr	r1, [sp, #12]
 8008906:	f7f9 fcd5 	bl	80022b4 <__aeabi_dsub>
 800890a:	9a08      	ldr	r2, [sp, #32]
 800890c:	004b      	lsls	r3, r1, #1
 800890e:	0d5b      	lsrs	r3, r3, #21
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b31      	cmp	r3, #49	; 0x31
 8008914:	dc08      	bgt.n	8008928 <__ieee754_rem_pio2+0x274>
 8008916:	0002      	movs	r2, r0
 8008918:	000b      	movs	r3, r1
 800891a:	603a      	str	r2, [r7, #0]
 800891c:	607b      	str	r3, [r7, #4]
 800891e:	9a02      	ldr	r2, [sp, #8]
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	9204      	str	r2, [sp, #16]
 8008924:	9305      	str	r3, [sp, #20]
 8008926:	e7a3      	b.n	8008870 <__ieee754_rem_pio2+0x1bc>
 8008928:	22b8      	movs	r2, #184	; 0xb8
 800892a:	9806      	ldr	r0, [sp, #24]
 800892c:	9907      	ldr	r1, [sp, #28]
 800892e:	4b22      	ldr	r3, [pc, #136]	; (80089b8 <__ieee754_rem_pio2+0x304>)
 8008930:	0592      	lsls	r2, r2, #22
 8008932:	f7f9 fa53 	bl	8001ddc <__aeabi_dmul>
 8008936:	0004      	movs	r4, r0
 8008938:	000d      	movs	r5, r1
 800893a:	0002      	movs	r2, r0
 800893c:	000b      	movs	r3, r1
 800893e:	9802      	ldr	r0, [sp, #8]
 8008940:	9903      	ldr	r1, [sp, #12]
 8008942:	f7f9 fcb7 	bl	80022b4 <__aeabi_dsub>
 8008946:	0002      	movs	r2, r0
 8008948:	000b      	movs	r3, r1
 800894a:	9004      	str	r0, [sp, #16]
 800894c:	9105      	str	r1, [sp, #20]
 800894e:	9802      	ldr	r0, [sp, #8]
 8008950:	9903      	ldr	r1, [sp, #12]
 8008952:	f7f9 fcaf 	bl	80022b4 <__aeabi_dsub>
 8008956:	0022      	movs	r2, r4
 8008958:	002b      	movs	r3, r5
 800895a:	f7f9 fcab 	bl	80022b4 <__aeabi_dsub>
 800895e:	0004      	movs	r4, r0
 8008960:	000d      	movs	r5, r1
 8008962:	9806      	ldr	r0, [sp, #24]
 8008964:	9907      	ldr	r1, [sp, #28]
 8008966:	4a1a      	ldr	r2, [pc, #104]	; (80089d0 <__ieee754_rem_pio2+0x31c>)
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <__ieee754_rem_pio2+0x320>)
 800896a:	f7f9 fa37 	bl	8001ddc <__aeabi_dmul>
 800896e:	0022      	movs	r2, r4
 8008970:	002b      	movs	r3, r5
 8008972:	f7f9 fc9f 	bl	80022b4 <__aeabi_dsub>
 8008976:	0004      	movs	r4, r0
 8008978:	000d      	movs	r5, r1
 800897a:	e75d      	b.n	8008838 <__ieee754_rem_pio2+0x184>
 800897c:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <__ieee754_rem_pio2+0x324>)
 800897e:	9a02      	ldr	r2, [sp, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	dd2b      	ble.n	80089dc <__ieee754_rem_pio2+0x328>
 8008984:	0022      	movs	r2, r4
 8008986:	002b      	movs	r3, r5
 8008988:	0020      	movs	r0, r4
 800898a:	0029      	movs	r1, r5
 800898c:	f7f9 fc92 	bl	80022b4 <__aeabi_dsub>
 8008990:	60b8      	str	r0, [r7, #8]
 8008992:	60f9      	str	r1, [r7, #12]
 8008994:	6038      	str	r0, [r7, #0]
 8008996:	6079      	str	r1, [r7, #4]
 8008998:	e6a1      	b.n	80086de <__ieee754_rem_pio2+0x2a>
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	3fe921fb 	.word	0x3fe921fb
 80089a0:	4002d97b 	.word	0x4002d97b
 80089a4:	3ff921fb 	.word	0x3ff921fb
 80089a8:	54400000 	.word	0x54400000
 80089ac:	1a626331 	.word	0x1a626331
 80089b0:	3dd0b461 	.word	0x3dd0b461
 80089b4:	2e037073 	.word	0x2e037073
 80089b8:	3ba3198a 	.word	0x3ba3198a
 80089bc:	413921fb 	.word	0x413921fb
 80089c0:	6dc9c883 	.word	0x6dc9c883
 80089c4:	3fe45f30 	.word	0x3fe45f30
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	08009984 	.word	0x08009984
 80089d0:	252049c1 	.word	0x252049c1
 80089d4:	397b839a 	.word	0x397b839a
 80089d8:	7fefffff 	.word	0x7fefffff
 80089dc:	9a02      	ldr	r2, [sp, #8]
 80089de:	0020      	movs	r0, r4
 80089e0:	1516      	asrs	r6, r2, #20
 80089e2:	4a29      	ldr	r2, [pc, #164]	; (8008a88 <__ieee754_rem_pio2+0x3d4>)
 80089e4:	18b6      	adds	r6, r6, r2
 80089e6:	9a02      	ldr	r2, [sp, #8]
 80089e8:	0533      	lsls	r3, r6, #20
 80089ea:	1ad5      	subs	r5, r2, r3
 80089ec:	0029      	movs	r1, r5
 80089ee:	f7f9 fff3 	bl	80029d8 <__aeabi_d2iz>
 80089f2:	f7fa f827 	bl	8002a44 <__aeabi_i2d>
 80089f6:	0002      	movs	r2, r0
 80089f8:	000b      	movs	r3, r1
 80089fa:	0020      	movs	r0, r4
 80089fc:	0029      	movs	r1, r5
 80089fe:	920a      	str	r2, [sp, #40]	; 0x28
 8008a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a02:	f7f9 fc57 	bl	80022b4 <__aeabi_dsub>
 8008a06:	2200      	movs	r2, #0
 8008a08:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <__ieee754_rem_pio2+0x3d8>)
 8008a0a:	f7f9 f9e7 	bl	8001ddc <__aeabi_dmul>
 8008a0e:	000d      	movs	r5, r1
 8008a10:	0004      	movs	r4, r0
 8008a12:	f7f9 ffe1 	bl	80029d8 <__aeabi_d2iz>
 8008a16:	f7fa f815 	bl	8002a44 <__aeabi_i2d>
 8008a1a:	0002      	movs	r2, r0
 8008a1c:	000b      	movs	r3, r1
 8008a1e:	0020      	movs	r0, r4
 8008a20:	0029      	movs	r1, r5
 8008a22:	920c      	str	r2, [sp, #48]	; 0x30
 8008a24:	930d      	str	r3, [sp, #52]	; 0x34
 8008a26:	f7f9 fc45 	bl	80022b4 <__aeabi_dsub>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4b17      	ldr	r3, [pc, #92]	; (8008a8c <__ieee754_rem_pio2+0x3d8>)
 8008a2e:	f7f9 f9d5 	bl	8001ddc <__aeabi_dmul>
 8008a32:	2503      	movs	r5, #3
 8008a34:	900e      	str	r0, [sp, #56]	; 0x38
 8008a36:	910f      	str	r1, [sp, #60]	; 0x3c
 8008a38:	ac0a      	add	r4, sp, #40	; 0x28
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6920      	ldr	r0, [r4, #16]
 8008a3e:	6961      	ldr	r1, [r4, #20]
 8008a40:	2300      	movs	r3, #0
 8008a42:	9502      	str	r5, [sp, #8]
 8008a44:	3c08      	subs	r4, #8
 8008a46:	3d01      	subs	r5, #1
 8008a48:	f7f7 fce2 	bl	8000410 <__aeabi_dcmpeq>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1f4      	bne.n	8008a3a <__ieee754_rem_pio2+0x386>
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <__ieee754_rem_pio2+0x3dc>)
 8008a52:	0032      	movs	r2, r6
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	2302      	movs	r3, #2
 8008a58:	0039      	movs	r1, r7
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	a80a      	add	r0, sp, #40	; 0x28
 8008a5e:	9b02      	ldr	r3, [sp, #8]
 8008a60:	f000 f818 	bl	8008a94 <__kernel_rem_pio2>
 8008a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a66:	0006      	movs	r6, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	db00      	blt.n	8008a6e <__ieee754_rem_pio2+0x3ba>
 8008a6c:	e65f      	b.n	800872e <__ieee754_rem_pio2+0x7a>
 8008a6e:	2180      	movs	r1, #128	; 0x80
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	0609      	lsls	r1, r1, #24
 8008a76:	1843      	adds	r3, r0, r1
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	603a      	str	r2, [r7, #0]
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	1843      	adds	r3, r0, r1
 8008a82:	60ba      	str	r2, [r7, #8]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e688      	b.n	800879a <__ieee754_rem_pio2+0xe6>
 8008a88:	fffffbea 	.word	0xfffffbea
 8008a8c:	41700000 	.word	0x41700000
 8008a90:	08009a04 	.word	0x08009a04

08008a94 <__kernel_rem_pio2>:
 8008a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a96:	4ccb      	ldr	r4, [pc, #812]	; (8008dc4 <__kernel_rem_pio2+0x330>)
 8008a98:	44a5      	add	sp, r4
 8008a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a9c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a9e:	0014      	movs	r4, r2
 8008aa0:	009a      	lsls	r2, r3, #2
 8008aa2:	4bc9      	ldr	r3, [pc, #804]	; (8008dc8 <__kernel_rem_pio2+0x334>)
 8008aa4:	900e      	str	r0, [sp, #56]	; 0x38
 8008aa6:	58d3      	ldr	r3, [r2, r3]
 8008aa8:	9107      	str	r1, [sp, #28]
 8008aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8008aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	0023      	movs	r3, r4
 8008ab8:	3314      	adds	r3, #20
 8008aba:	db04      	blt.n	8008ac6 <__kernel_rem_pio2+0x32>
 8008abc:	2118      	movs	r1, #24
 8008abe:	1ee0      	subs	r0, r4, #3
 8008ac0:	f7f7 fbaa 	bl	8000218 <__divsi3>
 8008ac4:	9000      	str	r0, [sp, #0]
 8008ac6:	2218      	movs	r2, #24
 8008ac8:	9b00      	ldr	r3, [sp, #0]
 8008aca:	4252      	negs	r2, r2
 8008acc:	3301      	adds	r3, #1
 8008ace:	435a      	muls	r2, r3
 8008ad0:	1913      	adds	r3, r2, r4
 8008ad2:	9302      	str	r3, [sp, #8]
 8008ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	ae26      	add	r6, sp, #152	; 0x98
 8008ada:	1a9d      	subs	r5, r3, r2
 8008adc:	002c      	movs	r4, r5
 8008ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae0:	189f      	adds	r7, r3, r2
 8008ae2:	1b63      	subs	r3, r4, r5
 8008ae4:	429f      	cmp	r7, r3
 8008ae6:	da0f      	bge.n	8008b08 <__kernel_rem_pio2+0x74>
 8008ae8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008aea:	af76      	add	r7, sp, #472	; 0x1d8
 8008aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af0:	1af3      	subs	r3, r6, r3
 8008af2:	429a      	cmp	r2, r3
 8008af4:	db30      	blt.n	8008b58 <__kernel_rem_pio2+0xc4>
 8008af6:	ab26      	add	r3, sp, #152	; 0x98
 8008af8:	00f4      	lsls	r4, r6, #3
 8008afa:	2200      	movs	r2, #0
 8008afc:	18e4      	adds	r4, r4, r3
 8008afe:	2300      	movs	r3, #0
 8008b00:	2500      	movs	r5, #0
 8008b02:	9204      	str	r2, [sp, #16]
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	e01e      	b.n	8008b46 <__kernel_rem_pio2+0xb2>
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	db07      	blt.n	8008b1c <__kernel_rem_pio2+0x88>
 8008b0c:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8008b0e:	00a3      	lsls	r3, r4, #2
 8008b10:	58d0      	ldr	r0, [r2, r3]
 8008b12:	f7f9 ff97 	bl	8002a44 <__aeabi_i2d>
 8008b16:	c603      	stmia	r6!, {r0, r1}
 8008b18:	3401      	adds	r4, #1
 8008b1a:	e7e2      	b.n	8008ae2 <__kernel_rem_pio2+0x4e>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	e7f9      	b.n	8008b16 <__kernel_rem_pio2+0x82>
 8008b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b24:	00e9      	lsls	r1, r5, #3
 8008b26:	1859      	adds	r1, r3, r1
 8008b28:	6808      	ldr	r0, [r1, #0]
 8008b2a:	6849      	ldr	r1, [r1, #4]
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	6863      	ldr	r3, [r4, #4]
 8008b30:	f7f9 f954 	bl	8001ddc <__aeabi_dmul>
 8008b34:	0002      	movs	r2, r0
 8008b36:	000b      	movs	r3, r1
 8008b38:	9804      	ldr	r0, [sp, #16]
 8008b3a:	9905      	ldr	r1, [sp, #20]
 8008b3c:	f7f8 fa10 	bl	8000f60 <__aeabi_dadd>
 8008b40:	9004      	str	r0, [sp, #16]
 8008b42:	9105      	str	r1, [sp, #20]
 8008b44:	3501      	adds	r5, #1
 8008b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b48:	3c08      	subs	r4, #8
 8008b4a:	429d      	cmp	r5, r3
 8008b4c:	dde9      	ble.n	8008b22 <__kernel_rem_pio2+0x8e>
 8008b4e:	9b04      	ldr	r3, [sp, #16]
 8008b50:	9c05      	ldr	r4, [sp, #20]
 8008b52:	3601      	adds	r6, #1
 8008b54:	c718      	stmia	r7!, {r3, r4}
 8008b56:	e7c9      	b.n	8008aec <__kernel_rem_pio2+0x58>
 8008b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5a:	aa12      	add	r2, sp, #72	; 0x48
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	189b      	adds	r3, r3, r2
 8008b60:	9310      	str	r3, [sp, #64]	; 0x40
 8008b62:	9b00      	ldr	r3, [sp, #0]
 8008b64:	0098      	lsls	r0, r3, #2
 8008b66:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008b68:	181b      	adds	r3, r3, r0
 8008b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9b04      	ldr	r3, [sp, #16]
 8008b72:	aa76      	add	r2, sp, #472	; 0x1d8
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	681c      	ldr	r4, [r3, #0]
 8008b7a:	685d      	ldr	r5, [r3, #4]
 8008b7c:	ab12      	add	r3, sp, #72	; 0x48
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	9309      	str	r3, [sp, #36]	; 0x24
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	9211      	str	r2, [sp, #68]	; 0x44
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dc74      	bgt.n	8008c78 <__kernel_rem_pio2+0x1e4>
 8008b8e:	0020      	movs	r0, r4
 8008b90:	0029      	movs	r1, r5
 8008b92:	9a02      	ldr	r2, [sp, #8]
 8008b94:	f000 fd6c 	bl	8009670 <scalbn>
 8008b98:	23ff      	movs	r3, #255	; 0xff
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	059b      	lsls	r3, r3, #22
 8008b9e:	0004      	movs	r4, r0
 8008ba0:	000d      	movs	r5, r1
 8008ba2:	f7f9 f91b 	bl	8001ddc <__aeabi_dmul>
 8008ba6:	f000 fcd9 	bl	800955c <floor>
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b87      	ldr	r3, [pc, #540]	; (8008dcc <__kernel_rem_pio2+0x338>)
 8008bae:	f7f9 f915 	bl	8001ddc <__aeabi_dmul>
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	000b      	movs	r3, r1
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	0029      	movs	r1, r5
 8008bba:	f7f9 fb7b 	bl	80022b4 <__aeabi_dsub>
 8008bbe:	000d      	movs	r5, r1
 8008bc0:	0004      	movs	r4, r0
 8008bc2:	f7f9 ff09 	bl	80029d8 <__aeabi_d2iz>
 8008bc6:	9009      	str	r0, [sp, #36]	; 0x24
 8008bc8:	f7f9 ff3c 	bl	8002a44 <__aeabi_i2d>
 8008bcc:	000b      	movs	r3, r1
 8008bce:	0002      	movs	r2, r0
 8008bd0:	0029      	movs	r1, r5
 8008bd2:	0020      	movs	r0, r4
 8008bd4:	f7f9 fb6e 	bl	80022b4 <__aeabi_dsub>
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	0006      	movs	r6, r0
 8008bdc:	000f      	movs	r7, r1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd74      	ble.n	8008ccc <__kernel_rem_pio2+0x238>
 8008be2:	2118      	movs	r1, #24
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	aa12      	add	r2, sp, #72	; 0x48
 8008be8:	3b01      	subs	r3, #1
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	589a      	ldr	r2, [r3, r2]
 8008bee:	9802      	ldr	r0, [sp, #8]
 8008bf0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008bf2:	1a09      	subs	r1, r1, r0
 8008bf4:	0010      	movs	r0, r2
 8008bf6:	4108      	asrs	r0, r1
 8008bf8:	1824      	adds	r4, r4, r0
 8008bfa:	4088      	lsls	r0, r1
 8008bfc:	a912      	add	r1, sp, #72	; 0x48
 8008bfe:	1a12      	subs	r2, r2, r0
 8008c00:	505a      	str	r2, [r3, r1]
 8008c02:	2317      	movs	r3, #23
 8008c04:	9902      	ldr	r1, [sp, #8]
 8008c06:	9409      	str	r4, [sp, #36]	; 0x24
 8008c08:	1a5b      	subs	r3, r3, r1
 8008c0a:	411a      	asrs	r2, r3
 8008c0c:	9208      	str	r2, [sp, #32]
 8008c0e:	9b08      	ldr	r3, [sp, #32]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dd6d      	ble.n	8008cf0 <__kernel_rem_pio2+0x25c>
 8008c14:	2200      	movs	r2, #0
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	2080      	movs	r0, #128	; 0x80
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	4b6c      	ldr	r3, [pc, #432]	; (8008dd0 <__kernel_rem_pio2+0x33c>)
 8008c20:	0014      	movs	r4, r2
 8008c22:	469c      	mov	ip, r3
 8008c24:	2501      	movs	r5, #1
 8008c26:	0440      	lsls	r0, r0, #17
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	dd00      	ble.n	8008c30 <__kernel_rem_pio2+0x19c>
 8008c2e:	e099      	b.n	8008d64 <__kernel_rem_pio2+0x2d0>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dd05      	ble.n	8008c42 <__kernel_rem_pio2+0x1ae>
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d100      	bne.n	8008c3c <__kernel_rem_pio2+0x1a8>
 8008c3a:	e0a9      	b.n	8008d90 <__kernel_rem_pio2+0x2fc>
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d100      	bne.n	8008c42 <__kernel_rem_pio2+0x1ae>
 8008c40:	e0b1      	b.n	8008da6 <__kernel_rem_pio2+0x312>
 8008c42:	9b08      	ldr	r3, [sp, #32]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d153      	bne.n	8008cf0 <__kernel_rem_pio2+0x25c>
 8008c48:	0032      	movs	r2, r6
 8008c4a:	003b      	movs	r3, r7
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4961      	ldr	r1, [pc, #388]	; (8008dd4 <__kernel_rem_pio2+0x340>)
 8008c50:	f7f9 fb30 	bl	80022b4 <__aeabi_dsub>
 8008c54:	0006      	movs	r6, r0
 8008c56:	000f      	movs	r7, r1
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	d049      	beq.n	8008cf0 <__kernel_rem_pio2+0x25c>
 8008c5c:	9a02      	ldr	r2, [sp, #8]
 8008c5e:	2000      	movs	r0, #0
 8008c60:	495c      	ldr	r1, [pc, #368]	; (8008dd4 <__kernel_rem_pio2+0x340>)
 8008c62:	f000 fd05 	bl	8009670 <scalbn>
 8008c66:	0002      	movs	r2, r0
 8008c68:	000b      	movs	r3, r1
 8008c6a:	0030      	movs	r0, r6
 8008c6c:	0039      	movs	r1, r7
 8008c6e:	f7f9 fb21 	bl	80022b4 <__aeabi_dsub>
 8008c72:	0006      	movs	r6, r0
 8008c74:	000f      	movs	r7, r1
 8008c76:	e03b      	b.n	8008cf0 <__kernel_rem_pio2+0x25c>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4b57      	ldr	r3, [pc, #348]	; (8008dd8 <__kernel_rem_pio2+0x344>)
 8008c7c:	0020      	movs	r0, r4
 8008c7e:	0029      	movs	r1, r5
 8008c80:	f7f9 f8ac 	bl	8001ddc <__aeabi_dmul>
 8008c84:	f7f9 fea8 	bl	80029d8 <__aeabi_d2iz>
 8008c88:	f7f9 fedc 	bl	8002a44 <__aeabi_i2d>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4b53      	ldr	r3, [pc, #332]	; (8008ddc <__kernel_rem_pio2+0x348>)
 8008c90:	0006      	movs	r6, r0
 8008c92:	000f      	movs	r7, r1
 8008c94:	f7f9 f8a2 	bl	8001ddc <__aeabi_dmul>
 8008c98:	0002      	movs	r2, r0
 8008c9a:	000b      	movs	r3, r1
 8008c9c:	0020      	movs	r0, r4
 8008c9e:	0029      	movs	r1, r5
 8008ca0:	f7f9 fb08 	bl	80022b4 <__aeabi_dsub>
 8008ca4:	f7f9 fe98 	bl	80029d8 <__aeabi_d2iz>
 8008ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cac:	c301      	stmia	r3!, {r0}
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	0030      	movs	r0, r6
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	9308      	str	r3, [sp, #32]
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	18d3      	adds	r3, r2, r3
 8008cbc:	0039      	movs	r1, r7
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f7f8 f94d 	bl	8000f60 <__aeabi_dadd>
 8008cc6:	0004      	movs	r4, r0
 8008cc8:	000d      	movs	r5, r1
 8008cca:	e75d      	b.n	8008b88 <__kernel_rem_pio2+0xf4>
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d107      	bne.n	8008ce2 <__kernel_rem_pio2+0x24e>
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	aa12      	add	r2, sp, #72	; 0x48
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	5898      	ldr	r0, [r3, r2]
 8008cdc:	15c3      	asrs	r3, r0, #23
 8008cde:	9308      	str	r3, [sp, #32]
 8008ce0:	e795      	b.n	8008c0e <__kernel_rem_pio2+0x17a>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4b3e      	ldr	r3, [pc, #248]	; (8008de0 <__kernel_rem_pio2+0x34c>)
 8008ce6:	f7f7 fbb7 	bl	8000458 <__aeabi_dcmpge>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d137      	bne.n	8008d5e <__kernel_rem_pio2+0x2ca>
 8008cee:	9008      	str	r0, [sp, #32]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	0030      	movs	r0, r6
 8008cf6:	0039      	movs	r1, r7
 8008cf8:	f7f7 fb8a 	bl	8000410 <__aeabi_dcmpeq>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d100      	bne.n	8008d02 <__kernel_rem_pio2+0x26e>
 8008d00:	e0b9      	b.n	8008e76 <__kernel_rem_pio2+0x3e2>
 8008d02:	2200      	movs	r2, #0
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d0c:	428b      	cmp	r3, r1
 8008d0e:	da53      	bge.n	8008db8 <__kernel_rem_pio2+0x324>
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	d100      	bne.n	8008d16 <__kernel_rem_pio2+0x282>
 8008d14:	e095      	b.n	8008e42 <__kernel_rem_pio2+0x3ae>
 8008d16:	9b02      	ldr	r3, [sp, #8]
 8008d18:	aa12      	add	r2, sp, #72	; 0x48
 8008d1a:	3b18      	subs	r3, #24
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	589b      	ldr	r3, [r3, r2]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d100      	bne.n	8008d2a <__kernel_rem_pio2+0x296>
 8008d28:	e0a1      	b.n	8008e6e <__kernel_rem_pio2+0x3da>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	9a02      	ldr	r2, [sp, #8]
 8008d2e:	4929      	ldr	r1, [pc, #164]	; (8008dd4 <__kernel_rem_pio2+0x340>)
 8008d30:	f000 fc9e 	bl	8009670 <scalbn>
 8008d34:	0006      	movs	r6, r0
 8008d36:	000f      	movs	r7, r1
 8008d38:	9c00      	ldr	r4, [sp, #0]
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	db00      	blt.n	8008d40 <__kernel_rem_pio2+0x2ac>
 8008d3e:	e0d9      	b.n	8008ef4 <__kernel_rem_pio2+0x460>
 8008d40:	9c00      	ldr	r4, [sp, #0]
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	da00      	bge.n	8008d48 <__kernel_rem_pio2+0x2b4>
 8008d46:	e10c      	b.n	8008f62 <__kernel_rem_pio2+0x4ce>
 8008d48:	ab76      	add	r3, sp, #472	; 0x1d8
 8008d4a:	00e6      	lsls	r6, r4, #3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	18f6      	adds	r6, r6, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	9202      	str	r2, [sp, #8]
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	9b00      	ldr	r3, [sp, #0]
 8008d58:	2500      	movs	r5, #0
 8008d5a:	1b1f      	subs	r7, r3, r4
 8008d5c:	e0f3      	b.n	8008f46 <__kernel_rem_pio2+0x4b2>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	e757      	b.n	8008c14 <__kernel_rem_pio2+0x180>
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2c00      	cmp	r4, #0
 8008d6a:	d10b      	bne.n	8008d84 <__kernel_rem_pio2+0x2f0>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <__kernel_rem_pio2+0x2e4>
 8008d70:	9c00      	ldr	r4, [sp, #0]
 8008d72:	1ac3      	subs	r3, r0, r3
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	002b      	movs	r3, r5
 8008d78:	9c00      	ldr	r4, [sp, #0]
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	3404      	adds	r4, #4
 8008d7e:	9400      	str	r4, [sp, #0]
 8008d80:	001c      	movs	r4, r3
 8008d82:	e751      	b.n	8008c28 <__kernel_rem_pio2+0x194>
 8008d84:	4661      	mov	r1, ip
 8008d86:	1acb      	subs	r3, r1, r3
 8008d88:	9900      	ldr	r1, [sp, #0]
 8008d8a:	600b      	str	r3, [r1, #0]
 8008d8c:	0023      	movs	r3, r4
 8008d8e:	e7f3      	b.n	8008d78 <__kernel_rem_pio2+0x2e4>
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	aa12      	add	r2, sp, #72	; 0x48
 8008d94:	3b01      	subs	r3, #1
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	589a      	ldr	r2, [r3, r2]
 8008d9a:	9200      	str	r2, [sp, #0]
 8008d9c:	0252      	lsls	r2, r2, #9
 8008d9e:	0a52      	lsrs	r2, r2, #9
 8008da0:	a912      	add	r1, sp, #72	; 0x48
 8008da2:	505a      	str	r2, [r3, r1]
 8008da4:	e74d      	b.n	8008c42 <__kernel_rem_pio2+0x1ae>
 8008da6:	9b04      	ldr	r3, [sp, #16]
 8008da8:	aa12      	add	r2, sp, #72	; 0x48
 8008daa:	3b01      	subs	r3, #1
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	589a      	ldr	r2, [r3, r2]
 8008db0:	9200      	str	r2, [sp, #0]
 8008db2:	0292      	lsls	r2, r2, #10
 8008db4:	0a92      	lsrs	r2, r2, #10
 8008db6:	e7f3      	b.n	8008da0 <__kernel_rem_pio2+0x30c>
 8008db8:	0099      	lsls	r1, r3, #2
 8008dba:	a812      	add	r0, sp, #72	; 0x48
 8008dbc:	5809      	ldr	r1, [r1, r0]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	e7a2      	b.n	8008d0a <__kernel_rem_pio2+0x276>
 8008dc4:	fffffd84 	.word	0xfffffd84
 8008dc8:	08009b50 	.word	0x08009b50
 8008dcc:	40200000 	.word	0x40200000
 8008dd0:	00ffffff 	.word	0x00ffffff
 8008dd4:	3ff00000 	.word	0x3ff00000
 8008dd8:	3e700000 	.word	0x3e700000
 8008ddc:	41700000 	.word	0x41700000
 8008de0:	3fe00000 	.word	0x3fe00000
 8008de4:	3301      	adds	r3, #1
 8008de6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008de8:	009a      	lsls	r2, r3, #2
 8008dea:	4252      	negs	r2, r2
 8008dec:	588a      	ldr	r2, [r1, r2]
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	d0f8      	beq.n	8008de4 <__kernel_rem_pio2+0x350>
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008df6:	1c57      	adds	r7, r2, #1
 8008df8:	1854      	adds	r4, r2, r1
 8008dfa:	00e4      	lsls	r4, r4, #3
 8008dfc:	aa26      	add	r2, sp, #152	; 0x98
 8008dfe:	1914      	adds	r4, r2, r4
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	18d3      	adds	r3, r2, r3
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	42bb      	cmp	r3, r7
 8008e0a:	da00      	bge.n	8008e0e <__kernel_rem_pio2+0x37a>
 8008e0c:	e6b0      	b.n	8008b70 <__kernel_rem_pio2+0xdc>
 8008e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e10:	00bb      	lsls	r3, r7, #2
 8008e12:	58d0      	ldr	r0, [r2, r3]
 8008e14:	f7f9 fe16 	bl	8002a44 <__aeabi_i2d>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	0026      	movs	r6, r4
 8008e1e:	2500      	movs	r5, #0
 8008e20:	6020      	str	r0, [r4, #0]
 8008e22:	6061      	str	r1, [r4, #4]
 8008e24:	9200      	str	r2, [sp, #0]
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	dd0b      	ble.n	8008e46 <__kernel_rem_pio2+0x3b2>
 8008e2e:	00fb      	lsls	r3, r7, #3
 8008e30:	aa76      	add	r2, sp, #472	; 0x1d8
 8008e32:	18d3      	adds	r3, r2, r3
 8008e34:	3701      	adds	r7, #1
 8008e36:	9900      	ldr	r1, [sp, #0]
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	3408      	adds	r4, #8
 8008e3c:	6019      	str	r1, [r3, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	e7e1      	b.n	8008e06 <__kernel_rem_pio2+0x372>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7cf      	b.n	8008de6 <__kernel_rem_pio2+0x352>
 8008e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e48:	00e9      	lsls	r1, r5, #3
 8008e4a:	1859      	adds	r1, r3, r1
 8008e4c:	6808      	ldr	r0, [r1, #0]
 8008e4e:	6849      	ldr	r1, [r1, #4]
 8008e50:	6832      	ldr	r2, [r6, #0]
 8008e52:	6873      	ldr	r3, [r6, #4]
 8008e54:	f7f8 ffc2 	bl	8001ddc <__aeabi_dmul>
 8008e58:	0002      	movs	r2, r0
 8008e5a:	000b      	movs	r3, r1
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	9901      	ldr	r1, [sp, #4]
 8008e60:	f7f8 f87e 	bl	8000f60 <__aeabi_dadd>
 8008e64:	3501      	adds	r5, #1
 8008e66:	9000      	str	r0, [sp, #0]
 8008e68:	9101      	str	r1, [sp, #4]
 8008e6a:	3e08      	subs	r6, #8
 8008e6c:	e7dc      	b.n	8008e28 <__kernel_rem_pio2+0x394>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	e74f      	b.n	8008d16 <__kernel_rem_pio2+0x282>
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	0030      	movs	r0, r6
 8008e7a:	425a      	negs	r2, r3
 8008e7c:	0039      	movs	r1, r7
 8008e7e:	f000 fbf7 	bl	8009670 <scalbn>
 8008e82:	2200      	movs	r2, #0
 8008e84:	4bb5      	ldr	r3, [pc, #724]	; (800915c <__kernel_rem_pio2+0x6c8>)
 8008e86:	0004      	movs	r4, r0
 8008e88:	000d      	movs	r5, r1
 8008e8a:	f7f7 fae5 	bl	8000458 <__aeabi_dcmpge>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d025      	beq.n	8008ede <__kernel_rem_pio2+0x44a>
 8008e92:	2200      	movs	r2, #0
 8008e94:	4bb2      	ldr	r3, [pc, #712]	; (8009160 <__kernel_rem_pio2+0x6cc>)
 8008e96:	0020      	movs	r0, r4
 8008e98:	0029      	movs	r1, r5
 8008e9a:	f7f8 ff9f 	bl	8001ddc <__aeabi_dmul>
 8008e9e:	f7f9 fd9b 	bl	80029d8 <__aeabi_d2iz>
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	0006      	movs	r6, r0
 8008ea6:	009f      	lsls	r7, r3, #2
 8008ea8:	f7f9 fdcc 	bl	8002a44 <__aeabi_i2d>
 8008eac:	2200      	movs	r2, #0
 8008eae:	4bab      	ldr	r3, [pc, #684]	; (800915c <__kernel_rem_pio2+0x6c8>)
 8008eb0:	f7f8 ff94 	bl	8001ddc <__aeabi_dmul>
 8008eb4:	0002      	movs	r2, r0
 8008eb6:	000b      	movs	r3, r1
 8008eb8:	0020      	movs	r0, r4
 8008eba:	0029      	movs	r1, r5
 8008ebc:	f7f9 f9fa 	bl	80022b4 <__aeabi_dsub>
 8008ec0:	f7f9 fd8a 	bl	80029d8 <__aeabi_d2iz>
 8008ec4:	ab12      	add	r3, sp, #72	; 0x48
 8008ec6:	51d8      	str	r0, [r3, r7]
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	aa12      	add	r2, sp, #72	; 0x48
 8008ecc:	3301      	adds	r3, #1
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	9b02      	ldr	r3, [sp, #8]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	509e      	str	r6, [r3, r2]
 8008edc:	e725      	b.n	8008d2a <__kernel_rem_pio2+0x296>
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	0020      	movs	r0, r4
 8008ee2:	0029      	movs	r1, r5
 8008ee4:	009e      	lsls	r6, r3, #2
 8008ee6:	f7f9 fd77 	bl	80029d8 <__aeabi_d2iz>
 8008eea:	ab12      	add	r3, sp, #72	; 0x48
 8008eec:	5198      	str	r0, [r3, r6]
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	e71a      	b.n	8008d2a <__kernel_rem_pio2+0x296>
 8008ef4:	00e5      	lsls	r5, r4, #3
 8008ef6:	ab76      	add	r3, sp, #472	; 0x1d8
 8008ef8:	aa12      	add	r2, sp, #72	; 0x48
 8008efa:	195d      	adds	r5, r3, r5
 8008efc:	00a3      	lsls	r3, r4, #2
 8008efe:	5898      	ldr	r0, [r3, r2]
 8008f00:	f7f9 fda0 	bl	8002a44 <__aeabi_i2d>
 8008f04:	0032      	movs	r2, r6
 8008f06:	003b      	movs	r3, r7
 8008f08:	f7f8 ff68 	bl	8001ddc <__aeabi_dmul>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	6028      	str	r0, [r5, #0]
 8008f10:	6069      	str	r1, [r5, #4]
 8008f12:	4b93      	ldr	r3, [pc, #588]	; (8009160 <__kernel_rem_pio2+0x6cc>)
 8008f14:	0030      	movs	r0, r6
 8008f16:	0039      	movs	r1, r7
 8008f18:	f7f8 ff60 	bl	8001ddc <__aeabi_dmul>
 8008f1c:	3c01      	subs	r4, #1
 8008f1e:	0006      	movs	r6, r0
 8008f20:	000f      	movs	r7, r1
 8008f22:	e70a      	b.n	8008d3a <__kernel_rem_pio2+0x2a6>
 8008f24:	4b8f      	ldr	r3, [pc, #572]	; (8009164 <__kernel_rem_pio2+0x6d0>)
 8008f26:	00e9      	lsls	r1, r5, #3
 8008f28:	1859      	adds	r1, r3, r1
 8008f2a:	6808      	ldr	r0, [r1, #0]
 8008f2c:	6849      	ldr	r1, [r1, #4]
 8008f2e:	ce0c      	ldmia	r6!, {r2, r3}
 8008f30:	f7f8 ff54 	bl	8001ddc <__aeabi_dmul>
 8008f34:	0002      	movs	r2, r0
 8008f36:	000b      	movs	r3, r1
 8008f38:	9802      	ldr	r0, [sp, #8]
 8008f3a:	9903      	ldr	r1, [sp, #12]
 8008f3c:	f7f8 f810 	bl	8000f60 <__aeabi_dadd>
 8008f40:	9002      	str	r0, [sp, #8]
 8008f42:	9103      	str	r1, [sp, #12]
 8008f44:	3501      	adds	r5, #1
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	429d      	cmp	r5, r3
 8008f4a:	dc01      	bgt.n	8008f50 <__kernel_rem_pio2+0x4bc>
 8008f4c:	42bd      	cmp	r5, r7
 8008f4e:	dde9      	ble.n	8008f24 <__kernel_rem_pio2+0x490>
 8008f50:	ab4e      	add	r3, sp, #312	; 0x138
 8008f52:	00ff      	lsls	r7, r7, #3
 8008f54:	19df      	adds	r7, r3, r7
 8008f56:	3c01      	subs	r4, #1
 8008f58:	9a02      	ldr	r2, [sp, #8]
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	603a      	str	r2, [r7, #0]
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e6ef      	b.n	8008d42 <__kernel_rem_pio2+0x2ae>
 8008f62:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	dc0e      	bgt.n	8008f86 <__kernel_rem_pio2+0x4f2>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dd00      	ble.n	8008f6e <__kernel_rem_pio2+0x4da>
 8008f6c:	e08c      	b.n	8009088 <__kernel_rem_pio2+0x5f4>
 8008f6e:	2500      	movs	r5, #0
 8008f70:	002c      	movs	r4, r5
 8008f72:	42ab      	cmp	r3, r5
 8008f74:	d046      	beq.n	8009004 <__kernel_rem_pio2+0x570>
 8008f76:	2007      	movs	r0, #7
 8008f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7a:	4003      	ands	r3, r0
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	239f      	movs	r3, #159	; 0x9f
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	449d      	add	sp, r3
 8008f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d1f4      	bne.n	8008f76 <__kernel_rem_pio2+0x4e2>
 8008f8c:	9b00      	ldr	r3, [sp, #0]
 8008f8e:	00dc      	lsls	r4, r3, #3
 8008f90:	ab4e      	add	r3, sp, #312	; 0x138
 8008f92:	191c      	adds	r4, r3, r4
 8008f94:	0025      	movs	r5, r4
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	3d08      	subs	r5, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dd00      	ble.n	8008fa4 <__kernel_rem_pio2+0x510>
 8008fa2:	e07f      	b.n	80090a4 <__kernel_rem_pio2+0x610>
 8008fa4:	9d00      	ldr	r5, [sp, #0]
 8008fa6:	3c08      	subs	r4, #8
 8008fa8:	2d01      	cmp	r5, #1
 8008faa:	dd00      	ble.n	8008fae <__kernel_rem_pio2+0x51a>
 8008fac:	e09c      	b.n	80090e8 <__kernel_rem_pio2+0x654>
 8008fae:	2400      	movs	r4, #0
 8008fb0:	0021      	movs	r1, r4
 8008fb2:	9b00      	ldr	r3, [sp, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	dd00      	ble.n	8008fba <__kernel_rem_pio2+0x526>
 8008fb8:	e0b4      	b.n	8009124 <__kernel_rem_pio2+0x690>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8008fbe:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8008fc0:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8008fc2:	9851      	ldr	r0, [sp, #324]	; 0x144
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d000      	beq.n	8008fca <__kernel_rem_pio2+0x536>
 8008fc8:	e0ba      	b.n	8009140 <__kernel_rem_pio2+0x6ac>
 8008fca:	0033      	movs	r3, r6
 8008fcc:	003a      	movs	r2, r7
 8008fce:	9e07      	ldr	r6, [sp, #28]
 8008fd0:	6032      	str	r2, [r6, #0]
 8008fd2:	6073      	str	r3, [r6, #4]
 8008fd4:	002a      	movs	r2, r5
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	60b2      	str	r2, [r6, #8]
 8008fda:	60f3      	str	r3, [r6, #12]
 8008fdc:	0022      	movs	r2, r4
 8008fde:	000b      	movs	r3, r1
 8008fe0:	6132      	str	r2, [r6, #16]
 8008fe2:	6173      	str	r3, [r6, #20]
 8008fe4:	e7c7      	b.n	8008f76 <__kernel_rem_pio2+0x4e2>
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	aa4e      	add	r2, sp, #312	; 0x138
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	18d3      	adds	r3, r2, r3
 8008fee:	0028      	movs	r0, r5
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	0021      	movs	r1, r4
 8008ff6:	f7f7 ffb3 	bl	8000f60 <__aeabi_dadd>
 8008ffa:	0005      	movs	r5, r0
 8008ffc:	000c      	movs	r4, r1
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	daed      	bge.n	8008fe6 <__kernel_rem_pio2+0x552>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <__kernel_rem_pio2+0x582>
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	061b      	lsls	r3, r3, #24
 8009014:	18e4      	adds	r4, r4, r3
 8009016:	002a      	movs	r2, r5
 8009018:	0023      	movs	r3, r4
 800901a:	9907      	ldr	r1, [sp, #28]
 800901c:	600a      	str	r2, [r1, #0]
 800901e:	604b      	str	r3, [r1, #4]
 8009020:	e7a9      	b.n	8008f76 <__kernel_rem_pio2+0x4e2>
 8009022:	00e3      	lsls	r3, r4, #3
 8009024:	aa4e      	add	r2, sp, #312	; 0x138
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	0030      	movs	r0, r6
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	0029      	movs	r1, r5
 8009030:	f7f7 ff96 	bl	8000f60 <__aeabi_dadd>
 8009034:	0006      	movs	r6, r0
 8009036:	000d      	movs	r5, r1
 8009038:	3c01      	subs	r4, #1
 800903a:	2c00      	cmp	r4, #0
 800903c:	daf1      	bge.n	8009022 <__kernel_rem_pio2+0x58e>
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	0029      	movs	r1, r5
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <__kernel_rem_pio2+0x5b8>
 8009046:	2380      	movs	r3, #128	; 0x80
 8009048:	061b      	lsls	r3, r3, #24
 800904a:	18e9      	adds	r1, r5, r3
 800904c:	0032      	movs	r2, r6
 800904e:	000b      	movs	r3, r1
 8009050:	9907      	ldr	r1, [sp, #28]
 8009052:	2401      	movs	r4, #1
 8009054:	600a      	str	r2, [r1, #0]
 8009056:	604b      	str	r3, [r1, #4]
 8009058:	984e      	ldr	r0, [sp, #312]	; 0x138
 800905a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800905c:	002b      	movs	r3, r5
 800905e:	f7f9 f929 	bl	80022b4 <__aeabi_dsub>
 8009062:	0007      	movs	r7, r0
 8009064:	000e      	movs	r6, r1
 8009066:	ad4e      	add	r5, sp, #312	; 0x138
 8009068:	9b00      	ldr	r3, [sp, #0]
 800906a:	3508      	adds	r5, #8
 800906c:	42a3      	cmp	r3, r4
 800906e:	da0f      	bge.n	8009090 <__kernel_rem_pio2+0x5fc>
 8009070:	9b08      	ldr	r3, [sp, #32]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <__kernel_rem_pio2+0x5e8>
 8009076:	2380      	movs	r3, #128	; 0x80
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	18f6      	adds	r6, r6, r3
 800907c:	003a      	movs	r2, r7
 800907e:	0033      	movs	r3, r6
 8009080:	9907      	ldr	r1, [sp, #28]
 8009082:	608a      	str	r2, [r1, #8]
 8009084:	60cb      	str	r3, [r1, #12]
 8009086:	e776      	b.n	8008f76 <__kernel_rem_pio2+0x4e2>
 8009088:	2600      	movs	r6, #0
 800908a:	9c00      	ldr	r4, [sp, #0]
 800908c:	0035      	movs	r5, r6
 800908e:	e7d4      	b.n	800903a <__kernel_rem_pio2+0x5a6>
 8009090:	0038      	movs	r0, r7
 8009092:	682a      	ldr	r2, [r5, #0]
 8009094:	686b      	ldr	r3, [r5, #4]
 8009096:	0031      	movs	r1, r6
 8009098:	f7f7 ff62 	bl	8000f60 <__aeabi_dadd>
 800909c:	3401      	adds	r4, #1
 800909e:	0007      	movs	r7, r0
 80090a0:	000e      	movs	r6, r1
 80090a2:	e7e1      	b.n	8009068 <__kernel_rem_pio2+0x5d4>
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	68ae      	ldr	r6, [r5, #8]
 80090a8:	68ef      	ldr	r7, [r5, #12]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	9302      	str	r3, [sp, #8]
 80090ae:	682a      	ldr	r2, [r5, #0]
 80090b0:	686b      	ldr	r3, [r5, #4]
 80090b2:	9204      	str	r2, [sp, #16]
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	9804      	ldr	r0, [sp, #16]
 80090b8:	9905      	ldr	r1, [sp, #20]
 80090ba:	0032      	movs	r2, r6
 80090bc:	003b      	movs	r3, r7
 80090be:	f7f7 ff4f 	bl	8000f60 <__aeabi_dadd>
 80090c2:	0002      	movs	r2, r0
 80090c4:	000b      	movs	r3, r1
 80090c6:	900a      	str	r0, [sp, #40]	; 0x28
 80090c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80090ca:	9804      	ldr	r0, [sp, #16]
 80090cc:	9905      	ldr	r1, [sp, #20]
 80090ce:	f7f9 f8f1 	bl	80022b4 <__aeabi_dsub>
 80090d2:	0032      	movs	r2, r6
 80090d4:	003b      	movs	r3, r7
 80090d6:	f7f7 ff43 	bl	8000f60 <__aeabi_dadd>
 80090da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090de:	60a8      	str	r0, [r5, #8]
 80090e0:	60e9      	str	r1, [r5, #12]
 80090e2:	602a      	str	r2, [r5, #0]
 80090e4:	606b      	str	r3, [r5, #4]
 80090e6:	e758      	b.n	8008f9a <__kernel_rem_pio2+0x506>
 80090e8:	6826      	ldr	r6, [r4, #0]
 80090ea:	6867      	ldr	r7, [r4, #4]
 80090ec:	68a2      	ldr	r2, [r4, #8]
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	0030      	movs	r0, r6
 80090f2:	0039      	movs	r1, r7
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	9303      	str	r3, [sp, #12]
 80090f8:	f7f7 ff32 	bl	8000f60 <__aeabi_dadd>
 80090fc:	0002      	movs	r2, r0
 80090fe:	000b      	movs	r3, r1
 8009100:	9004      	str	r0, [sp, #16]
 8009102:	9105      	str	r1, [sp, #20]
 8009104:	0030      	movs	r0, r6
 8009106:	0039      	movs	r1, r7
 8009108:	f7f9 f8d4 	bl	80022b4 <__aeabi_dsub>
 800910c:	9a02      	ldr	r2, [sp, #8]
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	f7f7 ff26 	bl	8000f60 <__aeabi_dadd>
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	60a0      	str	r0, [r4, #8]
 800911a:	60e1      	str	r1, [r4, #12]
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	3d01      	subs	r5, #1
 8009122:	e740      	b.n	8008fa6 <__kernel_rem_pio2+0x512>
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	aa4e      	add	r2, sp, #312	; 0x138
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	18d3      	adds	r3, r2, r3
 800912c:	0020      	movs	r0, r4
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f7f7 ff15 	bl	8000f60 <__aeabi_dadd>
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	0004      	movs	r4, r0
 800913a:	3b01      	subs	r3, #1
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	e738      	b.n	8008fb2 <__kernel_rem_pio2+0x51e>
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	9a07      	ldr	r2, [sp, #28]
 8009144:	601f      	str	r7, [r3, #0]
 8009146:	2380      	movs	r3, #128	; 0x80
 8009148:	061b      	lsls	r3, r3, #24
 800914a:	18f6      	adds	r6, r6, r3
 800914c:	18c0      	adds	r0, r0, r3
 800914e:	18c9      	adds	r1, r1, r3
 8009150:	6056      	str	r6, [r2, #4]
 8009152:	6095      	str	r5, [r2, #8]
 8009154:	60d0      	str	r0, [r2, #12]
 8009156:	6114      	str	r4, [r2, #16]
 8009158:	6151      	str	r1, [r2, #20]
 800915a:	e70c      	b.n	8008f76 <__kernel_rem_pio2+0x4e2>
 800915c:	41700000 	.word	0x41700000
 8009160:	3e700000 	.word	0x3e700000
 8009164:	08009b10 	.word	0x08009b10

08009168 <__kernel_tan>:
 8009168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916a:	b08f      	sub	sp, #60	; 0x3c
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	004b      	lsls	r3, r1, #1
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	9204      	str	r2, [sp, #16]
 8009176:	4bd5      	ldr	r3, [pc, #852]	; (80094cc <__kernel_tan+0x364>)
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	9100      	str	r1, [sp, #0]
 800917e:	9108      	str	r1, [sp, #32]
 8009180:	429a      	cmp	r2, r3
 8009182:	dc5f      	bgt.n	8009244 <__kernel_tan+0xdc>
 8009184:	9801      	ldr	r0, [sp, #4]
 8009186:	9900      	ldr	r1, [sp, #0]
 8009188:	f7f9 fc26 	bl	80029d8 <__aeabi_d2iz>
 800918c:	1e04      	subs	r4, r0, #0
 800918e:	d000      	beq.n	8009192 <__kernel_tan+0x2a>
 8009190:	e07f      	b.n	8009292 <__kernel_tan+0x12a>
 8009192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009194:	9a01      	ldr	r2, [sp, #4]
 8009196:	3301      	adds	r3, #1
 8009198:	4313      	orrs	r3, r2
 800919a:	9a06      	ldr	r2, [sp, #24]
 800919c:	4313      	orrs	r3, r2
 800919e:	d10f      	bne.n	80091c0 <__kernel_tan+0x58>
 80091a0:	9801      	ldr	r0, [sp, #4]
 80091a2:	9900      	ldr	r1, [sp, #0]
 80091a4:	f000 f9d6 	bl	8009554 <fabs>
 80091a8:	0002      	movs	r2, r0
 80091aa:	000b      	movs	r3, r1
 80091ac:	2000      	movs	r0, #0
 80091ae:	49c8      	ldr	r1, [pc, #800]	; (80094d0 <__kernel_tan+0x368>)
 80091b0:	f7f8 fa12 	bl	80015d8 <__aeabi_ddiv>
 80091b4:	9001      	str	r0, [sp, #4]
 80091b6:	9100      	str	r1, [sp, #0]
 80091b8:	9801      	ldr	r0, [sp, #4]
 80091ba:	9900      	ldr	r1, [sp, #0]
 80091bc:	b00f      	add	sp, #60	; 0x3c
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d0f8      	beq.n	80091b8 <__kernel_tan+0x50>
 80091c6:	9a04      	ldr	r2, [sp, #16]
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	9801      	ldr	r0, [sp, #4]
 80091cc:	9900      	ldr	r1, [sp, #0]
 80091ce:	f7f7 fec7 	bl	8000f60 <__aeabi_dadd>
 80091d2:	0002      	movs	r2, r0
 80091d4:	0020      	movs	r0, r4
 80091d6:	000b      	movs	r3, r1
 80091d8:	9006      	str	r0, [sp, #24]
 80091da:	9107      	str	r1, [sp, #28]
 80091dc:	2000      	movs	r0, #0
 80091de:	49bd      	ldr	r1, [pc, #756]	; (80094d4 <__kernel_tan+0x36c>)
 80091e0:	f7f8 f9fa 	bl	80015d8 <__aeabi_ddiv>
 80091e4:	9a01      	ldr	r2, [sp, #4]
 80091e6:	9008      	str	r0, [sp, #32]
 80091e8:	9109      	str	r1, [sp, #36]	; 0x24
 80091ea:	9806      	ldr	r0, [sp, #24]
 80091ec:	9907      	ldr	r1, [sp, #28]
 80091ee:	9e08      	ldr	r6, [sp, #32]
 80091f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091f2:	9b00      	ldr	r3, [sp, #0]
 80091f4:	f7f9 f85e 	bl	80022b4 <__aeabi_dsub>
 80091f8:	0002      	movs	r2, r0
 80091fa:	000b      	movs	r3, r1
 80091fc:	9804      	ldr	r0, [sp, #16]
 80091fe:	9902      	ldr	r1, [sp, #8]
 8009200:	f7f9 f858 	bl	80022b4 <__aeabi_dsub>
 8009204:	0022      	movs	r2, r4
 8009206:	003b      	movs	r3, r7
 8009208:	f7f8 fde8 	bl	8001ddc <__aeabi_dmul>
 800920c:	0026      	movs	r6, r4
 800920e:	000d      	movs	r5, r1
 8009210:	0004      	movs	r4, r0
 8009212:	9806      	ldr	r0, [sp, #24]
 8009214:	9907      	ldr	r1, [sp, #28]
 8009216:	0032      	movs	r2, r6
 8009218:	003b      	movs	r3, r7
 800921a:	f7f8 fddf 	bl	8001ddc <__aeabi_dmul>
 800921e:	2200      	movs	r2, #0
 8009220:	4bab      	ldr	r3, [pc, #684]	; (80094d0 <__kernel_tan+0x368>)
 8009222:	f7f7 fe9d 	bl	8000f60 <__aeabi_dadd>
 8009226:	0002      	movs	r2, r0
 8009228:	000b      	movs	r3, r1
 800922a:	0020      	movs	r0, r4
 800922c:	0029      	movs	r1, r5
 800922e:	f7f7 fe97 	bl	8000f60 <__aeabi_dadd>
 8009232:	9a08      	ldr	r2, [sp, #32]
 8009234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009236:	f7f8 fdd1 	bl	8001ddc <__aeabi_dmul>
 800923a:	0032      	movs	r2, r6
 800923c:	003b      	movs	r3, r7
 800923e:	f7f7 fe8f 	bl	8000f60 <__aeabi_dadd>
 8009242:	e7b7      	b.n	80091b4 <__kernel_tan+0x4c>
 8009244:	4ba4      	ldr	r3, [pc, #656]	; (80094d8 <__kernel_tan+0x370>)
 8009246:	9a06      	ldr	r2, [sp, #24]
 8009248:	429a      	cmp	r2, r3
 800924a:	dd22      	ble.n	8009292 <__kernel_tan+0x12a>
 800924c:	9b08      	ldr	r3, [sp, #32]
 800924e:	2b00      	cmp	r3, #0
 8009250:	da08      	bge.n	8009264 <__kernel_tan+0xfc>
 8009252:	2080      	movs	r0, #128	; 0x80
 8009254:	0600      	lsls	r0, r0, #24
 8009256:	4684      	mov	ip, r0
 8009258:	9900      	ldr	r1, [sp, #0]
 800925a:	9b02      	ldr	r3, [sp, #8]
 800925c:	4461      	add	r1, ip
 800925e:	4463      	add	r3, ip
 8009260:	9100      	str	r1, [sp, #0]
 8009262:	9302      	str	r3, [sp, #8]
 8009264:	9a01      	ldr	r2, [sp, #4]
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	489c      	ldr	r0, [pc, #624]	; (80094dc <__kernel_tan+0x374>)
 800926a:	499d      	ldr	r1, [pc, #628]	; (80094e0 <__kernel_tan+0x378>)
 800926c:	f7f9 f822 	bl	80022b4 <__aeabi_dsub>
 8009270:	0004      	movs	r4, r0
 8009272:	000d      	movs	r5, r1
 8009274:	9a04      	ldr	r2, [sp, #16]
 8009276:	9b02      	ldr	r3, [sp, #8]
 8009278:	489a      	ldr	r0, [pc, #616]	; (80094e4 <__kernel_tan+0x37c>)
 800927a:	499b      	ldr	r1, [pc, #620]	; (80094e8 <__kernel_tan+0x380>)
 800927c:	f7f9 f81a 	bl	80022b4 <__aeabi_dsub>
 8009280:	002b      	movs	r3, r5
 8009282:	0022      	movs	r2, r4
 8009284:	f7f7 fe6c 	bl	8000f60 <__aeabi_dadd>
 8009288:	2300      	movs	r3, #0
 800928a:	9001      	str	r0, [sp, #4]
 800928c:	9100      	str	r1, [sp, #0]
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	9302      	str	r3, [sp, #8]
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	9b00      	ldr	r3, [sp, #0]
 8009296:	0010      	movs	r0, r2
 8009298:	0019      	movs	r1, r3
 800929a:	f7f8 fd9f 	bl	8001ddc <__aeabi_dmul>
 800929e:	0002      	movs	r2, r0
 80092a0:	000b      	movs	r3, r1
 80092a2:	0006      	movs	r6, r0
 80092a4:	000f      	movs	r7, r1
 80092a6:	f7f8 fd99 	bl	8001ddc <__aeabi_dmul>
 80092aa:	0032      	movs	r2, r6
 80092ac:	0004      	movs	r4, r0
 80092ae:	000d      	movs	r5, r1
 80092b0:	003b      	movs	r3, r7
 80092b2:	9801      	ldr	r0, [sp, #4]
 80092b4:	9900      	ldr	r1, [sp, #0]
 80092b6:	f7f8 fd91 	bl	8001ddc <__aeabi_dmul>
 80092ba:	4a8c      	ldr	r2, [pc, #560]	; (80094ec <__kernel_tan+0x384>)
 80092bc:	900a      	str	r0, [sp, #40]	; 0x28
 80092be:	910b      	str	r1, [sp, #44]	; 0x2c
 80092c0:	4b8b      	ldr	r3, [pc, #556]	; (80094f0 <__kernel_tan+0x388>)
 80092c2:	0020      	movs	r0, r4
 80092c4:	0029      	movs	r1, r5
 80092c6:	f7f8 fd89 	bl	8001ddc <__aeabi_dmul>
 80092ca:	4a8a      	ldr	r2, [pc, #552]	; (80094f4 <__kernel_tan+0x38c>)
 80092cc:	4b8a      	ldr	r3, [pc, #552]	; (80094f8 <__kernel_tan+0x390>)
 80092ce:	f7f7 fe47 	bl	8000f60 <__aeabi_dadd>
 80092d2:	0022      	movs	r2, r4
 80092d4:	002b      	movs	r3, r5
 80092d6:	f7f8 fd81 	bl	8001ddc <__aeabi_dmul>
 80092da:	4a88      	ldr	r2, [pc, #544]	; (80094fc <__kernel_tan+0x394>)
 80092dc:	4b88      	ldr	r3, [pc, #544]	; (8009500 <__kernel_tan+0x398>)
 80092de:	f7f7 fe3f 	bl	8000f60 <__aeabi_dadd>
 80092e2:	0022      	movs	r2, r4
 80092e4:	002b      	movs	r3, r5
 80092e6:	f7f8 fd79 	bl	8001ddc <__aeabi_dmul>
 80092ea:	4a86      	ldr	r2, [pc, #536]	; (8009504 <__kernel_tan+0x39c>)
 80092ec:	4b86      	ldr	r3, [pc, #536]	; (8009508 <__kernel_tan+0x3a0>)
 80092ee:	f7f7 fe37 	bl	8000f60 <__aeabi_dadd>
 80092f2:	0022      	movs	r2, r4
 80092f4:	002b      	movs	r3, r5
 80092f6:	f7f8 fd71 	bl	8001ddc <__aeabi_dmul>
 80092fa:	4a84      	ldr	r2, [pc, #528]	; (800950c <__kernel_tan+0x3a4>)
 80092fc:	4b84      	ldr	r3, [pc, #528]	; (8009510 <__kernel_tan+0x3a8>)
 80092fe:	f7f7 fe2f 	bl	8000f60 <__aeabi_dadd>
 8009302:	0022      	movs	r2, r4
 8009304:	002b      	movs	r3, r5
 8009306:	f7f8 fd69 	bl	8001ddc <__aeabi_dmul>
 800930a:	4a82      	ldr	r2, [pc, #520]	; (8009514 <__kernel_tan+0x3ac>)
 800930c:	4b82      	ldr	r3, [pc, #520]	; (8009518 <__kernel_tan+0x3b0>)
 800930e:	f7f7 fe27 	bl	8000f60 <__aeabi_dadd>
 8009312:	0032      	movs	r2, r6
 8009314:	003b      	movs	r3, r7
 8009316:	f7f8 fd61 	bl	8001ddc <__aeabi_dmul>
 800931a:	4a80      	ldr	r2, [pc, #512]	; (800951c <__kernel_tan+0x3b4>)
 800931c:	900c      	str	r0, [sp, #48]	; 0x30
 800931e:	910d      	str	r1, [sp, #52]	; 0x34
 8009320:	4b7f      	ldr	r3, [pc, #508]	; (8009520 <__kernel_tan+0x3b8>)
 8009322:	0020      	movs	r0, r4
 8009324:	0029      	movs	r1, r5
 8009326:	f7f8 fd59 	bl	8001ddc <__aeabi_dmul>
 800932a:	4a7e      	ldr	r2, [pc, #504]	; (8009524 <__kernel_tan+0x3bc>)
 800932c:	4b7e      	ldr	r3, [pc, #504]	; (8009528 <__kernel_tan+0x3c0>)
 800932e:	f7f7 fe17 	bl	8000f60 <__aeabi_dadd>
 8009332:	0022      	movs	r2, r4
 8009334:	002b      	movs	r3, r5
 8009336:	f7f8 fd51 	bl	8001ddc <__aeabi_dmul>
 800933a:	4a7c      	ldr	r2, [pc, #496]	; (800952c <__kernel_tan+0x3c4>)
 800933c:	4b7c      	ldr	r3, [pc, #496]	; (8009530 <__kernel_tan+0x3c8>)
 800933e:	f7f7 fe0f 	bl	8000f60 <__aeabi_dadd>
 8009342:	0022      	movs	r2, r4
 8009344:	002b      	movs	r3, r5
 8009346:	f7f8 fd49 	bl	8001ddc <__aeabi_dmul>
 800934a:	4a7a      	ldr	r2, [pc, #488]	; (8009534 <__kernel_tan+0x3cc>)
 800934c:	4b7a      	ldr	r3, [pc, #488]	; (8009538 <__kernel_tan+0x3d0>)
 800934e:	f7f7 fe07 	bl	8000f60 <__aeabi_dadd>
 8009352:	0022      	movs	r2, r4
 8009354:	002b      	movs	r3, r5
 8009356:	f7f8 fd41 	bl	8001ddc <__aeabi_dmul>
 800935a:	4a78      	ldr	r2, [pc, #480]	; (800953c <__kernel_tan+0x3d4>)
 800935c:	4b78      	ldr	r3, [pc, #480]	; (8009540 <__kernel_tan+0x3d8>)
 800935e:	f7f7 fdff 	bl	8000f60 <__aeabi_dadd>
 8009362:	0022      	movs	r2, r4
 8009364:	002b      	movs	r3, r5
 8009366:	f7f8 fd39 	bl	8001ddc <__aeabi_dmul>
 800936a:	4a76      	ldr	r2, [pc, #472]	; (8009544 <__kernel_tan+0x3dc>)
 800936c:	4b76      	ldr	r3, [pc, #472]	; (8009548 <__kernel_tan+0x3e0>)
 800936e:	f7f7 fdf7 	bl	8000f60 <__aeabi_dadd>
 8009372:	0002      	movs	r2, r0
 8009374:	000b      	movs	r3, r1
 8009376:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009378:	990d      	ldr	r1, [sp, #52]	; 0x34
 800937a:	f7f7 fdf1 	bl	8000f60 <__aeabi_dadd>
 800937e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009382:	f7f8 fd2b 	bl	8001ddc <__aeabi_dmul>
 8009386:	9a04      	ldr	r2, [sp, #16]
 8009388:	9b02      	ldr	r3, [sp, #8]
 800938a:	f7f7 fde9 	bl	8000f60 <__aeabi_dadd>
 800938e:	0032      	movs	r2, r6
 8009390:	003b      	movs	r3, r7
 8009392:	f7f8 fd23 	bl	8001ddc <__aeabi_dmul>
 8009396:	9a04      	ldr	r2, [sp, #16]
 8009398:	9b02      	ldr	r3, [sp, #8]
 800939a:	f7f7 fde1 	bl	8000f60 <__aeabi_dadd>
 800939e:	0004      	movs	r4, r0
 80093a0:	000d      	movs	r5, r1
 80093a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093a6:	4a69      	ldr	r2, [pc, #420]	; (800954c <__kernel_tan+0x3e4>)
 80093a8:	4b69      	ldr	r3, [pc, #420]	; (8009550 <__kernel_tan+0x3e8>)
 80093aa:	f7f8 fd17 	bl	8001ddc <__aeabi_dmul>
 80093ae:	0022      	movs	r2, r4
 80093b0:	002b      	movs	r3, r5
 80093b2:	f7f7 fdd5 	bl	8000f60 <__aeabi_dadd>
 80093b6:	0002      	movs	r2, r0
 80093b8:	000b      	movs	r3, r1
 80093ba:	0004      	movs	r4, r0
 80093bc:	000d      	movs	r5, r1
 80093be:	9801      	ldr	r0, [sp, #4]
 80093c0:	9900      	ldr	r1, [sp, #0]
 80093c2:	f7f7 fdcd 	bl	8000f60 <__aeabi_dadd>
 80093c6:	4b44      	ldr	r3, [pc, #272]	; (80094d8 <__kernel_tan+0x370>)
 80093c8:	9a06      	ldr	r2, [sp, #24]
 80093ca:	0006      	movs	r6, r0
 80093cc:	000f      	movs	r7, r1
 80093ce:	429a      	cmp	r2, r3
 80093d0:	dd3d      	ble.n	800944e <__kernel_tan+0x2e6>
 80093d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80093d4:	f7f9 fb36 	bl	8002a44 <__aeabi_i2d>
 80093d8:	0032      	movs	r2, r6
 80093da:	9002      	str	r0, [sp, #8]
 80093dc:	9103      	str	r1, [sp, #12]
 80093de:	003b      	movs	r3, r7
 80093e0:	0030      	movs	r0, r6
 80093e2:	0039      	movs	r1, r7
 80093e4:	f7f8 fcfa 	bl	8001ddc <__aeabi_dmul>
 80093e8:	9a02      	ldr	r2, [sp, #8]
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	9004      	str	r0, [sp, #16]
 80093ee:	9105      	str	r1, [sp, #20]
 80093f0:	0030      	movs	r0, r6
 80093f2:	0039      	movs	r1, r7
 80093f4:	f7f7 fdb4 	bl	8000f60 <__aeabi_dadd>
 80093f8:	0002      	movs	r2, r0
 80093fa:	000b      	movs	r3, r1
 80093fc:	9804      	ldr	r0, [sp, #16]
 80093fe:	9905      	ldr	r1, [sp, #20]
 8009400:	f7f8 f8ea 	bl	80015d8 <__aeabi_ddiv>
 8009404:	0022      	movs	r2, r4
 8009406:	002b      	movs	r3, r5
 8009408:	f7f8 ff54 	bl	80022b4 <__aeabi_dsub>
 800940c:	0002      	movs	r2, r0
 800940e:	000b      	movs	r3, r1
 8009410:	9801      	ldr	r0, [sp, #4]
 8009412:	9900      	ldr	r1, [sp, #0]
 8009414:	f7f8 ff4e 	bl	80022b4 <__aeabi_dsub>
 8009418:	0002      	movs	r2, r0
 800941a:	000b      	movs	r3, r1
 800941c:	f7f7 fda0 	bl	8000f60 <__aeabi_dadd>
 8009420:	0002      	movs	r2, r0
 8009422:	000b      	movs	r3, r1
 8009424:	9802      	ldr	r0, [sp, #8]
 8009426:	9903      	ldr	r1, [sp, #12]
 8009428:	f7f8 ff44 	bl	80022b4 <__aeabi_dsub>
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	0004      	movs	r4, r0
 8009430:	1798      	asrs	r0, r3, #30
 8009432:	2302      	movs	r3, #2
 8009434:	4018      	ands	r0, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	1a18      	subs	r0, r3, r0
 800943a:	000d      	movs	r5, r1
 800943c:	f7f9 fb02 	bl	8002a44 <__aeabi_i2d>
 8009440:	0002      	movs	r2, r0
 8009442:	000b      	movs	r3, r1
 8009444:	0020      	movs	r0, r4
 8009446:	0029      	movs	r1, r5
 8009448:	f7f8 fcc8 	bl	8001ddc <__aeabi_dmul>
 800944c:	e6b2      	b.n	80091b4 <__kernel_tan+0x4c>
 800944e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009450:	2b01      	cmp	r3, #1
 8009452:	d037      	beq.n	80094c4 <__kernel_tan+0x35c>
 8009454:	2300      	movs	r3, #0
 8009456:	9602      	str	r6, [sp, #8]
 8009458:	9703      	str	r7, [sp, #12]
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	9a02      	ldr	r2, [sp, #8]
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	9204      	str	r2, [sp, #16]
 8009462:	9305      	str	r3, [sp, #20]
 8009464:	0002      	movs	r2, r0
 8009466:	000b      	movs	r3, r1
 8009468:	2000      	movs	r0, #0
 800946a:	491a      	ldr	r1, [pc, #104]	; (80094d4 <__kernel_tan+0x36c>)
 800946c:	f7f8 f8b4 	bl	80015d8 <__aeabi_ddiv>
 8009470:	9a01      	ldr	r2, [sp, #4]
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	9107      	str	r1, [sp, #28]
 8009476:	9804      	ldr	r0, [sp, #16]
 8009478:	9905      	ldr	r1, [sp, #20]
 800947a:	9e06      	ldr	r6, [sp, #24]
 800947c:	9f07      	ldr	r7, [sp, #28]
 800947e:	9b00      	ldr	r3, [sp, #0]
 8009480:	f7f8 ff18 	bl	80022b4 <__aeabi_dsub>
 8009484:	2600      	movs	r6, #0
 8009486:	0002      	movs	r2, r0
 8009488:	000b      	movs	r3, r1
 800948a:	0020      	movs	r0, r4
 800948c:	0029      	movs	r1, r5
 800948e:	f7f8 ff11 	bl	80022b4 <__aeabi_dsub>
 8009492:	0032      	movs	r2, r6
 8009494:	003b      	movs	r3, r7
 8009496:	f7f8 fca1 	bl	8001ddc <__aeabi_dmul>
 800949a:	0032      	movs	r2, r6
 800949c:	0004      	movs	r4, r0
 800949e:	000d      	movs	r5, r1
 80094a0:	9804      	ldr	r0, [sp, #16]
 80094a2:	9905      	ldr	r1, [sp, #20]
 80094a4:	003b      	movs	r3, r7
 80094a6:	f7f8 fc99 	bl	8001ddc <__aeabi_dmul>
 80094aa:	2200      	movs	r2, #0
 80094ac:	4b08      	ldr	r3, [pc, #32]	; (80094d0 <__kernel_tan+0x368>)
 80094ae:	f7f7 fd57 	bl	8000f60 <__aeabi_dadd>
 80094b2:	0002      	movs	r2, r0
 80094b4:	000b      	movs	r3, r1
 80094b6:	0020      	movs	r0, r4
 80094b8:	0029      	movs	r1, r5
 80094ba:	f7f7 fd51 	bl	8000f60 <__aeabi_dadd>
 80094be:	9a06      	ldr	r2, [sp, #24]
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	e6b8      	b.n	8009236 <__kernel_tan+0xce>
 80094c4:	9001      	str	r0, [sp, #4]
 80094c6:	9100      	str	r1, [sp, #0]
 80094c8:	e676      	b.n	80091b8 <__kernel_tan+0x50>
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	3e2fffff 	.word	0x3e2fffff
 80094d0:	3ff00000 	.word	0x3ff00000
 80094d4:	bff00000 	.word	0xbff00000
 80094d8:	3fe59427 	.word	0x3fe59427
 80094dc:	54442d18 	.word	0x54442d18
 80094e0:	3fe921fb 	.word	0x3fe921fb
 80094e4:	33145c07 	.word	0x33145c07
 80094e8:	3c81a626 	.word	0x3c81a626
 80094ec:	74bf7ad4 	.word	0x74bf7ad4
 80094f0:	3efb2a70 	.word	0x3efb2a70
 80094f4:	32f0a7e9 	.word	0x32f0a7e9
 80094f8:	3f12b80f 	.word	0x3f12b80f
 80094fc:	1a8d1068 	.word	0x1a8d1068
 8009500:	3f3026f7 	.word	0x3f3026f7
 8009504:	fee08315 	.word	0xfee08315
 8009508:	3f57dbc8 	.word	0x3f57dbc8
 800950c:	e96e8493 	.word	0xe96e8493
 8009510:	3f8226e3 	.word	0x3f8226e3
 8009514:	1bb341fe 	.word	0x1bb341fe
 8009518:	3faba1ba 	.word	0x3faba1ba
 800951c:	db605373 	.word	0xdb605373
 8009520:	bef375cb 	.word	0xbef375cb
 8009524:	a03792a6 	.word	0xa03792a6
 8009528:	3f147e88 	.word	0x3f147e88
 800952c:	f2f26501 	.word	0xf2f26501
 8009530:	3f4344d8 	.word	0x3f4344d8
 8009534:	c9560328 	.word	0xc9560328
 8009538:	3f6d6d22 	.word	0x3f6d6d22
 800953c:	8406d637 	.word	0x8406d637
 8009540:	3f9664f4 	.word	0x3f9664f4
 8009544:	1110fe7a 	.word	0x1110fe7a
 8009548:	3fc11111 	.word	0x3fc11111
 800954c:	55555563 	.word	0x55555563
 8009550:	3fd55555 	.word	0x3fd55555

08009554 <fabs>:
 8009554:	004b      	lsls	r3, r1, #1
 8009556:	0859      	lsrs	r1, r3, #1
 8009558:	4770      	bx	lr
	...

0800955c <floor>:
 800955c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800955e:	004b      	lsls	r3, r1, #1
 8009560:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <floor+0xfc>)
 8009562:	0d5b      	lsrs	r3, r3, #21
 8009564:	189f      	adds	r7, r3, r2
 8009566:	4684      	mov	ip, r0
 8009568:	000e      	movs	r6, r1
 800956a:	000d      	movs	r5, r1
 800956c:	0004      	movs	r4, r0
 800956e:	9001      	str	r0, [sp, #4]
 8009570:	2f13      	cmp	r7, #19
 8009572:	dc34      	bgt.n	80095de <floor+0x82>
 8009574:	2f00      	cmp	r7, #0
 8009576:	da16      	bge.n	80095a6 <floor+0x4a>
 8009578:	4a38      	ldr	r2, [pc, #224]	; (800965c <floor+0x100>)
 800957a:	4b39      	ldr	r3, [pc, #228]	; (8009660 <floor+0x104>)
 800957c:	4660      	mov	r0, ip
 800957e:	0031      	movs	r1, r6
 8009580:	f7f7 fcee 	bl	8000f60 <__aeabi_dadd>
 8009584:	2200      	movs	r2, #0
 8009586:	2300      	movs	r3, #0
 8009588:	f7f6 ff5c 	bl	8000444 <__aeabi_dcmpgt>
 800958c:	2800      	cmp	r0, #0
 800958e:	d007      	beq.n	80095a0 <floor+0x44>
 8009590:	2e00      	cmp	r6, #0
 8009592:	da5d      	bge.n	8009650 <floor+0xf4>
 8009594:	0073      	lsls	r3, r6, #1
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	431c      	orrs	r4, r3
 800959a:	d001      	beq.n	80095a0 <floor+0x44>
 800959c:	2400      	movs	r4, #0
 800959e:	4d31      	ldr	r5, [pc, #196]	; (8009664 <floor+0x108>)
 80095a0:	46a4      	mov	ip, r4
 80095a2:	002e      	movs	r6, r5
 80095a4:	e029      	b.n	80095fa <floor+0x9e>
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <floor+0x10c>)
 80095a8:	413b      	asrs	r3, r7
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	400b      	ands	r3, r1
 80095ae:	4303      	orrs	r3, r0
 80095b0:	d023      	beq.n	80095fa <floor+0x9e>
 80095b2:	4a2a      	ldr	r2, [pc, #168]	; (800965c <floor+0x100>)
 80095b4:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <floor+0x104>)
 80095b6:	4660      	mov	r0, ip
 80095b8:	0031      	movs	r1, r6
 80095ba:	f7f7 fcd1 	bl	8000f60 <__aeabi_dadd>
 80095be:	2200      	movs	r2, #0
 80095c0:	2300      	movs	r3, #0
 80095c2:	f7f6 ff3f 	bl	8000444 <__aeabi_dcmpgt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d0ea      	beq.n	80095a0 <floor+0x44>
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	da03      	bge.n	80095d6 <floor+0x7a>
 80095ce:	2380      	movs	r3, #128	; 0x80
 80095d0:	035b      	lsls	r3, r3, #13
 80095d2:	413b      	asrs	r3, r7
 80095d4:	18f5      	adds	r5, r6, r3
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	2400      	movs	r4, #0
 80095da:	439d      	bics	r5, r3
 80095dc:	e7e0      	b.n	80095a0 <floor+0x44>
 80095de:	2f33      	cmp	r7, #51	; 0x33
 80095e0:	dd0f      	ble.n	8009602 <floor+0xa6>
 80095e2:	2380      	movs	r3, #128	; 0x80
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	429f      	cmp	r7, r3
 80095e8:	d107      	bne.n	80095fa <floor+0x9e>
 80095ea:	0002      	movs	r2, r0
 80095ec:	000b      	movs	r3, r1
 80095ee:	4660      	mov	r0, ip
 80095f0:	0031      	movs	r1, r6
 80095f2:	f7f7 fcb5 	bl	8000f60 <__aeabi_dadd>
 80095f6:	4684      	mov	ip, r0
 80095f8:	000e      	movs	r6, r1
 80095fa:	4660      	mov	r0, ip
 80095fc:	0031      	movs	r1, r6
 80095fe:	b003      	add	sp, #12
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	4a1a      	ldr	r2, [pc, #104]	; (800966c <floor+0x110>)
 8009604:	189b      	adds	r3, r3, r2
 8009606:	2201      	movs	r2, #1
 8009608:	4252      	negs	r2, r2
 800960a:	40da      	lsrs	r2, r3
 800960c:	9200      	str	r2, [sp, #0]
 800960e:	4210      	tst	r0, r2
 8009610:	d0f3      	beq.n	80095fa <floor+0x9e>
 8009612:	4a12      	ldr	r2, [pc, #72]	; (800965c <floor+0x100>)
 8009614:	4b12      	ldr	r3, [pc, #72]	; (8009660 <floor+0x104>)
 8009616:	4660      	mov	r0, ip
 8009618:	0031      	movs	r1, r6
 800961a:	f7f7 fca1 	bl	8000f60 <__aeabi_dadd>
 800961e:	2200      	movs	r2, #0
 8009620:	2300      	movs	r3, #0
 8009622:	f7f6 ff0f 	bl	8000444 <__aeabi_dcmpgt>
 8009626:	2800      	cmp	r0, #0
 8009628:	d0ba      	beq.n	80095a0 <floor+0x44>
 800962a:	2e00      	cmp	r6, #0
 800962c:	da02      	bge.n	8009634 <floor+0xd8>
 800962e:	2f14      	cmp	r7, #20
 8009630:	d103      	bne.n	800963a <floor+0xde>
 8009632:	3501      	adds	r5, #1
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	439c      	bics	r4, r3
 8009638:	e7b2      	b.n	80095a0 <floor+0x44>
 800963a:	2334      	movs	r3, #52	; 0x34
 800963c:	1bdf      	subs	r7, r3, r7
 800963e:	3b33      	subs	r3, #51	; 0x33
 8009640:	40bb      	lsls	r3, r7
 8009642:	18e4      	adds	r4, r4, r3
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	429c      	cmp	r4, r3
 8009648:	419b      	sbcs	r3, r3
 800964a:	425b      	negs	r3, r3
 800964c:	18f5      	adds	r5, r6, r3
 800964e:	e7f1      	b.n	8009634 <floor+0xd8>
 8009650:	2400      	movs	r4, #0
 8009652:	0025      	movs	r5, r4
 8009654:	e7a4      	b.n	80095a0 <floor+0x44>
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	fffffc01 	.word	0xfffffc01
 800965c:	8800759c 	.word	0x8800759c
 8009660:	7e37e43c 	.word	0x7e37e43c
 8009664:	bff00000 	.word	0xbff00000
 8009668:	000fffff 	.word	0x000fffff
 800966c:	fffffbed 	.word	0xfffffbed

08009670 <scalbn>:
 8009670:	004b      	lsls	r3, r1, #1
 8009672:	b570      	push	{r4, r5, r6, lr}
 8009674:	0d5b      	lsrs	r3, r3, #21
 8009676:	0014      	movs	r4, r2
 8009678:	000a      	movs	r2, r1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10d      	bne.n	800969a <scalbn+0x2a>
 800967e:	004b      	lsls	r3, r1, #1
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	4303      	orrs	r3, r0
 8009684:	d010      	beq.n	80096a8 <scalbn+0x38>
 8009686:	4b27      	ldr	r3, [pc, #156]	; (8009724 <scalbn+0xb4>)
 8009688:	2200      	movs	r2, #0
 800968a:	f7f8 fba7 	bl	8001ddc <__aeabi_dmul>
 800968e:	4b26      	ldr	r3, [pc, #152]	; (8009728 <scalbn+0xb8>)
 8009690:	429c      	cmp	r4, r3
 8009692:	da0a      	bge.n	80096aa <scalbn+0x3a>
 8009694:	4a25      	ldr	r2, [pc, #148]	; (800972c <scalbn+0xbc>)
 8009696:	4b26      	ldr	r3, [pc, #152]	; (8009730 <scalbn+0xc0>)
 8009698:	e019      	b.n	80096ce <scalbn+0x5e>
 800969a:	4d26      	ldr	r5, [pc, #152]	; (8009734 <scalbn+0xc4>)
 800969c:	42ab      	cmp	r3, r5
 800969e:	d108      	bne.n	80096b2 <scalbn+0x42>
 80096a0:	0002      	movs	r2, r0
 80096a2:	000b      	movs	r3, r1
 80096a4:	f7f7 fc5c 	bl	8000f60 <__aeabi_dadd>
 80096a8:	bd70      	pop	{r4, r5, r6, pc}
 80096aa:	000a      	movs	r2, r1
 80096ac:	004b      	lsls	r3, r1, #1
 80096ae:	0d5b      	lsrs	r3, r3, #21
 80096b0:	3b36      	subs	r3, #54	; 0x36
 80096b2:	4d21      	ldr	r5, [pc, #132]	; (8009738 <scalbn+0xc8>)
 80096b4:	18e3      	adds	r3, r4, r3
 80096b6:	42ab      	cmp	r3, r5
 80096b8:	dd0c      	ble.n	80096d4 <scalbn+0x64>
 80096ba:	4c20      	ldr	r4, [pc, #128]	; (800973c <scalbn+0xcc>)
 80096bc:	4d20      	ldr	r5, [pc, #128]	; (8009740 <scalbn+0xd0>)
 80096be:	2900      	cmp	r1, #0
 80096c0:	da01      	bge.n	80096c6 <scalbn+0x56>
 80096c2:	4c1e      	ldr	r4, [pc, #120]	; (800973c <scalbn+0xcc>)
 80096c4:	4d1f      	ldr	r5, [pc, #124]	; (8009744 <scalbn+0xd4>)
 80096c6:	0020      	movs	r0, r4
 80096c8:	0029      	movs	r1, r5
 80096ca:	4a1c      	ldr	r2, [pc, #112]	; (800973c <scalbn+0xcc>)
 80096cc:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <scalbn+0xd0>)
 80096ce:	f7f8 fb85 	bl	8001ddc <__aeabi_dmul>
 80096d2:	e7e9      	b.n	80096a8 <scalbn+0x38>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dd05      	ble.n	80096e4 <scalbn+0x74>
 80096d8:	4c1b      	ldr	r4, [pc, #108]	; (8009748 <scalbn+0xd8>)
 80096da:	051b      	lsls	r3, r3, #20
 80096dc:	4022      	ands	r2, r4
 80096de:	431a      	orrs	r2, r3
 80096e0:	0011      	movs	r1, r2
 80096e2:	e7e1      	b.n	80096a8 <scalbn+0x38>
 80096e4:	001d      	movs	r5, r3
 80096e6:	3535      	adds	r5, #53	; 0x35
 80096e8:	da13      	bge.n	8009712 <scalbn+0xa2>
 80096ea:	4a18      	ldr	r2, [pc, #96]	; (800974c <scalbn+0xdc>)
 80096ec:	0fcb      	lsrs	r3, r1, #31
 80096ee:	4294      	cmp	r4, r2
 80096f0:	dd08      	ble.n	8009704 <scalbn+0x94>
 80096f2:	4812      	ldr	r0, [pc, #72]	; (800973c <scalbn+0xcc>)
 80096f4:	4912      	ldr	r1, [pc, #72]	; (8009740 <scalbn+0xd0>)
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <scalbn+0x8e>
 80096fa:	4810      	ldr	r0, [pc, #64]	; (800973c <scalbn+0xcc>)
 80096fc:	4911      	ldr	r1, [pc, #68]	; (8009744 <scalbn+0xd4>)
 80096fe:	4a0f      	ldr	r2, [pc, #60]	; (800973c <scalbn+0xcc>)
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <scalbn+0xd0>)
 8009702:	e7e4      	b.n	80096ce <scalbn+0x5e>
 8009704:	4809      	ldr	r0, [pc, #36]	; (800972c <scalbn+0xbc>)
 8009706:	490a      	ldr	r1, [pc, #40]	; (8009730 <scalbn+0xc0>)
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0c3      	beq.n	8009694 <scalbn+0x24>
 800970c:	4807      	ldr	r0, [pc, #28]	; (800972c <scalbn+0xbc>)
 800970e:	4910      	ldr	r1, [pc, #64]	; (8009750 <scalbn+0xe0>)
 8009710:	e7c0      	b.n	8009694 <scalbn+0x24>
 8009712:	4c0d      	ldr	r4, [pc, #52]	; (8009748 <scalbn+0xd8>)
 8009714:	3336      	adds	r3, #54	; 0x36
 8009716:	4022      	ands	r2, r4
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	4313      	orrs	r3, r2
 800971c:	0019      	movs	r1, r3
 800971e:	2200      	movs	r2, #0
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <scalbn+0xe4>)
 8009722:	e7d4      	b.n	80096ce <scalbn+0x5e>
 8009724:	43500000 	.word	0x43500000
 8009728:	ffff3cb0 	.word	0xffff3cb0
 800972c:	c2f8f359 	.word	0xc2f8f359
 8009730:	01a56e1f 	.word	0x01a56e1f
 8009734:	000007ff 	.word	0x000007ff
 8009738:	000007fe 	.word	0x000007fe
 800973c:	8800759c 	.word	0x8800759c
 8009740:	7e37e43c 	.word	0x7e37e43c
 8009744:	fe37e43c 	.word	0xfe37e43c
 8009748:	800fffff 	.word	0x800fffff
 800974c:	0000c350 	.word	0x0000c350
 8009750:	81a56e1f 	.word	0x81a56e1f
 8009754:	3c900000 	.word	0x3c900000

08009758 <_init>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975e:	bc08      	pop	{r3}
 8009760:	469e      	mov	lr, r3
 8009762:	4770      	bx	lr

08009764 <_fini>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr
